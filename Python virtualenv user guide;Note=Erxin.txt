Python virtualenv user guide;Note=Erxin

# User guide 
- reference 
http://virtualenv.readthedocs.io/en/latest/userguide/#usage

- usage 
    + basic command to create a environment 
    $ virtualenv ENV 
    
    EVN/lib/ and ENV/include/ contain lib and files for a new virtualenv. packages installed will be placed here 
    
    ENV/bin, where executable live. To run a python script under a virtual ENV by add "#! /path/to/ENV/bin/python" to the front line
    
    pip and setuptools are installed. pip can be found at ENV/bin/pip 
    
- active script. activate shell script. For Windows systems, activation scripts are provided for the Command Prompt and Powershel

/ENV/bin/activate

$ source bin/activate

for window 
\path\to\env\Scripts\activate

run script directly under bin will not required active 

it will also modify the shell prompt which currently active. To disable it by  VIRTUAL_ENV_DISABLE_PROMPT.

    + for powershell we could change the default script policy to AllSigned to allow the activate execute
    
    PS C:\> Set-ExecutionPolicy AllSigned
    

- deactive env by 
$ deactive

- remove environment by delete the folder 

- create environment with inherite current system packages by 
If you build with virtualenv --system-site-packages ENV, your virtual environment will inherit packages from /usr/lib/python-dir/site-packages

for window on Windows go in ENV\Scripts\ instead of ENV/bin/ and libraries go in ENV\Lib\ rather than ENV/lib/

- experimental feature, relocate environment variable 

$ virtualenv --relocatable ENV

- --extra-search-dir, provide your own versions of setuptools and pip 
$ virtualenv --extra-search-dir=/path/to/distributions ENV

virtualenv will look for wheels in the specified directories, but will use pipâ€™s standard algorithm for selecting the wheel to insta

- latest command line reference 
http://virtualenv.readthedocs.io/en/latest/reference/

    + command line optons 
    + configuration file 
    window, %appdata%\virtualenv\virtual.ini 
    
    linux $home/.virtualenv/virtual.ini 
    
    + extending virtualenv, create your own bootstrap script 
    
    To create a script like this, call virtualenv.create_bootstrap_script(), and write the result to your new bootstrapping script.

    create_bootstrap_script(extra_text)
    
    Creates a bootstrap script from extra_text, which is like this script but with extend_parser, adjust_options, and after_install hooks
    
    will add three functions 
    extend_parser(optparse_parser), add or remove options from the parser here 
    
    adjust_options(options, args), change options here or change the args 
    
    after_install(options, home_dir), after everything installed 

        * example after setup environment then install a package 
        
import virtualenv, textwrap
output = virtualenv.create_bootstrap_script(textwrap.dedent("""
import os, subprocess
def after_install(options, home_dir):
    etc = join(home_dir, 'etc')
    if not os.path.exists(etc):
        os.makedirs(etc)
    subprocess.call([join(home_dir, 'bin', 'easy_install'),
                     'BlogApplication'])
    subprocess.call([join(home_dir, 'bin', 'paster'),
                     'make-config', 'BlogApplication',
                     join(etc, 'blog.ini')])
    subprocess.call([join(home_dir, 'bin', 'paster'),
                     'setup-app', join(etc, 'blog.ini')])
"""))
f = open('blog-bootstrap.py', 'w').write(output)



































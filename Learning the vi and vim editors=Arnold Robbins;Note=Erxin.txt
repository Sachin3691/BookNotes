Learning the vi and vim editors=Arnold Robbins;Note=Erxin

# Table of contents 

# Preface
- scope of this book
- how the material is presented
- discussion of vi commands 
- conventions 
- keystrokes 
- problem checklist 
- what you need to know before starting 
- comments and questions 


# Part I basic and advanced vi
## the vi text editor 
- gnu emacs has become the universal version of emacs 
- unix supports the troff formatting package. the tex and latex formatters are popular 
- vi is modus operandi. there are two modes
command mode 
insert mode 
- saving and quitting a file 
:wq 

- quitting without saving 
:e! 
:q! 

- problems saving 
:w! 
overwrite exsting file 


## Simple editing 
- moving cursor, h,j,k,l
- moving by text block, w 
- inset new text, i 
- append text, a 
- changing text, c 
cw, to the end of a word 
c2b, back two words 
c$, to the end of line 
cc, replace entire current line 
replace a single character, r 
substituting text, s 
changing case, ~
deleting text, d/x 
deleting entire line, dd 
put text that is in the buffer after the cursor position, p 
copy text, y 
copy line, yy 
repeat last command, . 
undo, u 
undo all changes for a single line, U 
open blank line below cursor of text, o 
open blank line above cursor of text, O
delete character at cursor and subsitute text, s
delete line and subsitute text, S
join two line, j 


## Moving around in a hurry 
- movement by screen 
- scrolling screen 
ctrl-f, scroll forward one screen 
ctrl-b, backward one screen 
ctrl-d, scroll half screen 
ctrl-u, scroll back ward half screen 

- repositioning the screen with z 
z, move current line to top of screen and scroll 
z., move current line to center of screen and scroll 
z-, move current line to bottom of screen and scroll 

- redrawing the screen 
ctrl-l, redraw screen 
- movement with a screen 
h, move to home 
m, move to middle 
l, move to last line on screen 
nh, move to n lines below top line 
nl, move to n lines above last line 

- movement by line 
enter, move to first character of next line 
+, move to the first character of next line 
-, move to first character of previous line 

- movement on the current line 
^, move to first nonblank character of current line 
n|, move to column n of current line 

- move by text blocks
move to end of word, e 
move to end of word ignore punctuation, E 
move to beginning of current sentence, (
end of sentence, )
beginning of current paragraph, {
end of paragraph, } 
move to beginning of current section, [[
end of section, ]] 

- movement by search 
/pattern, search forward
?pattern, search backward 

repeating search, n 
search in reverse direction, N 
/repeat search forward 
?repeat search backward 

- set wrapscan to control whether searches wrap 
:set nowrapscan 

- changing through searching 
fx, move the cursor to the next instance of the character 
Fx, find to previous occurrence of x in the line 
tx, find character bfore next occurrence of x in the line 
T, find previous occurence of x in the line 
;, repeat previous find command in same direction 
', repeat previous find command in oposition direction 

- movement by line number 
ctrl-g
g, use line numbers to move the cursor through a file 


# beyond the basics 
- more command combinations 
change      delete      copy        from cursor to ....
cH          dH          yH          top of screen 
cL          dL          yL          bottom of screen 
c+          d+          y+          next line 
c5|         d5|         y5|         column 5 of current line 
2c)         2d)         2y)         second sentence following 
c{          d{          y{          previous paragraph 
c/pattern   d/pattern   y/pattern   pattern 
cn          dn          yn          next pattern 
cG          dG          yG          end of file 
c13G        d13G        y13G        line number 13 

notice all off the sequences in table follow the general pattern 
(number)(command)(text object)

- options when starting vi 
$ vi file 

- advancing to a specific place, you can also specify your first movement by search for by line number right on the command line 
$ vi +n file 
open file at line number n 

$ vi + file 
open file at last line 

$ vi + /pattern file 
open file at first occurent of pattern 

if you want to includes space in the pattern you have to enclose the whole pattern within single or doulbe quotes or escape it with backslah

the vi + /pattern way need enable the option wrapscan 
:set wrapscan 

- read only mode 
$ vi -R file 
or 
$ view file 

override read only mode by 
:w! 
or 
:wq 

- recovering a buffer 
$ ex -r 
or 
$ vi -r 

will get a list of any files that the system have saved 

force the system to preserve your buffer even when there is not a crash by using the command 
:pre (short for :preserve)
this command is usefual for you don't have the write permission 

- making use of buffers, x or d command could delete a content, y (yank) command will save content in buffer. all these delete or saved content could be put back b by p or P command 

- recovering deletions, by "(double quote)
"2p
this command recover your second to last deletion from buffer 2 

use command to recover step by step 
"1pu.u.u
                          
- yanking to named buffer, use y and d with a set of 26 named buffers(a-z) that are specially avaliable for copying and moving text 

"dyy, yank current line into buffer d 
"a7yy, yank next seven lines into buffer a 

use p or P to put the text back 
"dP, put the content of buffer d before cursor 
"ap, put the contents of buffer a after cursor 

- marking your place with bookmark command m 
'x, (apostrophe) move the cursor to the first character of line marked by x 
`X, (backquote) move the cursor to the character marked by x 
``, (backquotes) returns to the exact position of the previous mark or content after a move 
'', (apostrophes) return to the beginning of the line of the previous mark content 

- other advanced edits 


# Introducting the ex editor 
- ex commands 
$ ex file-name 

- p command in ex 
: 1p 
to print the line out 

- vi command will get you from ex to vi edit mode 
- move to line n of a file by 
:n 

- substitue on line 1 
:1s/pattern/replaced 

- editing with ex command 
d delete lines 
m move lines 
co copy lines 
t copy lines a synonym for co 

- line addresses, specify in several ways 
    + explicit line numbers 
    + symbols that help you specify line numbers relative to your current position 
    + search patterns as address that identify the lines to be affected 
    
- defining a range of lines 
:3,18d 
delete line through 3 to 18 

:160,224m23 
move lines 160 through 224 to follow lin 23 

- display line number temporarily 
:1,10#

- print total line number 
:= 

- print current line number 
:.= 

- print out the first line that matches pattern 
:/pattern/= 

- line addressing symbols 
:., $d 
current line to the end of the file 

% all the lines in the file 

- the number follow by + and - equivalent to +1 and -1. similarly ++ and -- extend the range by an addtional line 

- search patterns 
:/pattern/d 
:/pattern/+d 
delete the line below the next line containing pattern 

:/pattern1/, /pattern2/d 
delete lines between pattern1 and pattern2 

- redefine current line position 
if you want to print 100 to 105 with this command 
:100,+5 p 
you will get error due to the end point +5 is meaning the line 6 if the current line is 1 

to redefine the currently line base on the start point by use a semicolon instead of a comma 
:100;+5 p 

- global search 
:g/pattern 

:g!/pattern/nu 
finds and display all lines in the file that don't contain pattern; also displays the line number for each line found 

- combining ex commands use the |, keep track of the line addresses you specify. 
:1,3d |s/thier/their 
delete 1 through 3 and then make a substitution on the current line 

- saving and exiting files 
:w writes the buffer to the file but does not exit 
:q quits the editor 
:wq 
:x both writes the file and quits only if it has been modified 

- renaming the buffer, use :w to save the current entire buffer 
:w new-name 

- saving part of a file 
:start,end w new-name 

- append to a file 
:range >> filename 
- copy a file into anthor file 
:r filename 

:183r /home/tim/data 
to read in the file and place them after line 183 

- editing multiple file 
$ vi file1 file2 

    + switch to next file 
:n 

    + display the argument list in the status line 
:args 

    + reset the current file to the first file in the argument list 
:rewind 

    + calling in new file 
:e file-name 

    + vi remembers two filenames at a time, the % reference the current file and # reference the alternative file 

    + discard your editing and return to the last saved version of the current file 
:e! 

- switching files from vi, ctrl-^^ will swtch between different files 
- edits between files 
"f4yy
yank four lines into buffer f 

:w 
save file 

:e file-name 
enter the file 

"fp 
place yanked text from named buffer f below the cursor 


# Global replacement 
- replace pattern 
:[range]s/old/new/flag 

the matched lines with be mark with ^^^^... and press y <enter> to do the substitution and press <enter> to skip to the next place 

- context sensitive replacement 
:%s/old/new/flag

:g/pattern/s/old/new/flag 
search for a pattern and then replace the finded results 

- pattern matching rules, metacharacters
., any 
*, 0+
^, start 
$, end 
\
[], any one in 
\(\), saves the pattern enclosed between \(and \) 
\<\>, matches chracters at beginning or at the end of a word 
~, matches whatever regular expression was used in the last search 

- POSIX bracket expression 
    + character classes, consist of keywords bracketed by [: and :]
    [:alnum:] alphanumeric characters 
    [:alpha:]
    [:blank:]
    [:cntrl:] control characters 
    [:digit:] numeric characters 
    [:graph:] printable and visible characters 
    [:lower:] lowercase characters 
    [:print:] printable characters 
    [:punct:] printable characters 
    [:space:] whitespace characters 
    [:upper:] uppercase characters 
    [:xdigit:] hexadecimal digits 
    + collating symbols, consist of the characters braketed by [. and .]
    + equivalence classes, class lists a set of characters that should be considered equivalent such as e and è in france, bracketed by [=and=]
    
- metacharacter used in replacement strings 
\n is replaced with the text matched by nth pattern previous saved by \( and \)
\ 
& replaced with the entire text matched by search pattern when used in a replacement string to avoid retyping text 
~ has a similar meaning as when it is used in a search pattern 
\u or \l causes the next character in the replacement string to be changed to uppercase or lowercase 
\U or \L and \e or \E 

- search for general class of words 
:g/.../s/.../.../g 
global filter and replacement 

- using a :g to repeat a command, select lines with g and then make substitutions on them or select them and delete them 

- collecting lines, show omitted text and displaying line numbers for reference 

the command operator >> 


# Advanced editing 
- customizing vi 
edit the .exrc file in local directories 

the :set command 

:set option 
:set nooption 

set search ignore cases 
:set ic 

set window width 
:set window=20 

display complete list of option 
:set all 

display current value of individual option 
:set option-name? 

check the specifically changed option 
:set 

- the .exrc file, this file is read by ex before it entires visual mode(vi). in modern version of vi it's saved in home directory 

- alternate environment, you can call vi to load a specific exrc file by 
:set exrc 
to read it from current directory 

define a alternate vi environment by saving option settings in a file other than .exrc and reading in that file with 
:so .option-file-name 
so is short for source 

- some useful options 
wrapmargin, movement within a line 

- executing unix command 
:!command 

give several unix command in a row without return to vi by 
:sh 

read the output of a command to vi by 
:r !command 

- filter text throw a command 
:start,end !sort 

pass lines start to end though the sort filter replace those lines with the output of sort 

- filtering text with vi 
:!)command 
will pass the next sentence through command 

- saving commands 
    + word abbreviation, use ab command 
    :ab abbr pharse 
    abbr is an abbreviation for the specified pharse 
    
    + using the map command, define a macro for vi's command 
    :map x sequence
    define character x as a sequence of editing commands 
    :unmap x 
    
- protecting  from interpretation by ex, when define map you can't define certain keys ENTER, ESC BACKSPACE DELETE 

to escape keyword by CTRL-V keystroke ^V in the map 

- Mapping Keys for Insert Mode need use exclamation mark (!). this command let you escape briefly to command mode 

    + typed a word but forget to italicize it 
    :map! + ^[bi<I>^[ea</I>
    
    add italicize around a word 
    
- mapping function keys, function key number 1 
:map #1 commands 

- mapping other special keys
:map ctrl-v home 1G 

will appear 
:map ^[[H 1G

- @ functions 

@ is interpreted as a vi command a dot will repeat the entire sequence  

- executing buffers from ex 

- using ex script, ex commands you use only within vi such as maps 

execute vi script as exscript 
:so exscript 

- looping in a shell script 
for variable in list 
do 
    command(s)
done 

for example:
for file in $*
do 
    ex - $file < exscript 
done 

- here document 
- sorting text blocks, a sample ex script 
g/^\.KS/, /^\.KE/j 

- editing program source code 
- indentation control 
:set autoindent 

    + two addtional variant of the ctrl-d command 
    
    ^ ^D, ^ ctrl-d vi shifts the cursor back to the beginning of the line 
    
    O ^D 
    
    set shift width 
    :set shiftwidth=4 
    
    stop setting of every four characters, the line will stop wrap 
    :set tabstop=4 
    
- a special search command 
if(cos(a[i]) == sin(b[i] + c[i]))
{
    printf("cos and sin equal!");
}

- using tags
:tag 
ctags can be used together with :tag command 

:!ctags file.c 


# Introduction to the vi clones 
- multiwindow editing 
    + two fundamental concepts
    buffer
    window, window provide a view into a buffer 
    
- GUI interfaces 
vim 
nvi 
elvis 
vile 

- extended regular expressions 
- enhanced tags 
:tag 

ctags command 

twenty-nine other languages are also supported, including c# and java 

it suports generation of GNU emacs-style tags(etags)

it works on Amiga, Cray, MS-DOS, Macintosh, OS/2, QDOS, QNX, RISC OS, Unix, VMS and windows 

    + tag stacks 
    
- improve editing facilities 
    + editing the ex command 
    
    + no line length limit 
    
    + infinite undo 
    
    + incremental searching 
    
    + left/right scrolling 
    
    + visual mode 
    
    + mode indicators 
    
    + arbitrary length lines and binary data 
- programing assistance 
- syntax highlighting 









































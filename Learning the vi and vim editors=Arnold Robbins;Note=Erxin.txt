Learning the vi and vim editors=Arnold Robbins;Note=Erxin

# Table of contents 

# Preface
- scope of this book
- how the material is presented
- discussion of vi commands 
- conventions 
- keystrokes 
- problem checklist 
- what you need to know before starting 
- comments and questions 


# Part I basic and advanced vi
## the vi text editor 
- gnu emacs has become the universal version of emacs 
- unix supports the troff formatting package. the tex and latex formatters are popular 
- vi is modus operandi. there are two modes
command mode 
insert mode 
- saving and quitting a file 
:wq 

- quitting without saving 
:e! 
:q! 

- problems saving 
:w! 
overwrite exsting file 


## Simple editing 
- moving cursor, h,j,k,l
- moving by text block, w 
- inset new text, i 
- append text, a 
- changing text, c 
cw, to the end of a word 
c2b, back two words 
c$, to the end of line 
cc, replace entire current line 
replace a single character, r 
substituting text, s 
changing case, ~
deleting text, d/x 
deleting entire line, dd 
put text that is in the buffer after the cursor position, p 
copy text, y 
copy line, yy 
repeat last command, . 
undo, u 
undo all changes for a single line, U 
open blank line below cursor of text, o 
open blank line above cursor of text, O
delete character at cursor and subsitute text, s
delete line and subsitute text, S
join two line, j 


## Moving around in a hurry 
- movement by screen 
- scrolling screen 
ctrl-f, scroll forward one screen 
ctrl-b, backward one screen 
ctrl-d, scroll half screen 
ctrl-u, scroll back ward half screen 

- repositioning the screen with z 
z, move current line to top of screen and scroll 
z., move current line to center of screen and scroll 
z-, move current line to bottom of screen and scroll 

- redrawing the screen 
ctrl-l, redraw screen 
- movement with a screen 
h, move to home 
m, move to middle 
l, move to last line on screen 
nh, move to n lines below top line 
nl, move to n lines above last line 

- movement by line 
enter, move to first character of next line 
+, move to the first character of next line 
-, move to first character of previous line 

- movement on the current line 
^, move to first nonblank character of current line 
n|, move to column n of current line 

- move by text blocks
move to end of word, e 
move to end of word ignore punctuation, E 
move to beginning of current sentence, (
end of sentence, )
beginning of current paragraph, {
end of paragraph, } 
move to beginning of current section, [[
end of section, ]] 

- movement by search 
/pattern, search forward
?pattern, search backward 

repeating search, n 
search in reverse direction, N 
/repeat search forward 
?repeat search backward 

- set wrapscan to control whether searches wrap 
:set nowrapscan 

- changing through searching 
fx, move the cursor to the next instance of the character 
Fx, find to previous occurrence of x in the line 
tx, find character bfore next occurrence of x in the line 
T, find previous occurence of x in the line 
;, repeat previous find command in same direction 
', repeat previous find command in oposition direction 

- movement by line number 
ctrl-g
g, use line numbers to move the cursor through a file 


# beyond the basics 
- more command combinations 
change      delete      copy        from cursor to ....
cH          dH          yH          top of screen 
cL          dL          yL          bottom of screen 
c+          d+          y+          next line 
c5|         d5|         y5|         column 5 of current line 
2c)         2d)         2y)         second sentence following 
c{          d{          y{          previous paragraph 
c/pattern   d/pattern   y/pattern   pattern 
cn          dn          yn          next pattern 
cG          dG          yG          end of file 
c13G        d13G        y13G        line number 13 

notice all off the sequences in table follow the general pattern 
(number)(command)(text object)

- options when starting vi 
$ vi file 

- advancing to a specific place, you can also specify your first movement by search for by line number right on the command line 
$ vi +n file 
open file at line number n 

$ vi + file 
open file at last line 

$ vi + /pattern file 
open file at first occurent of pattern 

if you want to includes space in the pattern you have to enclose the whole pattern within single or doulbe quotes or escape it with backslah

the vi + /pattern way need enable the option wrapscan 
:set wrapscan 

- read only mode 
$ vi -R file 
or 
$ view file 

override read only mode by 
:w! 
or 
:wq 

- recovering a buffer 
$ ex -r 
or 
$ vi -r 

will get a list of any files that the system have saved 

force the system to preserve your buffer even when there is not a crash by using the command 
:pre (short for :preserve)
this command is usefual for you don't have the write permission 

- making use of buffers, x or d command could delete a content, y (yank) command will save content in buffer. all these delete or saved content could be put back b by p or P command 

- recovering deletions, by "(double quote)
"2p
this command recover your second to last deletion from buffer 2 

use command to recover step by step 
"1pu.u.u
                          
- yanking to named buffer, use y and d with a set of 26 named buffers(a-z) that are specially avaliable for copying and moving text 

"dyy, yank current line into buffer d 
"a7yy, yank next seven lines into buffer a 

use p or P to put the text back 
"dP, put the content of buffer d before cursor 
"ap, put the contents of buffer a after cursor 

- marking your place with bookmark command m 
'x, (apostrophe) move the cursor to the first character of line marked by x 
`X, (backquote) move the cursor to the character marked by x 
``, (backquotes) returns to the exact position of the previous mark or content after a move 
'', (apostrophes) return to the beginning of the line of the previous mark content 

- other advanced edits 


# Introducting the ex editor 
- ex commands 
$ ex file-name 

- p command in ex 
: 1p 
to print the line out 

- vi command will get you from ex to vi edit mode 
- move to line n of a file by 
:n 

- substitue on line 1 
:1s/pattern/replaced 

- editing with ex command 
d delete lines 
m move lines 
co copy lines 
t copy lines a synonym for co 

- line addresses, specify in several ways 
    + explicit line numbers 
    + symbols that help you specify line numbers relative to your current position 
    + search patterns as address that identify the lines to be affected 
    
- defining a range of lines 
:3,18d 
delete line through 3 to 18 

:160,224m23 
move lines 160 through 224 to follow lin 23 

- display line number temporarily 
:1,10#

- print total line number 
:= 

- print current line number 
:.= 

- print out the first line that matches pattern 
:/pattern/= 

- line addressing symbols 
:., $d 
current line to the end of the file 

% all the lines in the file 

- the number follow by + and - equivalent to +1 and -1. similarly ++ and -- extend the range by an addtional line 

- search patterns 

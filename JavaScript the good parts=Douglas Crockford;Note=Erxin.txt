JavaScript the good parts=Douglas Crockford;Note=Erxin

# operator 
- add + 
can add or concatenate string and convert string to number. this complicated behavior is a common source of bugs

if you intend to add make sure that both operands are numbers 

# floating point 

- binary floating point numbers are inept at handling decimal fractions, so 0.1 + 0.2 is not equal to 0.3, this is most frequently reported bug in JavaScript. it is due to adopted to IEEE standard for binary floating point arithmetic IEEE754

this standard violates most of the things you learned about numbers in middle school

# NaN 
- javascript provides an isNaN function that can distinguish between numbers and NaN
- you can test for NaN as we have seen, typeof does not distinguish between numbers and NaN. it turns out NaN is not equal to itself so surprisingly NaN === NaN is false 

# Phony Arrays 
- javascript does not have realy arrays, that isn't all bad. javascript's array are easy to use. there is no need to give them a dimension and they nevery generate out-of-bounds errors but their performance can be considerly worse than real array 
- to determine that a value is an array, you also need to consult its constructor property 
Object.prototype.toString.apply(my_value) === '[object Array]'

this test is more reliable when the value might have been created in another frame 


# Falsy Values 
- javascript has a surprisingly large set of falsy values, shown in see table 
value           type 
0               number 
NaN          number 
''               string 
false          boolean 
null           object 
undefined    undefined 

these values are all falsy but they are not interchangeable 


# Eval 
- the browser provides setTimeout and setInterval functions that can take string arguments or function arguments when gven string arguments the string will be eval 


# Function 
- functions in javascipt are objects. objects are collections of name/value pairs having a hidden link of a prototype object. 

objects produced from object literals are linked to object.prototype function objects are linked to function.prototype which is itself linked to object.prototype. every function is also created with two additional hidden properties the function's context and the code that implements the function's behavior 

- the function object created by a function liberal contains a link to that outer context. this is called closure. this is the source of the enormous expressive power 

- a function liberal has four parts. the first part is the reserved word function; the optional second part is the function's name; the third is the set of parameters of the function; the fourth part is a set of statements wrapped in curly braces 

- the apply method lets us construct an array of arguments to use to invoke a function. it als lets us choose the value of this. the apply method takes two parameters 


# Invocation 
- use the K&R style putting the { at end of a line instaed of the front, because it avoids a horrible design blunder in javascript's return statement 

- function which will be used as constructor should be kept in variables with a captilized name 
- if a function is invoked with the new prefix, then a new object will be created with a hidden link to the value of the fucntion's prototype member, and this will be bound to that new object 

- javascript does have function scope. that means that the parameters and variables defined in a function are not visible outside of the function, and that a variable defined anywhere within a function is visible everywhere within the funtion 


# Closure 
- a maker function 
var quo = function (status){
    return {
        get_status: function(){
            return status;
        }
    }
}

var myQuo = quo("amazed");
myQuo.get_status(); //will get amazed 

the function has access to the context in which it was created. this is called closure 


# Memoization
- functions can use objects to remember the results of previous operations make it possible to avoid unnecessary work. this optimization is called memoization. javascript's objects and arrays are very convenient for this 

for example implement the fibonacci function 


# inheritance 
- we can define a constructor and augment its prototype 
var Mammal = function(name){
    this.name = name;
};

Mammal.prototype.get_name = function(){
    return this.name;
};

- we can hide some of the ugliness by using the method method and defining an inherits method 
Function.method('inherits', function(Parent){
    this.prototype = new Parent();
    return this;
});

var Cat = function (name){
    this.name = name;
    this.saying = 'mew';
}
.inherits(Mammal)
.method('purr', function(n){
    var i, s = '';
    ...
    return s;
});

- if the new operator were a method instead of an operator, it could have been implemented like this function.method('new', function(){
    //create a new object that inherits from the constructor 
    //constructor's prototype 
    var that = Object.beget(this.prototype);
    
    //invoke the constructor, binding this to the new object 
    var other = this.apply(that, arguments);
    
    //if its return value isn't an object, substitute the new object 
    return (typeof other === 'object' && other) || that; 
});

- when a function object is created, the function constructor that produces the function object runs some code like this: 
    this.prototype = {constructor: this};

new function object is given a prototype property whose value is an object containing a constructor property whose value is the new function object 


# Object specificers 
- use object function parameter to improve readability 
var myObject = maker({
    first: f, 
    last: l, 
    ..
});

the arguments can no be listed in any order, arguments can be left out if the constructor is smart about default 


# Prototypal 
- use javascript object perform the scope visiblity, use the prototype chain to define the wrapped scopes

the block function is called when a left curly brace is encountered the parse function will look up symbols from scope, and augment scope when it defines new symbols 

var block = function(){
    var oldScope = scope; 
    scope = Object.create(scope);
    
    advance('{');
    
    parse(scope);
    
    advance('}');
    scope = oldScope;
};


# Functional 
- the functional pattern has a great deal of flexibility. it requires less effort than the pseudoclassical pattern and gives us better encapsulation and information hiding and access to super methods 

- we will make a superior method that takes a method name and returns a function that invokes that method. the funtion will invoke the original function even if the property is change 

Object.method('superior', function(name){
    var that = this,
          method = that[name];
    return function(){
        return method.apply(that, arguments);
    };
});

- in the pseudoclasical pattern, the cat constructor function had to duplicate work that was done by the mamal constructor, that isn'tnecessary in the functional pattern becasue the cat constructor will call the mammal constructor, letting mamal do most of the work of object creation 

var Mammal = function (){
    return {};
};

var Cat = function(){
    var mammal =  Mammal();
    mammal.extend = function(){}
    return mammal;
}

- make a function that produce objects. the new doesn't required to captilized because it is not used with new keyword. 
it creates a new object. there are lots of ways to make an object. it can make an object literal, or ti can call a constructor function with the new prefix or it can use hte object.create method to make a enw instance from an existing object, or it can call any fucntion that return an object 

it optionally defines private instance variables and methods there are just ordinary vars of the function 

it augmetns that new object with the methods. thoses method will have priviledged access to the parameters and the vars defiend in the second step 

it returns that new object 


# Parts 
- we can compse objects out of sets of parts. for example, we can make a function that can add simple event processing features to any object. it adds an on method, a fire method and a private event registry 


# length 
- the length can be set explicitly making the length larger does not allocate more space for the array. making the length smaller will cause all properties with a subscript that is greater than or equal to the new length to be deleted 


# Delete 
- unfortunately that leaves a hole in the array this is because the elements to the rigth of the deleted element to the right of the deleted element retain their original names. 

what you usually want is to decrement the names of each of the elements to the right. fortunately, javascript arrays have a splice method. it can do surgery on an array, deleting some number of elements and replacing them with other element 

delete numbers[2];
//numbers is ['zer', 'one', undefined, 'shi', 'go']

- since javascript's array are really objects, the delete operators can be used to remove elements from an array 

- use for statement to iterate object will no guarantee about the order of the properties and most array applications expect the elements to be produced in numerical order 

- javascript doesn't have a good mechanism for distinguishing between arrays and objects. we can work around that deficiency by defining our own is_array function 


# Regex
- that may make it easier to see what a regular expression does. This is a railroad diagram for parse_url 
                                                                  +----------------+
                                                                  |    scheme      |
||------[begin string]-------------------+-----+---[letter]-----+----(:)-------+                     +----||
                                                         |                                                    |                     |
    +-----------+---------+---------+-----+----------------------------------------+                     |
    |               |            |            |                                                                                    |
    +----(/)---+---(/)---+---(/)--+                                                                                    |
    |        host                                                                                                                 |
    +--[letter or digit or. or -]----+                                                                                 |
    |                                            |                                                                                  |
    +----------------------------------+                                                                                 |
    |                                                                                                                                |
    ....                                                                                                                             |
    |                                                                                                                                |
    +----[end string]--------------------------------------------------------------------------------+

- javascipt's regular expression feature is borrowed from perl 
- regexp objects made by regular expression literals share a single instance, properties of RegExp 
global, true if the g flag is used 
ignoreCase 
lastIndex 
multiline 
source, the source text of the regular expression 

- regular expression literals share a single instance 
- regular expression are enclosed in slashes 
- negative lookahead a negative lookahead group has a (?! prefix, it is like a positive lookahead group)
- positive lookahead, lookahead group has a (?=) prefix. it is like a noncapturing group except that after the group matches the text is rewound to where the group starte 
- noncapturing (?:) prefix a noncapturing group simply matches 
- capturing group is a regexp choice wrapped in paraenthese the characters that match the group will be captured. every captured group is given a number. the first capturing in the group is the group 1, the group 0 is the whole regex expression itself 
- the backslash character indicates 
- a regexp sequence contains one or more regexp factors. each factor can optionally be followed by a quantifier that determines how many times the factor is allowed to appea 
- the exec method is the most powerful and slowest of the methods that use regular expression. if it successfully matches the regexp and the string, it returns an array. the o element of the array will contain the substring that matched the regexp 


# Method 
- the number.toExponential method converts this number to a string in the exponential form 





























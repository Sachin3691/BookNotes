JavaScript the good parts=Douglas Crockford;Note=Erxin

# operator 
- add + 
can add or concatenate string and convert string to number. this complicated behavior is a common source of bugs

if you intend to add make sure that both operands are numbers 

# floating point 

- binary floating point numbers are inept at handling decimal fractions, so 0.1 + 0.2 is not equal to 0.3, this is most frequently reported bug in JavaScript. it is due to adopted to IEEE standard for binary floating point arithmetic IEEE754

this standard violates most of the things you learned about numbers in middle school

# NaN 
- javascript provides an isNaN function that can distinguish between numbers and NaN
- you can test for NaN as we have seen, typeof does not distinguish between numbers and NaN. it turns out NaN is not equal to itself so surprisingly NaN === NaN is false 

# Phony Arrays 
- javascript does not have realy arrays, that isn't all bad. javascript's array are easy to use. there is no need to give them a dimension and they nevery generate out-of-bounds errors but their performance can be considerly worse than real array 
- to determine that a value is an array, you also need to consult its constructor property 
Object.prototype.toString.apply(my_value) === '[object Array]'

this test is more reliable when the value might have been created in another frame 


# Falsy Values 
- javascript has a surprisingly large set of falsy values, shown in see table 
value           type 
0               number 
NaN          number 
''               string 
false          boolean 
null           object 
undefined    undefined 

these values are all falsy but they are not interchangeable 


# Eval 
- the browser provides setTimeout and setInterval functions that can take string arguments or function arguments when gven string arguments the string will be eval 


# Function 
- functions in javascipt are objects. objects are collections of name/value pairs having a hidden link of a prototype object. 

objects produced from object literals are linked to object.prototype function objects are linked to function.prototype which is itself linked to object.prototype. every function is also created with two additional hidden properties the function's context and the code that implements the function's behavior 

- the function object created by a function liberal contains a link to that outer context. this is called closure. this is the source of the enormous expressive power 

- a function liberal has four parts. the first part is the reserved word function; the optional second part is the function's name; the third is the set of parameters of the function; the fourth part is a set of statements wrapped in curly braces 

- the apply method lets us construct an array of arguments to use to invoke a function. it als lets us choose the value of this. the apply method takes two parameters 


# Invocation 
- use the K&R style putting the { at end of a line instaed of the front, because it avoids a horrible design blunder in javascript's return statement 

- function which will be used as constructor should be kept in variables with a captilized name 
- if a function is invoked with the new prefix, then a new object will be created with a hidden link to the value of the fucntion's prototype member, and this will be bound to that new object 

- javascript does have function scope. that means that the parameters and variables defined in a function are not visible outside of the function, and that a variable defined anywhere within a function is visible everywhere within the funtion 


# Closure 
- a maker function 
var quo = function (status){
    return {
        get_status: function(){
            return status;
        }
    }
}

var myQuo = quo("amazed");
myQuo.get_status(); //will get amazed 

the function has access to the context in which it was created. this is called closure 


# Memoization
- functions can use objects to remember the results of previous operations make it possible to avoid unnecessary work. this optimization is called memoization. javascript's objects and arrays are very convenient for this 

for example implement the fibonacci function 

















Opc and modbus communication protocal;Note = Erxin

:OPC
>stand for, OLE for Process Control, changed name since 
>The most common OPC specification is OPC Data Access, which is used to read and write real-time data
>OPC DA itself has gone through 3 major revisions since its inception. Versions are backwards compatible, in that a version 3 OPC Server can still be accessed by a version 1 OPC Client
>DA 3 compatible Client will not necessarily work with a DA 1.0 Server.
>SADA, supervisory control and data acquisition
>The purpose of OPC is to define a common interface that is written once and then reused by any business, SCADA, HMI, or custom software packages.
>OPC Xi, One OPC specification from the OPC Foundation is OPC Xi (OPC Express Interface). OPC Xi defines a .NET interface with the combined functionality of OPC DA,HDA,AE and a rather simple data model.
	- classic opc relies on DCOM, how ever OPC Xi works with WCF, manage code app run with a wrapper from com to .net on server, adding complexity to the server environment
>official website, https://www.opcfoundation.org
	
:Modbus
>Modbus is a serial communications protocol published by Modicon
>modbus industrial environment	
    - It has been developed with industrial applications in mind
    - It is openly published and royalty-free
    - It is easy to deploy and maintain
    - It moves raw bits or words without placing many restrictions on vendors
>Modbus is often used to connect a supervisory computer with a remote terminal unit in SCADA
>Versions of the Modbus protocol exist for serial port and for Ethernet and other networks
	- Modbus RTU — This is used in serial communication & makes use of a compact, binary representation of the data for protocol communication. A Modbus RTU message must be transmitted continuously without inter-character hesitations. Modbus messages are framed (separated) by idle (silent) periods.
	- Modbus ASCII — This is used in serial communication & makes use of ASCII characters for protocol communication. The ASCII format uses a longitudinal redundancy check checksum. Modbus ASCII messages are framed by leading colon (':') and trailing newline (CR/LF).
	- Modbus TCP/IP or Modbus TCP — This is a Modbus variant used for communications over TCP/IP networks, connecting over port 502.[4] It does not require a checksum calculation as lower layers already provide checksum protection.
	- Modbus over TCP/IP or Modbus over TCP or Modbus RTU/IP — This is a Modbus variant that differs from Modbus TCP in that a checksum is included in the payload as with Modbus RTU.
	- Modbus over UDP — Some have experimented with using Modbus over UDP on IP networks, which removes the overheads required for TCP 
	- Modbus Plus (Modbus+, MB+ or MBP) Modbus over Fieldbus (Modbus+ or MB+), also exists, but remains proprietary to Schneider Electric. Special interfaces are required to connect Modbus Plus to a computer, typically a card made for the ISA (SA85), PCI or PCMCIA bus.
	- Modbus PEMEX- Modbus PEMEX is an extension of standard Modbus with support for historical and flow data.
	- Enron Modbus Enron Modbus is an extension of standard Modbus with support for 32 bit Integer and Floating Point variables, and historical and flow data. 
>Each device have been given a unique address, All Modbus commands contain checking information, ensuring that a command arrives undamaged. 
>Frame format
	- Modbus RTU Frame format
	Name 	Length 		Function
	Start 	3.5c idle 	at least 3-1/2 character times of silence (MARK condition)
	Address 	8 bits 	Station Address
	Function 	8 bits 	Indicates the function codes like read coils / inputs
	Data 	n * 8 bits 	Data + length will be filled depending on the message type
	CRC 	16 bits 	Error checks
	End 	3.5c idle 	at least 3-1/2 character times of silence between frames
	- Modbus Asscii Frame Format
	Name 	Length 			Function
	Start 	1 char 			starts with colon ( : ) (ASCII value is 3A hex)
	Address 	2 chars 	Station Address
	Function 	2 chars 	Indicates the function codes like read coils / inputs
	Data 	n chars 		Data +length will be filled depending on the message type
	LRC 	2 chars 		Error checks
	End 	2 chars 		carriage return – line feed(CR/LF) pair (ASCII values of 0D & 0A hex)
	- Modbus TCP
	Name 					Length 		Function
	Transaction Identifier 	2 bytes 	For synchronization between messages of server & client
	Protocol Identifier 	2 bytes 	Zero for Modbus/TCP
	Length Field 			2 bytes 	Number of remaining bytes in this frame
	Unit Identifier 		1 byte 		Slave Address (255 if not used)
	Function code 			1 byte 		Function codes as in other variants
	Data bytes 				n bytes 	Data as response or commands
>supported function codes
Function Name 	Function Code
Data Access 	Bit access 	Physical Discrete Inputs 	Read Discrete Inputs 	2
Internal Bits or Physical Coils 	Read Coils 	1
Write Single Coil 	5
Write Multiple Coils 	15
16-bit access 	Physical Input Registers 	Read Input Register 	4
Internal Registers or Physical Output Registers 	Read Holding Registers 	3
Write Single Register 	6
Write Multiple Registers 	16
Read/Write Multiple Registers 	23
Mask Write Register 	22
Read FIFO Queue 	24
File Record Access 	Read File Record 	20
Write File Record 	21
Diagnostics 	Read Exception Status 	7
Diagnostic 	8
Get Com Event Counter 	11
Get Com Event Log 	12
Report Slave ID 	17
Read Device Identification 	43
Other 	Encapsulated Interface Transport 	43
>limitations
	- modbus designed in the late 1970s, so it's not supported large binary objects
	- no standard way to find data object description
	- master/slave protocol, there is no way for a field device to "report by excpetion"(except over ethernet tcp/ip, called open-mbus), the routinly poll data is consumes bandwidth. 
	- restricted to addressing 247 devices
	- modbus transmission must be contiguous which limits the types of the remote communications devices to those that can buffer data to avoid gaps in the transmission
	- no security against unauthorized commands or interception of data
>The byte order is Big-Endian
>Official website, http://www.modbus.com/

:Automata-based programming
>FSM-based programming is generally the same, but, formally speaking, doesn't cover all possible variants as FSM stands for finite state machine and automata-based programming doesn't necessarily employ FSMs in the strict sense.
>key indicators for automata-based programming
	- The time period of the program's execution is clearly separated down to the steps of the automaton. Each of the steps is effectively an execution of a code section (same for all the steps), which has a single entry point. Such a section can be a function or other routine, or just a cycle body. The step section might be divided down to subsection to be executed depending on different states, although this is not necessary.
	- Any communication between the steps is only possible via the explicitly noted set of variables named the state. Between any two steps, the program (or its part created using the automata-based technique) can not have implicit components of its state, such as local (stack) variables' values, return addresses, the current instruction pointer etc. That is, the state of the whole program, taken at any two moments of entering the step of the automaton, can only differ in the values of the variables being considered as the state of the automaton.
>automata-based programming is that the programmer's style of thinking about the program in this technique is very similar to the style of thinking used to solve math-related tasks using Turing machine, Markov algorithm etc.
>Example, a program in C that reads a text from standard input stream, line by line print first word of each line. We need first to read and skip the leading spaces, then read words till the end-of-line is encountered. We start the algorithm from the beginning and upon encountering the end of file condition, we terminate the program.
	- Traditional program in C
	#include <stdio.h>
	int main(void)
	{
		int c;
		do {
			c = getchar();
			while(c == ' ')
				c = getchar();
			while(c != EOF && c != ' ' && c != '\n') {
				putchar(c);
				c = getchar();
			}
			putchar('\n');
			while(c != EOF && c != '\n')
				c = getchar();
		} while(c != EOF);
		return 0;
	}
	- Automata-based style program, thinking in terms of finite state machines. Note that line parsing has three stages: skipping the leading spaces, printing the word and skipping the trailing characters. Let's call them states before, inside and after. The program may now look like this:
	#include <stdio.h>
	int main(void)
	{
		enum states {
			before, inside, after
		} state;
		int c;
		state = before;
		while((c = getchar()) != EOF) {
			switch(state) {
				case before:
					if(c == '\n') {
						putchar('\n');
					} else
					if(c != ' ') {
						putchar(c);
						state = inside;
					}
					break;
				case inside:
					switch(c) {
						case ' ':  state = after; break;
						case '\n':
							putchar('\n');
							state = before;
							break;
						default:   putchar(c);
					}
					break;
				case after:
					if(c == '\n') {
						putchar('\n');
						state = before;
					}
			}
		}
		return 0;
	}
	while loop is the automaton step, and the loop itself is the cycle of the automaton's work. Automaton's diagram The program implements (models) the work of a finite state machine.
	- First improve automata base programming
	It is not absolutely necessary to divide the code down to separate handlers for each unique state. Furthermore, in some cases the very notion of the state can be composed of several variables' values, so that it could be impossible to handle each possible state explicitly.
	#include <stdio.h>
	int main(void)
	{
		enum states {
			before, inside, after
		} state;
		int c;
		state = before;
		while((c = getchar()) != EOF) {
			if(c == '\n') {
				putchar('\n');
				state = before;
			} else
			switch(state) {
				case before:
					if(c != ' ') {
						putchar(c);
						state = inside;
					}
					break;
				case inside:
					if(c == ' ') {
						state = after;
					} else {
						putchar(c);
					}
					break;
				case after:
					break;
			}
		}
		return 0;
	}
	- Second improve. The most important property of the previous program is that the automaton step code section is clearly localized. It is possible to demonstrate this property even better if we provide a separate function for it:
	#include <stdio.h>
	enum states { before, inside, after };
	void step(enum states *state, int c)
	{
		if(c == '\n') {
			putchar('\n');
			*state = before;
		} else
		switch(*state) {
			case before:
				if(c != ' ') {
					putchar(c);
					*state = inside;
				}
				break;
			case inside:
				if(c == ' ') {
					*state = after;
				} else {
					putchar(c);
				}
				break;
			case after:
				break;
		}
	} 
	int main(void)
	{
		int c;
		enum states state = before;
		while((c = getchar()) != EOF) {
			step(&state, c);
		}
		return 0;
	}
	This example clearly demonstrates the basic properties of automata-based code:
		* time periods of automaton step executions may not overlap
		* the only information passed from the previous step to the next is the explicitly specified automaton state
	- Third improve. Explicit state transition table. A finite automaton can be defined by an explicit state transition table. Generally speaking, an automata-based program code can naturally reflect this approach.
	the table contains the new state number and the flag, which determines whether the automaton must print the symbol. In a real life task, this could be more complicated; e.g., the table could contain pointers to functions to be called on every possible combination of conditions.
	#include <stdio.h>
	enum states { before = 0, inside = 1, after = 2 };
	struct branch {
		unsigned char new_state:2;
		unsigned char should_putchar:1;
	};
	struct branch the_table[3][3] = {
					 /* ' '         '\n'        others */
		/* before */ { {before,0}, {before,1}, {inside,1} },
		/* inside */ { {after, 0}, {before,1}, {inside,1} },
		/* after  */ { {after, 0}, {before,1}, {after, 0} }
	};
	void step(enum states *state, int c)
	{
		int idx2 = (c == ' ') ? 0 : (c == '\n') ? 1 : 2;
		struct branch *b = & the_table[*state][idx2];
		*state = (enum states)(b->new_state);
		if(b->should_putchar) putchar(c);
	}
	int main(void)
	{
		int c;
		enum states state = before;
		while((c = getchar()) != EOF)
			step(&state, c);
		return 0;
	}
>Automation and automata
A production cycle is commonly modelled as:
    - A sequence of stages stepping according to input data (from captors).
    - A set of actions performed depending on the current stage.
>Example progam, pseudo-code uses such conventions
	- 'set' and 'reset' respectively activate & inactivate a logic variable (here a stage)
	- ':' is assignment, '=' is equality test
	- pseudo-code:
	SPC : ' '
	EOL : '\n'
	states : (before, inside, after, end)
	setState(c) {
		if c=EOF then set end
		if before and (c!=SPC and c!=EOL) then set inside
		if inside and (c=SPC or c=EOL) then set after
		if after and c=EOL then set before
	}
	doAction(c) {
		if inside then write(c)
		else if c=EOL then write(c)
	}
	cycle {
		set before
		loop {
			c : readCharacter
			setState(c)
			doAction(c)
		}
		until end
	}
>Like in GUI programming, changes in the machine state can thus be considered as events causing the passage from a state to another, until the final one is reached.
>oop capabilites
#include <stdio.h>
class StateMachine {
    enum states { before = 0, inside = 1, after = 2 } state;
    struct branch {
        enum states new_state:2;
        int should_putchar:1;
    };
    static struct branch the_table[3][3];
public:
    StateMachine() : state(before) {}
    void FeedChar(int c) {
        int idx2 = (c == ' ') ? 0 : (c == '\n') ? 1 : 2;
        struct branch *b = & the_table[state][idx2];
        state = b->new_state;
        if(b->should_putchar) putchar(c);
    }
};
struct StateMachine::branch StateMachine::the_table[3][3] = {
                 /* ' '         '\n'        others */
    /* before */ { {before,0}, {before,1}, {inside,1} },
    /* inside */ { {after, 0}, {before,1}, {inside,1} },
    /* after  */ { {after, 0}, {before,1}, {after, 0} }
};
int main(void)
{
    int c;
    StateMachine machine;
    while((c = getchar()) != EOF)
        machine.FeedChar(c);
    return 0;
}
>Automata-based programming is widely used in lexical and syntactic analyses. Besides that, thinking in terms of automata is necessary for event-driven programming as the only alternative to using parallel processes or threads.
>State transition table
In automata theory and sequential logic, a state transition table is a table showing what state (or states in the case of a nondeterministic finite automaton) a finite semiautomaton or finite state machine will move to, based on the current state and other inputs. 
	- One-dimensional state tables
	a simple example of a state machine with two states, and two combinatorial inputs:
	A 	B 	Current State 	Next State 	Output
	0 	0 	S1 	            S2 	        1
	0 	0 	S2 	            S1 	        0
	0 	1 	S1 	            S2 	        0
	0 	1 	S2 	            S2 	        1
	1 	0 	S1 	            S1 	        1
	1 	0 	S2 	            S1 	        1
	1 	1 	S1 	            S1 	        1
	1 	1 	S2 	            S2 	        0
	S1 and S2 would most likely represent the single bits 0 and 1, since a single bit can only have two states
	- Two-dimensional state tables
	The vertical (or horizontal) dimension indicates current states, the horizontal (or vertical) dimension indicates events, and the cells (row/column intersections) in the table contain the next state if an event happens (and possibly the action linked to this state transition).
	Events
	State 	E1 		E2 	  ...  	En
	S1 		- 		Ay/Sj ... 	-
	S2 		- 		-	  ... 	Ax/Si
	... 	... 	...	  ... 	...
	Sm 		Az/Sk 	- 	  ... 	-
	S: state, E: event, A: action, -: illegal transition)
>It is possible to draw a state diagram from the table. A sequence of easy to follow steps is given below:
    - Draw the circles to represent the states given.
    - For each of the states, scan across the corresponding row and draw an arrow to the destination state(s). There can be multiple arrows for an input character if the automaton is an NFA.
    - Designate a state as the start state. The start state is given in the formal definition of the automaton.
    - Designate one or more states as accept state. This is also given in the formal definition.







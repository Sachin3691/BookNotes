Pro workflow 4.5=Bayer White;Note=Erxin

# why workflows
- workflow means
A workflow is a visual representation of the logical flow of steps for accomplishing a goal or task.
- workflow keywords
    + Process parameters: Information required for starting a process.
    + Business rules: These rules drive how a process makes decisions. 
    + Data-driven: Data sometimes drives the decisions for a business process because of the state of the data. 
    + event-drive
    + state machine
    + process agility
- workflow activities, the benefit is reusable
- model driven development
- component diagrams, illustrate the tiers included within the physical architecture for a solution. 
- use case diagrams, a logical grouping of functionality, sometimes referred to as a subsystem.
- class diagram, Class diagrams model relationships for objects defined with code
- sequence diagrams, how processes interact within a system. 
- activity diagram, Activity diagrams model business logic and work well for discovering additional user requirements
    + building an activity diagram
    File|New|Project|Modeling projects
    
    select activity diagram
- workflow technology, real power of workflows is building software from workflows for processes
    + long-running processes
    + declarative workflows allow developers to build workflow visually that perform complicated conditional logic
    + workflow persisitence provides the mechanism for releasing processing memory from workflows that are idle
    + business process monitoring provides automation for how information is gathered and stored


# introducing windows workflow foundation
- history, 2005 
- platform update 1, 2011, major release in between WF4 and WF4.5
- WF components
    + workflow runtime
    + activities
    + workflows
    + workflow designer
    + workflow dataModel
    + persistence
    + monitoring
- changes 4.5 compare to wf3.5
    + performance
    + wf3.5 required to be hosted within a .net executable, wf4.5 remove this 
- workflow host class
    + WorkflowApplication
    + WorkflowServiceHost
    + WorkflowInvoker
- workflow events
    + WorkflowCreated Occurs when workflow instance is created.
    + WorkflowStarted Occurs when workflow instance is started.
    + WorkflowLoaded Occurs when workflow instance is loaded into memory.
    + WorkflowAborted Occurs when a workflow instance is aborted.
    + WorkflowIdled Occurs when workflow instance enters the idle state, like waiting on an external event.
    + WorkflowUnLoaded Occurs when workflow instance is unloaded into memory.
    + WorkflowSuspended Occurs when a workflow instance is suspended.
    + WorkflowResumed Occurs when execution of a workflow instance is resumed following a suspension.
    + WorkflowTerminated Occurs when workflow instance is terminated.
    + WorkflowPersisted Occurs when the state of a workflow instance is persisted, removing it from memory.
    + WorkflowCompleted Occurs when workflow instance is completed.
- Activities, WF activities are the basic unit of work and are used to execute code within a workflow. WF4.x activities are categorized into 10 areas
    + Control Flow: Models how business processes can flow within a workflow.
    + Flowchart: Provides the most transparency for modeling decision-making processes. Flowchart activities were introduced in WF4.
    + State-machine: Models possible transitions between the states of a workflow indicating human 
    + eraction and events within workflows.
    + Messaging: Provides communication functionality for building workflows that are exposed as 
    + vices and communicate over transport protocols.
    + Runtime: Provides instructions to the WF runtime for how to manage workflow behavior.
    + Primitives: Provides general functionality around execution.
    + Transaction: Provides functionality for allowing activities to execute within a transaction so unwanted results can be reversed.
    + Collection: Provides basic functionality for managing data represented as collections within a workflow.
    + Error Handling: Provides functionality for hardening workflows by providing logic for managing unanticipated exceptions.
    + Migration: Provides functionality for allowing workflows built using WF3.x to execute in WF4.

- Control flow activities
    + dowhie
    + foreach
    + while
- flow chart activities
    + flow chart
    + flow decision
    + flow switch<t>, executes child activities based on a predetermined expression
- state machine activities 
    + stateMachine
    + state
    + finalState
- messaging activities
    + correlationScope, provides correlation management for child activities
    + initializeCorrelation, usually correlation is established when message are sent ore received, however sometimes correlation needs to be established before actually sending or receiving a message
    + receive, receives incoming messages sent to a workflow
    + receiveAndSendReply, follows the same pattern as a common web service that receives an incoming message and produces a reply that is sent back
    + send, sends an outgoing message to a service
    + SendAndReceiveReply, correlation is used to send an outgoing message to a service and anitcipates receiving a reply from a external service
    + TransactionReceiveScope, allow message received to be processed within transactions
- runtime activities
    + persist
    + TerminateWorkflow
- primitive activities
    + assign
    + delay
    + invokeMethod
    + writeLine
- transaction activites
    + cancellationScope, allows cancellation logic to be executed to reverse unwanted execution results
    + compensableActivity, defines work that needs to be done during normal execution of logic and work that needs to be done to compensate or reverse completed execution logic
    + Compensate, allows the workflow to start compensation
    + confirm, allows confirmation to occur for noraml or compensated work
    + transactionScope, allows work that is executed within child activites to be executed within a transaction so it can be rolled back if needed
- collection activites
    + AddToCollection<T>
    + ClearToCollection<T>
    + ExistsInCollection<T>
    + RemoveFromCollection<T>
    
- Error Handling
- Migration
- WriteLine activity, for pushing text to readable sources like the console window to notify users of a workflow progress
- If activity
- parallelForEach<T> Activity
- Pick activity,  a way for workflow to handle external events. this pattern is appropriate when a workflow is waiting on feedback and goes idle.
- sequence activity, is a composite activity which is used as a container for holding child activites
- switch<T> activity, uses an object type as a prescribed condition to decide the workflow's flow. 
- while activity
- flowdecision activity, provides the magic for building flowchart workflow by providing a rich visualization for deciding conditional flow of a workflow
- flowSwitch<T> activity, works like a switch statement
- stateMachine activity, state-machine style of workflow
- finalStateActivity, last state executed within a state machine workflow. child activites are executed within it on the entry trigger for the state
- assign activity, sued for assigning values to other objects within a workflow
- workflows, are an orchestration of work modeled from business process
    + sequential
        * predetermined flow
        * systematic
        * lack of flexibility
    + state-machine
        * flexible
        * models human behavior
        * reactive
    + flowchart
        * transparent decision options
        * highest level of transparency for decision making
        * natural flow back to previously executed workflow activities
- defining workflow, wf4.x can be represented as xml or defined solely using code
- workflow designer
- workflow console application, use WorkflowInovke class to call workflow
WorkflowInvoker.Invoke(new Workflow());

- workflow data model, obtains data in three ways
    + when the workflow is started
    + read into the workflow from external events
    + received from the workflow through an external event
- workflow data model
    + variable, used as storage areas defined by object type and optionally the name
    + argument, controls how data flows by accepting and returning data in and out of an activity
    + expression, an activity with an elevated return value
- add workflow argument
    + in the bottom left corner 
    + specify the name, type direction
    + highlight and press delete to remove argument
    + the property of the activity could be set by the c# expression for example the text property of WriteLine Activity
        * set with string
        "Hello world"
        
        * set with expression
        string.Format("Hellow world, I am {0} years old", argInAge)
    
    + pass the argument in the console application
    var wfArg = new Dictionary<string, Object>();
    wfArg.Add("argInAge", 39);
    WorkflowInvoker.Invoke(new Workflow(), wfArg);
    
- persistence
    + save workflow instance into data base when they idle
    + by default data retrieved while tracking a workflow is stored in the event tracing for windows(ETW)
    
    + tracking physical overview
    workflow instance -> tracking records -> filter tracking records -> subscribed tracking records -> participant configured with tracking profile -> tracking participant stores
    
- a lap around wf4.5, major improve in 4.5
    + multi select, activities can be multi-selected
    + tree style workflow outline as a hierarchy tree
    + expression extensibility, customized their own pexression experience with workflow designer
    + annotations, add by right click on activities
    + multiple instance of workflow can be hosted side by side by WorkflowServiceHost
    + build-time validation
    + centralized view state in xaml
    + debugging state-machien states
    + auto connect and auto-insert
    + c# expression
    + noPersistScope, child activites are not persisted in a logical flow, wf4.5 provides a no-persiste scope or no persist zone that pervents child activities from persisting
    + validateUnconnectedNodes, have disconnected nodes
    + flowchart capabilities, a new displayName property can now be added to both the FlowSwith and FlowDecision activites
    + auto-surround sequence with other activities
    + workflow search   
        * quick search, ctrl+f or Edit|Find
        * find files, ctrl+shift+f
    + deleting variables and arguments
    + contract-first, when building WF services using the messaging activities the contract that gets implemented is built on the fly.
    + state-machine, in the platform update 1
    
    
# window workflow activities
- activities are re-usable in the sense that once they are defined
- activities also have an exception handling
- activity types
    + code activity, mimics wf3.x base activity, simple execution of code for an activity to execute within a workflow, strictly execute synchronously
    + dynamic activity, a sealed class, allows developers to literally declare an activity and execute it through code or xaml during runtime
    + native activity, an abstract class interaction with WF runtime for managing an activity's communications through bookmarks and scheduling other activities, can have child activities
    + asyncCode activity, providing an asynchronous coding ability that is not intended to be persisted through the workflow

- activity basic
    + activity derive from system.object, in the namespace System.Activities

- data management
    + variables, are placeholders for holding temporary data that can be used by activities, like variable in a function, specify the variable scope property by the variable panel in the bottom left corner
    + arguments, are used for receiving and returning data to the WF runtime, like a function coding construct. 
        * InArgument object is defined as input
        * OutArgument as output
        * workflow have three types of argument
        in, out, in/out like reference argument in c#
    + expressions, specify the execution of logic that an activity will perform, workflow support c# or VB syntax, expression can also be extend
    
- activity life cycle
    + faulted
    + executing
    + canceled
    + closed
- authoring activites
    + through code and xaml
    + activites could also buit using xml, noted as ".xoml"
- imperative code
    + declared strictly through code
    Activity ac = new WrtieLine(){Text = "hello"};
    WorkflowInvokder.Invoke(ac);

- dynamic activities important dynamic activity properties
    + system.activites.Activity
    + activity
    + System.Collections.ObjectModel.KeyedCollection

    + example 
    public partial class DynamicCodeActivity
    {
        public Activity AdditionActivity()
        {
            var arg = InArgument<int>();
            var out = new OutArgument<int>();
            Variable<int> var0 = new Variable<int> {Name = "var0", Default=5};
        }
    }

    + dynamic activities provide dependency injection 
    
- xaml, the workflow can be define as xml code and load in runtime
    + xaml activities cannot serialize lambda expression, these expresion are not xaml serializable
- testing activities
    + create a test project
    + reference System.Activity namespace
    + different types of types
        * positive testing, test code does work
        * negative testing, proves that code does not work
        * regression testing, goes through a sequence of tests verifying that as a unit each test within the sequence works
    
    + test activty example
    var ac = ActivtyXamlServices.Load(@"path_to_workflow.xaml");
    var ret = WorkflowInvoker.Invoke(ac, new Dictionary<string, object>{
        {"arg1", 3}
    });
    var result = Convert.ToInt32(ret["AdditionResult"]);
    Assert.AreEqual(result, 3)
    
- communicating with activities
    + bookmarks, allow event-driven communication to occur to an activity within a workflow
    WaitForResponse activity inherits from NativeActivity<TResult> which allows any object to be returned from the WF runtime using a Bookmark
    
    the ReponseName proeprty is define the actual bookmark name
    
    + example 
    public sealed class WaitForResponse<TResult>:NativeActivity<TResult>
    {
        public WaitForResponse():base()
        {
        }
        public string ReponseName {get; set;}
        
        protected override bool CanInduceIdel
        {
            get
            {
                return true;
            }
        }
        
        protected override void Execute(NaviteActivityContext context)
        {
            context.CreateBookmark(this.ResponseName, new BookmarkCallback(this.ReceivedResponse));
        }
        
        void ReceivedResponse(NativeActivityContext context, Bookmark bookmark, object obj)
        {
            this.Result.Set(context, (TResult)obj);
        }
    }
    
    + a pick activity is ideal place for setting up a bookmark because it has a trigger and Action signature, WaitForResponse activity that was added within the trigger of branch1 of the Pick activity, workflow chart like
    Pick
        branc1                              branch2
            trigger                             trigger
                WaitForResponse<int32>             Delay
                
                
    if the delay trigger happen the branch 2 will executed, if during the delay waitForResponse get the result then branch1 execute
    
- debugging activities
    + breakpoints can be set on activity, right click the activity in designer and select Breakpoint|Insert Breakpoint
    + the writeLine activity can be also used for debug
    + monitoring extension called Tracking
    
- Error handling, three activities that are used for handling  exceptions
    + Rethrow
    + Throw
    + TryCatch
    
    by default WF will bubble up an error to the application hosting it
    however, using WorkflowApplication which runs asynchronously to its hosted application, will not receive the error unless the hosted application subscribes to the WF runtime's OnUnhandledException event
    
    for example add a activity to throw exception to test it
    
    + workflow support try, catch, finally activity
    
    + usually system.ApplicationException types of exceptions are used to notify the user of application information within the context of the operation being performed
    
    
# State machine workflow
- provide an alternative approach for modeling human behavior when the flow of events cannot usually be predicted
- process must have a predefined stat for starting a process and a final state tht represent that the process has completed
    
- flowchart workflows would be a natural alternative for modeling state machine process, so it is not included in WF4

- state, a state resides within the namespace System.Activities.Statements and is a sealed class, it also does not inherit from any of the base activity objects
State represent a logical position that a workflow can have at any given time as the workflow executes
each state have a entry and exit action, these are containers for adding additional child activities for modeling logic ans excuting units of work
there is also a Transition section that reflects the transition are directed to any away from a state

- State Entry, a state machine by default provides a default state, the state is a activity container
- Transitions, state machines use transitions for flowing from one state to another, each transition represents an event, it can only be executed from the current state of the workflow.
- Trigger, a custom bookmark activity can be defined through code and is used for triggering the execution for a state machine transition. a transition's trigger is used as a container for a bookmark activity
- condition, once the trigger has been fired from a bookmark activity, used to determin if the transition should succeed or fail
- action, after condition pass for triggered transition, action allows additional activities for modeling business logic
- final state, use for last resource clean up activites, there are no other states to transition to and the workflow complete
- auto-connect, auto-insert in WF4.5 designer
- debugging state machine states
- using bookmarks
    + a transition trigger is what really drives a transition into execution
    + the condition is merely used to determine if the transition is successful for transitioning to the next state
    + the same bookmark could be used for more than one transition within the same state
    + this behavior is called shared trigger
    + create a bookmark activity
    public sealed class WaitForResponse<TResult>:NativeActivity<TResult>
    {
        public WaitForResponse():base()
        {
        }
        
        public string ResponseName {get; set;}
        
        protected override bool CanInduceIdle
        {
            get
            {
                return true;
            }
        }
        
        protected override void Execute(NativeActivityContext context)
        {
            context.CreateBookmark(this.ResponseName, new BookmarkCallback(this.ReceivedResponse);
        }
        
        void ReceivedResponse(NativeActivityContext context, Bookmark bookmark, object obj)
        {
            this.Result.Set(context, (TResult)obj);
        }
    }
    + use the bookmark activity
        * select the bookmark type after adding the activity into the trigger
        * for example assign the ReponseName property for the activity
        * transitions without triggers were automatically transitioning to other states
        * the result property of a bookmark can be set to a WF variable within the workflow so the value that is passed in through the bookmark can assist in executing logic within the workflow

- hosting WF bookmarks, bookmarks will not work while using workflowInovker.Invoke(), bookmarks demand a closer intimacy with the workflowRuntime
the WorkflowApplication must be instantiated to host workflows, and hosts a wofklow on a separate thread from the hosting application. Delegates are used for handling workflowRuntime events

var wfapp = new WorkflowApplication(workflowActivity);
var autoEvent = new AutoResetEvent(false);

wfApp.Run();
wfApp.ResumeBookmark("BookMarkName", parameters);

- building state machine workflow
    + communicating externally hosted state machine workflows using bookmarks
- state machine host, host workflow in WPF application, also need to use WorkflowApplication class and book relative event for the workflow

    + example
    wfApp = new WorkflowApplication(new wfDriving.Activity1());
    wfApp.SynchronizationContext = SynchronizationContext.Current;
    wfApp.OnUnhandledException = OnUnhandledException;
    wfApp.Completed = OnWorkflowCompleted;
    wfApp.Idle = OnWorkflowIdle;
    wfApp.Run();

    //to resume a aim bookmark state in the workflow
    wfApp.ResumeBookmark(BookmarkName, parameter); 
    
    + explain
    wfApp.SynchronizationContext = SynchronizationContext.Current;tells the WorkflowRuntime to run within the same thread as the application.
    
    
# flowchart workflows
- compare to sequential it not only support top-down execution flow or looping constructs
- WF 4 removed the ideal of having workflow-type templates for building workflows and replaced them with state machien and flowchart workflow activites
- flow activities, WF4 provides three activities for building a flowchart control flow
    + flowchart
    + flowDecision
    + flowSwitch

    the property ValidateUnconnectedNodes property was added because sometimes workflows that are built at design time are incomplete but nevertheless will compile and run
    
- flow decision, three unique properties need to set
    + condition, an expression return a boolean
    + falseLable, default is False, can be changed to more descriptive value
    + trueLable, default is True

- flowSwitch<T>Activity
- entity framework code first mode
    + example
    namespace Chapter5.DataModel
    {
        public class Order
        {
            public Order()
            {
                LineItems = new Collection<OrderLineItem>();
            }
            [key]
            public int OrderId {get; set;}
            [Required]
            public int CustomerId {get; set;}
            [Required]
            public virtual ICollection<OrderLineItem> LineItems{get; set;}
        }
    }

    create db context class
    public sealed class OrderContext:DbContext
    {
        public DbSet <Order> Orders { get; set; }
        public DbSet <Customer> Customers { get; set; }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            // Customer can have many Orders.
            modelBuilder.Entity <Customer> ()
            .HasMany <Order> (customer = > customer.CustomerOrders);
            // Order can have many LineItems.
            modelBuilder.Entity <Order> ()
            .HasMany <OrderLineItem> (order = > order.LineItems);
            // LineItems contains a composite key.
            modelBuilder.Entity <OrderLineItem> ()
            .HasKey(p = > new { p.OrderId, p.LineItemId });
        }
    }
- using entityframework with WF
- flowchart composite activity, is a activities compose several activities together as a new activity
- assign activity is used to assign value to variable
- pick activity, additonal branch activites can be added from the toolbox, a branch activity has two parts, similar to the state machine, it has its own trigger and action 
    + Pick Branches execute in parallel. As one Branchcompletes, the other branch’s execution is canceled. Bookmarks are added within the Trigger part of a Branch within the Pick activity
    + timeSpan factory method
    TimeSpan.FromSeconds(5)



# Versioning and Updating Workflows
- WF4.5 support managing changes within existing workflows




# Building custom workflow activities
- activity base classes, System.Activites.Activity is used as the base class for defining all activites
- activity types that derive from system.Activities.Activity
    + System.Activities.CodeActivity, executes code within an activity using the Execute method and give access to arguments and variables
    + System.Activities.DynamicActivity, allow activities to assembly dynamically that interface to the WF designer and WF runtime
    + System.Activities.NavtiveActivity, similar to codeActivity except has full access to the WF runtime features
    + System.ServiceModel.Activities.Receive, used to receive messages within a workflow
    + System.ServiceModel.Activities.Send, used to send a message out from a workflow
    + System.ServiceModel.Activities.SendReply, used to send a message out and wait for a response message

- all the activity are derive from the abstract class Activity the class diagram
Activity <- CodeActivity
         <- NativeActivity
         <- AsyncCodeActivity
         <- ActivityWithResult  <- Activity<TResult>
                                     ^
                                     |
                                     AsyncCodeActivity
                                     CodeActivity
                                     NativeActivity
- Code Activity, out-of-the-box activites tat derive from system.activities.codeActivity
    + System.Activities.Statements.AddToCollection<T>, adds an object to a collection
    + System.Activities.Statements.Assign, assigns a value to another object
    + System.Activities.Statements.ClearCollection<T>
    + System.Activities.Statements.Throw
    + System.Activities.Statements.WriteLine
                                
- Activity Arguments, workflows can accept and return data to a workflow through the WF runtime
public class SalesCommission:CodeActivity
{
    public InArgument<decimal> NetSales {get; set;}
    public InArgument<decimal> Percentage {get; set;}
    public OutArgument<decimal> CalculatedComission {get; set;}
    
    protected override void Execute(CodeActivityContext context)
    {
        var sales = context.GetValue(NetSales);
        var salesPercentage = context.GetValue(Percentage);
        var commission = sales * (salesPercentage/100);
        Console.WriteLine("For sales of {0:C} and sales percentage at {1}%, the sales comission is {2:C}, sales, salesPercentage, comission);
    }
}

the two property NetSales and Percentage will show in the WF designer
use a scope variable to record the activity output argument

- CodeActivity<TResult>, has the additional properties of Result for returning an argument and ResultType for defining the type of OutArgument returned
then the previous activist could be define as the following codes without output argument
public class SalesCommision:CodeActivity<decimal>
{
    [RequiredArgument]
    public InArgument<decimal> NetSales {get; set;}
    public InArgument<decimal> Percentage {get; set;}
    
    protected override decimal Execute(CodeActivityContext context)
    {
        var sales = context.GetValue(NetSales);
        var salesPercentage = context.GetValue(Percentage);
        var commission = sales * (salesPercentage/100);
        
        return commission;
    }
}
then the result property of this activity could be set with the scope variable to record the return value of the Activity

- design time validation, the designer will make sure the property mark with RequiredArgument is signed
    + there is a method CacheMetadata, it's available via the CodeActivity base class, it is used to handle custom design time validation
    InArgument cannot be validated at design time, arguments are intended to be set through resources within the workflow
    use standard property instead of workflow argument to validate during design-time 
    
    public class SalesCommission:CodeActivty<decimal>
    {
        public decimal NetSales {get; set;}
        public decimal Percentage {get; set;}
        
        protected override decimal Execute(CodeActivityContext context)
        {
            var commission = NetSales*(Percentage/100);
            return commission;
        }
        
        protected override void CacheMetadata(CodeActivityMetadata metadata)
        {
            base.CacheMetadata(metadata)
            if(NetSales <= 0)
            {
                metadata.AddValidateError("Sales cannot be less than 0!");
            }
            else if(Percentage <=0)
            {
                metadata.AddValidationError("Sales percentage cannot e less than 0!");
            }
            else
            {
                if(Percentage > 20)
                {
                    metadata.AddValidationError(string.Format("Sales percentage {0} cannot be greater than 20%", Percentage));
                }
            }
        }
    }

- passing data in and out of a workflow by workflow argument, only workflow console application have this type of argument for workflow
the tag is at the right side of variable type on the bottom left of the WF designer
could specify the argument type for each of the argument

- activity designer, designer a acitivity by wf designer
- activity designer icon, the icon property that contain in the ActivityDesigner class is the current activity icon, custom the icon for activity by, activity designer template provides xaml file to customize how a custom activity will look
    * add a icon file 
    * add it into solution and change the build action to resource
    * also could specify xaml brush to draw the icon
    <sap:ActivityDesigner x:Class="...ActivityDesigner"
        xmlns=...
    >
        <sap:ActivityDesigner.Icon>
            <DrawingBrush>
                <BitmapImage UriSource="Images\money.png"/>
            </DrawingBrush>
        </sap:ActivityDesigner.Icon>
    </sap:ActivityDesigner>
    
    reference the designer from the custom activity by attribute
    
    [Designer(typeof(SalesCommissionDesigner))]
    public class SalesCommission:CodeActivity<decimal>

- ExpressionTextBox UserControl, it inherites userControl and provide customized editing of expressions
using expression textbox to edit expressions
<sap:ActivityDesigner >
    <Grid>
        <StackPanel>
            <TextBlock >
            ...
        </StackPanel>
    </Grid>
</sap:ActivityDesigner>

use xaml to customize design time text box

- WorkflowItemPresenter ContentControl, the namespace System.Activities.Presentation has two classes for allowing one or more activities to be  placed within a custom activities
 
- Asynchronous activities
    + the base class System.Activities.AsyncCodeActivity allows work to be processed within an activity while other activities are executing in parallel, however worflow can't be persisted during execution of asynchronous work

    overwrite the BeginExecute and EndExecute method

- Native activities, support 
    + communicate from outside of a workflow
    + schedule and cancel child activity execution
    + abort activities
    public sealed class WaitForResponse<TResult> : NativeActivity<TResult>
    {
        public WaitForResponse()
        : base()
        {
        }
        public string ResponseName { get; set; }
        protected override bool CanInduceIdle
        { 
            //override when the custom activity is allowed to make he workflow go idle
            get
            {
                return true;
            }
        }
        protected override void Execute(NativeActivityContext context)
        {
            context.CreateBookmark(this.ResponseName, new BookmarkCallback(this.ReceivedResponse));
        }
        void ReceivedResponse(NativeActivityContext context, Bookmark bookmark, object obj)
        {
            this.Result.Set(context, (TResult)obj);
        }
    }
    
    The WaitForResponseactivity overrides the CanInduceIdleproperty, so the workflow knows that the workflow needs to go idle. 

- Scheduling activities
Once a class inherits from NativeActivity, a new property can be added to the class that represents a child activity. As the custom activity executes, the Activitytype property can then be scheduled. 
[Designer(typeof(IamNativeDesigner))]
public sealed class IamNative:NativeActivity
{
    public Activity childActivity { get; set; }
    protected override void Execute(NativeActivityContext context)
    {
        context.ScheduleActivity(childActivity, ChildActivityCompleted);
    }
    void ChildActivityCompleted(NativeActivityContext context, ActivityInstance instance)
    {
        Console.WriteLine("WriteLine activity completed its execution!");
    }
}

NOTE: there is no guarantee of the execution order of scheduled activities, so if you want to execute an activity only after another one finishes, the activity should be scheduled within the first activity’s completed execution callback.

- CacheMetadata, method so design-time validation could be implemented for a custom activity. The CacheMetadatamethod is also used to let the WF runtime know about specific parts of a custom activity. 
    
- Distributing custom activities could be worked with rehost WF designer 


# Persisting workflows


# Tracking workflows


# Rehosting the workflow designer


# Stateful WCF Services Using Workflow
- Windows communication foundation(WCF)
    + services can be hosted outside of IIS
    + other network protocols such as TCP and named pipe could be used instead of HTTP
    + Messaging structures other than SOAP
    + Support for distributed transactions

- WCF Fundamentals, a wcf service requires certain components called ABC's for implementation
ServiceEndpoint - EndpointAddress
                |- Binding
                |- ContactDescription
Address, service endpoints designated for communicating with a service
Binding, Network protocol that a service will use for communicating with clients
Contract, Agreed upon functionality that the service will provide for supporting clients event after modification are done to an existing service                

- Address, an endpoint is specified by an address that indicates the location of a service through a uniform resource identifier
    + scheme, used to indicate the transport protocol like HTTP or TCP
    + machine, name like www.bing.com
    + port, such as 8080
    + path, such as /localhost/myservice.svc
    + host a wcf service with ServiceHost for .net executable application
    var serviceHost = new SerivceHost();
    serviceHost.AddServiceEndPoint(typeof(IService),
                                   new BasicHttpBinding(),
                                   "Http://localhost:8080/myservice"

    specify the endpoint with configuration file
    <endpoint address="http://localhost:8080/MyService"
    Binding="basicHttpBinding"
    Contract="IService" />
    
- Binding, one of the major features of WCF is separating out the transport protocol from the service. This allows the same service to expose different bindings
Common transport protocols that are used with WCF services are
    + basicHttpBnding, support for asp.net web services
    + wsHttpBinding, don't support asp.net web services, but support other WCF services call a service over the internet by HTTP
    + netTcpBinding, clients can expect better performance through the intranet by specifying netTcpBinding, cannot be host in ii5 and 6, but support in iis 7 or later

    + netNamedPipeBinding, supports client that are on the same machine as a hosted service and established a secure environment for communication, support to host in iis 7+
    
    + netMsmqBnding, supports queuing functionality that provided by Microsoft Message Queuing(MSMQ), allows for disconnected scenarios where a client and service both do not have to be online at the same time, hosted by iis 7+
    
    + wsDualHttpBinding, supports duplex communication between a client and hosted service, so a service can communicate to a client through callback messages, support to host in iis 7+
        
    + example to define a service contract
        
    [OperationContract(IsOneWay=true)]
    void ApplyForJob(JobApplication application);
    [OperationContract]
    bool PerformBackgroundCheck(BackgroundCheck CandidateBackground);

- Stateful services, create wcf wf service with visual studio
- Correlation 
    + a workflow instance is created with each call to the servcie and is completed soon after
    + the CanCreateInstance property for the ReceiveAndSendReply activity needs to be checked, to indicate service call can create workflow instance
    + The serviceContractName property is also set to identify the contract name that will be used to implement the WCF service
    + the _handle1 which in the Variables section, it's default a CorrelationHandler, is automatically created for a ReceiveAndSendReply activity, the name can be cahnged to something more meaningful for the unique data that will be used to correlate thw workflow service instance. The scope can be cahnged too 
    + Content property for ReceiveAndSendReply activity
        * A content definitionfor a Message contains a message data and message type property. The message data property can be set to an existing variable within the workflow that will hold the data that is received from a client;
        * Adding Parameter content definitions expect data contracts. When a client  references the workflow service, a parameter will be required for making the service call.
        * the content of the SendReplyToReceive will be return to client
        * the CorrelatesOn property of the Receive activity. In all three point this to the orderId being passed in and make sure all three have a matching key.
    + The CorrelationInitializer such as applicationId that is set will be a type System.Guid 
    can be used by the client for referencing the job application with other service calls within the workflow, set parameter with
    Name            Type        Value
    applicationId   Guid        varJobApplicationStatus.JobApplicationId
    
    A correlationInitializer can now be added for the correlation handler then use the appliactionId parameter
    Luckily the xpath query can be selected and the key value is set to JobApplicationId
    
    XPath Queries       Query
    JobApplicationId    sm:body()/xgSc:ApplyForJobResponse/xgSc:applicationId
    
- Testing Correlation
    + use parallel activity to add testing state logic with the main business logic to supply check job running condition during the workflow
    Parallel        
    FlowChart       While
                    Condition
                        varWorkflowComplete == false
                    Body
                        Pick
                            Branch1
                                Trigger
                                    Sequence
                                        Receive
                                        SendReplyToReceive
                                Action
                    
    use a variable varWorkflowComplete which scope is set to parallel activity
    
    THe OperationName property that identifies the service call is set to GetJobApplicationStatus and ServiceContactName property is set to IJobApplication
    
    The service contract can be defined on the fly by declaratively building a workflow
    
    correlation for GetJobApplicationStatus service method need to be created for the job application Id that will be passed in and correlated with hndJobApplicationId
    
- Persistence
    + WF persistence use SQL server scripts that are provided for building a database and the logic for managing the state of a workflow instance
    
    + add service behavior with sqlWorkflowInstanceStore into web.config
    <sqlWorkflowInstanceStore
    connectionString="Server=HYPERVWINSEVEN2;Database=WFPersist;Trusted_Connection=yes"
    hostLockRenewalPeriod="00:00:30"
    runnableInstancesDetectionPeriod="00:02:00"
    instanceCompletionAction="DeleteAll"
    instanceLockedExceptionAction="AggressiveRetry"
    instanceEncodingOption="GZip"
    
- Workflow Termination
    + TerminateWorkflow activity is used for throwing an exception, it does not provide a graceful way to end a workflow
    + letting a workflow complete is the natural way to end its process
    
- workflow calling other workflows
    + the job application workflow now needs to handle performing a background check for the candidate after they have passed the interview screening
    
    + Add new WCF workflow service to the project called BackgroundCheckService.xamlx to duel other kinds of service call

- SendAndReceiveReply activity, it is used for a workflow to communicate to another wcf service and receive a reply
The system.ServiceModel.Endpoint property for the send activity has two properties, AddressUri
The action property of receive, If the Action property is not explicitly set, its value defaults to: https://tempuri.org/{service contract namespace}/{service contract name}/{operation name}.

- Workflow management service(WMS), wms is a windows service that handles the activation for workflow instances that are hosted by the WorkflowServiceHost

    + mapped wcf attributes that apply to contract-first workflows
    Attribute type      Property Name       Description     WF Validation
    Service Contract    Has ProtectionLevel
    Service Contract    Name
    Service Contract    Namespace
    Service Contract    ProtectionLevel
    Operation Contract  Action
    ...


    + User contract first, import a service contract by WCF WF project form other wcf servcies

- Validation, set the property of the *.xamlx ImplementContracts to assign service contract which must be implement by the WF WCF service


# workflow in window azure

# hosting workflows in windows server












    
    
    
C#4.0图解教程=Daniel M.Solis;Note=ehang

:C#和.net框架
>MFC, microsoft foundation classes
>COM, component object model, 针对桌面开发
>.net组成
	- CLR, common language runtime
	- BCL, base class library, 基类库
	- GC, garbage collector
	- .net提供平台调用, platform invoke, P/invoke, 允许.net代码调用并非使用.net使用的代码s,可以使用标准win32 dll导出纯C函数的代码s,比如window api
	- 允许操作com, com可以调用.net
	- 不需要com
		* iunknow
		* 类型库
		* 引用计数
		* hresult
		* 注册表
	- 简化部署
		* 只需要复制即可运行
		* 并行执行, 允许一个dll的不同版本存在于一台机器上
	- 基类库, BCL, 也称为FCL, framework class library
		* 通用基础类
		* 集合类
		* 线程和同步
		* XML
	- 编译成CIL, common intermediate language, 中间语言, IL, MCIL, microsoft common intermediate language
	- JIT, jutst in time编译器, 编译成本机代码执行
	- 托管代码, 需要CLR
	- 非托管代码, 不在CLR控制范围, 例如win32 c/c++ dl
>CLI组成
	- 公共类型系统, CTS, common type system
	- 公共语言范例, common language specification, 包括数据类型, 类结构和参数传递
	
:C#编程概述
>命名约定
	- pascal大小写, CarDeck, 类型/函数
	- camel大小写, carDeck, 参数与变量
	- 全大写
>关键字, 不能被用作变量名, 除非以@开头, 全部小写, .net类型使用Pascal大小写
abstract, const, extern, int, out, short, typeof, as, continue, false, interface, override, sizeof, uint, base, decimal, finally, internal, params, statckalloc, ulong, bool, default, fixed, is, private, static, unchecked, break, delegate, float, lock, protected, string, unsafe, byte, do, for, long, public, struct, ushort, case,double, foreach, namespace, readonly, switch, using, catch, else, goto, new, ref, this, virtual, char, enum, if, null, return, throw, void, checked, event, implicit, object, sbyte, true, volatile, class, explicit, in, operator, sealed, try while
>上下文关键字, 只在特定语言结构中是关键字
add, ascending, by, descending, dynamic, equals, from, get, global, group, into, join, let, on, orderby, partial, remove, select, set, value, var, where, yield
>块
>输出
	- console.writeline(format_string, parameters);
>main函数, 程序起点
static void main(){}
	
:类型, 存储和变量
>C程序是函数和数据类型
>C++程序是一组函数和类
>C#程序是一组类型声明
	- 可执行一定包含main
	- 命名空间, 分组命名
>类型是一种模板, 用来创建数据结构的模板, 本身不是数据结构, 但说明了创造对象的特性
	- 名称
	- 结构(所占直接等)
	- 行为(函数)
>实例化类型, 所有的实际对象都是类型的实例
>数据成员和函数
	- 简单类型, 只存储一个数据项
	- 其他类型, 存储多个数据项
>与C/C++不同, C#中的数值类型不具有布尔意义
>C#类型
	- 11中数值类型
	- 一种unicode字符, char
	- 一种布尔类型, bool
	- 三种非简单类型
		* string
		* object
		* dynamic
	- 类型名
	object, string, dynamic, bool, char, decimal, float, double, sbyte, byte, short, ushort, int, uint, long, ulong
	- 用户自定义类型
		* class
		* struct
		* array
		* enum
		* delegate
		* interface
		* array, delegate不含有命名成员
>堆, 栈
>值类型和引用类型
	- 值类型, 栈中存放实际数据, 可以存放在栈中也可以存放在堆中(根据系统情况)
	- 引用类型, 栈中存放堆地址引用, 数据存放在堆中
	- 所有预定义类型是值类型的简单类型
	- 所有用户定义类型及非简单类型是引用了性
>变量, 4中
	- 本地
	- 字段
	- 参数
	- 数组元素, 数据项构成的有序集合的成员
	- dynamic, 类型到运行时才解释, 动态类型
	- 静态类型, 那部分放在堆上, 那部分放在栈上是固定且不能修改的
	- 动态类型, 例如一些动态语言的变量, ironpython, ironruby, 运行时才解释
	- type?, 可空
	
:类基础
>类, 逻辑相关的数据项和函数封装的集合
>类成员
	- 数据成员, 字段, 常量
	- 函数成员, 方法, 运算符, 属性, 索引, 构造函数, 事件, 析构函数
>创建变量和类的实例
classType varName; //声明一个类型但没有赋值
varName = new classType(); //分配内存
>实例成员
	- 实例成员
	- 静态成员
>访问修饰符
private, public, protected, internal, protected internal

:方法
>本地变量(局部变量)
>实例字段与本地变量对比
类初始化给予默认值		没有隐式初始化
类的所有字段存储在堆中	在栈中
>类型推断和var关键字
var, 不是特别类型, 是句法上的速记, 表示任何可以从初始化推断出的类型
	- 只能用于本地变量, 不能用于字段
	- 只能在变量声明中包含初始化时使用
	- 一旦编译器对段出类型, 则不能再改变
>本地常量
const, 是核心声明的一部分, 必须直接放在类型的前面
>方法调用
英文中call和invoke是同义的
>参数
	- 值参数, 值类型的变量
	在栈中为形参分配空间
	- 引用参数, 引用类型的变量
	- ref说明, 将值类型变为引用参数
		*必须是变量
		*在声明的时候使用ref
		*在调用的时候也要使用ref
	- 输出参数, out, 同ref
	- 参数数组
	形参中只能有一个参数数组, 且必须是最后一个
	type function(..., params int[] varArray){...}
	params是修饰符, int[],表示参数数组类型, 调用无须修饰符
	调用时也可以直接使用数组对参数数组赋值
>方法重载, 与重载方法不同的签名, 返回类型不属于签名
	- 方法名
	- 参数个数
	- 数据类型和顺序
	- 修饰符
>命名参数, 可以使用"形参:实参"形式调用方法, 这时可不用考虑参数顺序, 普通参数都要在命名参数之前
function(parameter0:value0, parameter2:value2, parameter1:value1)
>可选参数
	* 要类型编译前可确定
	* 默认是null的引用类型
	* 在其他参数之后, params参数之前(参数数组)
>栈帧, stack frame, 是局部变量与参数在栈上的组织
	* 内存保存如下内容
		- 返回地址
		- 这些参数分配的内存, 参数数组
		- 其他管理数据项
>递归

:类进阶
>成员修饰符的顺序
[特性]	[修饰符]	核心声明
	- 修饰符之间可以是任意顺序
>实例类成员
>静态字段
	- 所有实例共享
	- 类内可以直接访问
	- 类外, ClassName.staticFieldName 来访问
>静态成员在使用之前初始化
>静态成员函数, 只能访问静态成员
>可声明的静态成员
	- 字段
	- 方法
	- 构造函数
	- 运算符
	- 事件
	- 属性
>成员常量, C#中没有全局常量, 只能声明在类型中, 表现上同static类型, 但是不能声明为static, 在内存中无位置
>属性, get, set
type propertyName
{
	get; set;
}
可以声明static属性, 同静态成员
>当公共字段变为属性的时候需要编译所有调用这个代码的程序集, 因为C#语义不通
>对象初始化列表
new typeName {field0 = value0, field1 = value1};
>析构函数, 不带参数, 无返回值, 唯一
	~className(){..}
	- 并不在实例失效后立即调用, 由GC决定
	- 使用IDisposable接口实现C++中析构函数的功能
	- 实现Dispose方法, 然后在需要的时候自行调用
		* 确保该方法不止一次调用也是安全的
		* 如果Dispose方法没被调用, 那么析构函数会做同样的事
		* 当已经清理后, 在GC.SuppressFinalize方法调用时应该告诉析构函数不需要清理
>readonly, 类似于const, 一但值被设定就不能更改
>this, 使用位置
	* 实例构造函数
	* 实例方法
>索引, 在类中为自定义类型实现数组的功能, 可以被重载
return_type this[type index0[, type index1, ... ]]
{get;set;}
>分部类和分部类型
	- 修饰符, partial, 而不是关键字, 可以直接用在class, struct或interface之前
	//in c# file 0
	partial class MyPartClass
	{...}
	//in c# file 1
	partial class MyPartClass
	{...}
	- asp.net就是使用分不类分别存储系统自动生成代码和用户处理代码
	- 可以自定义分部结构, 分部接口
	- 分部方法
	partial return_type functionName(...); //定义
	partial return_type functionName(...){} //实现
		* 隐式私有
		* 可以有定义没有实现, 这时编译器会移除所有这个方法的调用
	
:类和继承
>继承, 基类, 派生类, base class, derived class
class derivedClass:baseClass
{}
>派生类隐藏基类同名成员
new elementName;
>指明引用基类成员
base.elementName
>基类与派生类的引用转换, 同C++, 强制类型转换
	- 存储层次
	...
	SecondDerivedClass
	firstDerivedClass
	baseClass
>虚方法, 覆盖
//基类
virtual scope type functionName();
//派生类
override scope type functionName();
	* scope必须相同
	* 不能覆写static方法或非虚方法
	* 方法, 属性, 索引, 事件, 都可以为virtual
	* 基类引用派生类成员, 调用虚方法过程, 保证调用正确的派生类方法
		- 沿派生层次上溯到最新的派生类
		- 如果方法未被标记为override则被忽略, 例如使用new重写
>构造函数执行, 依次调用基类构造函数
class myClass:baseClass
{
	public myClass(...):base(...), this(...)
	{
		...// this(...)本类的其他构造函数
	}
}
>程序集间的继承
	* 目标基类必须是public
	* 必须引用该目标类的程序集
	* 增加程序集引用与using是两回事, using只是为了省去编码时的程序集名; 引用程序集是告知编译器
>成员访问修饰符
				其他类		继承类
其他程序集		public		public
							protected
相同程序集		public		public
				internal    private
							protected
							internal
							自身类
>抽象成员, abstract 修饰, 没有实现代码, 派生类中如果需要实现则必须使用override关键字重写
	- 方法
	- 属性
	- 事件
	- 索引
	- 不能与virtual同用
>抽象类, 至少含有一个抽象成员
abstract class MyClass{}
>密封类, 不能被用于基类
sealed class MyClass{}
>静态类
static public class MyClass{}
	- static修饰
	- 所有成员静态
	- 可以有一个静态构造函数, 无实例构造函数
	- 隐式封闭, 不能作为基类
>扩展方法, C#3.0开始允许编写和声明它的类之外的关联方法
class MyClass
{...}
static class ExtendMyClass
{
	public static double Average(this MyClass obj)
	{}
}
	- 无源码情况下
	- 原类不封闭
	- 使用静态类为原类写扩展方法
	- 扩展方法必须是公有, 静态
	- 使用, 这样就可以直接在原类中引用扩展的方法

:表达式和运算符
>表达式
>字面量, 直接书写的字符串与数字
	- 'd'
	- '\n'
	- '\x0061'
	- '\u005a'
	- "\u005ahello world"
	- @"unconvert string except double "" means one quote."
>整数字面量, 无小数点, 可有后缀修饰(L, U, UL)
>比较操作和相等性
	- 大多数引用类型比较时, 只有引用被比较, 称为浅比较
	- string比较的时候比较长度和大小写敏感的内容, 称为深比较
>位操作
&, |, ~, >>, <<
>用户定义类型转换
	- 隐式
	public static implicit operator TargetType(sourceType identifier)
	{
		return ObjectOfTargetType;
	}
	- 显示
	public static explicit operator TargetType(sourceType identifier)
	{
		return ObjectOfTargetType;
	}
>运算符重载
	- 只能为类与结构写重载
	public static returnType operator +(type0 v0[, type1 v1])
	{...}
	- 可重载的运算符
		* 一元
		+,-,!,~,++,--,true,false
		* 二元
		+,-,*,/,%,&,|,^,<<,>>,==,!=,>,<,>=,<=
>typeof运算符, 返回她的参数的任何已知类型的system.Type对象
>可空类型的空结合运算符
type?

:语句
>语句
	- 声明
	- 嵌入, for循环中的语句
	- 标签
	- 嵌套块, 在语法上块等于一条嵌入语句
>控制流
if,else, switch
C#中测试语句必须返回bool值, 数字在C#中没有bool意义
>循环
while, do, for, foreach
>跳转
break, continue, return, goto, throw
>标签
identifier: statement
	- 执行如同标签不存在一样
	- 标签语句只能放于块内
	- 配合goto语句使用
>using语句, 有助于资源的释放
	- 资源, 实现了一个system.IDisposable接口的类或结构, 有Dispose方法
	using(resourceType identifier = expression) statement
	- using后的语句中异常处理是可选的, 不会影响资源的释放
	- 例如
	using(resType resource = new ResType(...))statement
	using(resType id1 = exp1, id2 = exp2) statement
>其他语句
checked, unchecked, foreach, try, throw, finally, yield

:命名空间和程序集
>添加程序集, assembly, 在工程用添加reference
>mscorlib库, 包含console类, visual studio不把它显示在references目录中
>命名空间
	- 加载类名前的点分割字符串, 为了避免重复类名
	- 完全下定名, 包含命名空间和类名的完整类引用
	- 一个源文件可以包含任意命名空间声明, 可以顺序也可以嵌套
	- 命名空间不是封闭的, 可以再多个源文件中使用一个命名空间
	- using指令, 在所有类型声明之前, 表示应用于当前文件的所有命名空间
	using namespaceName;
	using aliasName = namespaceName;
	- 例如
	namespace namespaceName
	{
		...
	}
>程序集的结构, .net程序集是公共中间语言代码(CIL), 还包含实时编译器(JIT), 在运行时转换CIL到本机代码所需的其他内容, 如对其他程序集的引用
	- 扩展名通常为, exe, dll
	- 程序集结构
	清单
	类型元数据
	CIL代码
	资源
	- 清单
		* 程序集名称
		* 文件列表
		* 程序集的内部结构图
		* 引用其他程序集的信息
	- 类型元数据, 包含程序集内定义的所有类型信息
	- CIL, 中间代码
	- 资源, 可选, 可以包含图形或语言
	- 也有多文件程序集
		* 主模块, primary module
		* 次要模块, secondary modules, 扩展名 *.netmodule
		* 主模块结构
		清单
		类型元数据
		CIL代码
		资源
		* 次要模块结构
		类型元数据
		CIL代码
	- 程序集标示符, identity
		* 简单号, 简单名, 它被称为程序集名或友好名称
		* 版本号, 由4个句点分开的整数字符串组成
		* 文化信息, 2~5个字符组成, 代表语言和国家地区
		* 公钥, 128字节字符串, 是生产程序集的唯一的安全数字签名
>强命名程序集, 有唯一的数字签名依附于它
	- 编译器创建添加关于程序集信息并哈希后创建一个唯一的数字签名
	- 简单名称
	- 版本号
	- 文化信息
	- 公钥/私钥
>弱命名weakly named程序集, 没有数字签名, 强命名程序集只能访问其他强命程序集, 存在访问弱名程序集的方法
>创建强名程序集
	- 打开工程属性
	- 选择签名页
	- 选择为程序集复选框签名并输入密钥文件的位置或创建一个新的
>程序集私有方式部署, 直接复制到目标目录, 也称为xcopy部署
	- 无须在注册表中注册
	- 可以是强命名也可以是弱命名
>共享程序集和GAC
	- GAC, 全局程序集缓存, .net有这样一个程序库
	- 只有强命名程序集才可以被添加
	- 现可添加.dll, .exe文件
	- GAC位于%windir%\assembly子目录
	- gacutil.exe命名工具添加GAC程序集
		* /i, 添加
		* /u, 卸载
		* /l, 列出当前所有的程序集
>GAC内并肩执行, GAC中有很多不同的程序集, 但是它们可以有相同的文件名. 使得在不同的应用程序同一时间很容易使用不同版本的同一dll, 它们是带不同标示符的不同程序集, 称为并肩执行
>配置文件, 包含关于应用程序的信息, 供CLR在运行时使用, 可以配置使用不同版本的dll, 或搜索程序引用的dll时在附加目录中查找, 有xml组成
	- 好处, 直接修改配置文件可以使用新版本的dll
>延迟签名或部分签名, delayed signing, partial signing, 为了保护公钥/私钥对, 为开发测试提供方便
	- 延迟签名时编译器只使用公钥, 公钥放在完成的标示符清单中, 延迟签名还使用一个0块保留数字签名的位置.
	- 要创建一个密钥文件的复制, 但只含有公钥, 而不是公钥/私钥对
	- 为程序集范围内的源码添加一个名称为delaySignAttribute的附加属性为true
	- 取消对一台机器的程序集的GAC签名确认, 保证延迟签名程序集可以部署
	sn -vr *.dll
	- 使用gacutil.exe部署程序集

:异常
>异常, 是程序运行时违反了系统约束或应用程序本身的约束
>语法
try{}
catch{}
finally{}
>异常类, 派生自system.Exception
	- BCL定义了许多类, 每个类代表一个特定的异常类型
	- 异常发生后CLR的反应
		* 创建该类型的异常对象
		* 寻找适当的catch子句处理它
	- 部分异常属性
		* Message, string, 解释信息
		* StackTrace, string, 异常发生在何处
		* InnerException, exception, 如果当前异常是前一个异常引起的, 这个属性包含前一个异常的引用
		* HelpLink, string, 这个属性可以被应用程序定义的异常设置, 为异常原因信息提供URN或URL
>catch形式
catch{}
catch(exceptionType){}
catch(exceptionType exception_variable){}
>finally, 无论如何都会执行, 
>抛异常
	- throw ExceptionObject;
	- throw; //不带异常参数表示重新抛出当前异常, 且只能使用在catch块内

:结构
>结构, 程序员定义的数据结构
	- 形式
	struct structName
	{...}
	- 是值类型, 一般比引用类型更高效
	- 是隐式封闭的(不能被派生), 如下修饰符不能使用
		* protected
		* internal
		* abstract
		* virtual
	- 由于是值类型, 不能为null, 两个结构变量不能引用同一对象
		* 只能使用装箱来将结构变量变为引用(object)var_struct
	- 构造函数
		* 静态
		* 实例
		* 无参实例构造函数不能被重载, 系统隐式以声明
	- 无析构函数
	- 使用
	s = new struct_name();
	struct_name s; //所有成员赋值后才能使用

:枚举
>值类型
	- 一般定义
	enum name[:type]
	{
		tag0,
		tag1[ = 5]
	}
	- 单字紧凑型(singe word), 用一个字节的每一位表示
	[Flags]
	enum enum_flag_name : uint
	{
		bit0 = 0x01,
		bit1 = 0x02,
		bit2 = 0x04,
		bit3 = 0x08
	}
	- C#4.0使用, 如下形式检测是否含有标记的位
	varEnum.HasFlag(enum_flag_name.bitN);
	- 不同的枚举类型之间的内容不能相互比较
>Flags特性
	- 和为位标志
	- 允许toString方法, 如果指定的位为1则输出枚举值名

:数组
>数组类型
	- rank, 数组的维度
	- length, 数组的长度
	- 定义
	type name[d0, d1, d2];
	type[d0, d1, d2] name;
	type[]	name = new type[];
	var name = new []{value0, value1, value2};
	- 交错数组
	type[][] name = new type[d0][];
	name[0] = new type[]{value0, value1, ...};
>foreach语句, 迭代变量时只读的
foreach(type|var name in sequence_name)
{..}
>数组协变, 对于基类对象数组, 子类的对象付给这个基类数组, 称为协变
>属性
	- rank
	- length
	- getLength
	- clear
	- sort
	- binarySearch
	- clone, 浅复制, 只创建了数组本身的克隆, 如果数组元素师引用类型, 则引用元素未被复制
	type[] a = (type[])ary_name.clone();
	- indexOf
	- reverse
	- getUpperBound

:委托
>委托就是一个函数指针类模板, 使用过程与类对比; 类型安全的函数指针
声明类->声明类变量->填充变量->使用变量
声明委托->声明委托类型变量->创建委托的实例并把它增加方法->调用委托对象
delegate type delegate_type_name(parameters);
delegate_type_name var_delegate += function_name;
或
delegate_type_name var_delegate = new delegate_type_name(function_name);
>返回值, 最后一个委托函数的返回值
>匿名方法定义, 并直接添加到相应委托
delegate_typename += delegate (parameters){... [return value]};
>匿名方法捕获变量的生命周期扩展到匿名方法结束
{
	int x;
	var fun = delegate
	{
		console.writeline("{0}", x); //捕获x
	};
}
>lambda表达式, 比匿名方法更进一步, 可以省略定义的类型参数
(x, y, z) =>{ return x + y + z};
x => x + 1;

:事件
>事件, 被简化的的委托, 具有固定格式, 事件不是一种类型, 必须声明在类或结构中, 隐式自动初始化为null
delegate void Event(object sender, object data);
Event e;
>事件的相关事项
	- 触发, raise, 调用, invoke, 触发, fire
	- 发布者, publisher, 让事件被其他类或结构可见并使用的类结构
	- 订阅者, subscriber, 把事件和发布者关联注册的类或结构
	- 事件处理程序, event handler, 注册到事件的方法
>事件有私有委托
	- 提供了对私有委托的结构化访问
	- 私有委托只对外开放了, 添加, 删除, 调用
	- 触发时一次调用委托内的函数列表
>使用事件, 代码分5部分
	- 委托类型声明
	- 事件处理程序声明
	- 事件声明
	public [static] event EventHandler event_name;
		* EventHandler是委托类型, 无须定义参数类型与返回类型
		public delegate void EventHandler(object sender, EventArgs e);
		* event 是关键字
	- 事件注册
	- 触发事件代码, 即调用委托的所有方法
	if(event_name != null)
		event_name(source, args);
	- 类中定义事件并添加触发事件方法
	public class MyTimerClass
	{
		public event EventHandler event_name;
		private void OnEvent(object source, EventArgs args)
		{
			if(event_name != null)
			{
				event_name(source, args);
			}
		}
		
		public some_function(parameters)
		{
			//other logic
			...
			
			OnEvent(source_object, parameter_value);
		}
	}
	- 订阅事件
	classObject.event_name += deal_function_name;
	classObject.event_name += new EventHandler(deal_function_name);
	- EventArgs类
		* 不能传递任何数据, 它用于不需要传递数据的事件处理程序
		* 如果希望传递数据, 必须声明一个类继承自EventArgs, 使用合适的字段保存需要传递的信息. 使用自定义参数需要自定义事件委托, 有两种方法
			- 使用自定义委托
			public delegate void MyEventHandler(object sender, MyEventArgs e);
			- 使用泛型委托
			public event EventHandler<MyEventArgs> event_name;
	- 事件访问器, 可以自定义添加,删除事件时的附加处理, 如同属性的get, set访问器, 具有默认的value变量表示添加删除的对象
	声明了事件访问器则事件中不会包含内嵌委托对象, 需要自己定义委托存储订阅事件的方法, 也就似是定义一个委托字段
	事件访问器没有返回值
	public event EventHandler event_name
	{
		add
		{
			...
		}
		remove
		{
			...
		}
	}
>标准事件的用法, 异步处理事件
	

:接口
>接口, 一组函数成员而不实现
public interface IComparable
{
	int CompareTo(parameters);
}
>接口成员
	- 方法
	- 属性
	- 事件
	- 索引
>命名, 惯例以I开头
>接口是引用类型
>类型转换符, as, 不成功则为空
var ret = varName as type;
>类实现多个接口有重复方法, 则有两种处理方式
	- 只实现一个方法, 单一实现
	- 显示声明每个接口的方法
	void interface0.function(){...};
	void interface1.function(){...};
	显示声明类接口在实现类使用的时候, 必须使用接口调用接口函数
	(IInterface)this.interfance_funcation;
	
:转换
>conversion
	- 隐式转换
	- 显式转换
	- 强制转换
>转换类型
	- 预定义
		* 数字
			- 隐式
			- 显示
		* 装箱/拆箱
		* 引用, 类可以隐式转换为它继承的类, 接口
			- 隐式
			- 显示
	- 用户定义, implicit, explicit
		* 隐式
		* 显示
>上溢/下溢检测
check/unchecked, check会溢出会抛出异常
>装箱
	- 接受值类型的, 将对象转换为 object类型
	- 装箱后值类型是对原值在堆中重新复制新的副本
	- 装箱对引用类型只是创建新的引用指向原来堆区域
>is, as, 用户定义转换
	- is, 用于测试源类型是否可以转换为目标类型
	- as, 尝试转换类型, 失败则返回null

:泛型
>泛型, generic, 类型的模板, 就是将数据类型也作为参数
class myClass <generic_type0[, generic_type1, ...]>
{
}
>使用泛型类创建变量和实例
myGenericClass<int, double> myGeneratedClass = new myGenericClass<int, double>();
>类型参数的约束
	- 未绑定类型参数, 由于泛型的类型都是从object继承的, 所有的泛型类定义的时候不能使用非object类的属性或方法. 
	例如不能使用操作符, 比较符等
	- 绑定操作符约束, 让编译器知道泛型类中可以接受的类型, T1为未绑定类型参数
	class MyGenericClass<T1, T2, T3>
	where T2:Customer		//T2的约束必须为Customer类及其子类
	where T3:IComparable	//T3为必须实现IComparable接口
	{...}
	- 约束类型和次序
	约束类型
		* 类名, 任何类名
		* class, 引用类型, 包括类和数组, 委托和接口
		* struct, 任何值类型
		* Interface, 这个接口或实现这个接口的类
		* new(), 任何带有无参构造函数的类型
>泛型方法
	- 定义
	public void functionGenericName<S, T>(S s, T, t)
	where	S: Person
	where	T: IComparable
	{...}
	- 使用
	functionGenericeName<Customer, int>(objCustomer, 5);
	- 推断类型
	在使用系统内建变量类型的时候可以再调用泛型方法的时候省略类型参数, 编译器可以再编译时推断, 这样调用结构和普通方法一样
>扩展方法和泛型类
泛型类的扩展方法就是在普通类的扩展方法中增加类型参数
static class ExtendGenericClassName
{
	public static type function_name<T>(this GenericClassName<T> t)
	{...}
}
>泛型结构
>泛型委托
delegate R MyGenericDelegate<T, R>(T t);
例如C#3.0中LINQ常用的泛型委托之一
public delegate TR Func<T1, T2, TR>(T1, p1, T2, p2);
var myDelegate = new Func<int, int, bool>(2,3);
>泛型接口
	- 为泛型类使用
	class Simple<T>: ISimple<T>
	{}
	- 普通类使用泛型接口的类型实例
	class Normal: ISimple<int>
	{}
	- 泛型接口的实现必须唯一
>泛型协变和逆变, 就是针对继承而扩充的泛型类型, 添加out, in关键字来允许基类引用派生类
delegate void Action1<in T>(T a);
delegate R Action<out R>();
接口的协变

:枚举和迭代器
>IEnumerator接口, 是一个可枚举对象, 包含三个方法
	* current, 返回object类型
	* moveNext
	* reset
>IEnumerable接口, 返回一个对象的可枚举对象
	* GetEnumerator, 返回枚举对象
>非泛型类实现枚举需要装箱拆箱, 增加了一定的系统负担. 解决
	- 不实现接口的枚举, 类中直接实现
	* current
	* moveNext
	* reset
	* GetEnumerator
	- 泛型枚举
	IEnumerator<T>, 使用泛型返回实际类型, 而不是object
	* Current, 返回实现接口的实例
	类中也要显示实现IEnumerator.Current方法
	IEnumerable<T>, 包含了一个泛型接口方法GetEnumerator, 返回实现泛型接口的对象
>迭代器, 方法中使用了, 在实现IEnumerable接口的时候, 调用迭代器方法即可
	yield return value;
	yield break;
>迭代器实质, 4个状态的状态机
	- before, 首次调用movenext的初始状态
	- running, 调用movenext之后的状态
	- suspended, 下次调用movenext的状态
	- after, 结尾
	
:LINQ
>LINQ, ( pronouce "link"), language integrated query, 语言集成查询, 可以查询各种数据结构, 例如SQL, xml等
>匿名类型
var name = new{key=value, key1=value1, ...};
>LINQ的查询方法
	- 查询语法, query syntax
	var queryString = from ...
					  [from ...]
					  [let ...]
					  [join ...]
					  [orderby ...]
					  [into ...]
					  where ...
					  <select ...
					  |group ... by ...>;
	- 方法语法, method syntax
	collectionObject.lineFunction(lambda_method);
	numbers.where(x=>x>20);
	- from, 子句
	from item in collection
	let ...
	- group 字句中的返回值 key中含有group的分类值
	- 标准查询运算, 就是查询中可以使用的表达式
		* 限制, 返回受限子集
		* 映射, 序列对象的那些部分
		* 分隔, 跳过或返回
		* 联结
		* 合成
		* 排序
		* 分组
		* 设置
		* 转换, 转化为数组, 字典等
		* 判等
		* 元素,返回特定元素
		* 生成
		* 量化, 指定某个谓词对于序列是否为true
		* 聚合, 返回表示一个序列特性的单一值
	- 预定义委托类型
	public delegate TR Func<out TR>		(); 	//具有返回值的委托
	public delegate void Action<in T1> (T1 a1); //不具有返回值的委托
>LINQ to XML, 相比于XPath和XSLT, 更加方便
	- 单一语句自顶向下创建XML树
	- 不使用包含树的XML文档在内存中创建并操作XML
	- 不适用text子节点来创建和操作字符串节点
	- 树形结构
>XDocument
	- XDeclaration
	- XDocumentType
	- XProcessingInstuctio
	- XElement
		* XElement
		* XComment
		* XAtribute
		* XProcessingInstruction
>XML树的类大多从XNode继承
using sysem.xml.linq
	- 使用XML树的值
	Nodes, Elements, Descendants 返回所有子代, DescendantsAndSelf, Ancestor 所有上集节点或拥有某个名字的上集节点, AncestorsAndSelf, Parent
	- 使用XDocument对象处理XML, 并添加XElement 元素
	XDocument eDoc = new XElement("Employees",
								  new XElement("Name", "Bob Smith"),
								  new XElement("PhoseNumber", "408-555-1000")
								  )
>XML操作方法
Add, AddFirst, AddBeforeSelf, AddAfterSelf, Remove, RemoveNodes, SetElement, ReplaceContent
>节点的其他类型
	- XComment, 在<!-- -->之间的文本
	- Declaration, XML版本号, 使用的字符编码类型
	- XProcessingInstruction, 提供XML文档如何被使用和翻译的额外数据
>LINQ to XML的查询

:异步编程
>进程, process
>线程, thread
>多线程处理的问题
	- 创建销毁需要资源和成本
	- 安排线程
	- 进程中线程共享资源和堆
	- 调试多线程程序非常困难
>.net4.0引入并行循环库, parallel.for, parallel.foreach
system.Threading.Tasks命名空间中
parallel.for( int fromInclusive, int toExclusive, Action body);
Action是LINQ中的一种委托模板
>异步编程模式
委托的,BeginInvoke和EndInvoke方法, 当我们调用委托的BeginInvoke方法的时候, 它开始在线程池中独立线程上执行引用方法, 并且立即返回原始线程. 原始线程可以继续
当程序希望获取完成的异步方法结果, 可以检查BeginInvoke的返回的IAsyncResult的IsComplete属性, 或调用委托的EndInvoke来等待委托完成
原始线程获取发起线程的方式
	- 等待到完成
	IAsyncResult ir = delegateObj.BeginInvoke(parameters);
	//do additional works
	long result = delegateObj.EndInvoke(ir);
	- 轮询
	while(!IAsyncResult.IsComplete){...}
	- 回调
	AsyncCallBack(IAsyncResult ir);
对每一个委托开启BeginInvoke后一定要调用EndInvoke
>AsyncResult, BeginInvoke返回一个IASyncResult接口引用, 内部是AnsycResult对象
	- AsyncResult对象包含一个叫做AsyncDelegate的属性, 它返回一个指向被调用来开启异步方法的委托引用
	- IsCompleted
	- AsyncState, 返回一个对象引用
>定时器
system.threading.timer
每次时间到期后调用回调, void TimerCallback(object state);
period, 是两次成功调用回调函数之间的时间间隔

:预处理指令
>preprocessor directive
	- #define identifier
	- #undef identifier
	- #if expression
	- #elif expression
	- #else
	- #endif
	- #region name
	- #endregion name
	- #warning message
	- #error message
	- #line indicator
	- #pragma text
	
:反射和特性
>元数据, 有关程序及其类型的数据, 保存在程序的程序集中
>反射, reflection, 运行时查看其它程序集或其本身的元数据. system.reflection
>type类, 来完成反射. 成员
	- name
	- namespace
	- assembly
	- getfields
	- getproperties
	- getmethods
>object类中包含getType方法来获取type对象
>特性, attribute, 允许为程序集添加元数据的语言结构, 是用于保存呢程序结构信息的某种特殊类型的类
	- 编译器从特性产生元数据
	- 使用特性的时候定义时如果由NameAttribute, 则在使用的时候直接使用Name进行引用
	- 在结构前应用特性片段来应用特性
	[attribute_name]
	public class class_name{...}|function_name(parameters...){...}
	- 预定义的保留特性
		* Obsolete, 标注过期程序集
		* Conditional, 允许包括或排斥某个特性方法的所有调用, 如果定义了编译符号, 那么编译器会包含所有调用这个方法的代码. 如果没有定义编译器会忽略代码中对这个方法的所有调用
		#define Debug
		...
		[conditional('Debug')]
		static void main()
		{
			traceMessage("start of main");
			console.writeline("hello world.");
		}
		* CLSCompliant, 公共成员被编译器检测是否符合CLS
		* Serialiazable
		* NonSerialized
		* Obsolete
		* DLLImport, 声明是非托管代码实现的
		* WebMethod, 声明方法应该被作为XML Web服务的一部分暴露
		* AttributeUsage, 声明特性被应用到什么类型的程序结构
	- 多个特性的一起使用
		* 多个独立特性可以相互叠加
		[Serializable]
		[MyAttribute(...)]
		* 单个特性片段, 特性之间逗号分割
		[Serializable, WebMethod]
	- 特性目标, 可以应用到特殊目标结构上
	[method:AttributeName(...)]
	[return:AttributeName(...)]
		* event
		* field
		* type, 值类, 结构, 委托, 枚举, 接口
		* typevar
		* method
		* param
		* property
		* return
		* assembly
		* module
	- 全局特性, 使用assembly和module来使用显示目标, 把特性设置在程序集或模块级别
		* 程序级别特性, 放在任何目标之外, 通常放置在AssemblyInfo.cs
		* 含有公司, 产品, 版权信息等
		[assembly:AssemblyTitle("SuperWidget")]
		[assembly:AssemblyDescription("Implements the SuperWidget")]
		[assembly:AssebmlyConfiguration]
		Company, product, copyright, trademark, culture
	- 自定义特性, 全部继承自System.Attribute
	public sealed class MyAttributeAttribute:System.Attribute
	{
		public MyAttributeAttribute(string arg)
		{
			...
		}
	}//成员只能是一下三种
		* 字段
		* 属性
		* 构造函数
	在使用特性的时候可以通过命名参数的形式为其添加参数, 即使其没有定义那么多参数
	[MyAttribute(arg0, name="John", age=20)]
	- 使用AttributeUsage内建特性限制特性使用
	[AttributeUsage(AttributeTarget.Method)]
		* ValidOn, 保存特性能应用到的目标列表, 必须是Attribute.Target枚举类型
		* Inherited, 布尔值, 是否会被派生类继承, 默认true
		* AllowMutiple, 是否被应用多个特性的实例, 默认false
		* Attribute.Target枚举
		Delegate, Enum, Event, Field, GenericParameter, Interface, Method, Module, Parameter, Property, ReturnValue, Struct
		* 例如
		[AttributeUsage(AttributeTarget.Class, Inherited = false, AllowMultiple = false)]
		public sealed class MYAttributeAttribute:System.Attribute
		{...}
	- 自定义特性规则
		* 表示目标结构的状态
		* 除了属性之外不要实现公共方法或其他函数成员
		* 推荐把特性声明为sealed
		* 要使用AttributeUsage显示指明目标组
	- 访问特性, type类
	IsDefined, 检测目标特性是否被应用在某个对象上
	GetCustomAttribute方法, 返回应用到结构的特性的数组
	
:其他主题
>字符串, string预定义类型, 表示System.String, 特点
	- Unicode
	- 字符串是不可变的, immutable
	- stringBuilder可以帮助动态有效的生成字符串
	- 格式化字符串, 可以输出百分比, 货币, 常规等
	- 字符串转换
		* number_type.parse(string);, 失败抛出异常
		* trypParse, 失败返回布尔值
>可空类型, 将原有类型封装, 暴露两个属性
type? var_name;
	- HasValue
	- Value
	- 可空接合运算符
	value = null_able ?? none_null_able;
	- 自定义类型可空后访问原来类型值需要通过value属性引用
	- 实现, 是通过System.Nullable<T>的.net类型实现
>Main方法
	- static void Main{...}
	- static void Main(string[] args){...}
	- static int Main{...}
	- static int Main{string[] args}{...}
	- main可以被声明为public 或private, 当为private的时候只有执行环境才能访问到她, 其他程序集则不能访问
	为public其他程序集可以调用
>文档注释, 允许我们以XML的形式在程序中包含文档, VS会帮我们插入元素并从源文件中提出注释到独立的XML文件中
	- 使用visual studio 产生带有嵌入XML的源文件
	- VS从源文件中读取XML并复制XML代码到新的文件
	- 使用文档编译器可以获取XML文件并从它产生各种类型文件
	sandcastle, http://sandcastle.codeplex.com
>插入文档注释, 从3个连续的正斜线开始, 表示文档注释内容
	- 文档注释标签种类
	<code>, <example>, <param>, <remarks>, <returns>, <seealso>, <summary>, <value>
>嵌套类型, 在类或结构中声明类型
	- 嵌套类型是类型实例的模板
	- 嵌套类型像封闭类型的成员一样声明
		* 可以是任意类型
		* 可以使类或结构
	class wrape_class_name
	{
		class inner_class_name
		{}
	}
	- 外层可以访问嵌套类型的非私有成员
	- 嵌套类型本身默认是private, 可以重新定义访问范围
>操作COM, C#4.0
	- 允许不使用方法返回值的时候调用COM方法不使用ref关键字
	- 可选参数可以省略
	- 步骤
		* 添加com的reference
		* 调用方法
	- 例子
	添加COM引用
	...
	using microsoft.office.interop.word;
	...
	microsoft.office.interop.word.application app = new microsoft.office.interop.word.application();
	microsoft.office.interop.word._document doc = app.documents.add();
	object optional = Missing.value;
	doc.checkingSpelling(optional, true, false[, optional]);
	app.quit(false);
	





	
	
	
	
	
Clean Code, a handbook of agile software craftsmanship=Robert C;Note=Erxin


# Clean code 
- doctor clean their hands before do the surgery
- Bjarne Stroustrup 

I like my code to be elegant and efficient. The logic should be straightforward to make it hard for bugs to hide, the dependencies minimal to ease maintenance, error handling complete according to an articulated strategy, and performance close to optimal so as not to tempt people to make the code messy with unprincipled optimizations. Clean code does one thing well.

- Grady Booch, author of Object Oriented Analysis and Design with Applications 

Clean code is simple and direct. Clean code reads like well-written prose. Clean code never obscures the designer’s intent but rather is full of crisp abstractions and straightforward lines of control.

- Beck's rules of simple code 

• Runs all the tests;
• Contains no duplication;
• Expresses all the design ideas that are in the system;
• Minimizes the number of entities such as classes, methods, functions, and the like.

- These include the Single Responsibility Principle (SRP), the Open Closed Principle (OCP), and the Dependency Inversion Principle (DIP) among others. These principles are described in depth in PPP.

- SOLID principle 

http://en.wikipedia.org/wiki/Single_responsibility_principle
http://en.wikipedia.org/wiki/Open/closed_principle



# Meaningful names 
- make meaningful distinctions 
- use pronouceable names 
- use searchable names 
- avoid encoding 
- hungarian notation
phoneNumber

- member prefixes 

m_dsc = name;

- interface and implementations 

ShapeFactoryImp

IShapeFactory 

CShapeFactory

- method name according to the java bean standard 

http://java.sun.com/products/javabeans/docs/spec.html

- don't be cute 

- pick one word per concept, a consistent lexicon 

- use solution domain names 

- add meaningful context 

private void printGuessStatistics(char candidate, int count) {   String number;

   String verb;

   String pluralModifier;

   if (count == 0) {

     number = ”no”;

     verb = ”are”;

     pluralModifier = ”s”;

   } else if (count == 1) {

     number = ”1”;

     verb = ”is”;

     pluralModifier = ””;

   } else {

     number = Integer.toString(count);

     verb = ”are”;

     pluralModifier = ”s”;

   }

   String guessMessage = String.format(

     ”There %s %s %s%s”, verb, number, candidate, pluralModifier

   );

   print(guessMessage);

}
     
- don't add gratuitous context, Shorter names are generally better than longer ones, so long as they are clear. Add no more context to a name than is necessary.

The names accountAddress and customerAddress are fine names for instances of the class Address but could be poor names for classes. Address is a fine name for a class. 


# Functions
- refactor codes 

    + original 
    
```
   public static String testableHtml(

     PageData pageData,

     boolean includeSuiteSetup

   ) throws Exception {

     WikiPage wikiPage = pageData.getWikiPage();

     StringBuffer buffer = new StringBuffer();

     if (pageData.hasAttribute("Test")) {

       if (includeSuiteSetup) {

         WikiPage suiteSetup =

          PageCrawlerImpl.getInheritedPage(

                  SuiteResponder.SUITE_SETUP_NAME, wikiPage

          );

         if (suiteSetup != null) {

          WikiPagePath pagePath =

            suiteSetup.getPageCrawler().getFullPath(suiteSetup);

          String pagePathName = PathParser.render(pagePath);

          buffer.append("!include -setup .")

                .append(pagePathName)

                .append("\n");

         }

       }

       WikiPage setup = 

         PageCrawlerImpl.getInheritedPage("SetUp", wikiPage);

       if (setup != null) {

         WikiPagePath setupPath =

           wikiPage.getPageCrawler().getFullPath(setup);

         String setupPathName = PathParser.render(setupPath);

         buffer.append("!include -setup .")

               .append(setupPathName)

               .append("\n");

       }

     }

     buffer.append(pageData.getContent());

     if (pageData.hasAttribute("Test")) {

       WikiPage teardown = 

         PageCrawlerImpl.getInheritedPage("TearDown", wikiPage);

       if (teardown != null) {

         WikiPagePath tearDownPath =

           wikiPage.getPageCrawler().getFullPath(teardown);

         String tearDownPathName = PathParser.render(tearDownPath);

         buffer.append("\n")

               .append("!include -teardown .")

               .append(tearDownPathName)

               .append("\n");

       }

       if (includeSuiteSetup) {

         WikiPage suiteTeardown =

           PageCrawlerImpl.getInheritedPage(

                   SuiteResponder.SUITE_TEARDOWN_NAME,

                   wikiPage

           );

         if (suiteTeardown != null) {

           WikiPagePath pagePath =

             suiteTeardown.getPageCrawler().getFullPath (suiteTeardown);

           String pagePathName = PathParser.render(pagePath);

           buffer.append("!include -teardown .")

                 .append(pagePathName)

                 .append("\n");

         }

       }

     }

     pageData.setContent(buffer.toString());

     return pageData.getHtml();

  }
```
    
    + refactored
    
```
   public static String renderPageWithSetupsAndTeardowns(

     PageData pageData, boolean isSuite

   ) throws Exception {

     boolean isTestPage = pageData.hasAttribute("Test");

     if (isTestPage) {

       WikiPage testPage = pageData.getWikiPage();

       StringBuffer newPageContent = new StringBuffer();

       includeSetupPages(testPage, newPageContent, isSuite);

       newPageContent.append(pageData.getContent());

       includeTeardownPages(testPage, newPageContent, isSuite);

       pageData.setContent(newPageContent.toString());

     }

    

     return pageData.getHtml();

   }
```

- small function 
- blocks and intending 
- do one thing in each function 
- switch statements, we can make sure that each switch statement is buried in a low-level class and is never repeated. We do this, of course, with polymorphism.

```
   public Money calculatePay(Employee e) 

   throws InvalidEmployeeType {

       switch (e.type) {

         case COMMISSIONED:

           return calculateCommissionedPay(e);

         case HOURLY:

           return calculateHourlyPay(e);

         case SALARIED:

           return calculateSalariedPay(e);

         default:

           throw new InvalidEmployeeType(e.type);

       }

     }
```

-  function names, Use the same phrases, nouns, and verbs in the function names you choose for your modules. Consider, for example, the names includeSetup-AndTeardownPages, includeSetupPages, includeSuiteSetupPage, and includeSetupPage. The similar phraseology in those names allows the sequence to tell a story. 

- limit the number of function arguments 

- common monadic forms 

any monadic functions that don’t follow these forms, for example, void includeSetupPageInto(StringBuffer pageText). Using an output argument instead of a return value for a transformation is confusing. 

If a function is going to transform its input argument, the transformation should appear as the return value. Indeed, StringBuffer transform(StringBuffer in) is better than void transform(StringBuffer out)

- flag arguments 

Mousing over the call and seeing render(boolean isSuite) helps a little, but not that much. We should have split the function into two: renderForSuite() and renderForSingleTest().

- dyadic functions 

- function and arguments should be a very nice verb/noun pair. For example, write(name) is very evocative.

- have no side effects, side effects. Your function promises to do one thing, but it also does other hidden things.

- output arguments

public void appendFooter(StringBuffer report)

a better way is 

report.appendFooter();

- command query separation

Either your function should change the state of an object, or it should return some information about that object. Doing both often leads to confusion.
 
- prefer exceptions to returning error codes 

    + original 

   if (deletePage(page) == E_OK) {

     if (registry.deleteReference(page.name) == E_OK) {

       if (configKeys.deleteKey(page.name.makeKey()) == E_OK){

         logger.log("page deleted");

       } else {

         logger.log("configKey not deleted");

       }

     } else {

       logger.log("deleteReference from registry failed");

     }

   } else {

     logger.log("delete failed");

     return E_ERROR;

   }
   
   + refactor
   
   try {

     deletePage(page);

     registry.deleteReference(page.name);

     configKeys.deleteKey(page.name.makeKey());

   }

   catch (Exception e) {

     logger.log(e.getMessage());

   }
   
- Error handling is one thing. Thus, a function that handles errors should do nothing else. 

- structured programming, tell the story


# Comments 
- in many cases, it’s simply a matter of creating a function that says the same thing as the comment you want to write
- good comments 
    + legal comments 
    
    + information 
    
   // format matched kk:mm:ss EEE, MMM dd, yyyy

   Pattern timeMatcher = Pattern.compile(

     “\\d*:\\d*:\\d* \\w*, \\w* \\d*, \\d*”);

    + clarification 
    
    + warning of consequences 
    
    + todo comments, Nowadays, most good IDEs provide special gestures and features to locate all the TODO comments, so it’s not likely that they will get lost. 
    
    + amplification, amplify the importance of something 
    
- bad comments 

    + mumbling, Plopping in a comment just because you feel you should or because the process requires it, is a hack.
    
    + redundant comments 
    
    /**

    * The lifecycle event support for this component.

    */

    protected LifecycleSupport lifecycle = 

    new LifecycleSupport(this);

    + misleading comments 
    
    + mandated comments,  required javadocs for every function lead to abominations

    + joural comemnts, list every changes etc.
    
    + noise comments 

    + position markers 
    
    + closing brace comments 
    
    + commented-out code 
    
    + html comments 
    
    + nonlocal information, make sure it describes the code it appears near. Don’t offer systemwide information
    
    + too much information 
    
    + inobvious connection 
    
    + function headers 
    
    + javadocs in nonpublic code 
    
    
# Formatting
- vertical density, blank lines 
- horizontal formatting, the linear appearance of the drop-off above 80 characters is really very significant. Programmers clearly prefer short lines
    
- horizontal alignment

I still am an assembly language programmer. You can take the boy away from the metal, but you can’t take the metal out of the boy!

this kind of alignment is not useful. The alignment seems to emphasize the wrong things and leads my eye away from the true intent.

- dummy scopes 

   while (dis.read(buf, 0, readBufferSize) != -1)     ;

- team rules 


# Objects and data structures 
- fundamental dichotomy between objects and data structures:Procedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. OO code, on the other hand, makes it easy to add new classes without changing existing functions.

- Procedural code makes it hard to add new data structures because all the functions must change. OO code makes it hard to add new functions because all the classes must change.

- the law of demeter, a method f of a class C should only call methods of these
    1. C 
    2. an object created by f 
    3. an object passed as an argument to f
    4. an object held in an instance varaible of C 
    
    talk to friends not to strangers 
    
- data/object anit-symmetry, Objects hide their data behind abstractions and expose functions that operate on that data. Data structure expose their data and have no meaningful functions

- Train wreck, This kind of code is often called a train wreck because it look like a bunch of coupled train cars.

final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();

it is not suggested to cross different return types 

- DTO, data transfer objects. 

Active Records are special forms of DTOs. They are data structures with public


# Error handling 
- throw exceptions in methods that can detect errors.

 public class DeviceController {

     …

     

     public void sendShutDown() {

       try {

         tryToShutDown();

       } catch (DeviceShutDownError e) {

         logger.log(e);

       }

   }

    private void tryToShutDown() throws DeviceShutDownError {

      DeviceHandle handle = getHandle(DEV1);

      DeviceRecord record = retrieveDeviceRecord(handle);



      pauseDevice(handle);

      clearDeviceWorkQueue(handle);

      closeDevice(handle);

   }
   
   ...

}

- use unchecked exceptions 

Checked exceptions can sometimes be useful if you are writing a critical library: You must catch them. But in general application development the dependency costs outweigh the benefits.

- provide context with exceptions, a simple wrapper that catches and translates exceptions thrown by the ACMEPort class:

public class LocalPort {

     private ACMEPort innerPort;



     public LocalPort(int portNumber) {

       innerPort = new ACMEPort(portNumber);

     }



     public void open() {

       try {

         innerPort.open();

       } catch (DeviceResponseException e) {

         throw new PortDeviceFailure(e);

       } catch (ATM1212UnlockedException e) {

         throw new PortDeviceFailure(e);

       } catch (GMXError e) {

         throw new PortDeviceFailure(e);

       }

     }

     …
}

- define the normal flow with abstract implementations

- don't return null, null pattern

- Returning null from methods is bad, but passing null into methods is worse


# Boundaries 
- using thrid party code, encapsulate that knowledge into our own class so that the rest of our application is isolated from the third party boundary

- using code that does not yet exist 


# Unit test
- TDD, http://doi.ieeecomputersociety.org/10.1109/MS.2007.85

- keep your test clean

http://fitnesse.org/FitNesse.AcceptanceTestPatterns

http://fitnesse.org/FrontPage

acceptance test patterns 

- one assert per test, test one thing

- create domain specific language to test application 

- single concept per test 

- F.I.R.S.T, object mentor training materials 

fast, tests should be fast 

independent, tests should not depend on each other 

repeatable, tests should be repeatable in any environment 

self-validating, the tests should have a boolean output 

timely, the tests need to be written in a timely fashion 

- your tests rot, then your code rot too


# Classes
- class orgnization 

a class should begin with a list of variables. Public static constants, if any, should come first. Then private static variables, followed by private instance variables. 

seldom a good reason to have a public variable 

public functions should follow the list of variables 

- encapsulation 

- classes should be small, we count responsibilities 

    + don't create god class 
    
    + single responsibility principle, SRP 
    
    + we can abstract the version relative functions into a Version class 

   public class Version {

       public int getMajorVersionNumber()

       public int getMinorVersionNumber()

       public int getBuildNumber()

   }
   
   + First, the refactored program uses longer, more descriptive variable names. Second, the refactored program uses function and class declarations as a way to add commentary to the code. Third, we used whitespace and formatting techniques to keep the program readable

- organizing for change 

- Dependency Inversion Principle (DIP).5 In essence, the DIP says that our classes should depend upon abstractions, not on concrete details.


# Systems
- separate constructing a system from using it 

builder 

IoC
```
MyService myService = (MyService)(jndiContext.lookup(“NameOfMyService”));
```

- java proxies 

- optimize decision making, We often forget that it is also best to postpone decisions until the last possible moment. 

- reference 
 
inversion of control containers and the dependency injection pattern 

https://martinfowler.com/articles/injection.html


# Emergence 
- simple design rule, runs all the tests 
- no duplication 
- Choose better names, split large functions into smaller functions, and generally just take care of what you’ve created

- we might create too many tiny classes and methods. So this rule suggests that we also keep our function and class counts low.


# Concurrency
- myths and misconceptions 
    + concurrency always improves performance 
    
    + design does not change when writing concurrent programs 
    
    + understanding concurrency issues is not important when working with a container such as a web or EJB container 
    
    we should better know our container 
    
    + concurrency incurs some overhead, both in performance as well as writing additional code 
    
    + correct concurrency is complex, even for simple problems 
    
    + concurrent defects aren't usually repeatable 
    
    + concurrent often requries a fundamental change in design strategy 
    
- concurrency defense principles 

    + single responsibility principle 
    
    + limit the scope of data 
    
    + use copies of data 
    
    + threads should be as independent as possible 
    
    + thread-safe collections 
    
- know your execution models 
boudn resources 
mutual exclusion 
starvation 
deadlock 
livelock 

- producer-consumer 
http://en.wikipedia.org/wiki/Producer-consumer

- readers-writers 
http://en.wikipedia.org/wiki/Readers-writers_problem

- dining philosophers 
http://en.wikipedia.org/wiki/Dining_philosophers_problem



- beware dependencies between synchronized methods 

client-based locking 

server-based locking 

adapted server 

- recommendations 

• Treat spurious failures as candidate threading issues.

• Get your nonthreaded code working first.

• Make your threaded code pluggable.

• Make your threaded code tunable.

• Run with more threads than processors.

• Run on different platforms.

• Instrument your code to try and force failures.

• One thread, several threads, varied as it executes

• Threaded code interacts with something that can be both real or a test double.

• Execute with test doubles that run quickly, slowly, variable.

• Configure tests so they can run for a number of iterations.

- run on different platforms 

- automated, java, Aspect-Oriented Framework, CGLIB, or ASM to programmatically instrument your code. 


# Successive refinement
- To write clean code, you must first write dirty code and then clean it.


# JUnit Internals 
- the junit framework 


# Refactoring serial date
- JCommon library, org.jfree.date, SerialDate


# Smells and heuristics 
- comments 

inappropriate information 

obsolete comment 

redundent comment 

poorly written comment 

commented-out code 

- environment 

build requires more than one step 

tests require more than one step 

- functions 

too many arguments 

output arguments 

flag arguments 

dead function 

- general 

multiple languages in one source file 

obvious behavior is unimplemented 

incorrect behavior at the boundaries 

overridden safeties, Exerting manual control over serialVersionUID may be necessary, but it is always risky. Turning off certain compiler warnings (or all warnings!) may help you get the build to succeed, but at the risk of endless debugging sessions.

duplication

cod at wrong level of abstraction 

base classes depending on their derivatives 

too much information 

dead code 

veritical separation 

inconsistency, name etc

clutter 

artificial coupling 

feature envy, The methods of a class should be interested in the variables and functions of the class they belong to, and not the variables and functions of other classes

obscured intent 

misplaced responsibility 

- inappropriate static, In general you should prefer nonstatic methods to static methods. static method is not support polymorphic 

- use explanatory variables 

- function name should say what they do 

make logical dependencies physical 

- prefer polymorphism to if/else or switch/case 

- follow standard conventions 

- replace magic numbers with named constants 

- be precise 

- structure over convention 

- encapsulate conditionals 

- avoid negative conditionals 

- functions should do one thing 

- hidden temporal coupling 

This exposes the temporal coupling by creating a bucket brigade. Each function produces a result that the next function needs, so there is no reasonable way to call them out of order

these kinds of functions are needed by private methods in the class. Make temporal coupling explicit 

- don't be arbitrary 

- encapsulate boundary conditions 

- functions should descend only one level abstraction 

- keep configurable data at high levels 

- avoid transitive navigation 

we don’t want modules that use A to know about C. (For example, we don’t want a.getB().getC().doSomething();.)

- avoid long import lists 

- don't inherit constants, use static 

- enums are more powerful than constants 

- names 

choose descriptive names 

choose names at the appropriate level of abstraction 

use standard nomenclature where possible 

unambiguous names 

use long names for long scopes 

avoid encoding 

names should describe side-effects 

- tests 

insufficient tests 

use a coverage tool

don't skip trivial tests 

an ignored test is a question about an ambiguity 

test boundary conditions 

exhaustively test near bugs 

patterns of failure are revealing 

tests should be fast




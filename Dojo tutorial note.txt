Dojo tutorial; Note = Erxin

## introduce
- doc creater
- dojo src svn

## first demo
- load dojo from google server
<script src="//ajax.googleapis.com/ajax/libs/dojo/1.8.3/dojo/dojo.js" data-dojo-config="async: true"></script>
	* The missing protocal means the src will use the default protocal
	* data-dojo-config, is a configuration option in html5 to set the dojo work at asynchronus model
	* the CDN dojo src is a build verion, is hard to debug and add custom module
	* load dojo from cdn and support load local module by set config
	var dojoConfig = {
        async: true,
        // This code registers the correct location of the "demo"
        // package so we can load Dojo from the CDN whilst still
        // being able to load local modules
        packages: [{
            name: "demo",
            location: location.pathname.replace(/\/[^/]*$/, '')
        }]
    };
- defining and requiring modules,  module identifier (MID).
	* ex. "my/module/id" will cause the loader to load whatever module is defined in my/module/id.js. 
	* require(), use to load modules
	* define(), which is used to define a module.
	* Both of these  two functions usually take two arguments: a list of MIDs that must be loaded, and a callback function that is executed once those dependencies are available.
	* ex. in a custom .js file, this code will create a custom module with the js file name and then could be load from other dojo module by require
	define(["require_module_name0, name1, ..."], call_back);
	* ex. 
	require(["demo/dojoModule|customModule"], call_back	});
- dom ready, Dojo provides the dojo/domReady plugin. Simply include this plugin as a dependency in any require or define call and the callback will not be fired until the DOM is ready:
ex.
require(["dojo/dom", "dojo/domReady!"], call_back);
- add visual effect, One module we can load to add effects to the page is dojo/fx
ex.
require(["dojo/dom", "dojo/fx", "dojo/domReady!"], function(dom, fx){
    // The piece we had before...
    var greeting = dom.byId("greeting");
    greeting.innerHTML += " from Dojo!";
 
    // ...but now, with an animation!
    fx.slideTo({
        top: 100,
        left: 200,
        node: greeting
    }).play();
});
or use this syntax
require(["dojo/dom"], function(){
  // some code
  var dom = require("dojo/dom");
  // some more code
});
the callback function argument will have the same order of request modules
- get help
 dojo-interest mailing list , commercial Dojo support and training workshops
 
 ## set dojo config
 - ex.
     dojoConfig= {
        has: {
            "dojo-firebug": true
        },
        parseOnLoad: false,
        foo: "bar",
        async: true
    };
	equal to 
	<script src="//ajax.googleapis.com/ajax/libs/dojo/1.8.3/dojo/dojo.js"
        data-dojo-config="has:{'dojo-firebug': true}, parseOnLoad: false, foo: 'bar', async: 1">
	</script>
	 a custom property has been specified: foo: "bar".
	 that dojoConfig is defined in a script block before dojo.js is loaded. 
- distinction between dojoConfig and dojo/_base/config.
	* dojoConfig is purely for input purposes
	* dojo/_base/config is populated from these parameters for later lookup by module code. 
- dojo config option
	* has() Configuration, for feature detection,  determining certain supported capabilities in Dojo.
	* ex. 
	dojoConfig = {
        has: {
            "dojo-amd-factory-scan": false
     }
	disable the amd factory scan (scanning the module for CommonJS require(module) statements to load as deps) with:
- don't access the global namespace directly from js, such as
	If you find yourself typing dojo.* or dijit.* or dojox.*, something isn't right.
- use dojo/domReady and using dojo/ready when using things like the dojo/parser and Dijits is wise.
-  dojoConfig options is async. It defaults to false 
- aspect oriented programming (AOP)	
- event and advice
only using dojo/on, you can specify your code, both programatically and declaratively
	ex.
	 require(["dojo/dom", "dojo/on", "dojo/parser", "dojo/ready", "dijit/registry", "dijit/form/Button"], function(dom, on, parser, ready, registry){ 
		 var myClick = function(evt){ console.log("I was clicked"); }; 
		 ready(function(){ parser.parse(); 
		 on(dom.byId("button1"), "click", myClick); 
		 on(registry.byId("button2"), "click", myClick); }); 
	 });
	 or as
	 <button id="button3" data-dojo-type="dijit/form/Button" type="button">
      <div>Button4</div>
      <script type="dojo/on" data-dojo-event="click">
        console.log("I was clicked");
      </script>
    </button>
-  the dijit/registry is used for widgets and registry.byId() retrieves a reference to the widget
- get advice from a method and add behaviour "before", "after" or "around" another method.
require(["dojo/aspect"], function(aspect){
  var callback = function(){
    // ...
  };
  var handle = aspect.after(myInstance, "execute", callback);
  // ...
  handle.remove();
});
- topics, the "publish/subscribe" functionality in Dojo.
require(["dojo/topic"], function(topic){
  // To publish a topic
  topic.publish("some/topic", 1, 2, 3);
 
  // To subscribe to a topic
  var handle = topic.subscribe("some/topic", function(arg1, arg2, arg3){
    // ...
  });
 
  // To unsubscribe from a topic
  handle.remove();
});
how the publish arguments are not an array anymore and are simply passed on the publish.
- One of the core concepts of Dojo has always been the Deferred class,
require(["dojo/Deferred"], function(Deferred){
  function createMyDeferred(){
    var myDeferred = new Deferred();
    setTimeout(function(){
      myDeferred.resolve({ success: true });
    }, 1000);
    return myDeferred;
  }
  var deferred = createMyDeferred();
  deferred.then(function(data){
    console.log("Success: ", data);
  }, function(err){
    console.log("Error: ", err);
  });
});
- dojo module description
	+ dojo/dom	Core DOM functions	
	byId()
	isDescendant()
	setSelectable()
	+ dojo/dom-attr	DOM attribute functions	
	has()
	get()
	set()
	remove()
	getNodeProp()
	+ dojo/dom-class	DOM class functions	
	contains()
	add()
	remove()
	replace()
	toggle()
	+ dojo/dom-construct	DOM construction functions	
	toDom()
	place()
	create()
	empty()
	destroy()
	+ dojo/dom-form	Form handling functions	
	fieldToObject()
	toObject()
	toQuery()
	toJson()
	+ dojo/io-query	String processing functions	
	objectToQuery()
	queryToObject()
	+ dojo/dom-geometry	DOM geometry related functions	
	position()
	getMarginBox()
	setMarginBox()
	getContentBox()
	setContentSize()
	getPadExtents()
	getBorderExtents()
	getPadBorderExtents()
	getMarginExtents()
	isBodyLtr()
	docScroll()
	fixIeBiDiScrollLeft()
	+ dojo/dom-prop	DOM property functions	
	get()
	set()
	+ dojo/dom-style	DOM style functions
	getComputedStyle()
	get()
	set()
- developing with dijits or other widgets, then there were a few core concepts that were introduced with the dojo/Stateful and dojo/Evented classes
require(["dijit/form/Button", "dojo/domReady!"], function(Button){
  var button = new Button({
    label: "A label"
  }, "someNode");
  // Sets up a watch on button.label
  var handle = button.watch("label", function(attr, oldValue, newValue){
    console.log("button." + attr + " changed from '" + oldValue + "' to '" + newValue + "'");
  });
  // Gets the current label
  var label = button.get("label");
  console.log("button's current label: " + label);
  // This changes the value and should call the watch
  button.set("label", "A different label");
  // This will stop watching button.label
  handle.unwatch();
}
- dojo/Evented provides emit() and on() functionality for classes
require(["dijit/form/Button", "dojo/domReady!"], function(Button){
  var button = new Button({
    label: "Click Me!"
  }, "someNode");
 
  // Sets the event handling for the button
  button.on("click", function(e){
    console.log("I was clicked!", e);
  });
});
- dojo/parser handling the interpretation of the declarative markup and converting that into instantiated objects and widgets.
require(["dojo/parser", "dojo/ready"], function(parser, ready){
  ready(function(){
    parser.parse();
  });
});
- the parser is that it supports HTML5 compliant attributes to markup the nodes. This allows your marked-up HTML to be valid in HTML5. In particular dojoType changes to data-dojo-type and instead of specifying object parameters as non-valid HTML/XHTML attributes
<button data-dojo-type="dijit/form/Button" tabIndex=2
    data-dojo-props="iconClass: 'checkmark'">OK</button>
Dojo supports using the Module ID (MID) in data-dojo-type. For example dojoType="dijit.form.Button" becomes data-dojo-type="dijit/form/Button".
-  with the declarative scripting and added appropriate script types to replicate the "watch" and "on" functionality.
<button data-dojo-type="dijit/form/Button" type="button">
  <span>Click</span>
  <script type="dojo/on" data-dojo-event="click" data-dojo-args="e">
    console.log("I was clicked!", e);
    this.set("label", "Clicked!");
  </script>
  <script type="dojo/watch" data-dojo-prop="label" data-dojo-args="prop, oldValue, newValue">
    console.log("button: " + prop + " changed from '" + oldValue + "' to '" + newValue + "'");
  </script>
</button>
The dojo/parser also supports auto-requring in modules.  If you set isDebug to true though, it will warn you if you are requiring modules this way.
-  Moden dojo description
    Granular Dependencies and Modular — only require what you need when you need it. Say goodbye to the "kitchen sink". It makes for faster/smarter/safer apps.
    Asynchronous — things do not necessarily happen in order, plan for code to operate asynchronously.
    Global Scope is Bad — one more time, repeat after me, "I will not use the global scope."
    Discrete Accessors — a function only does one thing, especially when it comes to accessors. There is a get() and a set() for what you want to do.
    Dojo complements ES5 — if EcmaScript 5 does something (and it is "shimmable") then Dojo doesn't want to do it.
    Events and Advice, not Connections — Dojo is migrating away from "generic" connections to focus on events and aspect oriented programming.
    The Builder is a Different Beast — it is much stronger, more powerful and feature rich, but it will only go to highlight bad design assumptions in "legacy" applications, not fix them.

  
  
  
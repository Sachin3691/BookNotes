C++标准程序库=侯捷;Note=eshang

>新语言特性, 1998
    - template, 将类型当做参数传递
    template<class T>
    inline const T& max(const T&a, const T& b)
    {...};
        * 可以具有缺省参数
        template <class T, class container = vector<T>>
        class MyClass
        {...}
        * 非类型参数模板, 类型不同值时不同的, 即使其类型可以相互抓换也认为是不同的
        bitset<32> flags32;
        bitset<50> falgs50;
    - 基本类型的显示初始化
    int i = int();
    - 异常处理
        * 支持自定义异常, 异常可以int, string, template类等
        class Error;
        ...
        throw Error();
        * 可以为函数定义异常规格来说明可能抛出的异常, 如果为空则表示不会抛出异常
        return_type functionName(parameters) throw([exception_type]);
    - 命名空间, namespace, 是开放的, 可以在不同的文件中定义命名空间
        * 定义
        namespace
        {
            class myClass{};
            class myClass1{};
            ...
            define_function;
        }
        * 使用
        namespace_name::element;
        namespace_name::someClassName obj;
        * 省略引用
        using namespace_name::element;
        using namespace namespace_name; // 引用整个命名空间
    - bool, 定义两个常数, true, false, 提供整数到bool的自动转换, 0为false, 非零为true
    - explicit, 关键字可以禁止单参数构造函数被用于自动类型转换, 必须使用强制转换, 防止某些构造函数被C++编译器自动调用用于类型转换引起错误
    class Stack
    {
        explicit Stack(int size);
        ...
    }
    Stack s;
    s = 40; //假如没有explicit, 则一个新的40个元素的stack对象就会分配给s, 有则会抛出错误
    - 新类型转换操作符, 4个新的操作符
        * static_cast, 将一个值以符合逻辑的方式转型, 用原值重建一个临时对象, 只有定义了类型间的转换才会成功
        float x;
        cout << static_cast<int>(x); //print x as int
        * dynamic_cast, 在执行期进行检测的转换类型, 将多太类型向下转型
        * const_cast, 设定或去除型别的常数性或volatile修饰
        * reinterpret_cast, 由编译器定义, 通常带来不可移植性
    - 常数静态成员, 这个值则可用于class之中, 而且要在文档级声明这个成员
    const int MyClass::num;
    class MyClass
    {
        static const int num = 100;
    };
    - main的定义
        * int main()
        * int main(int argc, char* argv[])
          也可以是char **argv[]
    - Big-O, 将一个算法的运行时间以输入量n的函数表示, 忽略常数因子
    
:一般概念
DomainModelTooling
DomainModelTooling
    
    
    
    
    
    
    
    
    
Visual Basic Official Document;Note=Erxin

# Visual Basic 
- 64-bit VB for application overview 

VBA code that was written before the Office 2010 release (VBA version 6 and earlier) on a 64-bit platform can result in errors if the code is not modified to run in 64-bit versions of Office.

LongPtr. VBA now includes the variable type alias LongPtr.

LongLong. The LongLong data type is a signed 64-bit integer 

PtrSafe. The PtrSafe keyword asserts that a Declare statement is safe to run in 64-bit versions of Office

    + 32bit return 
Declare PtrSafe Function GetActiveWindow Lib "user32" () As Long


    + 64bit return 
    
Declare PtrSafe Function GetActiveWindow Lib "user32" () As LongPtr

- for all platform 

you only need to use the new LongPtr type alias instead of Long or LongLong for all pointers

- reference 
https://docs.microsoft.com/en-us/office/vba/language/concepts/getting-started/64-bit-visual-basic-for-applications-overview


# Avoiding naming conflicts 
- procedures in separate modules can have the same name. 


# Calling procedures with same name 
- specify a module name 
Sub Main()
    ModuleName.MyProcedure
End Sub 

- call with project name 
Sub Main() 
    [MyProject.vbp].[MyModule].Main 
End Sub


# Calling property procedures 
- Property let  	[ object.] propname (arguments)] = argument
- Property Get  	varname = [ object.] propname (arguments)]
- Property Set      Set [ object.] propname. [ (arguments) ] = varname


# Calling sub and function procedures 
- Call sub 
Sub Main() 
 MultiBeep 56 
 Message 
End Sub 
 
Sub MultiBeep(numbeeps) 
 For counter = 1 To numbeeps 
 Beep 
 Next counter 
End Sub 
 
Sub Message() 
 MsgBox "Time to take a break!" 
End Sub

- The Call statement is not required, but if you use it, you must enclose any arguments in parentheses.
Sub Main() 
 HouseCalc 99800, 43100 
 Call HouseCalc(380950, 49500) 
End Sub 
 
Sub HouseCalc(price As Single, wage As Single) 
End Sub 

- Add parentheses for the function will return value 
Answer3 = MsgBox("Are you happy with your salary?", 4, "Question 3") 

- pass named arguments 

MsgBox Title:="Task Box", Prompt:="Task Completed!" 

answer3 = MsgBox(Title:="Question 3", _ 
Prompt:="Are you happy with your salary?", Buttons:=4) 


# Compiler constants 
- defines constants for exclusive use with #if...then...#else directive 

#If Win64 Then 
' Win64=true, Win32=true, Win16= false 
#ElseIf Win32 Then 
' Win32=true, Win16=false 
#Else 
' Win16=true 
#End If

Win32 returns True in both 32-bit and 64-bit development environment 

- 32-bit plaform 
Constant 	Value 	Indicates that the development environment...
Vba6 	True 	Is Visual Basic for Applications, version 6.0 compatible.
Vba6 	False 	Is not Visual Basic for Applications, version 6.0 compatible.
Vba7 	True 	Is Visual Basic for Applications, version 7.0 compatible.
Vba7 	False 	Is not Visual Basic for Applications, version 7.0 compatible.
Win16 	False 	Is not 16-bit compatible.
Win32 	True 	Is 32-bit compatible.
Win64 	False 	Is not 64-bit compatible.
Mac 	True 	Is Macintosh.
Mac 	False 	Is not Macintosh.

- 64-bit platform 
Constant 	Value 	Indicates that the development environment...
Vba6 	True 	Is Visual Basic for Applications, version 6.0 compatible.
Vba6 	False 	Is not Visual Basic for Applications, version 6.0 compatible.
Vba7 	True 	Is Visual Basic for Applications, version 7.0 compatible.
Vba7 	False 	Is not Visual Basic for Applications, version 7.0 compatible.
Win16 	False 	Is not 16-bit compatible.
Win32 	True 	Is 32-bit compatible.
Win64 	True 	Is 64-bit compatible.
Mac 	True 	Is Macintosh.
Mac 	False 	Is not Macintosh.


# Creating object variables 
- using declaration statement like Dim, Public, Private, Static to declare an object variable. A variable referers to an object must be a variant. 

' Declare MyObject as Variant data type. 
Dim MyObject 
' Declare MyObject as Object data type. 
Dim MyObject As Object 
' Declare MyObject as Font type. 
Dim MyObject As Font 

- assign an object variable to an object 

Set MyObject = New 1YourObject ' Assign object reference. 
Set MyObject = Nothing ' Discontinue association. 

-  An object variable is always set to Nothing after closing the associated object

If Not MyObject Is Nothing Then 
 ' Variable refers to valid object. 
 . . . 
End If 

- Use the Me keyword to refer to the current instance of the object 
Sub ChangeObjectColor(MyObjectName As Object) 
 MyObjectName.BackColor = RGB(Rnd * 256, Rnd * 256, Rnd * 256) 
End Sub

ChangeObjectColor Me 


# Declare arrays
- fixed array 
Dim MyArray(10, 10) As Integer 

Option Base { 0 | 1 } ' set default array subscript to 1 or 0

by default the array indexes begin at zero 

- other definitions 
' Integer array uses 22 bytes (11 elements * 2 bytes). 
ReDim MyIntegerArray(10) As Integer 
 
' Double-precision array uses 88 bytes (11 elements * 8 bytes). 
ReDim MyDoubleArray(10) As Double 

ReDim statement to declare an array implicitly within a procedure. 
- declare a dynamic array 
Dim sngArray() As Single 

- In a procedure within the array's scope, use the ReDim statement to change the number of dimensions, to define the number of elements, and to define the upper and lower bounds for each dimension. You can use the ReDim statement to change the dynamic array as often as necessary.

ReDim Preserve varArray(UBound(varArray) + 10) 


# declare constants 
-  Const statement to declare a constant and set its value. Module-level constants are private by default.

Public Const conAge As Integer = 34

Const conAge As Integer = 34, conWage As Currency = 35000


# Declare variables 
-  Dim statement. A declaration statement can be placed within a procedure to create a procedure-level variable. Or it may be placed at the top of a module, in the Declarations section, to create a module-level variable.

Dim strName As String 
Dim intX, intY, intZ As Integer 

'Module level private 
Private MyName As String 

- Static statement instead of a Dim statement to declare a variable in a procedure, the declared variable will retain its value between calls to that procedure.

- Option Explicit statement, a compile-time error will occur when Visual Basic encounters a variable name that has not been previously declared

- Dim frmOrders As New Access.Form 

- object library files, (.olb), Object library files (.olb) contain type libraries


# Executing code when setting properties 
-  Property Let statement allows you to create a procedure that sets the value of the property. One example might be a Property procedure that creates an inverted property for a bitmap on a form

- call the Property Let procedure.
Form1.Inverted = True 

Private IsInverted As Boolean 
 
Property Let Inverted(X As Boolean) 
 IsInverted = X 
 If IsInverted Then 
 â€¦ 
 (statements) 
 Else 
 (statements) 
 End If 
End Property 

Property Get Inverted() As Boolean 
 Inverted = IsInverted 
End Property 


# Looping through code 
- Another useful control structure, the With statement, lets you run a series of statements without having to requalify an object.


- conditional statement
    If...Then...Else: Branching when a condition is True or False
    Select Case: Selecting a branch from a set of conditions

- loop 

    + Do...Loop: Looping while or until a condition is True
    + For...Next: Using a counter to run statements a specified number of times
    
Dim CountSlower As Variant    ' Second case, use Variant. 
For CountSlower = 0 to 32766 
Next CountSlower 

    
    + For Each...Next: Repeating a group of statements for each object in a collection

- With: Running a series of statements on the same object


# Pass arguments efficiently
- All arguments are passed to procedures by reference, unless you specify otherwise.
- pass an argument by value if you include the ByVal keyword in the procedure's declaration. 
Function Factorial (ByVal MyVar As Integer) ' Function declaration. 
 MyVar = MyVar - 1 
 If MyVar = 0 Then 
 Factorial = 1 
 Exit Function 
 End If 
 Factorial = Factorial(MyVar) * (MyVar + 1) 
End Function 


# Returing strings from functions 
- The following functions return values in a String variable when you append a dollar sign ($) to the function name. These functions have the same usage and syntax as their Variant equivalents without the dollar sign.

Chr$ 	    ChrB$ 	    *Command$
CurDir$ 	Date$ 	    Dir$
Error$ 	    Format$ 	Hex$
Input$ 	    InputB$ 	LCase$
Left$ 	    LeftB$ 	    LTrim$
Mid$ 	    MidB$ 	    Oct$
Right$ 	    RightB$ 	RTrim$
Space$ 	    Str$ 	    String$
Time$ 	    Trim$ 	    UCase$


# Understanding automation 
- Automation (formerly OLE Automation) is a feature of the Component Object Model (COM), an industry-standard technology that applications use to expose their objects to development tools

MyObj.Insert "Hello, world." ' Place text. 
MyObj.Bold = True ' Format text. 
If Mac = True ' Check your platform constant 
 MyObj.SaveAs "HD:\WORDPROC\DOCS\TESTOBJ.DOC" ' Save the object (Macintosh). 
Else 
 MyObj.SaveAs "C:\WORDPROC\DOCS\TESTOBJ.DOC" ' Save the object (Windows). 

- Use these two functions to access automation object 

CreateObject 	Creates a new object of a specified type.
GetObject 	Retrieves an object from a file.

- object library, .olb extension that provides information to Automation controllers (like Visual Basic) about available objects. You can use the Object Browser to examine the contents of an object library


# Understanding conditional compilation 
- declare a conditional compiler constant in code with #Const directive 

' Declare public compilation constant in Declarations section. 
#Const conDebug = 1 
 
Sub SelectiveExecution() 
 #If conDebug = 1 Then 
 . ' Run code with debugging statements. 
 . 
 . 
 #Else 
 . ' Run normal code. 
 . 
 . 
 #End If 
End Sub


# Named arguments and optional arguments 
- optional and default 
Sub OptionalArgs(strState As String, Optional strCountry As String = "USA") 
. . . 
End Sub

- pass positional or named argument to sub or procedure 
Sub PassArgs(strName As String, intAge As Integer, dteBirth As Date) 
 Debug.Print strName, intAge, dteBirth 
End Sub

PassArgs intAge:=29, dteBirth:=#2/21/69#, strName:="Mary" 


# Understanding objects, methods, properties and events
- object collections 

In Microsoft Excel, for example, the Workbooks object contains all the open Workbook objects. In Visual Basic, the Forms collection contains all the Form objects in an application.

Sub CloseForm() 
 Forms("MyForm.frm").Close 
End Sub

Sub CloseAll() 
 Forms.Close 
End Sub

    + method, A method is an action that an object can perform. 
    + property, A property is an attribute of an object that defines one of the object's characteristics
    + An event is an action recognized by an object
    
    
# Understanding parameter arrays 
- A parameter array can be used to pass an array of arguments to a procedure. You don't have to know the number of elements in the array when you define the procedure

 use the ParamArray keyword to denote a parameter array. 
 
Sub AnyNumberArgs(strName As String, ParamArray intScores() As Variant) 
    Dim intI As Integer 

    Debug.Print strName; " Scores" 
    ' Use UBound function to determine upper limit of array. 
    For intI = 0 To UBound(intScores()) 
    Debug.Print " "; intScores(intI) 
    Next intI 
End Sub


AnyNumberArgs "Jamie", 10, 26, 32, 15, 22, 24, 16 
 
AnyNumberArgs "Kelly", "High", "Low", "Average", "High" 


# Understanding scope and visibility 
- procedure-level, private module-level, and public module-level.

    + A variable or constant defined within a procedure is not visible outside that procedure. 
Sub LocalVariable() 
 Dim strMsg As String 
 strMsg = "This variable can't be used outside this procedure." 
 MsgBox strMsg 
End Sub 
 
Sub OutsideScope() 
 MsgBox strMsg 
End Sub

    + module-level variables and constants in the Declarations section of a module. Module-level variables can be either public or private.
' Add following to Declarations section of module. 
Private strMsg As String 
 
Sub InitializePrivateVariable() 
 strMsg = "This variable can't be used outside this module." 
End Sub 
 
Sub UsePrivateVariable() 
 MsgBox strMsg 
End Sub

    + If you declare a module-level variable as public, it's available to all procedures in the project. 
' Include in Declarations section of module. 
Public strMsg As String 

You can use these variables from referencing projects. you must first set a reference to the project in which they are defined.

- understanding the lifetime of variables 

A numeric variable is initialized to zero, 
a variable-length string is initialized to a zero-length string (""),
and a fixed-length string is filled with the character represented by the ASCII character code 0, or Chr( 0 ). 
Variant variables are initialized to Empty. 
Each element of a user-defined type variable is initialized as if it were a separate variable.
declare an object variable, space is reserved in memory, but its value is set to Nothing
A procedure-level variable declared with the Dim statement retains a value until the procedure is finished running. 
If you include the Static keyword before a Sub or Function statement, the values of all the procedure-level variables in the procedure are preserved between calls.

- Variants, data type is automatically specifieid

Variant data type can contain string, date, time, Boolean, or numeric values, and can convert the values that they contain automatically. Numeric Variant values require 16 bytes of memory 

String Variant values require 22 bytes of memory.


# Understanding visual basic syntax 
- In the Activate method syntax, the italic word "object" is a placeholder for information you supply
Sub MakeActive() 
    Windows(2).Activate 
End Sub

- option compare statement. In the Option Compare statement syntax, the braces and vertical bar indicate a mandatory choice between three items.

- Dim statement syntax, the word Dim is a required keyword. The only required element is varname (the variable name).

- array 
Option Base 1 
Dim curExpense(365) As Currency 

Dim varData(3) As Variant 
varData(0) = "Claudia Bendel" 
varData(1) = "4242 Maple Blvd" 
varData(2) = 38 
varData(3) = Format("06-09-1952", "General Date") 

- multiple dimension 

Dim sngMulti(1 To 5, 1 To 10) As Single 

Dim sngMulti(1 To 5, 1 To 10) As Single 

Dim intI As Integer, intJ As Integer 
Dim sngMulti(1 To 5, 1 To 10) As Single 

' Fill array with values. 
For intI = 1 To 5 
For intJ = 1 To 10 
sngMulti(intI, intJ) = intI * intJ 
Debug.Print sngMulti(intI, intJ) 
Next intJ 
Next intI 

- contant 

   + Constants listed in the Object Browser don't have to be declared in your application.
   
   + user defined constant 
   
   + conditional compiler constants #Const 
   
- loop 

Sub ChkFirstWhile() 
    counter = 0 
    myNum = 20 
    Do While myNum > 10 
        myNum = myNum - 1 
        counter = counter + 1 
    Loop 
    MsgBox "The loop made " & counter & " repetitions." 
End Sub 
 
Sub ChkLastWhile() 
    counter = 0 
    myNum = 9 
    Do 
        myNum = myNum - 1 
        counter = counter + 1 
    Loop While myNum > 10 
    MsgBox "The loop made " & counter & " repetitions." 
End Sub

'stop until condition is true 
Do Until myNum = 10 
    myNum = myNum - 1 
    counter = counter + 1 
Loop 

Do Until myNum = 10 
    myNum = myNum - 1 
    counter = counter + 1 
    If myNum < 10 Then Exit Do 
Loop 

- for each ... next 
For Each frm In Application.Forms 
    If frm.Caption <> Screen. ActiveForm.Caption Then frm.Close 
Next 

' looping through a range of cells 
For Each myObject In MyCollection 
If IsNumeric(myObject.Value) = False Then 
MsgBox "Object contains a non-numeric value." 
Exit For 
End If 
Next c

- for next statement 

Sub Beeps() 
    For x = 1 To 50 
        Beep 
    Next x 
End Sub

- if...then...else statement 

Function Bonus(performance, salary) 
    If performance = 1 Then 
        Bonus = salary * 0.1 
    ElseIf performance = 2 Then 
        Bonus = salary * 0.09 
    ElseIf performance = 3 Then 
        Bonus = salary * 0.07 
    Else 
        Bonus = 0 
    End If 
End Function

- using parenthese in code 

    + if a method doesn't return a value then it is not required a parenthese
    
    MySub "stringArgument", integerArgument 

    MsgBox "Task Completed!", 0, "Task Box" 
    
    + call method with named values 
    
    MsgBox Title:="Task Box", Prompt:="Task Completed!" 
    
    + assign the return value 
    
    answer3 = MsgBox(Title:="Question 3", _ 
        Prompt:="Are you happy with your salary?", Buttons:=4) 

    ' _ this is the continue line symbol 

- select case statement 

Function Bonus(performance, salary) 
  Select Case performance 
    Case 1 
      Bonus = salary * 0.1 
    Case 2, 3 
      Bonus = salary * 0.09 
    Case 4 To 6 
      Bonus = salary * 0.07 
    Case Is > 8 
      Bonus = 100 
    Case Else 
      Bonus = 0 
  End Select 
End Function 

- addin manager, Use the Add-In Manager dialog box to load or unload an add-in.
- with statements 

Sub FormatRange() 
    With Worksheets("Sheet1").Range("A1:C10") 
         .Value = 30 
         .Font.Bold = True 
         .Interior.Color = RGB(255, 255, 0) 
         End With 
End Sub

- VarType contants 
Constant        value       description 
vbEmpty             0        uninitialized 
vbNull              1        contains no valid data 
vbInteger           2        Integer 
vbLong              3
vbSignle            4
vbDouble            5
vbCurrency          6
vbDate              7   
vbString            8
vbObject            9
vbError             10
vbBoolean           11
vbVariant           12
vbDataObject        13
vbDecimal           14
vbByte              17
vbLongLong          20
vbUserDefinedType   36
vbArray             8192


# Working across applications 
- Visual Basic can create new objects and retrieve existing objects from many Microsoft applications. 
CreateObject function or GetObject function 

' Start Microsoft Excel and create a new Worksheet object. 
Set ExcelWorksheet = CreateObject("Excel.Sheet") 
 
' Start Microsoft Excel and open an existing Worksheet object. 
Set ExcelWorksheet = GetObject("SHEET1.XLS") 
 
' Start Microsoft Word. 
Set WordBasic = CreateObject("Word.Basic") 

- working across applications 

create an object of any class that exists in its type library. For example:

- write property, Let, Get, Set 
    + readonly property 
    + executed code when the property is set 
    + property can have help strings assigned to them in the object browser 
    
Property Let, a procedure that sets the value of a property 
Property Get, a procedure that returns the value of a property 
Property Set, a procedure that sets a reference to an object 

'define proeprties 
Property Let Names(intX As Integer, intY As Integer, varZ As Variant) 
 ' Statement here. 
End Property 
 
Property Get Names(intX As Integer, intY As Integer) As Variant 
 ' Statement here. 
End Property 

- write a sub procedure 

Sub subName()
    ....
End Sub 

- assign statement 
 Dim yourName As String 
 [Let] yourName = InputBox("What is your name?") 

Set statement is used to assign an object to a vraible 
Dim myCell As Range 
Set myCell = Worksheets("Sheet1").Range("A1") 
With myCell.Font 
    .Bold = True 
    .Italic = True 
End With 

ActiveCell.Font.Bold = True 

- write data to files 
    + access sequence, input, output, append modes 
    Sequential 	Print #, Write # 	Input #
    
    + random access to read and write data to a file without locsing it 
    Random 	Put 	Get
    
    + binary access
    Binary 	Put 	Get
    
- Write declaration statements
    Const limit As Integer = 33 
    Dim myCell As Range 
    ' More statements 

- executable statement 

Sub ApplyFormat() 
Const limit As Integer = 33 
For Each c In Worksheets("Sheet1").Range("MyRange").Cells 
    If c.Value > limit Then 
        With c.Font 
            .Bold = True 
            .Italic = True 
        End With 
    End If 
Next c 
MsgBox "All done!" 
End Sub

- Writing visual basic statements 
    + Declaration 
    + assignment 
    + Executable 
    
- Continue a statement over multiple lines with _ 
Sub DemoBox() 'This procedure declares a string variable, 
 ' assigns it the value Claudia, and then displays 
 ' a concatenated message. 
 Dim myVar As String 
 myVar = "John" 
 MsgBox Prompt:="Hello " & myVar, _ 
 Title:="Greeting Box", _ 
 Buttons:=vbExclamation 
End Sub

- comments '


# Window Forms 
- overview 
- active controls and selected controls state 
- add a control to a form 
...


# Debug 


# Visual Basic Language Reference 
- Character sets 0 ~ 255 
- Constants 
    + Calendar 
    vbCalGreg 	0 	Indicates that the Gregorian calendar is used.
    vbCalHijri 	1 	Indicates that the Hijri calendar is used.
    
    + CallType 
    
Color 
Comparison 
Date 
Date Format 
Dir, GetAttr and SetAttr 
DriveType 
File Attribute 
File Input/Output 
Form 
IMEStatus 
KeyCode 
Miscellaneous 
MsgBox 
QueryClose 
Shell 
SpecialFolder 
StrConv 
System Color 
Tristate 
- Data types 
    + Type Conversion functions 
    + types 
Boolean 
Byte 
Currency 
Date 
Decimal 
Double 
Integer 
Long 
LongLong 
LongPtr 
Object 
Single 
String 
User-defined 
Variant 
- Directives 
#Const 
#If...Then...#Else 

- Events 
Activate, Deactivate 
Initialize 
QueryClose 
Resize 
Terminate 

- Functions 
Array 
CallbByName 
Choose 
Command 
Conversion functions 
CreateObject 
CurDir 
Date 
DateAdd 
DateDiff 
DatePart 
DateSerial 
DateValue 
Day 
DDB 
Dir 
DoEvents 
Environ 
EOF 
Error 
FileAttr
FileDateTime 
FileLen 
Filter 
FormatCurrency 
FormatDateTime 
FromatNumber 
FormatPercent 
FreeFile 
FV 
GetAllSettings 
GetAttr 
GetObject 
GetSetting 
Hour 
IIf
IMEState 
Input 
InputBox 
InStr 
InStrRev 
IPmt 
IRR 
IsArray 
IsDate 
IsEmpty 
IsError 
IsMissing 
IsNull 
IsNumeric 
IsObject 
Join 
LBound 
LCase 
Left 
Len 
Loc 
LOF 
LTrim, RTrim, and Trim 
MacID 
MacScript 
Math functions 
Mid 
Minute 
MIRR 
Month 
MonthName 
MsgBox 
Now 
NPer 
NPV 
Partition 
Pmt 
PV 
QBColor 
Rate 
Replace 
RGB
Right 
Round 
Second 
Seek 
Shell 
SLN 
Space 
Spc 
Split 
StrComp 
StrConv 
String 
StrReverse 
Switch 
SYD 
Tab 
Time 
Timer 
TimeSerial 
TimeValue 
TypeName 
UBound 
UCase 
VarType 
Weekday 
WeekdayName 
Year 
- Keywords 
    + Keyword contexts 
    Friend 
    Me 
    Nothing 
    PtrSafe
    
    + Keywords by tasks 
    Arrays 
    Control flow 
    Conversion 
    Dates and times 
    Directries and files 
    Errors 
    Financial 
    Input and Output 
    Math 
    Miscellanenous 
    Registry 
    String manipulation 
    Variables and constants 
    
- Microsoft Forms 

- Objects 
- Operators 
- Statements 
- Visual Basic Add-in Model 








Visual Basic Official Document;Note=Erxin

# Visual Basic 
- 64-bit VB for application overview 

VBA code that was written before the Office 2010 release (VBA version 6 and earlier) on a 64-bit platform can result in errors if the code is not modified to run in 64-bit versions of Office.

LongPtr. VBA now includes the variable type alias LongPtr.

LongLong. The LongLong data type is a signed 64-bit integer 

PtrSafe. The PtrSafe keyword asserts that a Declare statement is safe to run in 64-bit versions of Office

    + 32bit return 
Declare PtrSafe Function GetActiveWindow Lib "user32" () As Long


    + 64bit return 
    
Declare PtrSafe Function GetActiveWindow Lib "user32" () As LongPtr

- for all platform 

you only need to use the new LongPtr type alias instead of Long or LongLong for all pointers

- reference 
https://docs.microsoft.com/en-us/office/vba/language/concepts/getting-started/64-bit-visual-basic-for-applications-overview


# Avoiding naming conflicts 
- procedures in separate modules can have the same name. 


# Calling procedures with same name 
- specify a module name 
Sub Main()
    ModuleName.MyProcedure
End Sub 

- call with project name 
Sub Main() 
    [MyProject.vbp].[MyModule].Main 
End Sub


# Calling property procedures 
- Property let  	[ object.] propname (arguments)] = argument
- Property Get  	varname = [ object.] propname (arguments)]
- Property Set      Set [ object.] propname. [ (arguments) ] = varname


# Calling sub and function procedures 
- Call sub 
Sub Main() 
 MultiBeep 56 
 Message 
End Sub 
 
Sub MultiBeep(numbeeps) 
 For counter = 1 To numbeeps 
 Beep 
 Next counter 
End Sub 
 
Sub Message() 
 MsgBox "Time to take a break!" 
End Sub

- The Call statement is not required, but if you use it, you must enclose any arguments in parentheses.
Sub Main() 
 HouseCalc 99800, 43100 
 Call HouseCalc(380950, 49500) 
End Sub 
 
Sub HouseCalc(price As Single, wage As Single) 
End Sub 

- Add parentheses for the function will return value 
Answer3 = MsgBox("Are you happy with your salary?", 4, "Question 3") 

- pass named arguments 

MsgBox Title:="Task Box", Prompt:="Task Completed!" 

answer3 = MsgBox(Title:="Question 3", _ 
Prompt:="Are you happy with your salary?", Buttons:=4) 


# Compiler constants 
- defines constants for exclusive use with #if...then...#else directive 

#If Win64 Then 
' Win64=true, Win32=true, Win16= false 
#ElseIf Win32 Then 
' Win32=true, Win16=false 
#Else 
' Win16=true 
#End If

Win32 returns True in both 32-bit and 64-bit development environment 

- 32-bit plaform 
Constant 	Value 	Indicates that the development environment...
Vba6 	True 	Is Visual Basic for Applications, version 6.0 compatible.
Vba6 	False 	Is not Visual Basic for Applications, version 6.0 compatible.
Vba7 	True 	Is Visual Basic for Applications, version 7.0 compatible.
Vba7 	False 	Is not Visual Basic for Applications, version 7.0 compatible.
Win16 	False 	Is not 16-bit compatible.
Win32 	True 	Is 32-bit compatible.
Win64 	False 	Is not 64-bit compatible.
Mac 	True 	Is Macintosh.
Mac 	False 	Is not Macintosh.

- 64-bit platform 
Constant 	Value 	Indicates that the development environment...
Vba6 	True 	Is Visual Basic for Applications, version 6.0 compatible.
Vba6 	False 	Is not Visual Basic for Applications, version 6.0 compatible.
Vba7 	True 	Is Visual Basic for Applications, version 7.0 compatible.
Vba7 	False 	Is not Visual Basic for Applications, version 7.0 compatible.
Win16 	False 	Is not 16-bit compatible.
Win32 	True 	Is 32-bit compatible.
Win64 	True 	Is 64-bit compatible.
Mac 	True 	Is Macintosh.
Mac 	False 	Is not Macintosh.


# Creating object variables 
- using declaration statement like Dim, Public, Private, Static to declare an object variable. A variable referers to an object must be a variant. 

' Declare MyObject as Variant data type. 
Dim MyObject 
' Declare MyObject as Object data type. 
Dim MyObject As Object 
' Declare MyObject as Font type. 
Dim MyObject As Font 

- assign an object variable to an object 

Set MyObject = New 1YourObject ' Assign object reference. 
Set MyObject = Nothing ' Discontinue association. 

-  An object variable is always set to Nothing after closing the associated object

If Not MyObject Is Nothing Then 
 ' Variable refers to valid object. 
 . . . 
End If 

- Use the Me keyword to refer to the current instance of the object 
Sub ChangeObjectColor(MyObjectName As Object) 
 MyObjectName.BackColor = RGB(Rnd * 256, Rnd * 256, Rnd * 256) 
End Sub

ChangeObjectColor Me 


# Declare arrays
- fixed array 
Dim MyArray(10, 10) As Integer 

Option Base { 0 | 1 } ' set default array subscript to 1 or 0

by default the array indexes begin at zero 

- other definitions 
' Integer array uses 22 bytes (11 elements * 2 bytes). 
ReDim MyIntegerArray(10) As Integer 
 
' Double-precision array uses 88 bytes (11 elements * 8 bytes). 
ReDim MyDoubleArray(10) As Double 

ReDim statement to declare an array implicitly within a procedure. 
- declare a dynamic array 
Dim sngArray() As Single 

- In a procedure within the array's scope, use the ReDim statement to change the number of dimensions, to define the number of elements, and to define the upper and lower bounds for each dimension. You can use the ReDim statement to change the dynamic array as often as necessary.

ReDim Preserve varArray(UBound(varArray) + 10) 


# declare constants 
-  Const statement to declare a constant and set its value. Module-level constants are private by default.

Public Const conAge As Integer = 34

Const conAge As Integer = 34, conWage As Currency = 35000


# Declare variables 
-  Dim statement. A declaration statement can be placed within a procedure to create a procedure-level variable. Or it may be placed at the top of a module, in the Declarations section, to create a module-level variable.

Dim strName As String 
Dim intX, intY, intZ As Integer 

'Module level private 
Private MyName As String 

- Static statement instead of a Dim statement to declare a variable in a procedure, the declared variable will retain its value between calls to that procedure.

- Option Explicit statement, a compile-time error will occur when Visual Basic encounters a variable name that has not been previously declared

- Dim frmOrders As New Access.Form 

- object library files, (.olb), Object library files (.olb) contain type libraries


# Executing code when setting properties 
-  Property Let statement allows you to create a procedure that sets the value of the property. One example might be a Property procedure that creates an inverted property for a bitmap on a form

- call the Property Let procedure.
Form1.Inverted = True 

Private IsInverted As Boolean 
 
Property Let Inverted(X As Boolean) 
 IsInverted = X 
 If IsInverted Then 
 â€¦ 
 (statements) 
 Else 
 (statements) 
 End If 
End Property 

Property Get Inverted() As Boolean 
 Inverted = IsInverted 
End Property 


# Looping through code 
- Another useful control structure, the With statement, lets you run a series of statements without having to requalify an object.


- conditional statement
    If...Then...Else: Branching when a condition is True or False
    Select Case: Selecting a branch from a set of conditions

- loop 

    + Do...Loop: Looping while or until a condition is True
    + For...Next: Using a counter to run statements a specified number of times
    
Dim CountSlower As Variant    ' Second case, use Variant. 
For CountSlower = 0 to 32766 
Next CountSlower 

    
    + For Each...Next: Repeating a group of statements for each object in a collection

- With: Running a series of statements on the same object


# Pass arguments efficiently
- All arguments are passed to procedures by reference, unless you specify otherwise.
- pass an argument by value if you include the ByVal keyword in the procedure's declaration. 
Function Factorial (ByVal MyVar As Integer) ' Function declaration. 
 MyVar = MyVar - 1 
 If MyVar = 0 Then 
 Factorial = 1 
 Exit Function 
 End If 
 Factorial = Factorial(MyVar) * (MyVar + 1) 
End Function 


# Returing strings from functions 
- The following functions return values in a String variable when you append a dollar sign ($) to the function name. These functions have the same usage and syntax as their Variant equivalents without the dollar sign.

Chr$ 	    ChrB$ 	    *Command$
CurDir$ 	Date$ 	    Dir$
Error$ 	    Format$ 	Hex$
Input$ 	    InputB$ 	LCase$
Left$ 	    LeftB$ 	    LTrim$
Mid$ 	    MidB$ 	    Oct$
Right$ 	    RightB$ 	RTrim$
Space$ 	    Str$ 	    String$
Time$ 	    Trim$ 	    UCase$


# Understanding automation 
- Automation (formerly OLE Automation) is a feature of the Component Object Model (COM), an industry-standard technology that applications use to expose their objects to development tools

MyObj.Insert "Hello, world." ' Place text. 
MyObj.Bold = True ' Format text. 
If Mac = True ' Check your platform constant 
 MyObj.SaveAs "HD:\WORDPROC\DOCS\TESTOBJ.DOC" ' Save the object (Macintosh). 
Else 
 MyObj.SaveAs "C:\WORDPROC\DOCS\TESTOBJ.DOC" ' Save the object (Windows). 

- Use these two functions to access automation object 

CreateObject 	Creates a new object of a specified type.
GetObject 	Retrieves an object from a file.

- object library, .olb extension that provides information to Automation controllers (like Visual Basic) about available objects. You can use the Object Browser to examine the contents of an object library


# Understanding conditional compilation 
- declare a conditional compiler constant in code with #Const directive 

' Declare public compilation constant in Declarations section. 
#Const conDebug = 1 
 
Sub SelectiveExecution() 
 #If conDebug = 1 Then 
 . ' Run code with debugging statements. 
 . 
 . 
 #Else 
 . ' Run normal code. 
 . 
 . 
 #End If 
End Sub


# Named arguments and optional arguments 
- optional and default 
Sub OptionalArgs(strState As String, Optional strCountry As String = "USA") 
. . . 
End Sub

- pass positional or named argument to sub or procedure 
Sub PassArgs(strName As String, intAge As Integer, dteBirth As Date) 
 Debug.Print strName, intAge, dteBirth 
End Sub

PassArgs intAge:=29, dteBirth:=#2/21/69#, strName:="Mary" 


# Understanding objects, methods, properties and events
- object collections 

In Microsoft Excel, for example, the Workbooks object contains all the open Workbook objects. In Visual Basic, the Forms collection contains all the Form objects in an application.

Sub CloseForm() 
 Forms("MyForm.frm").Close 
End Sub

Sub CloseAll() 
 Forms.Close 
End Sub

    + method, A method is an action that an object can perform. 
    + property, A property is an attribute of an object that defines one of the object's characteristics
    + An event is an action recognized by an object
    
    
# Understanding parameter arrays 
- A parameter array can be used to pass an array of arguments to a procedure. You don't have to know the number of elements in the array when you define the procedure

 use the ParamArray keyword to denote a parameter array. 
 
Sub AnyNumberArgs(strName As String, ParamArray intScores() As Variant) 
    Dim intI As Integer 

    Debug.Print strName; " Scores" 
    ' Use UBound function to determine upper limit of array. 
    For intI = 0 To UBound(intScores()) 
    Debug.Print " "; intScores(intI) 
    Next intI 
End Sub


AnyNumberArgs "Jamie", 10, 26, 32, 15, 22, 24, 16 
 
AnyNumberArgs "Kelly", "High", "Low", "Average", "High" 


# Understanding scope and visibility 
- procedure-level, private module-level, and public module-level.

    + A variable or constant defined within a procedure is not visible outside that procedure. 
Sub LocalVariable() 
 Dim strMsg As String 
 strMsg = "This variable can't be used outside this procedure." 
 MsgBox strMsg 
End Sub 
 
Sub OutsideScope() 
 MsgBox strMsg 
End Sub

    + module-level variables and constants in the Declarations section of a module. Module-level variables can be either public or private.
' Add following to Declarations section of module. 
Private strMsg As String 
 
Sub InitializePrivateVariable() 
 strMsg = "This variable can't be used outside this module." 
End Sub 
 
Sub UsePrivateVariable() 
 MsgBox strMsg 
End Sub

    + If you declare a module-level variable as public, it's available to all procedures in the project. 
' Include in Declarations section of module. 
Public strMsg As String 

You can use these variables from referencing projects. you must first set a reference to the project in which they are defined.

- understanding the lifetime of variables 

A numeric variable is initialized to zero, 
a variable-length string is initialized to a zero-length string (""),
and a fixed-length string is filled with the character represented by the ASCII character code 0, or Chr( 0 ). 
Variant variables are initialized to Empty. 
Each element of a user-defined type variable is initialized as if it were a separate variable.
declare an object variable, space is reserved in memory, but its value is set to Nothing
A procedure-level variable declared with the Dim statement retains a value until the procedure is finished running. 
If you include the Static keyword before a Sub or Function statement, the values of all the procedure-level variables in the procedure are preserved between calls.

- Variants, data type is automatically specifieid

Variant data type can contain string, date, time, Boolean, or numeric values, and can convert the values that they contain automatically. Numeric Variant values require 16 bytes of memory 

String Variant values require 22 bytes of memory.


# Understanding visual basic syntax 
- In the Activate method syntax, the italic word "object" is a placeholder for information you supply
Sub MakeActive() 
    Windows(2).Activate 
End Sub

- option compare statement. In the Option Compare statement syntax, the braces and vertical bar indicate a mandatory choice between three items.

- Dim statement syntax, the word Dim is a required keyword. The only required element is varname (the variable name).

- array 
Option Base 1 
Dim curExpense(365) As Currency 

Dim varData(3) As Variant 
varData(0) = "Claudia Bendel" 
varData(1) = "4242 Maple Blvd" 
varData(2) = 38 
varData(3) = Format("06-09-1952", "General Date") 

- multiple dimension 

Dim sngMulti(1 To 5, 1 To 10) As Single 

Dim sngMulti(1 To 5, 1 To 10) As Single 

Dim intI As Integer, intJ As Integer 
Dim sngMulti(1 To 5, 1 To 10) As Single 

' Fill array with values. 
For intI = 1 To 5 
For intJ = 1 To 10 
sngMulti(intI, intJ) = intI * intJ 
Debug.Print sngMulti(intI, intJ) 
Next intJ 
Next intI 

- contant 

   + Constants listed in the Object Browser don't have to be declared in your application.
   
   + user defined constant 
   
   + conditional compiler constants #Const 
   
- loop 

Sub ChkFirstWhile() 
    counter = 0 
    myNum = 20 
    Do While myNum > 10 
        myNum = myNum - 1 
        counter = counter + 1 
    Loop 
    MsgBox "The loop made " & counter & " repetitions." 
End Sub 
 
Sub ChkLastWhile() 
    counter = 0 
    myNum = 9 
    Do 
        myNum = myNum - 1 
        counter = counter + 1 
    Loop While myNum > 10 
    MsgBox "The loop made " & counter & " repetitions." 
End Sub

'stop until condition is true 
Do Until myNum = 10 
    myNum = myNum - 1 
    counter = counter + 1 
Loop 

Do Until myNum = 10 
    myNum = myNum - 1 
    counter = counter + 1 
    If myNum < 10 Then Exit Do 
Loop 

- for each ... next 
For Each frm In Application.Forms 
    If frm.Caption <> Screen. ActiveForm.Caption Then frm.Close 
Next 

' looping through a range of cells 
For Each myObject In MyCollection 
If IsNumeric(myObject.Value) = False Then 
MsgBox "Object contains a non-numeric value." 
Exit For 
End If 
Next c

- for next statement 

Sub Beeps() 
    For x = 1 To 50 
        Beep 
    Next x 
End Sub

- if...then...else statement 

Function Bonus(performance, salary) 
    If performance = 1 Then 
        Bonus = salary * 0.1 
    ElseIf performance = 2 Then 
        Bonus = salary * 0.09 
    ElseIf performance = 3 Then 
        Bonus = salary * 0.07 
    Else 
        Bonus = 0 
    End If 
End Function

- using parenthese in code 

    + if a method doesn't return a value then it is not required a parenthese
    
    MySub "stringArgument", integerArgument 

    MsgBox "Task Completed!", 0, "Task Box" 
    
    + call method with named values 
    
    MsgBox Title:="Task Box", Prompt:="Task Completed!" 
    
    + assign the return value 
    
    answer3 = MsgBox(Title:="Question 3", _ 
        Prompt:="Are you happy with your salary?", Buttons:=4) 

    ' _ this is the continue line symbol 

- select case statement 

Function Bonus(performance, salary) 
  Select Case performance 
    Case 1 
      Bonus = salary * 0.1 
    Case 2, 3 
      Bonus = salary * 0.09 
    Case 4 To 6 
      Bonus = salary * 0.07 
    Case Is > 8 
      Bonus = 100 
    Case Else 
      Bonus = 0 
  End Select 
End Function 

- addin manager, Use the Add-In Manager dialog box to load or unload an add-in.
- with statements 

Sub FormatRange() 
    With Worksheets("Sheet1").Range("A1:C10") 
         .Value = 30 
         .Font.Bold = True 
         .Interior.Color = RGB(255, 255, 0) 
         End With 
End Sub

- VarType contants 
Constant        value       description 
vbEmpty             0        uninitialized 
vbNull              1        contains no valid data 
vbInteger           2        Integer 
vbLong              3
vbSignle            4
vbDouble            5
vbCurrency          6
vbDate              7   
vbString            8
vbObject            9
vbError             10
vbBoolean           11
vbVariant           12
vbDataObject        13
vbDecimal           14
vbByte              17
vbLongLong          20
vbUserDefinedType   36
vbArray             8192


# Working across applications 
- Visual Basic can create new objects and retrieve existing objects from many Microsoft applications. 
CreateObject function or GetObject function 

' Start Microsoft Excel and create a new Worksheet object. 
Set ExcelWorksheet = CreateObject("Excel.Sheet") 
 
' Start Microsoft Excel and open an existing Worksheet object. 
Set ExcelWorksheet = GetObject("SHEET1.XLS") 
 
' Start Microsoft Word. 
Set WordBasic = CreateObject("Word.Basic") 

- working across applications 

create an object of any class that exists in its type library. For example:

- write property, Let, Get, Set 
    + readonly property 
    + executed code when the property is set 
    + property can have help strings assigned to them in the object browser 
    
Property Let, a procedure that sets the value of a property 
Property Get, a procedure that returns the value of a property 
Property Set, a procedure that sets a reference to an object 

'define proeprties 
Property Let Names(intX As Integer, intY As Integer, varZ As Variant) 
 ' Statement here. 
End Property 
 
Property Get Names(intX As Integer, intY As Integer) As Variant 
 ' Statement here. 
End Property 

- write a sub procedure 

Sub subName()
    ....
End Sub 

- assign statement 
 Dim yourName As String 
 [Let] yourName = InputBox("What is your name?") 

Set statement is used to assign an object to a vraible 
Dim myCell As Range 
Set myCell = Worksheets("Sheet1").Range("A1") 
With myCell.Font 
    .Bold = True 
    .Italic = True 
End With 

ActiveCell.Font.Bold = True 

- write data to files 
    + access sequence, input, output, append modes 
    Sequential 	Print #, Write # 	Input #
    
    + random access to read and write data to a file without locsing it 
    Random 	Put 	Get
    
    + binary access
    Binary 	Put 	Get
    
- Write declaration statements
    Const limit As Integer = 33 
    Dim myCell As Range 
    ' More statements 

- executable statement 

Sub ApplyFormat() 
Const limit As Integer = 33 
For Each c In Worksheets("Sheet1").Range("MyRange").Cells 
    If c.Value > limit Then 
        With c.Font 
            .Bold = True 
            .Italic = True 
        End With 
    End If 
Next c 
MsgBox "All done!" 
End Sub

- Writing visual basic statements 
    + Declaration 
    + assignment 
    + Executable 
    
- Continue a statement over multiple lines with _ 
Sub DemoBox() 'This procedure declares a string variable, 
 ' assigns it the value Claudia, and then displays 
 ' a concatenated message. 
 Dim myVar As String 
 myVar = "John" 
 MsgBox Prompt:="Hello " & myVar, _ 
 Title:="Greeting Box", _ 
 Buttons:=vbExclamation 
End Sub

- comments '


# Window Forms 
- overview 
- active controls and selected controls state 
- add a control to a form 
...


# Debug 


# Visual Basic Language Reference 
- Character sets 0 ~ 255 
- Constants 
    + Calendar 
    vbCalGreg 	0 	Indicates that the Gregorian calendar is used.
    vbCalHijri 	1 	Indicates that the Hijri calendar is used.
    
    + CallType 
    vbMethod    1   indicate that a method has been called 
    vbGet       2   a property get 
    vbSet       8   a property set 
    
    + Color 
    vbBlack 
    vbRed 
    vbGreen 
    vbYellow 
    vbBlue 
    vbMagenta 
    vbCyan
    vbWhite 
    
    + Comparison 
    vbUseCompareOption  Performs a comparison by using hte setting of the option 
    vbBinaryCompare 
    vbTextCompare 
    vbDatabaseCompare   for access, a comparison based on information in database 
    
    + Date 
    The firstdayofweek argument has the following values 
    vbUseSystem 
    vbSunday
    vbMonday 
    vbTuesday 
    vbWednesday 
    vbThursday
    vbFriday 
    vbSaturday 
    
    The firstdayofyear 
    vbUseSystem 
    vbUseSystemDayofWeek
    vbFirstJan1 start with week in which january 1 occurs 
    vbFirstFourDays     start with the first weeek that has at least four days in the new year 
    vbFirstFullWeek 
    
    + Date Format 
    vbGenralDAte 
    vbLongDate 
    vbgShortDate 
    vbLongTime 
    vbShortTime 
    
    + Dir, GetAttr and SetAttr 
    vbNormal
    vbHidden 
    vbSystem 
    vbVolume 
    vbDirectory 
    vbAchive 
    vbAlias, on the macintosh identifier is an alias 
    
    + DriveType 
    Unknown 
    Removable 
    Fixed 
    Remote 
    CDROM 2    vbInactiveBorder 
    vbApplicationWorkspace 
    vbHighlight 
    vbHighlightText 
    vbButtonFace 
    vbButtonShadow 
    vbGrayText 
    vbButtonText 
    vbInactiveCaptionText 
    vb3DHighlight 
    vb3DDKShadow 
    vb3DLight 
    vbInfoText 
    vbInfoBackground 
    
    + Tristate 
    vbTrue          -1
    vbFalse         0
    vbUseDefault    -2
    
- Data types,include user-defined types and specific types of objects 
    +types 
Data type       Storage size        Range 
Boolean         2bytes 
Byte            1byte 
Collection      Unknown 
Currency(scaled integer)    8bytes 
Date            8 bytes 
Decimal         14 bytes 
Dictionary      Unknown 
Double          8 bytes 
Integer         2 bytes 
Long            4 bytes 
LongLong        8 bytes 
LongPtr         4 bytes 
Object          4 bytes 
Single          4 bytes 
String          10bytes + string length 
Variant(with numbers) 16bytes     any numeric value up to the range of a Double 
Variant(with character) 22bytes + string length 
User-defined(using Type)  Number required by element 

Verify data types:
IsArray 
IsDate, recognizes date literals within the range of acceptable dates 
IsEmpty 
IsMissing 
IsNull 
IsNumeric 
IsObject 

Return values for CStr:
Boolean 
Date 
Empty 
Error 
Null, a run-time error 

    + Type Conversion functions, CBool, CByte, CCur, CDate, CDbl, CDec, CInt, CLng, CLngLng, CLngPtr, CSng, CStr, and CVar.
    
    Convert a expression to a specific data type 
    
    When the fractional part is exactly 0.5, CInt and CLng always round it to the nearest even number. For example, 0.5 rounds to 0, and 1.5 rounds to 2
    + types 
Boolean, dispaly True or Flase, #TRUE# OR #FALSE# when write # is used 
Byte unsigned 8 bit 
Currency, 8 byte, a range of -922,337,203,685,477.5808 to 922,337,203,685,477.5807.
Date, IEEE 64-bit (8-byte) floating-point numbers that represent dates ranging from 1 January 100, to 31 December 9999, and times from 0:00:00 to 23:59:59.
Decimal, Decimal variables are stored as 96-bit (12-byte) unsigned integers
Double, IEEE 64-bit (8-byte) floating-point numbers ranging in value from:
Integer, 2 byte
Long, 4 byte 32bit 
LongLong, 8 byte 64 bit  
LongPtr, (Long integer on 4 byte 32-bit systems, LongLong integer on 8 byte 64-bit systems) variables are stored as:
Object, 32 bit system with 4 byte 
Single, 32 bit 4 byte 
String, 1 to 64k, variable 2^31 character, The codes for String characters range from 0â€“255.
User-defined, can contain one or more elements of a data type 

    Type MyType 
     MyName As String ' String variable stores a name. 
     MyBirthDate As Date ' Date variable stores a birthdate. 
     MySex As Integer ' Integer variable stores sex (0 for 
    End Type ' female, 1 for male). 
    
Variant, Dim, Private, Public, Static. can contain any kind of data except fixed-length String data. Variant can also contain the special values Empty, Error, Nothing, and Null.
- Directives 
#Const directive, define compiler constant 

#Const DebugVersion = 1 ' Will evaluate true in #If block. 


#If...Then...#Else, compile selected block of code 
' If Mac evaluates as true, do the statements following the #If. 
#If Mac Then 
 '. Place exclusively Mac statements here. 
 '. 
 '. 
' Otherwise, if it is a 32-bit Windows program, do this: 
#ElseIf Win32 Then 
 '. Place exclusively 32-bit Windows statements here. 
 '. 
 '. 
' Otherwise, if it is neither, do this: 
#Else 
 '. Place other platform statements here. 
 '. 
 '. 
#End If


- Events 
    + Activate, Deactivate, The Activate event occurs when an object becomes the active window.
    
    syntax 
    
Private Sub object_Activate( )
Private Sub object_Deactivate( )


' Activate event for UserForm1
Private Sub UserForm_Activate()
    UserForm1.Caption = "Click my client area"
End Sub

' Click event for UserForm1
Private Sub UserForm_Click()
    Load UserForm2
    UserForm2.StartUpPosition = 3
    UserForm2.Show
End Sub

    + Initialize, Occurs after an object is loaded, but before it's shown.
' This is the Initialize event procedure for UserForm1
Private Sub UserForm_Initialize()
    Load UserForm2
    UserForm2.Show
End Sub
    
    + QueryClose, Occurs before a UserForm closes.
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    'Prevent user from closing with the Close box in the title bar.
    If CloseMode <> 1 Then Cancel = 1
    Me.Caption = "The Close box won't work! Click me!"
End Sub
    
    + Resize, Occurs when a user form is resized.

' Resize event for UserForm1
Private Sub UserForm_Resize()
    UserForm1.Caption = "New Height: " & Height & "  " & "Click to resize me!"
End Sub

    + Terminate, Occurs when all references to an instance of an object are removed from memory by setting all variables that refer to the object to Nothing 
Private Sub UserForm_Terminate()
    Dim Count As Integer
    For Count = 1 To 100
        Beep
    Next
End Sub
       
- Functions 
    + Array, Returns a Variant containing an array.
Dim A As Variant, B As Long, i As Long
A = Array(10, 20, 30)  ' A is a three element list by default indexed 0 to 2
B = A(2)               ' B is now 30

    + CallByName (object, procname, calltype, [args()]_), Executes a method of an object, or sets or returns a property of an object.
    
    CallByName Text1, "MousePointer", vbLet, vbCrosshair
    Result = CallByName (Text1, "MousePointer", vbGet)
    CallByName Text1, "Move", vbMethod, 100, 100
    
    + Choose(index, choice-1, [ choice-2, ..., [ choice-n ]] ), Selects and returns a value from a list of arguments.
    
    Choose returns a value from the list of choices based on the value of index. If index is 1, Choose returns the first choice in the list; if index is 2, it returns the second choice, and so on.
    
    Function GetChoice(Ind As Integer)
        GetChoice = Choose(Ind, "Speedy", "United", "Federal")
    End Function

    + Command, Returns the argument portion of the command line used to launch Microsoft Visual Basic or an executable program developed with Visual Basic. Not avaliable in Office 

    + Conversion functions 
    Asc, Returns an Integer representing the character code corresponding to the first letter in a string.

    Dim MyNumber
    MyNumber = Asc("A")    ' Returns 65.

    Chr, Returns a String containing the character associated with the specified character code.

    CVErr(errornumber), Returns a Variant of subtype Error containing an error number specified by the user.

    Format(Expression, [ Format ], [ FirstDayOfWeek ], [ FirstWeekOfYear ]), Returns a Variant (String) containing an expression formatted according to instructions contained in a format expression.

    Hex(number), return a string representing the hexadecimal value of a number 

    Oct(number), string of an octal value 

    Str, Returns a Variant (String) representation of a number.

    Val, Returns the numbers contained in a string as a numeric value of appropriate type.
   
    + CreateObject(class, [ servername ]), Creates and returns a reference to an ActiveX object.
    'class Required; Variant (String). The application name and class of the object to create.
    
    ' Declare an object variable to hold the object 
    ' reference. Dim as Object causes late binding. 
    Dim ExcelSheet As Object
    Set ExcelSheet = CreateObject("Excel.Sheet")
    
    + CurDir [ (drive) ], Returns a Variant (String) representing the current path.
    MyPath = CurDir("C")    ' Returns "C:\WINDOWS\SYSTEM".
    
    + Date, Returns a Variant (Date) containing the current system date.
    
DateAdd 
DateDiff 
DatePart 
DateSerial 
DateValue 
Day 
    + DDB(cost, salvage, life, period, [ factor ]), Returns a Double specifying the depreciation of an asset for a specific time period by using the double-declining balance method or some other method
    
    cost, initial cost of the asset 
    salvage, value of the asset at the end of its useful life 
    life, length of  useful life of the asset 
    period, asset depreciation is calculated 
    factor, the rate at which the balance decilines 
    
    The DDB function uses the following formula to calculate depreciation for a given period:

    Depreciation / period = ((cost - salvage) * factor) / life
    
    Depr = DDB(InitCost, SalvageVal, LifeTime, DepYear)
    MsgBox "The depreciation for year " & DepYear & " is " & _
    
    + Dir [ (pathname, [ attributes ] ) ], Returns a String representing the name of a file, directory, or folder that matches a specified pattern or file attribute

    + DoEvents(), Yields execution so that the operating system can process other events. The DoEvents function returns an Integer representing the number of open forms in stand-alone versions of Visual Basic, such as Visual Basic, Professional Edition. DoEvents returns zero in all other applications.
    
' Create a variable to hold number of Visual Basic forms loaded 
' and visible.
Dim I, OpenForms
For I = 1 To 150000    ' Start loop.
    If I Mod 1000 = 0 Then     ' If loop has repeated 1000 times.
        OpenForms = DoEvents    ' Yield to operating system.
    End If
Next I 

    + Environ( { envstring | number } ), Returns the String associated with an operating system environment variable. Not available on the Macintosh.
    
    number order of environment string table 
    
    + EOF(filenumber), return an integer containing the boolean value True when the end of a file opened for Random or sequential Input has been reached 
    
    + Error [ (errornumber) ], return the error message 
    + FileAttr(filenumber, returntype), return a long representing the file mode for files opened by using Open statement 
    
    + FileDateTime 
    + FileLen 
    + Filter(sourcearray, match, [ include, [ compare ]]), return a zero based array containing a subset of a string array based on a specified filter 
    
    match, a string to search for 
    include, optional boolean 
    compare, optional numeric value indicating the kind of string comparison to use, vbUseCompareOption, vbBinaryCompare, vbTextCompare, vbDatabaseCompare(Access only)
    
    + FormatCurrency, an expression formatted as a currency value by using the currency symbol defined in the system control panel 
    FormatCurrency(Expression, [ NumDigitsAfterDecimal, [ IncludeLeadingDigit, [ UseParensForNegativeNumbers, [ GroupDigits ]]]])
    
    + FormatDateTime 
    + FromatNumber 
    + FormatPercent 
    + FreeFile [ (rangenumber) ], Returns an Integer representing the next file number available for use by the Open statement.
    
Dim MyIndex, FileNumber
For MyIndex = 1 To 5    ' Loop 5 times.
    FileNumber = FreeFile    ' Get unused file
        ' number.
    Open "TEST" & MyIndex For Output As #FileNumber    ' Create file name.
    Write #FileNumber, "This is a sample."    ' Output text.
    Close #FileNumber    ' Close file.
Next MyIndex

    + FV(rate, nper, pmt, [ pv, [ type ]]), Returns a Double specifying the future value of an annuity based on periodic fixed payments and a fixed interest rate.
    
    + GetAllSettings(appname, section), returns a list of key settings and their respective values 
    
    Dim MySettings As Variant, intSettings As Integer
    ' Place some settings in the registry.
    SaveSetting appname := "MyApp", section := "Startup", _
    key := "Top", setting := 75
    SaveSetting "MyApp","Startup", "Left", 50
    ' Retrieve the settings.
    MySettings = GetAllSettings(appname := "MyApp", section := "Startup")
        For intSettings = LBound(MySettings, 1) To UBound(MySettings, 1)
            Debug.Print MySettings(intSettings, 0), MySettings(intSettings, 1)
        Next intSettings
    DeleteSetting "MyApp", "Startup"
    
    + GetAttr(pathname), Returns an Integer representing the attributes of a file, directory, or folder.
    + GetObject([ pathname ], [ class ]), returns a reference to an object provided by an ActiveX component 
    
    + GetSetting 
    + Hour 
    + IIf(expr, truepart, falsepart), Returns one of two parts, depending on the evaluation of an expression.
    
    CheckIt = IIf(TestMe > 1000, "Large", "Small")
    
    + IMEState, Returns an Integer specifying the current Input Method Editor (IME) mode of Microsoft Windows; available in East Asian versions only.
    
    + Input(number, [ # ]filenumber), Returns String containing characters from a file opened in Input or Binary mode.
    
    + InputBox(prompt, [ title ], [ default ], [ xpos ], [ ypos ], [ helpfile, context ]),  Displays a prompt in a dialog box, waits for the user to input text or click a button, and returns a String containing the contents of the text box.
    
    
    + InStr([ start ], string1, string2, [ compare ]), Returns a Variant (Long) specifying the position of the first occurrence of one string within another.
    
    start, numeric expression, starting position 
    string1, being searched 
    string2, string expression sought 
    compare, type of comparison 
    
    return values 
    0, Null, string2 is zero-length then return start, Null, Position at which match is found, 0
    
    + InstrRev(stringcheck, stringmatch, [ start, [ compare ]]), compre from the end of the string. Similar to Instr 
    
    + IPmt(rate, per, nper, pv, [ fv, [ type ]]), Returns a Double specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.
 
    + IRR(values(), [ guess ]), Returns a Double specifying the internal rate of return for a series of periodic cash flows (payments and receipts).
    
    The internal rate of return is the interest rate received for an investment consisting of payments and receipts that occur at regular intervals.
    
Dim Guess, Fmt, RetRate, Msg
Static Values(5) As Double    ' Set up array.
Guess = .1    ' Guess starts at 10 percent.
Fmt = "#0.00"    ' Define percentage format.
Values(0) = -70000    ' Business start-up costs.
' Positive cash flows reflecting income for four successive years.
Values(1) = 22000 : Values(2) = 25000
Values(3) = 28000 : Values(4) = 31000
RetRate = IRR(Values(), Guess) * 100    ' Calculate internal rate.
Msg = "The internal rate of return for these five cash flows is "
Msg = Msg & Format(RetRate, Fmt) & " percent."
MsgBox Msg    ' Display internal return rate.


    + IsArray 
    + IsDate 
    + IsEmpty 
    + IsError 
    + IsMissing 
    + IsNull 
    + IsNumeric 
    + IsObject 
    + Join(sourcearray, [ delimiter ]), Returns a string created by joining a number of substrings contained in an array.
    
    + LBound(arrayname, [ dimension ]), Returns a Long containing the smallest available subscript for the indicated dimension of an array.

    + LCase 
    + Left 
    + Len 
    + Loc 
    + LOF 
    + LTrim, RTrim, and Trim 
    + MacID(constant), Used on the Macintosh to convert a 4-character constant to a value that may be used by Dir, Kill, Shell, and AppActivate.
    
    + MacScript 
    + Math functions 
    Abs 
    Atn 
    Cos
    Derived match 
    Exp 
    Int, Fix 
    Log 
    Rnd 
    Sgn 
    Sin 
    Sqr 
    Tan 
    + Mid 
    + Minute 
    + MIRR(values( ), finance_rate, reinvest_rate), Returns a Double specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).
    
    + Month 
    + MonthName 
    + MsgBox 
    + Now 
    + NPer 
    + NPV 
    + Partition 
    + Pmt(rate, nper, pv, [ fv, [ type ]]),  Returns a Double specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.
    
Dim Fmt, FVal, PVal, APR, TotPmts, PayType, Payment
Const ENDPERIOD = 0, BEGINPERIOD = 1    ' When payments are made.
Fmt = "###,###,##0.00"    ' Define money format.
FVal = 0    ' Usually 0 for a loan.
PVal = InputBox("How much do you want to borrow?")
APR = InputBox("What is the annual percentage rate of your loan?")
If APR > 1 Then APR = APR / 100    ' Ensure proper form.
TotPmts = InputBox("How many monthly payments will you make?")
PayType = MsgBox("Do you make payments at the end of month?", vbYesNo)
If PayType = vbNo Then PayType = BEGINPERIOD Else PayType = ENDPERIOD
Payment = Pmt(APR / 12, TotPmts, -PVal, FVal, PayType)
MsgBox "Your payment will be " & Format(Payment, Fmt) & " per month."

    + QBColor(color), Returns a Long representing the RGB color code corresponding to the specified color number.
    
    + Rate(nper, pmt, pv, [ fv, [ type, [ guess ]]]), Rate(nper, pmt, pv, [ fv, [ type, [ guess ]]])

    + Replace 
    + RGB
    + Right 
    + Round 
    + Second 
    + Seek 
    + Shell 
    + SLN(cost, salvage, life), Returns a Double specifying the straight-line depreciation of an asset for a single period.
    
    + Space 
    + Spc(n), Used with the Print # statement or the Print method to position output.
    
    + Split(expression, [ delimiter, [ limit, [ compare ]]]), Returns a zero-based, one-dimensional array containing a specified number of substrings.
    
    + StrComp 
    + StrConv 
    + String 
    + StrReverse 
    + Switch 
    + SYD(cost, salvage, life, period), Returns a Double specifying the sum-of-years' digits depreciation of an asset for a specified period.
    + Tab 
    + Time 
    + Timer 
    + TimeSerial 
    + TimeValue 
    + TypeName 
    + UBound 
    + UCase 
    + VarType 
    + Weekday 
    + WeekdayName 
    + Year 
- Keywords 
    + Keyword contexts 
    Friend, similar to CPP friend keyword to allowed procedure in a form to access class mode 
    
    Me, The Me keyword behaves like an implicitly declared variable. It is automatically available to every procedure in a class module.
    
    Nothing, The Nothing keyword is used to disassociate an object variable from an actual object. Use the Set statement to assign Nothing to an object variable. For example:
    
    PtrSafe, The PtrSafe keyword is used in this context: Declare statement. The PtrSafe keyword asserts that a Declare statement is safe to run in 64-bit development environments.
    
    + Keywords by tasks 
        * Arrays 
        IsArray 
        Array, create an array 
        Option Base, change default lower limit 
        Dim, Private, Public, ReDim, Static 
        LBound, UBound 
        Erase, ReDim 
        
        * Control flow
        
        Branch: GoSub...Return, GoTo, On Error, On...GoSub, On...GoTo
        
        Exist or pause program: DoEvents, End, Exist, Stop 
        
        Loop, Do...Loop, For...Next, For Each...Next, While...Wend, With 
        
        Make decisions, Choose, if...then...else, select case, switch 
        
        Use procedures, Call, Function, Property Get, Property Let, Property Set, Sub 
        
        * Conversion
        ansi to string, Chr 
        string to lowercase or upercase, Format, LCase, Ucase 
        Date to serial number, DateSerial, DateValue 
        Decimal number to other bases, Hex, Oct 
        Number to string, Format, Str 
        One data type to another, See the Data types summary 
        Date to day, month, weekday, or year. Day, Month, Weekday, Year 
        Time to hour, minute or second, Hour, Minute, Second 
        String to ascii value, Asc 
        String to number, Val 
        Time to serial number, TimeSerial, TimeValue 
        
        * Dates and times 
        Get the current date or time, Date, Now, Time
        Perform date calculations, DateAdd, DateDiff, DatePart 
        Return a date, DateSerial, DateValue 
        Return a time, TimeSerial, TimeValue 
        Set the date or time, Date, Time
        Time a process, Timer 
        
        * Directries and files 
        ChDir 
        ChDrive 
        FileCopy 
        MkDir 
        RmDir 
        Name, rename a file 
        CurDir
        FileDateTime 
        GetAttr 
        FileLen 
        Dir 
        SetAttr 
        
        * Errors 
        Clear, Error, Raise 
        Error, get error message 
        Err, provide error information 
        CVErr, return error variant 
        On Error, Resume, trap errors during run time 
        IsError, Type verification 
        
        * Financial 
        DDB, SLN, SYD, calculate depreication 
        FV, calculate future value 
        Rate, calculate interest rate 
        IRR, MIRR, calculate internal rate of return 
        NPer, calculate number of periods 
        IPmt, Pmt, PPmt, calculate payments 
        NPV, PV, calculate present value 
        
        * Input and Output 
        Open 
        Close 
        Reset, 
        Format, Print, Print #, Spc, Tab, Width # 
        FileCopy, copy a file 
        EOF, FileAttr, FileDateTime, FileLen, GetAttr, Loc, LOF, Seek 
        Dir, Kill, Lock, Unlock, Name 
        Get, Input, Input #, Line Input # 
        FileLen 
        FileAttr, GetAttr, SetAttr, get file attribute
        Seek 
        Print #, Put, Write #, write to a file 
        
        * Math 
        Atn, Cos, Sin, Tan 
        Exp, Log, Sqr 
        Randomize, Rnd 
        Abs 
        Sgn, get the sign of an expression 
        Fix, Int, numberic conversions 
        
        * Miscellanenous 
        DoEvents, process pending events 
        AppActivate, Shell, run other programs 
        SendKeys, send keystrokes to an application 
        Beep, sound a beep from computer 
        Environ 
        Command, Provide a command line string 
        CreateObject, GetObject, automation COM relative 
        QBColor, RGB, color 
        
        * Registry 
        DeleteSetting
        GetSetting, GetAllSettings 
        SaveSetting 
        
        * String manipulation 
        StrCmp
        StrConv, convert strings 
        Format, Lcase, Ucase 
        Space, String, create string of repeating character 
        Len 
        Format 
        LSet, RSet, justify a string 
        InStr, Left, LTrim, Mid, Right, RTrim, Trim, Manipulate strings 
        Option Compare, set string comparison rules 
        Asc, Chr, work with ascii and ansi values 
        
        * Variables and constants 
        Let, assign value 
        Const, Dim, Private, Public, New, Static 
        Option Private Module, delcare module as private 
        IsArray, IsDate, IsEmpty, IsError, IsMissing, IsNull, IsNumeric, IsObject, TypeName, VarType 
        Me, refer to current object 
        Option Explicit, require explicit variable declarations 
        Deftype, set dfeault data type 
    
- Microsoft Forms 
    + Collections, controls and objects 
    + Dialog boxes 
    + Events 
    + Examples 
    + Methods 
    + Properties 
    + examples, https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/examples-microsoft-forms
        
    Private Sub ListBox2_BeforeDragOver(ByVal Cancel As _ 
     MSForms.ReturnBoolean, ByVal Data As _ 
     MSForms.DataObject, ByVal X As Single, _ 
     ByVal Y As Single, ByVal DragState As Long, _ 
     ByVal Effect As MSForms.ReturnEffect, _ 
     ByVal Shift As Integer) 
     Cancel = True 
     Effect = 1 
    End Sub 
     
    Private Sub ListBox2_BeforeDropOrPaste(ByVal _ 
     Cancel As MSForms.ReturnBoolean, _ 
     ByVal Action As Long, ByVal Data As _ 
     MSForms.DataObject, ByVal X As Single, _ 
     ByVal Y As Single, ByVal Effect As _ 
     MSForms.ReturnEffect, ByVal Shift As Integer) 
     Cancel = True 
     Effect = 1 
     ListBox2.AddItem Data.GetText 
    End Sub 
     
    Private Sub ListBox1_MouseMove(ByVal Button As _ 
     Integer, ByVal Shift As Integer, ByVal X As _ 
     Single, ByVal Y As Single) 
     Dim MyDataObject As DataObject 
     If Button = 1 Then 
     Set MyDataObject = New DataObject 
     Dim Effect As Integer 
     MyDataObject.SetText ListBox1.Value 
     Effect = MyDataObject.StartDrag 
     End If 
    End Sub 
     
    Private Sub UserForm_Initialize() 
     For i = 1 To 10 
     ListBox1.AddItem "Choice " _ 
     & (ListBox1.ListCount + 1) 
     Next i 
    End Sub

- Objects 
    + Collection object, an ordered set of items th at can be referred to as a unit 
    
    Dim X As New Collection
    
    Collection.Add, Collection.Remvoe, Collection.Count, Item methods, support iterate with For Each ... Next 
    
Sub ClassNamer()
    Dim MyClasses As New Collection    ' Create a Collection object.
    Dim Num    ' Counter for individualizing keys.
    Dim Msg As String    ' Variable to hold prompt string.
    Dim TheName, MyObject, NameList    ' Variants to hold information.
    Do
        Dim Inst As New Class1    ' Create a new instance of Class1.
        Num = Num + 1    ' Increment Num, then get a name.
        Msg = "Please enter a name for this object." & vbNewLine _
         & "Press Cancel to see names in collection."
        TheName = InputBox(Msg, "Name the Collection Items")
        Inst.InstanceName = TheName    ' Put name in object instance.
        ' If user entered name, add it to the collection.
        If Inst.InstanceName <> "" Then
            ' Add the named object to the collection.
            MyClasses.Add item := Inst, key := CStr(Num)
        End If
        ' Clear the current reference in preparation for next one.
        Set Inst = Nothing
    Loop Until TheName = ""
    For Each MyObject In MyClasses    ' Create list of names.
        NameList = NameList & MyObject.InstanceName & vbNewLine
    Next MyObject
    ' Display the list of names in a message box.
    MsgBox NameList, , "Instance Names In MyClasses Collection"

    For Num = 1 To MyClasses.Count    ' Remove name from the collection.
        MyClasses.Remove 1    ' Since collections are reindexed automatically, remove the first member on each iteration.
    Next
End Sub

    + Debug object, Debug object has two methods, Print and Assert. in debug runtime window 
    
    + Dictionary object 
Dim d                   'Create a variable
Set d = CreateObject("Scripting.Dictionary")
d.Add "a", "Athens"     'Add some keys and items
d.Add "b", "Belgrade"
d.Add "c", "Cairo"
...

methods, Add, Exists, Items (array of all the items), Keys, Remove, RemoveAll 

properties, CompareMode, Count, Item, Key 
    
    + Drive object, use of the Drive object to access drive properties
    
Sub ShowFreeSpace(drvPath)
    Dim fs, d, s
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set d = fs.GetDrive(fs.GetDriveName(drvPath))
    s = "Drive " & UCase(drvPath) & " - " 
    s = s & d.VolumeName  & vbCrLf
    s = s & "Free Space: " & FormatNumber(d.FreeSpace/1024, 0) 
    s = s & " Kbytes"
    MsgBox s
End Sub

    + Err object, runtime error information 
Dim Msg
' If an error occurs, construct an error message
On Error Resume Next    ' Defer error handling.
Err.Clear
Err.Raise 6    ' Generate an "Overflow" error.
' Check for error, then show message.
If Err.Number <> 0 Then
    Msg = "Error # " & Str(Err.Number) & " was generated by " _
            & Err.Source & Chr(13) & Err.Description
    MsgBox Msg, , "Error", Err.Helpfile, Err.HelpContext
End If

    + File object 
Sub ShowFileInfo(filespec)
    Dim fs, f, s
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set f = fs.GetFile(filespec)
    s = f.DateCreated
    MsgBox s
End Sub

        * Files Collection, file objects within a folder 
Sub ShowFolderList(folderspec)
    Dim fs, f, f1, fc, s
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set f = fs.GetFolder(folderspec)
    Set fc = f.Files
    For Each f1 in fc
        s = s & f1.name 
        s = s & vbCrLf
    Next
    MsgBox s
End Sub


    + FileSystemObject object, Provides access to a computer's file system.
Set fs = CreateObject("Scripting.FileSystemObject")
Set a = fs.CreateTextFile("c:\testfile.txt", True)
a.WriteLine("This is a test.")
a.Close

methods:
BuildPath 
CopyFile 
CopyFolder 
CreateFolder 
CreateTextFile 
DeleteFile 
DeleteFolder 
DriveExists 
FileExists 
FolderExists 
GetAbsolutePathName 
GetBaseName 
GetDrive 
GetDriveName 
GetExtensionName 
GetFile 
GetFolder 
GetParentFolderName 
GetSpecialFolder 
GetTempName 
MoveFile 
MoveFolder 
OpenTextFile 

properties:
Drives 

    + Folder object, provide access to all the properties of a folder 
Sub ShowFolderInfo(folderspec)
    Dim fs, f, s,
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set f = fs.GetFolder(folderspec)
    s = f.DateCreated
    MsgBox s
End Sub

methods:
AddFolders 
Copy, copy folder from one location to another 
CreateTextFile 
Delete 
Move 
    + TextStream object, facilitates sequential access to file 

TextStream. { property | method }

methods:
Close 
Read 
ReadAll 
ReadLine 
Skip 
SkipLine 
Write 
WriteBlankLines 
WriteLine 

properties:
AtEndOfLine 
AtEndOfStream 
Column 
Line 
    + UserForm object, UserForm UserForms [ .Item ] (index), is a window or dialog box that marks up part of an application's user interface 
    
For Each Control in UserForm1.Controls
    Control.Visible = False
Next Control

- Operators 
*
^
+ 
& 
= 
- 
/
\
AddressOf 
And 
Eqv 
    + result=expression1 Imp expression2,  perform a logical implication on two expressions.
Dim A, B, C, D, MyCheck
A = 10: B = 8: C = 6: D = Null    ' Initialize variables.
MyCheck = A > B Imp B > C    ' Returns True.
MyCheck = A > B Imp C > B    ' Returns False.
MyCheck = B > A Imp C > B    ' Returns True.
MyCheck = B > A Imp C > D    ' Returns True.
MyCheck = C > D Imp B > A    ' Returns Null.
MyCheck = B Imp A    ' Returns -1 (bitwise comparison).

    
    + result=object1 Is object2, compare two object reference  
    + result = string Like pattern, compare two strings.
    result, required, any numeric variable 
    string, required, any string expression 
    pattern, required, any string expression conforming to the pattern matching conventions 
Mod 
Not 
Or 
Xor 

- Statements 
AppActivate title, [ wait ], active an application window  
Beep 
Call 
ChDir 
Close 
Const 
Date 
    + Declare, declare references to external procedures in dyanmic link 
    #If VBA7 Then 
    Declare PtrSafe Sub... 
    #Else 
    Declare Sub... 
    #EndIf
    
    + Deftype, used at module level to set the default data type 
DefBool letterrange, [ letterrange ] . . .
DefByte letterrange, [ letterrange ] . . .
DefInt letterrange, [ letterrange ] . . .
DefLng letterrange, [ letterrange ] . . .
DefLngLng letterrange, [ letterrange ] . . . (valid on 64-bit platforms only)
DefLngPtr letterrange, [ letterrange ] . . .
DefCur letterrange, [ letterrange ] . . .
DefSng letterrange, [ letterrange ] . . .
DefDbl letterrange, [ letterrange ] . . .
DefDec letterrange, [ letterrange ] . . .
DefDate letterrange, [ letterrange ] . . .
DefStr letterrange, [ letterrange ] . . .
DefObj letterrange, [ letterrange ] . . .
DefVar letterrange, [ letterrange ] . . .

    + DeleteSetting appname, section, [ key ], delete seting for app in window registry  
Dim 
Do...Loop 
End 
Enum 
Erase 
Error 
Event 
Exit 
FileCopy 
For Each...Next 
Function 
Get 
GoSub...Return 
GoTo 
If...Then...Else 
    + Implements [ InterfaceName | Class ], an interface or class that will be implemented in the class module 
Input 
Kill 
Let 
Line Input 
Load 
Lock, Unlock 
LSet 
Mid 
MkDir 
Name 
On Error 
On...GoSub, On...GoTo 
Open 
Option Base 
Option Compare 
Option Explicit 
Option Private 
Print # 
Private 
Property Get 
Property Let 
Property Set 
Public 
Put 
RaiseEvent 
Randomize 
ReDim 
Rem 
Reset 
Resume 
RmDir 
RSet 
SaveSetting 
Seek 
    + Select Case 
Select Case testexpression
[ Case expressionlist-n [ statements-n ]]
[ Case Else [ elsestatements ]]
End Select

support using mutiple ranges in each case 

Case 1 To 4, 7 To 9, 11, 13, Is > MaxNumber 
Case "everything", "nuts" To "soup", TestItem 

Dim Number 
Number = 8    ' Initialize variable. 
Select Case Number    ' Evaluate Number. 
Case 1 To 5    ' Number between 1 and 5, inclusive. 
    Debug.Print "Between 1 and 5" 
' The following is the only Case clause that evaluates to True. 
Case 6, 7, 8    ' Number between 6 and 8. 
    Debug.Print "Between 6 and 8" 
Case 9 To 10    ' Number is 9 or 10. 
Debug.Print "Greater than 8" 
Case Else    ' Other values. 
    Debug.Print "Not between 1 and 10" 
End Select

    + SendKeys string, [ wait ], sends one or more keystrokes to the active window as if typed at the keyboard  
Dim ReturnValue, I 
ReturnValue = Shell("CALC.EXE", 1)    ' Run Calculator. 
AppActivate ReturnValue     ' Activate the Calculator. 
For I = 1 To 100    ' Set up counting loop. 
    SendKeys I & "{+}", True    ' Send keystrokes to Calculator 
Next I    ' to add each value of I. 
SendKeys "=", True    ' Get grand total. 
SendKeys "%{F4}", True    ' Send ALT+F4 to close Calculator. 

    + Set 
SetAttr 
Static 
Stop 
Sub 
Time 
Type 
Unload 
While...Wend 
Width # 
With 
Write # 

- Visual Basic Add-in Model, Describes how to customize the Visual Basic Editor, and provides documentation for the object model
    + Collections 
    + Event 
    + Objects 
    + Properties 
    + Methods 
    Add 
    AddCustom 
    AddFromFile 
    AddFromGuid 
    AddFromString 
    Close 
    CreateEventProc 
    CreateToolWindow 
    Export 
    Find 
    GetSelection 
    Import 
    InsertFile 
    InsertLines 
    Item 
    MakeCompiledFile 
    Remove 
    ReplaceLine 
    SaveAs 
    SetFocus 
    SetSelection 
    Show 
    Update 


# Glossary VBA, Visual Basic for Application 

# Glossary VBE, Visual Basic for Editor 

# Library Reference 
## Concepts 
- Customize the office fluent ribbon 
- using a managed COM add-in 
- Customize the office fluent ribbon 
- using an open XML formats file 
- getting help on macintosh keywords 
- getting started with VBA in office 
- how autosave impacts andd-ins and macros 
- OLE programmatic identifiers 
- overview of the office fluent ribbon 
- security notes for office solution 


## Reference 
- BulletForm2 
- COMAddIn 
- ComAddIns 
- CommandBar 
...
- ODSOFilter 
- Ruler2 object 
...
Enumerations 
...


# Excel 
## Concepts 
- PowerPivot model object in excel 

The PowerPivot add-in enables you to visually build your own cubes. the PowerPivot Model (PPM) is triggered by user exposed actions and cannot be created directly by the developer

Excel with the PowerPivot add-in creates a single model in the workbook to which it can add data sources

Model object stores references to workbook connections and information about the tables and relationships contained within the PPM

Model.AddConnection Methodï¼Œ Adds a new workbook connection to the model with the same properties

Represents changes made to the PPM. The ModelChanges object contains information about which changes were made to the data model

A collection of ModelColumnChange objects that represent columns for which the data type was change in the PPM.

The ModelRelationships collection contains a collection of ModelRelationship objects in the PPM. 

The ModelTables collection contains a collection of ModelTable objects in the PPM. Table 20 lists the properties of the ModelTables collection.

Represent a single column in the ModelTable object. Used when programmatically creating relationships.
- cauthoring, Coauthoring allows you to edit a workbook hosted in the cloud 

- language specific properties, methods and functions 

- OLE DB for OLAP properties used by excel, OLE DB for OLAP (OnLine Analytical Processing) provider to connect to OLAP cubes. When connecting to an OLAP cube, Excel reads and sets various OLE DB and OLE DB for OLAP properties. 

- programming for the single document, Comparing Single and Multiple Document Interfaces in Excel 2010 and Excel 2013

- interface in excel, Recalculations in Excel will still be "global" meaning that they occur across workbooks in the same instance of Excel. Formulas that reference across workbooks that are open in the same instance of Excel will participate in calculations together and will share the same workbook calculation mode


### Functions 
- use the solver VBA functions, VBA functions from VBA, you must enable the Solver add-in in the Excel Options dialog box. can be used to control the Solver add-in from VBA. Each function corresponds to an action that you can perform interactively

    1. Click the File tab, and then click Options below the Excel tab.

    2. In the Excel Options dialog box, click Add-Ins.

    3. In the Manage drop-down box, select Excel Add-ins, and then click Go.

    4. In the Add-Ins dialog box, select Solver Add-in, and then click OK.

- SolverAdd( CellRef, Relation, FormulaText)

CellRef, required Variant 

Worksheets("Sheet1").Activate 
SolverReset 
SolverOptions precision:=0.001 
SolverOK setCell:=Range("TotalProfit"), _ 

- SolverChange 
- SolverDelete 
- SolverFinishDialog 
- SolverGet 
- SolverLoad 
- SolverOk 
- SolverOkDialog 
- SolverOptions 
- SolverReset 
- SolverSave 
- SolverSolve 


### Workbooks and worksheets 
- Add a table of contents to a workbook 

'Calculate the number of pages

Option Explicit 
Sub Create_TOC() 
Dim wbBook As Workbook 
Dim wsActive As Worksheet 
Dim wsSheet As Worksheet 
Dim lnRow As Long 
Dim lnPages As Long 
Dim lnCount As Long 
Set wbBook = ActiveWorkbook 
With Application 
    .DisplayAlerts = False 
    .ScreenUpdating = False 
End With 
'If the TOC sheet already exist delete it and add a new 
'worksheet. 
On Error Resume Next 
With wbBook 
    .Worksheets("TOC").Delete 
    .Worksheets.Add Before:=.Worksheets(1) 
End With 
On Error GoTo 0 
Set wsActive = wbBook.ActiveSheet 
With wsActive 
    .Name = "TOC" 
    With .Range("A1:B1") 
        .Value = VBA.Array("Table of Contents", "Sheet # - # of Pages") 
        .Font.Bold = True 
    End With 
End With 
lnRow = 2 
lnCount = 1 
'Iterate through the worksheets in the workbook and create 
'sheetnames, add hyperlink and count & write the running number 
'of pages to be printed for each sheet on the TOC sheet. 
For Each wsSheet In wbBook.Worksheets 
    If wsSheet.Name <> wsActive.Name Then 
        wsSheet.Activate 
        With wsActive 
            .Hyperlinks.Add .Cells(lnRow, 1), "", _ 
            SubAddress:="'" & wsSheet.Name & "'!A1", _ 
            TextToDisplay:=wsSheet.Name 
            lnPages = wsSheet.PageSetup.Pages().Count 
            .Cells(lnRow, 2).Value = "'" & lnCount & "-" & lnPages 
        End With 
        lnRow = lnRow + 1 
        lnCount = lnCount + 1 
    End If 
Next wsSheet 
wsActive.Activate 
wsActive.Columns("A:B").EntireColumn.AutoFit 
With Application 
    .DisplayAlerts = True 
    .ScreenUpdating = True 
End With 
End Sub


Sub CreateTableOfContents() 
    ' Determine if there is already a Table of Contents 
    ' Assume it is there, and if it is not, it will raise an error 
    ' if the Err system variable is > 0, you know the sheet is not there 
    Dim WST As Worksheet 
    On Error Resume Next 
    Set WST = Worksheets("TOC") 
    If Not Err = 0 Then 
        ' The Table of contents doesn't exist. Add it 
        Set WST = Worksheets.Add(Before:=Worksheets(1)) 
        WST.Name = "TOC" 
    End If 
    On Error GoTo 0 
     
    ' Set up the table of contents page 
    WST.[A2] = "Table of Contents" 
    With WST.[A6] 
        .CurrentRegion.Clear 
        .Value = "Subject" 
    End With 
    WST.[B6] = "Page(s)" 
    WST.Range("A1:B1").ColumnWidth = Array(36, 12) 
    TOCRow = 7 
    PageCount = 0 
 
    ' Do a print preview on all sheets so Excel calcs page breaks 
    ' The user must manually close the PrintPreview window 
    Msg = "Excel needs to do a print preview to calculate the number of pages. " 
    Msg = Msg & "Please dismiss the print preview by clicking close." 
    MsgBox Msg 
    ActiveWindow.SelectedSheets.PrintPreview 
 
    ' Loop through each sheet, collecting TOC information 
    For Each S In Worksheets 
        If S.Visible = -1 Then 
            S.Select 
            ThisName = ActiveSheet.Name 
            HPages = ActiveSheet.HPageBreaks.Count + 1 
            VPages = ActiveSheet.VPageBreaks.Count + 1 
            ThisPages = HPages * VPages 
 
            ' Enter info about this sheet on TOC 
            Sheets("TOC").Select 
            Range("A" & TOCRow).Value = ThisName 
            Range("B" & TOCRow).NumberFormat = "@" 
            If ThisPages = 1 Then 
                Range("B" & TOCRow).Value = PageCount + 1 & " " 
            Else 
                Range("B" & TOCRow).Value = PageCount + 1 & " - " & PageCount + ThisPages 
            End If 
        PageCount = PageCount + ThisPages 
        TOCRow = TOCRow + 1 
        End If 
    Next S 
End Sub

- create address labels from a spreadsheet 

Sub CreateLabels() 
    ' Clear out all records on Labels 
    Dim LabelSheet As Worksheet 
    Set LabelSheet = Worksheets("Labels") 
    LabelSheet.Cells.ClearContents 
 
    ' Set column width for labels 
    LabelSheet.Cells(1, 1).ColumnWidth = 35 
    LabelSheet.Cells(1, 2).ColumnWidth = 36 
    LabelSheet.Cells(1, 3).ColumnWidth = 30 
     
    ' Loop through all records 
    Dim AddressSheet As Worksheet 
    Set AddressSheet = Worksheets("Addresses") 
    FinalRow = AddressSheet.Cells(65536, 1).End(xlUp).Row 
     
    If FinalRow > 1 Then 
        NextRow = 1 
        NextCol = 1 
        For i = 2 To FinalRow 
            ' Set up row heights 
            If NextCol = 1 Then 
                LabelSheet.Cells(NextRow, 1).Resize(4, 1).RowHeight = 15.25 
                LabelSheet.Cells(NextRow + 4, 1).RowHeight = 13.25 
            End If 
         
            ' Put the Name in row 1 
            ThisRow = NextRow 
            LabelSheet.Cells(ThisRow, NextCol).Value = AddressSheet.Cells(i, 1) & "   " & AddressSheet.Cells(i, 7) 
             
            ' Put the Address Line 1 in row 2 
            If AddressSheet.Cells(i, 2).Value > "" Then 
                ThisRow = ThisRow + 1 
                LabelSheet.Cells(ThisRow, NextCol).Value = AddressSheet.Cells(i, 2) 
            End If 
             
            ' Put the Address Line 2 in row 3 
            If AddressSheet.Cells(i, 3).Value > "" Then 
                ThisRow = ThisRow + 1 
                LabelSheet.Cells(ThisRow, NextCol).Value = AddressSheet.Cells(i, 3) 
            End If 
             
            ' Put the City, State, Country/Region and Postal code in row 4 
            If AddressSheet.Cells(i, 4).Value > "" Then 
                CitySt = AddressSheet.Cells(i, 4) 
            End If 
            ThisRow = ThisRow + 1 
            LabelSheet.Cells(ThisRow, NextCol).Value = CitySt 
             
            ' Update the row and column for the next label 
            If NextCol = 1 Then 
                NextCol = 2 
            ElseIf NextCol = 2 Then 
                NextCol = 3 
            Else 
                NextCol = 1 
                NextRow = NextRow + 5 
            End If 
         
        Next i 
         
        LabelSheet.Activate 
    Else 
        MsgBox "No records match the criteria" 
    End If 
End Sub

- create a scheduling calendar workbook 
Sub CreateCalendar()
   'Define your variables
   Dim wks As Worksheet
   Dim var As Variant
   Dim datDay As Date
   Dim iMonth As Integer, iCol As Integer, iCounter As Integer, iYear As Integer
   Dim sMonth As String
   Dim bln As Boolean
   
   'In the current application, turn off screen updating, save the current state of the status bar,
   'and then turn on the status bar.
   With Application
      .ScreenUpdating = False
      bln = .DisplayStatusBar
      .DisplayStatusBar = True
   End With
   
   'Initialize iYear with the value entered in the first spin button on the worksheet.
   iYear = Cover.SpinButton1.Value
   
   'Create a new workbook to hold your new calendar.
   Workbooks.Add
   
   'In this new workbook, clear out all the worksheets except for one.
   Application.DisplayAlerts = False
   For iCounter = 1 To Worksheets.Count - 1
      Worksheets(2).Delete
   Next iCounter
   Application.DisplayAlerts = True
   
   
   Set wks = ThisWorkbook.Worksheets("Employee")
   
   'For each month of the year
   For iMonth = 1 To 12
      'Create a new worksheet and label the worksheet tab with the name of the new month
      sMonth = Format(DateSerial(1, iMonth, 1), "mmmm")
      Application.StatusBar = "Place month " & sMonth & " on..."
      Worksheets.Add after:=Worksheets(Worksheets.Count)
      ActiveSheet.Name = sMonth
      
      'Copy the employee names to the first column, and add the dates across the remaining columns.
      wks.Range(wks.Cells(3, 1), wks.Cells( _
         WorksheetFunction.CountA(wks.Columns(1)) + 1, 1)).Copy Range("A2")
      Range("A1").Value = "'" & ActiveSheet.Name & " " & iYear
      
      'Call the private subs, depending on what options are chosen for the calendar.
      
      'With weekends and holidays
      If Cover.OptionButton1.Value And Cover.OptionButton3.Value Then
         Call WithHW(iMonth)
      'With weekends, but without holidays
      ElseIf Cover.OptionButton1.Value And Cover.OptionButton3.Value = False Then
         Call WithWsansH(iMonth)
      'With holidays, but without weekends
      ElseIf Cover.OptionButton1.Value = False And Cover.OptionButton3.Value Then
         Call WithHsansW(iMonth)
      'Without weekends or holidays.
      Else
         Call SansWH(iMonth)
      End If
      
      'Apply some formatting.
      Rows(2).Value = Rows(1).Value
      Rows(2).NumberFormat = "ddd"
      Range("A2").Value = "Weekdays"
      Rows("1:2").Font.Bold = True
      Columns.AutoFit
   Next iMonth
   
   'Delete the first worksheet, because there was not anything in it.
   Application.DisplayAlerts = False
   Worksheets(1).Delete
   Application.DisplayAlerts = True
   
   'Label the window.
   Worksheets(1).Select
   ActiveWindow.Caption = "Yearly calendar " & iYear
   
   'Do some final cleanup, and then close out the sub.
   With Application
      .ScreenUpdating = True
      .DisplayStatusBar = bln
      .StatusBar = False
   End With
End Sub


'Name: WithWH (with weekends and holidays)
'Description: Creates a calendar for the specified month, including both weekends and holidays.
Private Sub WithHW(ByVal iMonth As Integer)
   'Define your variables.
   Dim cmt As Comment
   Dim rng As Range
   Dim var As Variant
   Dim datDay As Date
   Dim iYear As Integer, iCol As Integer
   iCol = 1
   iYear = Cover.SpinButton1.Value
   
   'Go through every day of the month and put the date on the calendar in the first row.
   For datDay = DateSerial(iYear, iMonth, 1) To DateSerial(iYear, iMonth + 1, 0)
      iCol = iCol + 1
      Set rng = Range(Cells(1, iCol), Cells(WorksheetFunction.CountA(Columns(1)), iCol))
      
      'Determine if the day is a holiday.
      var = Application.Match(CDbl(datDay), ThisWorkbook.Worksheets("Holidays").Columns(1), 0)
      Cells(1, iCol).Value = datDay
      
      'Add the appropriate formatting that indicates a holiday or weekend.
      With rng.Interior
         Select Case Weekday(datDay)
            Case 1
               .ColorIndex = 35
            Case 7
               .ColorIndex = 36
         End Select
         If Not IsError(var) Then
            .ColorIndex = 34
            Set cmt = Cells(1, iCol).AddComment( _
               ThisWorkbook.Worksheets("Holidays").Cells(var, 2).Value)
            cmt.Shape.TextFrame.AutoSize = True
         End If
      End With
   Next datDay
End Sub


'Name: WithHsansW (with holidays, without weekends)
'Description: Creates a calendar for the specified month, including holidays, but not weekends.
Private Sub WithHsansW(ByVal iMonth As Integer)
   'Declare your variables.
   Dim datDay As Date
   Dim iYear As Integer, iCol As Integer
   iCol = 1
   iYear = Cover.SpinButton1.Value
   
   'For every day in the month, determine if the day is a weekend.
   For datDay = DateSerial(iYear, iMonth, 1) To DateSerial(iYear, iMonth + 1, 0)
      
      'If the day is not a weekend, put it on the calendar.
      If WorksheetFunction.Weekday(datDay, 2) < 6 Then
         iCol = iCol + 1
         Cells(1, iCol).Value = datDay
      End If
   Next datDay
End Sub


'Name: WithWsansH (with weekends, without holidays)
'Description: Creates a calendar for the specified month, including weekends, but not holidays.
Private Sub WithWsansH(ByVal iMonth As Integer)
   'Declare your variables.
   Dim var As Variant
   Dim datDay As Date
   Dim iYear As Integer, iCol As Integer
   iCol = 1
   iYear = Cover.SpinButton1.Value
   
   'For every day in the month, determine if the day is a holiday.
   For datDay = DateSerial(iYear, iMonth, 1) To DateSerial(iYear, iMonth + 1, 0)
      var = Application.Match(CDbl(datDay), ThisWorkbook.Worksheets("Holidays").Columns(1), 0)
      
      'If the day is not a holiday, put it on the calendar.
      If IsError(var) Then
         iCol = iCol + 1
         Cells(1, iCol).Value = datDay
      End If
   Next datDay
End Sub


'Name: SansWH (without weekends or holidays)
'Description: Creates a calendar for the specified month, not including weekends or holidays.
Private Sub SansWH(ByVal iMonth As Integer)
   'Set up your variables
   Dim var As Variant
   Dim datDay As Date
   Dim iYear As Integer, iCol As Integer
   iCol = 1
   iYear = Cover.SpinButton1.Value
   
   'For every day in the month, determine if the day is a weekend or a holiday.
   For datDay = DateSerial(iYear, iMonth, 1) To DateSerial(iYear, iMonth + 1, 0)
      If WorksheetFunction.Weekday(datDay, 2) < 6 Then
         var = Application.Match(CDbl(datDay), ThisWorkbook.Worksheets("Holidays").Columns(1), 0)
         
         'If the day is not a weekend or a holiday, put it on the calendar.
         If IsError(var) Then
            iCol = iCol + 1
            Cells(1, iCol).Value = datDay
         End If
      End If
   Next datDay
End Sub

- create a workbook 

Sub AddNew() 
Set NewBook = Workbooks.Add 
 With NewBook 
 .Title = "All Sales" 
 .Subject = "Sales" 
 .SaveAs Filename:="Allsales.xls" 
 End With 
End Sub


- replace a worksheet 
    + chech worksheet exists 
Sub TestSheetYesNo()
    Dim mySheetName As String, mySheetNameTest As String
    mySheetName = "Sheet4"
    
    On Error Resume Next
    mySheetNameTest = Worksheets(mySheetName).Name
    If Err.Number = 0 Then
        MsgBox "The sheet named ''" & mySheetName & "'' DOES exist in this workbook."
    Else
        Err.Clear
        MsgBox "The sheet named ''" & mySheetName & "'' does NOT exist in this workbook."
    End If
End Sub

    + creating the worksheet 
Sub TestSheetCreate()
    Dim mySheetName As String, mySheetNameTest As String
    mySheetName = "Sheet4"
    
    On Error Resume Next
    mySheetNameTest = Worksheets(mySheetName).Name
    If Err.Number = 0 Then
        MsgBox "The sheet named ''" & mySheetName & "'' DOES exist in this workbook."
    Else
        Err.Clear
        Worksheets.Add.Name = mySheetName
        MsgBox "The sheet named ''" & mySheetName & "'' did not exist in this workbook but it has been created now."
    End If
End Sub

    + replace worksheet 
Sub TestSheetReplace()
    Dim mySheetName As String
    mySheetName = "Sheet4"
    
    Application.DisplayAlerts = False
    On Error Resume Next
    Worksheets(mySheetName).Delete
    Err.Clear
    Application.DisplayAlerts = True
    Worksheets.Add.Name = mySheetName
    MsgBox "The sheet named ''" & mySheetName & "'' has been replaced."
End Sub


- name a worksheet by using a cell value 
Private Sub Worksheet_Change(ByVal Target As Range)
    'Specify the target cell whose entry shall be the sheet tab name.
    If Target.Address <> "$A$1" Then Exit Sub
        'If the target cell is empty (contents cleared) then do not change the sheet name
    If IsEmpty(Target) Then Exit Sub

    'If the length of the target cell's entry is greater than 31 characters, disallow the entry.
    If Len(Target.Value) > 31 Then
        MsgBox "Worksheet tab names cannot be greater than 31 characters in length." & vbCrLf & _
        "You entered " & Target.Value & ", which has " & Len(Target.Value) & " characters.", , "Keep it under 31 characters"
        Application.EnableEvents = False
        Target.ClearContents
        Application.EnableEvents = True
        Exit Sub
    End If

    'Sheet tab names cannot contain the characters /, \, [, ], *, ?, or :.
    'Verify that none of these characters are present in the cell's entry.
    Dim IllegalCharacter(1 To 7) As String, i As Integer
    IllegalCharacter(1) = "/"
    IllegalCharacter(2) = "\"
    IllegalCharacter(3) = "["
    IllegalCharacter(4) = "]"
    IllegalCharacter(5) = "*"
    IllegalCharacter(6) = "?"
    IllegalCharacter(7) = ":"
    For i = 1 To 7
        If InStr(Target.Value, (IllegalCharacter(i))) > 0 Then
            MsgBox "You used a character that violates sheet naming rules." & vbCrLf & vbCrLf & _
            "Please re-enter a sheet name without the ''" & IllegalCharacter(i) & "'' character.", 48, "Not a possible sheet name !!"
            Application.EnableEvents = False
            Target.ClearContents
            Application.EnableEvents = True
            Exit Sub
        End If
    Next i

    'Verify that the proposed sheet name does not already exist in the workbook.
    Dim strSheetName As String, wks As Worksheet, bln As Boolean
    strSheetName = Trim(Target.Value)
    On Error Resume Next
    Set wks = ActiveWorkbook.Worksheets(strSheetName)
    On Error Resume Next
    If Not wks Is Nothing Then
        bln = True
    Else
        bln = False
        Err.Clear
    End If

    'If the worksheet name does not already exist, name the active sheet as the target cell value.
    'Otherwise, advise the user that duplicate sheet names are not allowed.
    If bln = False Then
        ActiveSheet.Name = strSheetName
    Else
        MsgBox "There is already a sheet named " & strSheetName & "." & vbCrLf & _
        "Please enter a unique name for this sheet."
        Application.EnableEvents = False
        Target.ClearContents
        Application.EnableEvents = True
    End If

End Sub


- refer to more than one sheet 

Sub Several() 
 Worksheets(Array("Sheet1", "Sheet2", "Sheet4")).Select 
End Sub

- refer to sheets by index number 
Sub FirstOne() 
 Worksheets(1).Activate 
End Sub

Sub FourthOne() 
 Sheets(4).Activate 
End Sub

- refer to sheets by name 
Worksheets("Sheet1").Activate 
Charts("Chart1").Activate

using the Worksheets and Charts properties. The following statements activate various sheets in the active workbook.
 
- sort worksheets alphanumerically by name 

Sub SortSheetsTabName()
    Application.ScreenUpdating = False
    Dim iSheets%, i%, j%
    iSheets = Sheets.Count
    For i = 1 To iSheets - 1
        For j = i + 1 To iSheets
            If Sheets(j).Name < Sheets(i).Name Then
                Sheets(j).Move before:=Sheets(i)
            End If
        Next j
    Next i
    Application.ScreenUpdating = True
End Sub

- opern a workbook 

Sub OpenUp() 
 Workbooks.Open("C:\MyFolder\MyBook.xls") 
End Sub

- save documents as webpages 
ActiveWorkbook.SaveAs _ 
 Filename:="C:\Reports\myfile.htm", _ 
 FileFormat:=xlHTML
 
    + customize web page 
With Application.DefaultWebOptions 
 .RelyonVML = True 
 .AllowPNG = True 
 .PixelsPerInch = 96 
End With 
With ActiveWorkbook 
 .WebOptions.AllowPNG = False 
 With .PublishObjects(1) 
 .FileName = "C:\Reports\1998_Q1.htm" 
 .Publish 
 End With 
End With


With ActiveWorkbook 
 With .WebOptions 
 .RelyonVML = True 
 .PixelsPerInch = 96 
 End With 
 With .PublishObjects(1) 
 .FileName = _ 
 "https://example.homepage.com/annualreport.htm" 
 .Publish 
 End With 
End With

Workbooks.Open Filename:="C:\Reports\1997_Q4.htm"
- formatting and VBA codes for headers and footers, (VBA) codes can be included as a part of the header and footer properties (LeftHeader, CenterHeader, RightHeader, LeftFooter, CenterFooter, and RightFooter).

&L, left aligns the characters that follow 
&C, Cneters the characters t hat follow 
&R, Right aligns the characters that follow 
&E, Turns double-underline printing on or off 
&X, turns superscript printing on or off 
&Y, turns subscript printing on or off 
&B, turns bold printing on or off 
&I, turns italic printing on or off 
&U, turns underling printing on or off 
&S, turns strikethrough printing on or off 
&"fontname", prints the characters that follow in th e specificied font. Be sure to include the double quotation marks 
&nn, prints that characters in the specified color. user supplies a hexadecimal color value 
&"+", prints the characters that follow in t he heading 
&"-", prints the characters that follow in the heading font of the current theme 
&K xx. S nnn, prints the characters that follow in the specified color from t he current theme. 
&D, current date 
&T, current Time 
&F, name of the document 
&A, name of t he workbook tab 
&P+number, page number 
&P-number, prints the page number minutes the specified number 
&&, single ampersand 
&N, prints the total number of pages in the document 
&Z, prints the file path 
&G, inserts an image 

Sub Date_Time() 
 ActiveSheet.PageSetup.CenterHeader = "&D &B&ITime:&I&B&T" 
End Sub


- return an object from a collection 
Set FirstBook = Workbooks.Item(1)

    + named objects 
ActiveWorkbook.Worksheets.Add.Name = "A New Sheet" 
With Worksheets("A New Sheet") 
 .Range("A5:A10").Formula = "=RAND()" 
End With

Worksheets("Sheet1").Range("A1:A1"). _ 
 Borders.Item(xlEdgeBottom).LineStyle = xlDouble


### Cell and ranges 
- create a html file with a table of contents based on cell data 
Sub CreateHTML()
   'Define your variables.
   Dim iRow As Long
   Dim iStage As Integer
   Dim iCounter As Integer
   Dim iPage As Integer
   
   'Create an .htm file in the same directory as your active workbook.
   Dim sFile As String
   sFile = ActiveWorkbook.Path & "\test.htm"
   Close
   
   'Open up the temp HTML file and format the header.
   Open sFile For Output As #1
   Print #1, "<html>"
   Print #1, "<head>"
   Print #1, "<style type=""text/css"">"
   Print #1, "  body { font-size:12px;font-family:tahoma } "
   Print #1, "</style>"
   Print #1, "</head>"
   Print #1, "<body>"
   
   'Start on the 2nd row to avoid the header.
   iRow = 2
   
   'Translate the first column of the table into the first level of the hierarchy.
   Do While WorksheetFunction.CountA(Rows(iRow)) > 0
      If Not IsEmpty(Cells(iRow, 1)) Then
         For iCounter = 1 To iStage
            Print #1, "</ul>"
            iStage = iStage - 1
         Next iCounter
         Print #1, "<ul>"
         Print #1, "<li><a href=""" & iPage & ".html"">" & Cells(iRow, 1).Value & "</a>"
         iPage = iPage + 1
         If iStage < 1 Then
            iStage = iStage + 1
         End If
      End If
      
    'Translate the second column of the table into the second level of the hierarchy.
      If Not IsEmpty(Cells(iRow, 2)) Then
         For iCounter = 2 To iStage
            Print #1, "</ul>"
            iStage = iStage - 1
         Next iCounter
         Print #1, "<ul>"
         Print #1, "<li><a href=""" & iPage & ".html"">" & Cells(iRow, 2).Value & "</a>"
         iPage = iPage + 1
         If iStage < 2 Then
            iStage = iStage + 1
         End If
      End If
      
      'Translate the third column of the table into the third level of the hierarchy.
      If Not IsEmpty(Cells(iRow, 3)) Then
         If iStage < 3 Then
            Print #1, "<ul>"
         End If
         Print #1, "<li><a href=""" & iPage & ".html"">" & Cells(iRow, 3).Value & "</a>"
         iPage = iPage + 1
         If iStage < 3 Then
            iStage = iStage + 1
         End If
      End If
      iRow = iRow + 1
   Loop
   
   'Add ending HTML tags
   For iCounter = 2 To iStage
      Print #1, "    </ul>"
      iStage = iStage - 1
   Next iCounter
   Print #1, "</body>"
   Print #1, "</html>"
   Close
   Shell "hh " & vbLf & sFile, vbMaximizedFocus
End Sub

- delete duplicate entries in a range 
Sub DeleteDuplicates()
    With Application
        ' Turn off screen updating to increase performance
        .ScreenUpdating = False
        Dim LastColumn As Integer
        LastColumn = Cells.Find(What:="*", After:=Range("A1"), SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column + 1
        With Range("A1:A" & Cells(Rows.Count, 1).End(xlUp).Row)
            ' Use AdvanceFilter to filter unique values
            .AdvancedFilter Action:=xlFilterInPlace, Unique:=True
            .SpecialCells(xlCellTypeVisible).Offset(0, LastColumn - 1).Value = 1
            On Error Resume Next
            ActiveSheet.ShowAllData
            'Delete the blank rows
            Columns(LastColumn).SpecialCells(xlCellTypeBlanks).EntireRow.Delete
            Err.Clear
        End With
        Columns(LastColumn).Clear
        .ScreenUpdating = True
    End With
End Sub

- Fill a value down into blank cells in a column 
Sub FillCellsFromAbove()
    ' Turn off screen updating to improve performance
    Application.ScreenUpdating = False
    On Error Resume Next
    ' Look in column A
    With Columns(1)
        ' For blank cells, set them to equal the cell above
        .SpecialCells(xlCellTypeBlanks).Formula = "=R[-1]C"
        'Convert the formula to a value
        .Value = .Value
    End With
    Err.Clear
    Application.ScreenUpdating = True
End Sub

- hide and unhide columns 
Sub Hide_Columns()

    'Excel objects.
    Dim m_wbBook As Workbook
    Dim m_wsSheet As Worksheet
    Dim m_rnCheck As Range
    Dim m_rnFind As Range
    Dim m_stAddress As String

    'Initialize the Excel objects.
    Set m_wbBook = ThisWorkbook
    Set m_wsSheet = m_wbBook.Worksheets("Sheet1")
    
    'Search the four columns for any constants.
    Set m_rnCheck = m_wsSheet.Range("A1:D1").SpecialCells(xlCellTypeConstants)
    
    'Retrieve all columns that contain an X. If there is at least one, begin the DO/WHILE loop.
    With m_rnCheck
        Set m_rnFind = .Find(What:="X")
        If Not m_rnFind Is Nothing Then
            m_stAddress = m_rnFind.Address
             
            'Hide the column, and then find the next X.
            Do
                m_rnFind.EntireColumn.Hidden = True
                Set m_rnFind = .FindNext(m_rnFind)
            Loop While Not m_rnFind Is Nothing And m_rnFind.Address <> m_stAddress
        End If
    End With

End Sub

Sub Unhide_Columns()
    'Excel objects.
    Dim m_wbBook As Workbook
    Dim m_wsSheet As Worksheet
    Dim m_rnCheck As Range
    Dim m_rnFind As Range
    Dim m_stAddress As String
    
    'Initialize the Excel objects.
    Set m_wbBook = ThisWorkbook
    Set m_wsSheet = m_wbBook.Worksheets("Sheet1")
    
    'Search the four columns for any constants.
    Set m_rnCheck = m_wsSheet.Range("A1:D1").SpecialCells(xlCellTypeConstants)
    
    'Retrieve all columns that contain X. If there is at least one, begin the DO/WHILE loop.
    With m_rnCheck
        Set m_rnFind = .Find(What:="X", LookIn:=xlFormulas)
        If Not m_rnFind Is Nothing Then
            m_stAddress = m_rnFind.Address
            
            'Unhide the column, and then find the next X.
            Do
                m_rnFind.EntireColumn.Hidden = False
                Set m_rnFind = .FindNext(m_rnFind)
            Loop While Not m_rnFind Is Nothing And m_rnFind.Address <> m_stAddress
        End If
    End With

End Sub

- highlight the active cell, row, or column 
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Application.ScreenUpdating = False
    ' Clear the color of all the cells
    Cells.Interior.ColorIndex = 0
    ' Highlight the active cell
    Target.Interior.ColorIndex = 8
    Application.ScreenUpdating = True
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Target.Cells.Count > 1 Then Exit Sub
    Application.ScreenUpdating = False
    ' Clear the color of all the cells
    Cells.Interior.ColorIndex = 0
    With Target
        ' Highlight the entire row and column that contain the active cell
        .EntireRow.Interior.ColorIndex = 8
        .EntireColumn.Interior.ColorIndex = 8
    End With
    Application.ScreenUpdating = True
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' Clear the color of all the cells
    Cells.Interior.ColorIndex = 0
    If IsEmpty(Target) Or Target.Cells.Count > 1 Then Exit Sub
    Application.ScreenUpdating = False
    With ActiveCell
        ' Highlight the row and column that contain the active cell, within the current region
        Range(Cells(.Row, .CurrentRegion.Column), Cells(.Row, .CurrentRegion.Columns.Count + .CurrentRegion.Column - 1)).Interior.ColorIndex = 8
        Range(Cells(.CurrentRegion.Row, .Column), Cells(.CurrentRegion.Rows.Count + .CurrentRegion.Row - 1, .Column)).Interior.ColorIndex = 8
    End With
    Application.ScreenUpdating = True
End Sub

- make a cell blink 
Option Explicit

Public NextBlink As Double
'The cell that you want to blink
Public Const BlinkCell As String = "Sheet1!B2"

'Start blinking
Private Sub StartBlinking()
    Application.Goto Range("A1"), 1
    'If the color is red, change the color and text to white
    If Range(BlinkCell).Interior.ColorIndex = 3 Then
        Range(BlinkCell).Interior.ColorIndex = 0
        Range(BlinkCell).Value = "White"
    'If the color is white, change the color and text to red
    Else
        Range(BlinkCell).Interior.ColorIndex = 3
        Range(BlinkCell).Value = "Red"
    End If
    'Wait one second before changing the color again
    NextBlink = Now + TimeSerial(0, 0, 1)
    Application.OnTime NextBlink, "StartBlinking", , True
End Sub

'Stop blkinking
Private Sub StopBlinking()
    'Set color to white
    Range(BlinkCell).Interior.ColorIndex = 0
    'Clear the value in the cell
    Range(BlinkCell).ClearContents
    On Error Resume Next
    Application.OnTime NextBlink, "StartBlinking", , False
    Err.Clear
End Sub

- prevent duplicate entries in a range 
Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

    'Define your variables.
    Dim ws As Worksheet, EvalRange As Range
    
    'Set the range where you want to prevent duplicate entries.
    Set EvalRange = Range("A1:B20")
    
    'If the cell where value was entered is not in the defined range, if the value pasted is larger than a single cell,
    'or if no value was entered in the cell, then exit the macro.
    If Intersect(Target, EvalRange) Is Nothing Or Target.Cells.Count > 1 Then Exit Sub
    If IsEmpty(Target) Then Exit Sub
    
    'If the value entered already exists in the defined range on the current worksheet, throw an
    'error message and undo the entry.
    If WorksheetFunction.CountIf(EvalRange, Target.Value) > 1 Then
        MsgBox Target.Value & " already exists on this sheet."
        Application.EnableEvents = False
        Application.Undo
        Application.EnableEvents = True
    End If
    
    'Check the other worksheets in the workbook.
    For Each ws In Worksheets
        With ws
            If .Name <> Target.Parent.Name Then
                'If the value entered already exists in the defined range on the current worksheet, throw an
                'error message and undo the entry.
                If WorksheetFunction.CountIf(Sheets(.Name).Range("A1:B20"), Target.Value) > 0 Then
                    MsgBox Target.Value & " already exists on the sheet named " & .Name & ".", _
                    16, "No duplicates allowed in " & EvalRange.Address(0, 0) & "."
                    Application.EnableEvents = False
                    Application.Undo
                    Application.EnableEvents = True
                    Exit For
                End If
            End If
        End With
    Next ws

End Sub

- reference cells and ranges 
    + all cells 
Sub ClearSheet() 
 Worksheets("Sheet1").Cells.ClearContents 
End Sub

    + refer to cells and ranges by using A1 notation 
Sub FormatRange() 
 Workbooks("Book1").Sheets("Sheet1").Range("A1:D5") _ 
 .Font.Bold = True 
End Sub  
    
Reference 	            Meaning
Range("A1") 	        Cell A1
Range("A1:B5") 	        Cells A1 through B5
Range("C5:D9,G9:H16") 	A multiple-area selection
Range("A:A") 	        Column A
Range("1:1") 	        Row 1
Range("A:C") 	        Columns A through C
Range("1:5") 	        Rows 1 through 5
Range("1:1,3:3,8:8") 	Rows 1, 3, and 8
Range("A:A,C:C,F:F") 	Columns A, C, and F

- refer to cells by using a range object 
Sub Random() 
 Dim myRange As Range 
 Set myRange = Worksheets("Sheet1").Range("A1:D5") 
 myRange.Formula = "=RAND()" 
 myRange.Font.Bold = True 
End Sub

- refer cells by using index numbers 
Sub EnterValue() 
 Worksheets("Sheet1").Cells(6, 1).Value = 10 
End Sub

Sub CycleThrough() 
 Dim Counter As Integer 
 For Counter = 1 To 20 
 Worksheets("Sheet1").Cells(Counter, 3).Value = Counter 
 Next Counter 
End Sub

- refer to cells by using shortcut 
Sub ClearRange() 
 Worksheets("Sheet1").[A1:B5].ClearContents 
End Sub 
 
Sub SetValue() 
 [MyRange].Value = 30 
End Sub

- refer to cells relative to other cells 
Sub Underline() 
 ActiveCell.Offset(1, 3).Font.Underline = xlDouble 
End Sub

Sub CycleThrough() 
 Dim counter As Integer 
 For counter = 1 To 20 
 Worksheets("Sheet1").Cells(counter, 3).Value = counter * 5 
 Next counter 
End Sub

- refer to multiple ranges 
'You can refer to multiple ranges with the Range property by inserting commas between two or more references
Sub ClearRanges() 
 Worksheets("Sheet1").Range("C5:D9,G9:H16,B14:D18"). _ 
 ClearContents 
End Sub

Sub ClearNamed() 
 Range("MyRange, YourRange, HisRange").ClearContents 
End Sub

'You can combine multiple ranges into one Range object by using the Union method
Sub MultipleRange() 
 Dim r1, r2, myMultipleRange As Range 
 Set r1 = Sheets("Sheet1").Range("A1:B2") 
 Set r2 = Sheets("Sheet1").Range("C3:D4") 
 Set myMultipleRange = Union(r1, r2) 
 myMultipleRange.Font.Bold = True 
End Sub

'You can use the Areas property to refer to the selected range or to the collection of ranges in a multiple-area selection.
Sub FindMultiple() 
 If Selection.Areas.Count > 1 Then 
 MsgBox "Cannot do this to a multiple selection." 
 End If 
End Sub

- refer to named ranges 

How to Create a WorkSHEET Specific Named Range:

    1. Select the range you want to name.
    2. Click on the "Formulas" tab on the Excel Ribbon at the top of the window.
    3. Click "Define Name" button in the Formula tab.
    3. In the "New Name" dialogue box, under the field "Scope" choose the specific worksheet that the range you want to define is located

Sub FormatRange() 
    Range("MyBook.xls!MyRange").Font.Italic = True 
End Sub

Sub FormatSales() 
    Range("[Report.xls]Sheet1!Sales").BorderAround Weight:=xlthin 
End Sub

Sub ClearRange() 
    Application.Goto Reference:="MyBook.xls!MyRange" 
    Selection.ClearContents 
End Sub

Sub Add_Data_Validation_From_Other_Worksheet()
'The current Excel workbook and worksheet, a range to define the data to be validated, and the target range
'to place the data in.
Dim wbBook As Workbook
Dim wsTarget As Worksheet
Dim wsSource As Worksheet
Dim rnTarget As Range
Dim rnSource As Range

'Initialize the Excel objects and delete any artifacts from the last time the macro was run.
Set wbBook = ThisWorkbook
With wbBook
    Set wsSource = .Worksheets("Sheet2")
    Set wsTarget = .Worksheets("Sheet1")
    On Error Resume Next
    .Names("Source").Delete
    On Error GoTo 0
End With

'On the source worksheet, create a range in column A of up to 98 cells long, and name it "Source".
With wsSource
    .Range(.Range("A2"), .Range("A100").End(xlUp)).Name = "Source"
End With

'On the target worksheet, create a range 8 cells long in column D.
Set rnTarget = wsTarget.Range("D2:D10")

'Clear out any artifacts from previous macro runs, then set up the target range with the validation data.
With rnTarget
    .ClearContents
    With .Validation
        .Delete
        .Add Type:=xlValidateList, _
             AlertStyle:=xlValidAlertStop, _
             Formula1:="=Source"
        
'Set up the Error dialog with the appropriate title and message
        .ErrorTitle = "Value Error"
        .ErrorMessage = "You can only choose from the list."
    End With
End With

End Sub

- refer to rows and columns 
Sub RowBold() 
    Worksheets("Sheet1").Rows(1).Font.Bold = True 
End Sub

Sub SeveralRows() 
    Worksheets("Sheet1").Activate 
    Dim myUnion As Range 
    Set myUnion = Union(Rows(1), Rows(3), Rows(5)) 
    myUnion.Font.Bold = True 
End Sub

Sub Delete_Empty_Rows()
    'The range from which to delete the rows.
    Dim rnSelection As Range
    
    'Row and count variables used in the deletion process.
    Dim lnLastRow As Long
    Dim lnRowCount As Long
    Dim lnDeletedRows As Long
    
    'Initialize the number of deleted rows.
    lnDeletedRows = 0
    
    'Confirm that a range is selected, and that the range is contiguous.
    If TypeName(Selection) = "Range" Then
        If Selection.Areas.Count = 1 Then
            
            'Initialize the range to what the user has selected, and initialize the count for the upcoming FOR loop.
            Set rnSelection = Application.Selection
            lnLastRow = rnSelection.Rows.Count
        
            'Start at the bottom row and work up: if the row is empty then
            'delete the row and increment the deleted row count.
            For lnRowCount = lnLastRow To 1 Step -1
                If Application.CountA(rnSelection.Rows(lnRowCount)) = 0 Then
                    rnSelection.Rows(lnRowCount).Delete
                    lnDeletedRows = lnDeletedRows + 1
                End If
            Next lnRowCount
        
            rnSelection.Resize(lnLastRow - lnDeletedRows).Select
         Else
            MsgBox "Please select only one area.", vbInformation
         End If
    Else
        MsgBox "Please select a range.", vbInformation
    End If
    
    'Turn screen updating back on.
    Application.ScreenUpdating = True

End Sub

- select a range, the UsedRange property

Sub SelectUsedRange()
    ActiveSheet.UsedRange.Select
    MsgBox "The used range address is " & ActiveSheet.UsedRange.Address(0, 0) & ".", 64, "Used range address:"
End Sub

Returns a Range object that represents the used range on the specified worksheet. Read-only.

- selecting a data range starting at cell a1 
Sub SelectDataRange()
    Dim LastRow As Long, LastColumn As Long
    LastRow = Cells.Find(What:="*", After:=Range("A1"), SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
    LastColumn = Cells.Find(What:="*", After:=Range("A1"), SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
    Range("A1").Resize(LastRow, LastColumn).Select
    MsgBox "The data range address is " & Selection.Address(0, 0) & ".", 64, "Data-containing range address:"
End Sub

- selecting a data rnage of unknown starting location 
Sub UnknownRange()
    If WorksheetFunction.CountA(Cells) = 0 Then
        MsgBox "There is no range to be selected.", , "No cells contain any values."
        Exit Sub
    Else
        Dim FirstRow&, FirstCol&, LastRow&, LastCol&
        Dim myUsedRange As Range
        FirstRow = Cells.Find(What:="*", SearchDirection:=xlNext, SearchOrder:=xlByRows).Row
        
        On Error Resume Next
        FirstCol = Cells.Find(What:="*", SearchDirection:=xlNext, SearchOrder:=xlByColumns).Column
        If Err.Number <> 0 Then
            Err.Clear
            MsgBox _
            "There are horizontally merged cells on the sheet" & vbCrLf & _
            "that should be removed in order to locate the range.", 64, "Please unmerge all cells."
            Exit Sub
        End If
        
        LastRow = Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
        LastCol = Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
        Set myUsedRange = Range(Cells(FirstRow, FirstCol), Cells(LastRow, LastCol))
        myUsedRange.Select
        MsgBox "The data range on this worksheet is " & myUsedRange.Address(0, 0) & ".", 64, "Range address:"
    End If
End Sub

- looping through a range of cells 
Sub RoundToZero1() 
 For Counter = 1 To 20 
 Set curCell = Worksheets("Sheet1").Cells(Counter, 3) 
 If Abs(curCell.Value) < 0.01 Then curCell.Value = 0 
 Next Counter 
End Sub


Sub RoundToZero2() 
 For Each c In Worksheets("Sheet1").Range("A1:D10").Cells 
 If Abs(c.Value) < 0.01 Then c.Value = 0 
 Next 
End Sub


Sub RoundToZero3() 
 For Each c In ActiveCell.CurrentRegion.Cells 
 If Abs(c.Value) < 0.01 Then c.Value = 0 
 Next 
End Sub

- selecting and activating cells 
Sub EnterFormula() 
    Worksheets("Sheet1").Range("D6").Formula = "=SUM(D2:D5)" 
End Sub

'The Select method activates sheets and objects on sheets; the Selection property returns an object that represents the current selection on the active sheet in the active workbook. The workbook must activated 
Sub Macro1() 
    Sheets("Sheet1").Select 
    Range("A1").Select 
    ActiveCell.FormulaR1C1 = "Name" 
    Range("B1").Select 
    ActiveCell.FormulaR1C1 = "Address" 
    Range("A1:B1").Select 
    Selection.Font.Bold = True 
End Sub

Sub Labels() 
    With Worksheets("Sheet1") 
        .Range("A1") = "Name" 
        .Range("B1") = "Address" 
        .Range("A1:B1").Font.Bold = True 
    End With 
End Sub

Sub CopyRow() 
    Worksheets("Sheet1").Rows(1).Copy 
    Worksheets("Sheet2").Select 
    Worksheets("Sheet2").Rows(1).Select 
    Worksheets("Sheet2").Paste 
End Sub

Sub MakeActive() 
    Worksheets("Sheet1").Activate 
    Range("A1:D4").Select 
    Range("B2").Activate 
End Sub

- working with 3d ranges 
Sub FormatSheets() 
 Sheets(Array("Sheet2", "Sheet3", "Sheet5")).Select 
 Range("A1:H1").Select 
 Selection.Borders(xlBottom).LineStyle = xlDouble 
End Sub

Sub FillAll() 
 Worksheets("Sheet2").Range("A1:H1") _ 
 .Borders(xlBottom).LineStyle = xlDouble 
 Worksheets.FillAcrossSheets (Worksheets("Sheet2") _ 
 .Range("A1:H1")) 
End Sub

- workging with active cell 
Sub SetValue() 
 Worksheets("Sheet1").Activate 
 ActiveCell.Value = 35 
End Sub

Sub SetActive_MakeBold() 
 Worksheets("Sheet1").Activate 
 Worksheets("Sheet1").Range("B5").Activate 
 ActiveCell.Font.Bold = True 
End Sub

Sub MoveActive() 
 Worksheets("Sheet1").Activate 
 Range("A1:D10").Select 
 ActiveCell.Value = "Monthly Totals" 
 ActiveCell.Offset(0, 1).Activate 
End Sub

Sub Region() 
 Worksheets("Sheet1").Activate 
 ActiveCell.CurrentRegion.Select 
 Selection.Style = "Currency" 
End Sub

- cell error values 
Constant 	Error number 	Cell error value
xlErrDiv0 	2007 	#DIV/0!
xlErrNA 	2042 	#N/A
xlErrName 	2029 	#NAME?
xlErrNull 	2000 	#NULL!
xlErrNum 	2036 	#NUM!
xlErrRef 	2023 	#REF!
xlErrValue 	2015 	#VALUE!

- add a unique list of values to a combo box 
Sub Populate_Combobox_Worksheet()
    'The Excel workbook and worksheets that contain the data, as well as the range placed on that data
    Dim wbBook As Workbook
    Dim wsSheet As Worksheet
    Dim rnData As Range

    'Variant to contain the data to be placed in the combo box.
    Dim vaData As Variant

    'Initialize the Excel objects
    Set wbBook = ThisWorkbook
    Set wsSheet = wbBook.Worksheets("Sheet1")

    'Set the range equal to the data, and then (temporarily) copy the unique values of that data to the L column.
    With wsSheet
        Set rnData = .Range(.Range("A1"), .Range("A100").End(xlUp))
        rnData.AdvancedFilter Action:=xlFilterCopy, _
                          CopyToRange:=.Range("L1"), _
                          Unique:=True
        'store the unique values in vaData
        vaData = .Range(.Range("L2"), .Range("L100").End(xlUp)).Value
        'clean up the contents of the temporary data storage
        .Range(.Range("L1"), .Range("L100").End(xlUp)).ClearContents
    End With

    'display the unique values in vaData in the combo box already in existence on the worksheet.
    With wsSheet.OLEObjects("ComboBox1").Object
        .Clear
        .List = vaData
        .ListIndex = -1
    End With

End Sub

- add controls to a document, To add controls to a document, open the Control Toolbox, click the control you want to add, and then click on the document. Drag an adjustment handle of the control until the control's outline is the size and shape you want.

- add controls to a user form, To add controls to a user form, find the control you want to add in the Toolbox, drag the control onto the form

- automatically dismiss a message box 

Sub MessageBoxTimer()
    Dim AckTime As Integer, InfoBox As Object
    Set InfoBox = CreateObject("WScript.Shell")
    'Set the message box to close after 10 seconds
    AckTime = 10
    Select Case InfoBox.Popup("Click OK (this window closes automatically after 10 seconds).", _
    AckTime, "This is your Message Box", 0)
        Case 1, -1
            Exit Sub
    End Select
End Sub

- Use ActiveX Controls on sheets 

Worksheets(1).OLEObjects.Add "Forms.CommandButton.1", _ 
    Left:=10, Top:=10, Height:=20, Width:=100

Worksheets(1).OLEObjects("CommandButton1").Left = 10

- events, worksheet functions and shapes 
    + chart object events 
Private Sub Chart_SeriesChange(ByVal SeriesIndex As Long, _ 
        ByVal PointIndex As Long) 
    Set p = ActiveChart.SeriesCollection(SeriesIndex). _ 
        Points(PointIndex) 
    p.Border.ColorIndex = 3 
End Sub

    + control and dialog box events 

    + querytable object events, QueryTable object events occur when a QueryTable object is refreshed. 

    + worksheet object events
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, _ 
        Cancel As Boolean) 
    For Each icbc In Application.CommandBars("cell").Controls 
        If icbc.Tag = "brccm" Then icbc.Delete 
    Next icbc 
    If Not Application.Intersect(Target, Range("b1:b10")) _ 
            Is Nothing Then 
        With Application.CommandBars("cell").Controls _ 
            .Add(Type:=msoControlButton, before:=6, _ 
                temporary:=True) 
           .Caption = "New Context Menu Item" 
           .OnAction = "MyMacro" 
           .Tag = "brccm" 
        End With 
    End If 
End Sub

Private Sub Worksheet_Calculate() 
    Columns("A:F").AutoFit 
End Sub

- use events with excel objects 
Application.EnableEvents = False 
ActiveWorkbook.Save 
Application.EnableEvents = True

- calling a worksheet function from visual basic 
Sub UseFunction() 
 Dim myRange As Range 
 Set myRange = Worksheets("Sheet1").Range("A1:C10") 
 answer = Application.WorksheetFunction.Min(myRange) 
 MsgBox answer 
End Sub

- working with shapes 
Worksheets(1).Shapes(1).Fill.ForeColor.RGB = RGB(255, 0, 0)

Set myDocument = Worksheets(1) 
Set myRange = myDocument.Shapes.Range(Array("Big Star", _ 
 "Little Star")) 
myRange.Fill.PresetGradient _ 
 msoGradientHorizontal, 1, msoGradientBrass
 
- list of worksheet functions available to visual basic 
- using events with the application object 
Dim X As New EventClassModule 
 
Sub InitializeApp() 
 Set X.App = Application 
End Sub

- use events with the QueryTable 
Dim clsQueryTable as New ClsModQT 
 
Sub RunInitQTEvent 
 clsQueryTable.InitQueryEvent _ 
 QT:=ActiveSheet.QueryTables(1) 
End Sub

- control one office application from another 
Dim appWD As Word.Application 

Set appWD = CreateObject("Word.Application") 
appWD.Documents.Add

- export a chart to a word document 
Sub Export_Chart_Word()

    'Name of an existing Word document, and the name the chart will have when exported.
    Const stWordDocument As String = "Chart Report.docx"
    Const stChartName As String = "ChartReport.gif"
    
    'Word objects.
    Dim wdApp As Word.Application
    Dim wdDoc As Word.Document
    Dim wdbmRange As Word.Range
    
    'Excel objects.
    Dim wbBook As Workbook
    Dim wsSheet As Worksheet
    Dim ChartObj As ChartObject
    
    'Initialize the Excel objects.
    Set wbBook = ThisWorkbook
    Set wsSheet = wbBook.Worksheets("Sheet1")
    Set ChartObj = wsSheet.ChartObjects("Chart 1")
    
    'Turn off screen updating.
    Application.ScreenUpdating = False
    
    'Export the chart to the current directory, using the specified name, and save the chart as a .gif
    ChartObj.Chart.Export _
                   Filename:=wbBook.Path & "\" & stChartName, _
                   FilterName:="GIF"
    
    'Initialize the Word objects to the existing Word document and bookmark.
    Set wdApp = New Word.Application
    Set wdDoc = wdApp.Documents.Open(wbBook.Path & "\" & stWordDocument)
    Set wdbmRange = wdDoc.Bookmarks("ChartReport").Range
    
    'If there is already an inline shape, that means the macro has been run before - clean up any artifacts.
    On Error Resume Next
    With wdDoc.InlineShapes(1)
        .Select
        .Delete
    End With
    On Error GoTo 0
    
    'Add the .gif file to the document at the bookmarked location,
    'and ensure that it is saved inside the Word doc.
    With wdbmRange
        .Select
        .InlineShapes.AddPicture _
        Filename:=wbBook.Path & "\" & stChartName, _
        LinkToFile:=False, _
        savewithdocument:=True
    End With
    
    'Save and close the Word document.
    With wdDoc
        .Save
        .Close
    End With
    
    'Quit Word.
    wdApp.Quit
    
    'Clear the variables.
    Set wdbmRange = Nothing
    Set wdDoc = Nothing
    Set wdApp = Nothing
    
    'Delete the temporary .gif file.
    On Error Resume Next
    Kill wbBook.Path & "\" & stChartName
    On Error GoTo 0
    
    MsgBox "Chart exported successfully to " & stWordDocument

End Sub

- exporting a range to a table in a word document 

Sub Export_Table_Data_Word()

    'Name of the existing Word document
    Const stWordDocument As String = "Table Report.docx"
    
    'Word objects.
    Dim wdApp As Word.Application
    Dim wdDoc As Word.Document
    Dim wdCell As Word.Cell
    
    'Excel objects
    Dim wbBook As Workbook
    Dim wsSheet As Worksheet
    
    'Count used in a FOR loop to fill the Word table.
    Dim lnCountItems As Long
    
    'Variant to hold the data to be exported.
    Dim vaData As Variant
    
    'Initialize the Excel objects
    Set wbBook = ThisWorkbook
    Set wsSheet = wbBook.Worksheets("Sheet1")
    vaData = wsSheet.Range("A1:A10").Value
    
    'Instantiate Word and open the "Table Reports" document.
    Set wdApp = New Word.Application
    Set wdDoc = wdApp.Documents.Open(wbBook.Path & "\" & stWordDocument)
    
    lnCountItems = 1
    
    'Place the data from the variant into the table in the Word doc.
    For Each wdCell In wdDoc.Tables(1).Columns(1).Cells
        wdCell.Range.Text = vaData(lnCountItems, 1)
        lnCountItems = lnCountItems + 1
    Next wdCell
    
    'Save and close the Word doc.
    With wdDoc
        .Save
        .Close
    End With
    
    wdApp.Quit
    
    'Null out the variables.
    Set wdCell = Nothing
    Set wdDoc = Nothing
    Set wdApp = Nothing
    
    MsgBox "The " & stWordDocument & "'s table has successfully " & vbNewLine & _
           "been updated!", vbInformation

End Sub

- export a table to a word document 
ub Export_Table_Word()

    'Name of the existing Word doc.
    Const stWordReport As String = "Quarter Report.docx"
    
    'Word objects.
    Dim wdApp As Word.Application
    Dim wdDoc As Word.Document
    Dim wdbmRange As Word.Range
    
    'Excel objects.
    Dim wbBook As Workbook
    Dim wsSheet As Worksheet
    Dim rnReport As Range
    
    'Initialize the Excel objects.
    Set wbBook = ThisWorkbook
    Set wsSheet = wbBook.Worksheets("Sheet1")
    Set rnReport = wsSheet.Range("Table1")
    
    'Initialize the Word objects.
    Set wdApp = New Word.Application
    Set wdDoc = wdApp.Documents.Open(wbBook.Path & "\" & stWordReport)
    Set wdbmRange = wdDoc.Bookmarks("Report").Range
    
    'If the macro has been run before, clean up any artifacts before trying to paste the table in again.
    On Error Resume Next
    With wdDoc.InlineShapes(1)
        .Select
        .Delete
    End With
    On Error GoTo 0
    
    'Turn off screen updating.
    Application.ScreenUpdating = False
    
    'Copy the report to the clipboard.
    rnReport.Copy
    
    'Select the range defined by the "Report" bookmark and paste in the report from clipboard.
    With wdbmRange
        .Select
        .PasteSpecial Link:=False, _
                      DataType:=wdPasteMetafilePicture, _
                      Placement:=wdInLine, _
                      DisplayAsIcon:=False
    End With
    
    'Save and close the Word doc.
    With wdDoc
        .Save
        .Close
    End With
    
    'Quit Word.
    wdApp.Quit
    
    'Null out your variables.
    Set wdbmRange = Nothing
    Set wdDoc = Nothing
    Set wdApp = Nothing
    
    'Clear out the clipboard, and turn screen updating back on.
    With Application
        .CutCopyMode = False
        .ScreenUpdating = True
    End With
    
    MsgBox "The report has successfully been " & vbNewLine & _
           "transferred to " & stWordReport, vbInformation

End Sub

- Import outlook contacts to a worksheet 
Sub Import_Contacts()

    'Outlook objects.
    Dim olApp As Outlook.Application
    Dim olNamespace As Outlook.Namespace
    Dim olFolder As Outlook.MAPIFolder
    Dim olConItems As Outlook.Items
    Dim olItem As Object
    
    'Excel objects.
    Dim wbBook As Workbook
    Dim wsSheet As Worksheet
    
    'Location in the imported contact list.
    Dim lnContactCount As Long
    
    Dim strDummy As String
    
    'Turn off screen updating.
    Application.ScreenUpdating = False
    
    'Initialize the Excel objects.
    Set wbBook = ThisWorkbook
    Set wsSheet = wbBook.Worksheets(1)
    
    'Format the target worksheet.
    With wsSheet
        .Range("A1").CurrentRegion.Clear
        .Cells(1, 1).Value = "Company / Private Person"
        .Cells(1, 2).Value = "Street Address"
        .Cells(1, 3).Value = "Postal Code"
        .Cells(1, 4).Value = "City"
        .Cells(1, 5).Value = "Contact Person"
        .Cells(1, 6).Value = "Email"
        With .Range("A1:F1")
            .Font.Bold = True
            .Font.ColorIndex = 10
            .Font.Size = 11
        End With
    End With
    
    wsSheet.Activate
    
    'Initialize the Outlook variables with the MAPI namespace and the default Outlook folder of the current user.
    Set olApp = New Outlook.Application
    Set olNamespace = olApp.GetNamespace("MAPI")
    Set olFolder = olNamespace.GetDefaultFolder(10)
    Set olConItems = olFolder.Items
            
    'Row number to place the new information on; starts at 2 to avoid overwriting the header
    lnContactCount = 2
    
    'For each contact: if it is a business contact, write out the business info in the Excel worksheet;
    'otherwise, write out the personal info.
    For Each olItem In olConItems
        If TypeName(olItem) = "ContactItem" Then
            With olItem
                If InStr(olItem.CompanyName, strDummy) > 0 Then
                    Cells(lnContactCount, 1).Value = .CompanyName
                    Cells(lnContactCount, 2).Value = .BusinessAddressStreet
                    Cells(lnContactCount, 3).Value = .BusinessAddressPostalCode
                    Cells(lnContactCount, 4).Value = .BusinessAddressCity
                    Cells(lnContactCount, 5).Value = .FullName
                    Cells(lnContactCount, 6).Value = .Email1Address
                Else
                    Cells(lnContactCount, 1) = .FullName
                    Cells(lnContactCount, 2) = .HomeAddressStreet
                    Cells(lnContactCount, 3) = .HomeAddressPostalCode
                    Cells(lnContactCount, 4) = .HomeAddressCity
                    Cells(lnContactCount, 5) = .FullName
                    Cells(lnContactCount, 6) = .Email1Address
                End If
                wsSheet.Hyperlinks.Add Anchor:=Cells(lnContactCount, 6), _
                                       Address:="mailto:" & Cells(lnContactCount, 6).Value, _
                                       TextToDisplay:=Cells(lnContactCount, 6).Value
            End With
            lnContactCount = lnContactCount + 1
        End If
    Next olItem
    
    'Null out the variables.
    Set olItem = Nothing
    Set olConItems = Nothing
    Set olFolder = Nothing
    Set olNamespace = Nothing
    Set olApp = Nothing
    
    'Sort the rows alphabetically using the CompanyName or FullName as appropriate, and then autofit.
    With wsSheet
        .Range("A2", Cells(2, 6).End(xlDown)).Sort key1:=Range("A2"), order1:=xlAscending
        .Range("A:F").EntireColumn.AutoFit
    End With
            
    'Turn screen updating back on.
    Application.ScreenUpdating = True
    
    MsgBox "The list has successfully been created!", vbInformation
    
End Sub

- send email to a list of recipients using excel and outlook 
Sub Sample()
   'Setting up the Excel variables.
   Dim olApp As Object
   Dim olMailItm As Object
   Dim iCounter As Integer
   Dim Dest As Variant
   Dim SDest As String
   
   'Create the Outlook application and the empty email.
   Set olApp = CreateObject("Outlook.Application")
   Set olMailItm = olApp.CreateItem(0)
   
   'Using the email, add multiple recipients, using a list of addresses in column A.
   With olMailItm
       SDest = ""
       For iCounter = 1 To WorksheetFunction.CountA(Columns(1))
           If SDest = "" Then
               SDest = Cells(iCounter, 1).Value
           Else
               SDest = SDest & ";" & Cells(iCounter, 1).Value
           End If
       Next iCounter
       
    'Do additional formatting on the BCC and Subject lines, add the body text from the spreadsheet, and send.
       .BCC = SDest
       .Subject = "FYI"
       .Body = ActiveSheet.TextBoxes(1).Text
       .Send
   End With
   
   'Clean up the Outlook application.
   Set olMailItm = Nothing
   Set olApp = Nothing
End Sub

- sparklines, animate a sparkline 
VB

Sub SparkAnimation()

    ' The group of sparklines to animate
    Dim oSparkGroup As SparklineGroup
    'variables for the loop
    Dim i As Integer, j As Integer
    
    ' Set up the sparkline group variable
    Set oSparkGroup = Sheet1.Range("A2").SparklineGroups(1)
    
    ' Set the data source to the first year of data
    oSparkGroup.ModifySourceData "B2:M4"
    
    ' Loop through the data points for the subsequent two years
    For i = 1 To 24
        ' Move the reference for the sparkline group over one cell
        oSparkGroup.ModifySourceData Range(oSparkGroup.SourceData).Offset(, 1).Address
        
        ' Slow the animation
        j = 1
        Do
            j = j + 1: DoEvents
        Loop Until j = 4000
    Next i
    
End Sub

- change the color of the horizontal axis of a sparkline 
Sub AxisColor()
    'The sparkline group
    Dim oSparkGroup As SparklineGroup
    'Loop through the sparkline groups on the sheet
    For Each oSparkGroup In Range("A2:C2").SparklineGroups
        'Show the axis
        oSparkGroup.Axes.Horizontal.Axis.Visible = True
        'Set the color of the axis to the color of cell A8
        oSparkGroup.Axes.Horizontal.Axis.Color.Color = Range("A8").Interior.Color
    Next oSparkGroup
End Sub

- find all sparklines on a sheet 
Sub ShowUserForm()
    SparklineForm.Show
End Sub

Private Sub UserForm_Activate()
    'The sparkline group
    Dim oSparkGroup As SparklineGroup
    
    'Loop through all the sparkline groups on the sheet
    For Each oSparkGroup In ActiveSheet.Range("A:XFD").SparklineGroups
        'For each sparkline group found, add the address to the listbox
        SparklineListBox.AddItem oSparkGroup.Location.Address(, , , True)
    Next oSparkGroup
End Sub

Private Sub SparklineListBox_Click()
    'Activate the selected range that has the sparklines
    Range(SparklineListBox.Value).Activate
End Sub

Private Sub CloseBtn_Click()
    'Close the userform
    Unload Me
End Sub


Dim mySG As SparklineGroup 
Set mySG = Range("$A$1:$A$4").SparklineGroups.Add(Type:=xlSparkColumn, SourceData:= _ 
 "Sheet2!B1:E4") 
 
mySG.SeriesColor.Color = RGB(255, 0, 0)


### Excel performance and limit improvements 
- improvements 
excel

    =VLOOKUP($A900000,$A$2:$E$1000000,1,FALSE)
    =VLOOKUP($A900000,$A$2:$E$1000000,2,FALSE)
    =VLOOKUP($A900000,$A$2:$E$1000000,3,FALSE)
    =VLOOKUP($A900000,$A$2:$E$1000000,4,FALSE)
    =VLOOKUP($A900000,$A$2:$E$1000000,5,FALSE)
- introduces several useful worksheet functions:

    MAXIFS and MINIFS extend the COUNTIFS/SUMIFS family of functions. These functions have good performance characteristics. Use them to replace equivalent array formulas.
    TEXTJOIN and CONCAT let you easily combine text strings from ranges of cells. Use them to replace equivalent VBA UDFs.

- shape objects 
basic use 
text links 
big grid 
rendering hardware acceleration 

- tips for optimizing performance 
do not use forward referencing and backward referencing 
minimize use of circular references with iteration 
avoid links between workbooks 
minimize the used range 
allow for extra data 

- alternatively use dynamic ranges 
  =OFFSET(Sheet1!$A$1,0,0,COUNTA(Sheet1!$A:$A),1)
  =Sheet1!$A$1:INDEX(Sheet1!$A:$A,COUNTA(Sheet1!$A:$A)+ROW(Sheet1!$A$1) - 1,1)
  
- turn off functionality when macro is running 
  ' Save the current state of Excel settings.
  screenUpdateState = Application.ScreenUpdating
  statusBarState = Application.DisplayStatusBar
  calcState = Application.Calculation
  eventsState = Application.EnableEvents
  ' Note: this is a sheet-level setting.
  displayPageBreakState = ActiveSheet.DisplayPageBreaks 

  ' Turn off Excel functionality to improve performance.
  Application.ScreenUpdating = False
  Application.DisplayStatusBar = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  ' Note: this is a sheet-level setting.
  ActiveSheet.DisplayPageBreaks = False

  ' Insert your code here.

  ' Restore Excel settings to original state.
  Application.ScreenUpdating = screenUpdateState
  Application.DisplayStatusBar = statusBarState
  Application.Calculation = calcState
  Application.EnableEvents = eventsState
  ' Note: this is a sheet-level setting
  ActiveSheet.DisplayPageBreaks = displayPageBreaksState
  
- read and write large blocks of data in a single operation 
  Dim DataRange As Variant
  Dim Irow As Long 
  Dim Icol As Integer 
  Dim MyVar As Double 
  ' Read all the values at once from the Excel grid and put them into an array.
  DataRange = Range("A1:C10000").Value2 

  For Irow = 1 To 10000 
      For Icol = 1 To 3 
          MyVar = DataRange(Irow, Icol) 
          If MyVar > 0 Then 
              ' Change the values in the array.
              MyVar=MyVar*Myvar 
              DataRange(Irow, Icol) = MyVar 
          End If 
      Next Icol 
  Next Irow 
  ' Write all the values back into the range at once.
  Range("A1:C10000").Value2 = DataRange 

- alternative use whole column and row references, An alternative approach is to use a whole column reference, for example $A:$A. This reference returns all the rows in Column A. Therefore, you can add as much data as you want, and the reference will always include it.

- alternative use dynamic ranges. By using the OFFSET or INDEX and COUNTA functions in the definition of a named range, you can make the area that the named range refers to dynamically expand and contract.

  =OFFSET(Sheet1!$A$1,0,0,COUNTA(Sheet1!$A:$A),1)
  =Sheet1!$A$1:INDEX(Sheet1!$A:$A,COUNTA(Sheet1!$A:$A)+ROW(Sheet1!$A$1) - 1,1)


Counts!z1=COUNTA(Sheet1!$A:$A)
 OffsetDynamicRange=OFFSET(Sheet1!$A$1,0,0,Counts!$Z$1,1)
 IndexDynamicRange=Sheet1!$A$1:INDEX(Sheet1!$A:$A,Counts!$Z$1+ROW(Sheet1!$A$1) - 1,1)
 
INDIRECT to construct dynamic ranges, but INDIRECT is volatile and always calculates single-threaded.
- understand lookup options 

MATCH(lookup value, lookup array, matchtype)
Matchtype=1 returns the largest match less than or equal to the lookup value when the lookup array is sorted ascending
Matchtype=0 requests an exact match and assumes that the data is not sorted
Matchtype=-1 returns the smallest match greater than or equal to the lookup value if the lookup array is sorted descending

- use index and match or offset instead of vlookup 

Try using the INDEX and MATCH functions instead of VLOOKUP. Although VLOOKUP is slightly faster (approximately 5 percent faster), simpler, and uses less memory than a combination

 VLOOKUP(A1, Data!$A$2:$F$1000,3,False)

 INDEX(Data!$A$2:$F$1000,MATCH(A1,$A$1:$A$1000,0),3)
 
- use two lookups for sorted data with missing values 
 IF(VLOOKUP(lookup_val ,lookup_array,1,True)=lookup_val, _
      VLOOKUP(lookup_val, lookup_array, column, True), "notexist")
      
- SUMPRODUCT can be 20 to 25 percent faster than an array-entered SUM.


## Object model 
- documentation for all objects 
AboveAverage object, an above average visual of a conditional formatting rule 
Action object, represents an action to be executed in a pivottable 
AddIn object, represent a single addin either installed or not 
AddIns object 
Adjustments object, contains a collection of adjustment values for specified autoshape, WordArt object 
AllowEditRange object, 
Application, represent the Excel application 
    + example 
    'create application in another application 
    
    Set xl = CreateObject("Excel.Sheet") 
    xl.Application.Workbooks.Open "newbook.xls"
    
    'adjust font 
    Application.ActiveCell.Font.Bold = True

    + events 
    SheetActive 
    SheetBeforeDelete
    NewWorkbook 
    AfterCalculate 
    WorkbookOpen
    WindowResize 
    WorkbookBeforeSave 
    ...
    
    + Methods 
    Cacluate 
    Evaluate 
    Goto(Reference, Scroll), Selects any range or Visual Basic procedure in any workbook
        Application.Goto Reference:=Worksheets("Sheet1").Range("A154"), scroll:=True
        
    ActivateMicrosoftApp 
    DDEPoke 
    
    OnKey (Key, Procedure), runs a specified procedure when a particular key or key combination is pressed 
    
    OnRepeat(Text, Procedure), Sets the Repeat item and the name of the procedure that will run if you choose the Repeat command
    
    OnTime(EarliestTime, Procedure, LatestTime, Schedule), Schedules a procedure to be run at a specified time in the future
    
    OnUndo (Text, Procedure), Sets the text of the Undo command and the name of the procedure that's run if you choose the Undo command
    
    SendKeys(Keys, Wait), send keystrokes to the active application 
    
    Volatile(Volatile), Marks a user-defined function as volatile. A volatile function must be recalculated whenever calculation occurs in any cells on the worksheet
    
    + Properties 
    ActiveCell 
    ActiveChart 
    ActiveSheet 
    ActiveWindow
    ActiveWorkbook 
    Caller, returns information about how visual basic was called 
    AutoRecover
    Cursor, returns or sets the appearance of the mouse pointer in excel 
    Dialog, returns a dialogs collection that reprents all built-in dialog boxes 
    Interactive, True if Microsoft Excel is in interactive mode; this property is usually True. If you set this property to False, Excel blocks all input from the keyboard and mouse
        
        Application.Interactive = False 
    
Areas 
Author 
AutoCorrect 
AutoFilter 
AutoRecover 
Axes 
Axis 
Border 
Borders 
CalculateFields 
CalculatedItems 
CalculatedMember 
CalloutFormat 
CategoryCollection 
Chart object 
ChartGroup 
ChartFormat 
ChartObjects 
...
Dialog 
Dialogs object 
DropLines object 

    + OLEObjects, A collection of all the OLEObject objects on the specified worksheet.
    
    Worksheets(1).OLEObjects.Add ClassType:="Forms.ListBox.1"

...
GrphicObject 
Icon object 
...
Name object, represents a defined name for a range of cells. 
    
    ActiveWorkbook.Names("mySortRange").Delete
    
Names object
...
PivotTable object, represents a PivotTable report on a worksheet 

    Worksheets("Sheet3").PivotTables(1).PivotFields("Year").Orientation = xlRowField
    
Shape object, Represents an object in the drawing layer, such as an AutoShape, freeform, OLE object, or picture.
...
Window object, represent a window 
    Windows(1).WindowState = xlMaximized
    
...
XmlMaps object 
...
XPath object, Represents an XPath that has been mapped to a Range or ListColumn object.

     Dim mapContact As XmlMap 
     Dim strXPath As String 
     Dim lstContacts As ListObject 
     Dim lcNewCol As ListColumn 
     
     ' Specify the schema map to use. 
     Set mapContact = ActiveWorkbook.XmlMaps("Contacts") 
     
     ' Create a new list. 
     Set lstContacts = ActiveSheet.ListObjects.Add 
     
     ' Specify the first element to map. 
     strXPath = "/Root/Person/FirstName" 
     ' Map the element. 
     lstContacts.ListColumns(1).XPath.SetValue mapContact, strXPath 
     
RTD Represents a real-time data object.
     
     
# Excel Graph Visual Basic reference 
### Collections 
- Provides reference information about the collections in the object model.
- axes collection 
- ChartGroups collection 
- DataLabels collection 
- LegendEntries collection 
- Points collection 
- SeriesCollection 
- Trendlines collection 


### Objects 
- Provides reference information about the objects in the object model.
- Application object 
- Auto correct object 
- Axis object 
...


### Methods 
-  Provides reference information about the methods in the object model.
- Activate 
- Add 
...


### Properties 
- Provides reference information about the properties in the object mode
- Application 
- ApplyPictToEnd 
...

### Enumerations 
- Provides reference information about the enumerations in the object model.
XIArabicModes 
XIArrowHeadLength 
...


Introduction to WF4=Matt Milner;Note=Erxin

# Overview
- declarative programming
    + tool should make program easier
    + handling coordination of multiple tasks can be complicated
    + reactive programs can be challenging to write when you worry about scale
    + runtimes provide valuable applications
    + flexibility of framework make them useful
- reactive programs
- windows workflow foundation overview
- programming frameworks
    + assembler
    + write code for the machine
    + c style languages
    + move away from machine language to human language
- workflow foundation features
    + build a basic activity
    + derive from system.Activities.Activity derived type
        * override execute method to provide implementation
        * compose activties manage execution of children
    + since activities are serializable, the program is really just data
        * hence we can represent the program in a number of ways
        * xaml is the format used by WF and supporting tools
        
    + workflow passivation
        * when a worflow idles, you can passivate ti to disk
        first you must provide the runtime with a persistence service
        a default persistence service is provide for sql server
        later( when stimulus arrives) the instance can be resumed
        
        * allows runtime to free up valuable os resource
        memory holding activity tree & instance state can be release
        threads can be used to process other instances
        
    + additional features
        * declarative business rules, manage flow control, decouple rules from code
        * tracking services, gain visibility into processes, provide feedback to users, monitor running workflow
        * designers, custom and oob design surface create dsl
    
- dynamic activity
DynamicActivty act = new DynamicActivty
{
    Properties = {
        new DynamicActvitiyProperty {Name="course", Type=typeof(OutArgument<IEnumerable<Course.Course>>)}
    },
    Implementation = () => new Parallel{
        Branches = {
            new CustomActivities.GetOData<Course.Course>{
                ServiceUrl = new VisualBasicValue<Uri>("new System.Uri(\"htp://www.pluralsight-training.net/OData\")"),
                Result = new VisualBaiscReference<IEnumerable<Courses.Course>>("courses")
            },
        }
    }
    var results = WorkflowInvoker.Invoke(act);
    ViewData["Courses"] = results["courses"];
};
    
# Programming workflows in WF4
- Asynchronous activities
    + derive from AsyncCodeActivity or AsyncCodeActivity<T>
        * provides beginExecute/EndExecute methods to override
        * runtime handles wait handles, callbacks etc
        
    + BeginExecute requires return of IAsyncResult
        * return result from asynchronous call
        * create Action or Func and return the result of calling BeginInvoke
        
    + EndExecute
        * set argument values
        * return an object of type T for AsyncCodeActivity<T>
        * be sure to call end on the IAsyncResult

- code clarative activities
    + code 
    activity body is built in code
    derive from activity class
    provide property "getter" for implementation property 
    
    + declarative 
    reuse existing logic in activities
    build an activity tree
    arguments variables etc
    
    + when you need to build the activity body dynamically
        
- activity validation
    + override cacheMetadata
    add validation errors for misconfiguration arguments or properties
    
    + simple argument validation uses attributes
    requiredAttribute
    overloadGroup
        
    [RequiredArgument]
    public InArgument<Registration> Registration {get;set;}
    
    [OverloadGrups("Course")]
    [RequiredArgument]
    public InArgument<Course> Course {get;set;}
    
    the OverloadGroup, there are required but only required one
    
- Constraints
    + Constraints are activities that apply validation logic
    run at validation time
    AssertValidation activity used to assert and return validation error
    
    + Apply constraints to your own activities
    add to the base constraints in constructor
    
    + Apply constraints to other activities
    use activityValidationServices and ValidationSettings
    useful for validating a workflow from the hos
       
        
# Writing custom activities in WF4
    
    
    
    
    
    
    
    
    
    
    
    
    
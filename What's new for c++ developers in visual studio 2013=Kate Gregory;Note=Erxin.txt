What's new for c++ developers in visual studio 2013=Kate Gregory;Note=Erxin

# Course overview 
- helps c++ developers 
- c++11 and c++ 14 language and library features 
    + make construction less complicated 
    + streamline everyday tasks 
    + variadic templates 
    
- debugging 
- other topics 

# IDE changes 
- c++ keeps changing 
    + visual studio 2013 has c++ 14 features too 
    + this is faster pace 
    
http://isocpp.org/std/status

- visual studio and visual c++ 
    + in the past some visual studio features didn't exist for c++ 
    + some c++ desired features don't make the bar for visual studio 
    + visual studio 2013 works towards fixing both 
    + auto completion of braces, parentheses, quotes etc 
    + switch between header and cpp file 
    + intelligent is more c++ aware 
    
- less typing 
    + right click include header file support open
    + right click have toggle header/cpp file 

- code formatting 
    + people take it very seriously 
    + where do the braces go ?
    + what gets indented and how much? don't do tab 
    + what do you put spaces around and between?
    + http://en.wikipedia.org/wiki/Indent_style
    
    + life is to short to argue about this 
    + visual studio defaults may offend you, 2013 support any code style 
    Tools|Options|Text Editor|C/C++|Formatting 
    
    + format document shortcut c+k,c+d 
    + format selected c+k, c+f 
    + you could export your setting from the Tools|Import and Export Settings, and only export the styles you wanted for the others to import it 

- understanding a code base 
    + go to definition and (navigate back )
    + code definition window 
    View|Code definition window 
    + now peek definition in visual studio 2013 
    right click peek definition will display the definition at the right place 
    also support peek in the peek window, there will be a dots at the title bar of the peek window 
    + enhanced scrollbar
    Tools|Options|Text Editor|Scrollbar to configure what's displayed 
        * bar mode 
        * map model, will show the minute version of the entire file 

# Construction 
- introduction 
- initialization 
    + many ways to initialize built in types like int 
    int a = 2;
    int b(2);
    
    + initializing c-style arrays could be done with {} 
    but who use c-style arrays now?
    
    + to initalize an object use a constructor 
    Foo f = 3;
    Employee newHire(John, today + 1, slary);
    Employee CEO();
    Employee someone;
    
    + lots of different ways means confusion 
    
- uniform initialization, braces are always ok 
int a{2};
int a = {2};
Employee CEO{};
Employee newHire {John, today+1, salary}
vector<int> v {1,2,3};
vector<Employee> staff {CEO, newHire};
    + consistent and easy to remember 
    + can nest 
    vector<Employee> compan {
        CEO,
        newHire,
        {Many, newHire} //define a nested new vector<Employee>
    };

class Person 
{
    Person(){}
    Person(std::initializer_list<std::string> init){...} //arbitrary initializer 
    Person(string first, string last, int arbitrary)
}
//initializer list will pick the constructor to use base on the arguments 

- make_unique
    + if you're typing delete, you're doing it wrong 
    std::shared_ptr 
    std::unique_ptr 
    
    + these two arrived in c++11 along with make_shared 
    saves typing 
    makes shared_ptr faster 
    
    + but no make_unique, c++14 care of that 
    
    + now we can say, if you are typing new delete you are doing it wrong 
    
- make_unique
class Squawker 
{
private:
    string name;
public:
    Squawker(string n): name(n)
    {
        cout << "making" << name << endl;
    }
    
    Squawker(const Squawker& old): name(old.name + "copy") 
    {
        cout << "copying" << name << endl;
    }
    
    Squawker(Squawker && old ): name(move(old.name))
    {
        cout << "moving" << name << endl;
    }
    
    ~Squawker()
    {
        cout << "destroying" << name << endl;
    }
};

int _tmain(int argc, _TChar* argv[])
{
    Squawker stack{"Stack"};
    auto pHeap = new Squawker{"heap"};
    
    //arbitrary scope braces
    {
        shared_ptr<Squawker> sp1{new Squawker{"first_shared"}};
        auto sp2 = make_shared<Squawker>("second shared"); //one strong ref
        //more arbitrary scope braces 
        {
            vector<shared_ptr<Squawker>> v {sp1, sp2}; //two strong ref, copied shared pointer 
        }
        unique_ptr<Squawker> up1 {new Squawker{"first unique"}};
        auto up2 = make_unique<Squawker>("Second unique");
        Squawker copy(*up1);
    }
    delete pHeap;
    return 0;
}
//during the debugging visual studio will display which kinds of constructor is called for the shared pointer 

- Constructors 
    + no constructors, the compiler writes some for you 
    copy, move, default
    + the minute you write one, you don't get the default any more 
    end up writing a lot of constructors 
    + constructors often have a lot of similar code in them 
        * initializing members 
        * acquiring resources 
        * hard to write and maintain them all 
- Delegating, Defaulted and deleted constructors 
    + we've all wished we could call one constructor from another 
        * writing a function called init() that they all call is a poor substitute 
        * default arguments not always the right answer either 
    + now one constructor can call another using initializer syntax 
    Foo():Foo(0){}
    
    + we've all wished we could still get the compiler to write them for us 
    Foo()=default;
    
    + you may have written a private constructor to prevent certain kinds of operations 
    eg to be non copyable 
    
    + more explicitly way to prevent call a function by use explicit delete keyword 
    Foo(const Foo&)  = delete;
- Demo, delegating, defaulted and deleted constructors 
- Initializing non statics 
    + developers who've used c# try to write this in c++ 
    class Foo
    {
    private: 
        int x = 0;
    }
    
    + in c++ 11 support this 

    
# Streamline Everyday Tasks 
- introduction 
- raw string literals, this is nothing about string 
    + to include a double quote in a string literal, you need to escape it 
    \"
    
    + to include a backslash in a string literal, you need to escape it 
    \\
    
    + can result in very hard to reading strings in regex 
    + did you ever wish you could use something like c# @"string\"
    + C++ 11 you could, parentheses are not optional 
    R("string ")
    
    + line breaks are fine and are kept 
    + what if you want to include parentheses in the string? 
    
    + what about )"?
    R"KMG(whatever )KMG"
    choose you own delimiter

- function template default argument 
    + default types were allowed in class templates 
    + but not in function templates 
    + they can make code simpler, less overloads to write 
template<typename T, int N=1> T& increment(T& i)
{i += N; return i;}

template<typename T, typename C = std::less<T>> 
T FindExtreme(std::vector<T>& v, C c = C())
{
    return *std::max_element(begin(v), end(v), c);
}

int _tmain(int argc, _TCHAR* argv [])
{
    std::vector<int> nums {6,2,3};
    for(int& i: nums)
    {
        i = increment(i);
    }
    
    for(int& i: nums)
    {
        i = increment<int, 2>(i);
    }
    
    int max = FindExtreme(nums);
    int min = FindExtreme<int, std::greater<int>>(nums);
    return 0;
}
- conversion operators, explicit conversion operators 
    + explicit keyword on a constructor prevents it being used unless you ask for it 
    compiler is not always your friend after all 
    
    + until now, conversion operators might get called without your consent 
    now they can have the explicit keyword too 
    
    + allows you to have conversions to bool without agreeing to participate in arithmetic for example 
    + demo 
class IntHolder 
{
private:
    int i;
public:
    explicit IntHolder(int arg): i(arg){}
    explicit operator bool() {return i != 0;}
};

class IntHolderHolder
{
private:
    IntHolder iH;
public:
    IntHolderHolder(IntHolder arg): iH(arg){}
};

int _tmain(int argc, _TCHAR* argv[])
{
    //compiler will use the IntHolder constructor to convert the 42 to IntHolder(42)
    //if mark the IntHolder constructor explicit this will not compile 
    IntHolderHolder iHH {42};
    IntHolder iH {42};
    
    //the override operator bool() let us use the IntHolder as bool 
    if(iH)
    {
        //do something interesting
    }
    
    //j will be equal to 2, because iH is convert to bool and compile seems it as 1 
    //if mark the operator bool, then this will not compile 
    int j = iH + 1;
    return 0;
}
    
    
# Using Variadic Template 
- variadic 
    + taking an unspecified number and type of arguments 
    + function 
    printf 
    + macro 
    Logging 
    
    + templates 
    make_shared, make_unique
    
    auto sp1 = make_shared<int>(2);
    auto sp2 = make_shared<Employee>(John, today+1, salary);
    //make_shared works for any number of arguments 

    use make_shared could works with auto keyword
    
- history 
    + variadic templates are in c++ 11 
    needed for many valuable library features 
    including make_shared
    
    + parts of c++11 appeared in vs2010 
    add some parts slightly earlier in a feature pack for 2008 
    
    + variadic templates were not actually implemented in visual studio until visual studio 2013 
    but features relying on them were implemented earlier 
    
    + before that the library implementation faked them with macros 
    + infinity was actually 10, and for performance reasons infinity was later lowered to 5 
    + now that vc++ has variadic templates your builds will be faster 
    
- std::tuple 
    + like a std::pair, but any number of elements 
    + saves writing little class or struct just to hold a clump of values 
    + create with uniform initialization
    std::tuple<int, std::string, double> entry{1, "kate", 100.0};
    //or use 
    std::make_tuple
        * makes auto possible 
        * access or set values use 
        std::get<position>(tupleisntance);
        * has comparision operators etc already implemented 
        
    + demo 
tuple<int, std::string, double> t = std::make_tuple(2, "brian", 101.1);
std::get<0>(t)


# Writing Variadic Template 
- introduction
- basic syntax
    + key is ...
    + can declare a class template 
template <class... T>
class Foo{
//class details 
};

    + or a function template 
template<class... T>
void foo(T... vals)
{
//function body 
}

- parameter pack 
    + the construct T... vals is called a parameter pack, you can work with it using the expansion operator, ...
    + pass it to another template or a function 
    + use it in a initializer list 
    + capture it with a lambda 
    + keep in mind, it may be empty 

    + two basic approaches 
        * forwarding 
        * recursive-ish templates 

- forwarding, the implementation of make_unique, simplified version of make_unique
template<class _T, class... _Types> inline 
unique_ptr<_T> make_unique(_Types&&... Args)
{
    return (unique_ptr<_T>(new _T(std::forward<_Types>(_Args)...)));
}

    + not some sort of macro trick 
        * don't have to provide commas between arguments to function 
        * don't jump through hoops to avoid extra comma when _Args is empty 

- recursive-ish approach
    + you can write many templates for the same class or function 
        * specific templates might take 0, 1 or 2 arguments 
        
    + compiler will choose the appropriate template 
    + the variadic template can use the specific templates to get the work done 
    + not really recursion, just using another template with the same name 
        * but feels recursive 

    + example 
        * create a function called matches 
        takes any number of arguments 
        return true if first arguments is equal to any of the others 
        returns false otherwise 
        
        * matches(1,2,3) is false 
        * matches(today, yesterday, today + 1, tomorrow, yesterday+1) is true 
        * matches(1,2,3,1) is true 
        
        * first write the two paremeter version 
        template<class T, class U>
        bool matches(T, t, U u) {return t == u};
    
        * recursive version 
        template<class T, class U> bool matches(T&& t, U&& u)
        {
            retur t == u;
        }
        
        template<class T, class U, class... Ts>
        bool matches(T&& t, U&& u, Ts&&... vals)
        {
            return t == u || matches(t, vals...);
        }
        
        int _tmain(int argc, _TCHAR* argv[])
        {
            bool easy = matches(1, 2);
            easy = matches(1, 2-1);
            ....
        }

- simplified std:tuple 
template<> class tuple<>
{
public:
    tuple(){}
    ...
};

template<class T, class... _Rest>
class tuple<T, _Rest...>: private tuple<_Rest...>
{
private:
    _Tuple_val<T> _Myfirst; //helper type _Tuple_val just like a T 
public:
    static const size_t _MySize = 1 + sizeof...(_Rest); //count the parameter types number
    tuple(): tuple<_Rest...>(), _Myfirst(){}
    ...
};

- More std::tuple 
explicit tuple(const T& _arg, const _Rest&... _Rest_arg):tuple<_Rest...>(_Rest_arg...), _Myfirst(_arg){}

template<class... Ts, class... Us> inline 
bool operator==(const tuple<Ts...>& _Left, const tuple<Us...>& _Right)
{
    return (_Left._Equals(_Right));
}

template<class... _Other>
bool _Equals(const tuple<_Other...>& Right) const 
{
    return (_Myfirst._Val = _Right._Myfirst._Val && _Mybase::_Equals(_Right._Get_rest()));
}

- placement matters 
    + these are different, b is a member function of A, if Ts is <int, int, int>
    echo(A<Ts...>::b(vs...)); //calls b once 
    echo(A<Ts...>::b(vs)...); //calls b(T) Nx a of T, U, V etc, not expanding the Ts
    echo(A<Ts>::b(vs)...); //calls N different A::b (each w one T), expanding each place value for Ts and Vs, call the method A<Ts#>::b(vs#) 
    
    + example code 
template <class... Ts> void echo(Ts... vs)
{
    cout << "echo called with" << sizeof...(Ts) << " elements:";
    vector<int> values {vs...}; //if the Ts have the types which is not int will get error 
    for(int i: values)
        cout << i << " ";
    cout << endl;
    cout << "------------" << endl;
}

template<class... Ts>
class A
{
public:
    static int b(Ts... vs)
    {
        int s = sizeof... (Ts);
        cout << "b called with " << s << " elements " << endl;
        return s;
    }
};

template<class... Ts> void foo(Ts... vs)
{
    echo(A<Ts...>::b(vs...)); //b will only once with parameter pack, and echo will called with one element 
    ech(A<Ts...>::b(vs)...); //will get compiler error because b is expand to a<T0, T1, T2>::b(vs0) which is not match the generated function template 
    echo(A<Ts>::b(vs)...); //b will be called once and echo will be called with three element
}

int _tmain(int argc, _TCHAR* argv[])
{
    foo(1,2,3);
    foo(1.0, "kate");
    foo();
    return 0;
}


# Debugging 
- introduction 
- introduction 
- native visualizations 
    + teach the debugger how to display your objects 
    + auto exp .dot 
- the .natvis file for native visualizer 
    + per machine/user, not per project 
        * best practice use namespaces could provide different visualizations 
    + best location, ...\documents\visual studio 2013\visualizers 
    + as many files as you want here, named as you prefer 
    + each file controls the visualization of one or more types 
    <?xml version="1.0" encoding="utf-8"?>
    <AutoVisualizer xmlns="...">
        <Type Name="KateGregory::Employee">
            <DisplayString>{number} - {name}</DisplayString>
            <Expand>
                <Item Name="Number">number</Item>
                <Item Name="Fullname">name</name>
            </Expand>
        </Type>
    </AutoVisualizer>
    
- natvis details 
    + Name is fully qualified name 
        * Namespance 
        * Use &lt; and &gt for template types <> 
    
    + DisplayString 
        * data tip, locals, watch etc 
        * can have several - use condition attribute control 
        * use {} around expressions will get the value just as the trace point 
        * use {{}} or if you actually want that character 
    + expand when tip or local is expand 
        * no {}
- demo the .natvis file 
use Tool|Options|Text Editor|File Extension and map the natvis to xml 

- format specifiers 
    + can use in visualizers, watches and trace points 
    + control format of numbers, strings etc 
    + not required but may improve your debugging experience 
    
- format specifiers 
    + use when break points hit and pring message 
    {i, x} //will print hex 
    
    + use in watch window 
    i, x   //will display the hex value i
    i, c   //display as character

    + msd have a format specifiers, you could use the magnifier to change the display visualizer. if the magnifer is not there could add format visualizer to add 
    
- just my code 
    + you might know it from c# or vb 
    + collapses call stack to combine "external code" into one line 
    + makes it easier to navigate a callstack 
    + on by default can be turned off, show external code 
    + you can even control the definition of external code 


- right click the menu and select show external code menu, *.natjmc this is the file control the external code displayed. the extension list in the file will not be displayed in the external. you can added more 

- step into filtering 
    + step into is an unpredictable command 
    + often you aren't interested in the code it takes you to 
    + you can teach the debugger what to skip 
        * files with extension, .natstepfilter, is the file contain what the debugger will step into to not step into, it also contain in the visual studio visualizer folder 
        
        <Function><Name>std::*</Name><Action>NoStepInto</Action></Function>

        
# Other topics 
- using a library 
    + find it 
        * randomly search the internet mostly 
        * is it up to date? how do you use it? 
        
    + install it 
        * under the project? usually 
        * does it come with lib/dll or code to build 
        * does it have dependencies you need to find and install too? 
- nuget for c++ 
    + visual studio extension to manage libraries and tools with visual studio 
    + other language have had support since vs2010 
    + now it knows c++ 
    include and library directories and other project properties 
    + discover 
    
    + you could open the document file from the include statement, could also open the contain folder 

- PPL 
    + not new in 2013, arrived with VS2010 
    + library to harness multiple CPUs without having to write threads and locks 
    + task parallelism 
        * easier than explicitly starting and monitoring a thread 
        * x = foo().then([&](Foo f){/*work with f*/});
        * x = foo().wait();
        
    + parallel containers 
        * threadsafe without effort from you 
    + parallel algorithms , action on parallel  containers 
    #include <ppl.h> 
    + namespace is Concurrence namespace 
- C++ rest sdk 
    + simple way to get/pot etc from a URI 
    + also includes JSON library 
    + available from nuget 
    + use with ppl from concurrency support, communicating over the internet can take a while 
    + official real library with msdn documentation 
    + code samples and experimental version all available 
    http://casablanca.codeplex.com 
    + demo 
#include "cpprest\http_client.h"
#include "cpprest\json.h"

web::http::client::http_client client(U("http://www.gregcons.com"));
return client.request(web::http::methods::GET, U("Kateblog/")).then(
    [&](web::http::http_response response)
    {
        auto status{response.status_code()};
        bodylength = response.headers().content_length();
    }
);
- C++ AMP, accelerate massive parallelism 
    + not new in vs2013 but improved 
    + move your calclations to the GPU for up to 100x speedup 
    + library and small language extension 
    + uses concurrence namespace 
        * same as ppl, parallel.foreach 
    + relies heavily on lambdas for convenience 
        * same as ppl 
    + hardware agnostic
    nvidia 
    amd 
    no directx 11 card? emlator still speeds calcs a little 
- C++ AMP improvements 
    + supports shared cpu/gpu memory, eliminates copy if you have the right hardware 
    + debug on widows 7 is supported in vs2013, in single process
    + on windows 8.1 debug cpu code and gpu code together 
    + reduced overhead, even haster now 
    + profiling improvements 
    
- standardization and libraries 
ppl, amp, stl 
    + everyone knows is missing vital libraries 
    compare to .net, java

    + finding and evaluating third party libraries is hard 
    + compare using c++ REST SDK to using PPL or AMP 
    + or just using std::string and std::vector 
    
    + reference, next standard will at more library into the stl 
    http://isocpp.org/std/status 
    such as 
    programming syntax 
    file system ts 
    networking ts 
    concepts lite ts 
    library fundamentals ts 
    array extensions ts 
    extensions for concurrency 
    extensions for parallelism 
    
    
    










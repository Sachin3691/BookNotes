Angular Development with TypeScript, Second Edition=Manning;Note=Erxin

- value of typescript with angular 
clean separation of UI and logic 
modularization 
navigation 
loose coupling 
component lifecycle 
change detection 
no callback hell 
forms and validation 
testing 
tooling 
concise code 
compilers 
server-side rendering 
modern looking UI component 

- source code 
https://github.com/Farata/angulartypescript

- roadmap 
ypeScript roadmap on GitHub at https://github.com/Microsoft/TypeScript/wiki/Roadmap to see what’s coming in future releases of TypeScript.

- material, UI components called Angular Material (see https://material.angular.io). At the time of this writing

- metatdata, enabling you to provide metadata about the decorated artifact. In general, metadata is additional information about data.

- services
$ ng g s shared/product -m app.module 
 @ NgModule({
    ...providers: [ProductService]
})export class AppModule {}

 @ NgModule({
    ...providers: [ProductService]
})export class AppModule {}

- two types of directives, structural and attribute 
https://angular.io/guide/attribute-directives.

- pipes template element that allows you to transform a value. several build ins 

UpperCasePipe, using |uppercase
LowerCasePipe, using |lowercase 
DatePipe, display date with |date
CurrencyPipe, transform number with |currency 
AsyncPipe, unwraps date from the provided Observable stream by using |async 

- An Angular module is a container for a group of related components, services, directives, and pipes. You can think of a module         as a package that implements certain functionality from the business domain of your application,

Angular module is a class annotated with the @NgModule() decorator.

//main.ts to load the root module 
platformBrowserDynamic().bootstrapModule(AppModule);

import other modules of angular 

 @ NgModule({
    declarations: [AppComponent 1],
    imports: [2 BrowserModule, FormsModule, HttpClientModule],
    bootstrap: [AppComponent]3
})export class AppModule {}

- data binding 
//echo 
//one way 
{{property}}

//attribute binding 
//one way 
<span [hidden]="isValid">...</span>

//event binding 
//one way 
<button (click)="onClickEvent()">Get Products</button>  

Event reference” in the Mozilla Developer Network   documentation, http://mzl.la/1JcBR22

//banana syntax 
//two way binding 
<input type='text'   placeholder="Enter shipping address"   [(ngModel)]="shippingAddress">  

- configure angular cli, Angular CLI Config Schema,” available at https://github.com/angular/angular-cli/wiki/angular-cli

- getting started with ngAuction 

- bootstrap have an angular version 
$ Because the Bootstrap library has jQuery and Popper.js as peer dependencies

- more info about grid system of bootstrap https://getbootstrap.com/docs/4.0/layout/grid.


# Router basics 
- routing basic

display different views in the outlet, replacing one view with another

- location strategies for client-side navigation 
    + hash-based navigation, a hash sign is added to the url 
    
    protocol://domain-name/port/#/route-path/.../route-parameter
    
import {
    HashLocationStrategy,
    LocationStrategy
}
from "@angular/common";
... @ NgModule({
    ...providers: [{
            provide: LocationStrategy,
            useClass: HashLocationStrategy
        }
    ]1
})
    
    + pathLocationStrategy, history api based strategy works only in browser that support html5 
    
- building blocks of client-side navigation, Routes are configured  using the RouterModule. If your application needs routing, make sure your package.json file includes the dependency @angular/router. Angular includes many classes supporting navigation
    
Router, Route, Routes

const routes: Routes = [1 {
        path: '',
        component: HomeComponent
    }, {
        path: 'product',
        component: ProductDetailComponent
    }
];
 @ NgModule({
    imports: [RouterModule.forRoot(routes)],
    2 exports: [RouterModule]3
})export class AppRoutingModule {}

<a [routerLink]="..."/>

<router-outlet> specifies the eara on the page where the router will render the components 


# Router advanced 
- guarding routes 
CanActivate
CanActivateChild 
CanDeactive 
Resolve 
CanLoad 

    + example 
    const routes: Routes = [...{
            path: 'product',
            component: ProductDetailComponent,
            canActivate: [LoginGuard]
        }
    ];

   @ Injectable()
   export class LoginGuard implements CanActivate {
       constructor(private router: Router) {}
       canActivate() {
           let loggedIn = Math.random() < 0.5;
           if (!loggedIn) {
               alert("You're not logged in and will be redirected to Login page");
               this.router.navigate(["/login"]);
           }
           return loggedIn;
       }
   }
   
   //add guards to module provider 
 @ NgModule({
    imports: [BrowserModule, RouterModule.forRoot(routes)],
    declarations: [AppComponent, HomeComponent, ProductDetailComponent, LoginComponent],
    providers: [LoginGuard]1 bootstrap: [AppComponent]
})
- creating components that have multiple router outlets 
- lazy load component 
Imports CommonModule as required for feature modules 2 Configures the default route for this feature module using the forChild()method 3 By default , renders its only component, LuxuryComponent

    + preload all  lazy modules in the background 
    + specify the preloading strategy 
    + implement a custom preloading strategy 
RouterModule.forRoot([{
            path: '',
            component: HomeComponent
        }, {
            path: 'product',
            component: ProductDetailComponent
        }, {
            path: 'luxury',
            loadChildren: './luxury.module#LuxuryModule'
        }
    ], {
    preloadingStrategy: PreloadAllModules 1
})


    + custom preloader class 
 @ Injectable()
 export class CustomPreloadingStrategy implements PreloadingStrategy {
    preload(route: Route, load: () => Observable < any > ): Observable < any > {
        return (route.data && route.data['preloadme']) ? load() : empty();
    }
}


# Dependency injection in angular 
- inject service into component 
 @ Component({
    providers: [ProductService]1
})class ProductComponent {
    product: Product;
    constructor(productService: ProductService) {
        this.product = productService.getProduct();
    }
}

If you need to reuse the same ProductComponent with a different implementation of the ProductService type, change the providers line, as in providers: [{provide: ProductService, useClass: AnotherProductService}]

useClass— To map a token to a class, as shown in the preceding example                           
useFactory— To map a token to a factory function that instantiates objects based on certain criteria                           
useValue— To map a string or a special InjectionToken to an arbitrary value (non-class-based injection)

- inject a service into another service. use @injectable()
 @ Injectable(provideIn: 'root')
 export class ProductService {
    ...
}

It shows how you can write a factory function and use it as a provider for injectors. This factory function creates either ProductService or MockProductService

You do it by using the useValue property. Here’s how you can associate the value true with the IS_PROD_ENVIRONMENT token

- use inject token instead of a string token 
import {
    Component,
    Inject,
    InjectionToken
}
from '@angular/core';
export const BACKEND_URL = new InjectionToken('BackendUrl');
@ Component({
    selector: 'app-root',
    template: '<h2>The value of BACKEND_URL is {{url}}</h2>',
    providers: [{
            provide: BACKEND_URL,
            useValue: 'http://myQAserver.com'
        }
    ]
})export class AppComponent {
    constructor( @ Inject(BACKEND_URL)public url) {}
}

- dependency injection in a modularized app 
- different shades of colors that look good when used together (see https://material.io/guidelines/style/color.html)


# Reactive programming in Angular 
- turning DOM events into observables 
import {
    AfterViewInit,
    Component,
    ElementRef,
    ViewChild
}
from '@angular/core';
import {
    Observable
}
from "rxjs";
import {
    debounceTime,
    map
}
from 'rxjs/operators';
@ Component({
    selector: "app-root",
    template: `    <h2>Observable events</h2>    <input type="text" #stockSymbol placeholder="Enter stock" >  `
})export class AppComponent implements AfterViewInit {
     @ ViewChild('stockSymbol')myInputField: ElementRef;
    ngAfterViewInit() {
        let keyup$:  = Observable.fromEvent(this.myInputField.nativeElement, 'keyup');
        //wait for 500 ms
        let keyupValue$ = keyup$.pipe(debounceTime(500), map(event => event['target'].value)).subscribe(stock => this.getStockQuoteFromServer(stock));
    }
    getStockQuoteFromServer(stock: string) {
        console.log(`The price of ${stock} is ${(100 * Math.random()).toFixed(4)}`);
    }
}

- handling observable events with form api 
    + valueChanges, observable that emits data 
    + statusChanges, observable that emits the validity 


# Laying out pages with Flex layout 
- “Responsive Web Design,” available at http://alistapart.com/article/responsive-web-design
- flex layout and observablemeida CSS Flexbox with media queries (see http://mng.bz/6B42)

npm i @angular/flex-layout @angular/cdk

- The ObservableMedia service enables subscribing to screen-size changes and programmatically

import {
    Component
}
from '@angular/core';
import {
    ObservableMedia
}
from '@angular/flex-layout';
import {
    Observable
}
from 'rxjs';
import {
    map
}
from 'rxjs/operators';
 @ Component({
    selector: 'app-root',
    template: `<h3>Watch the breakpoint activation messages in the console.  </h3>  <span *ngIf="showExtras$ | async">                                Showing extra info on medium screens</span>  `
})export class AppComponent {
    showExtras$: Observable < boolean > ;
    constructor(private media: ObservableMedia) {
        this.showExtras$ = this.media.asObservable().pipe(map(mediaChange => {
                    console.log(mediaChange.mqAlias);
                    return mediaChange.mqAlias === 'md' ? true : false;
                    4
                }));
    }
}







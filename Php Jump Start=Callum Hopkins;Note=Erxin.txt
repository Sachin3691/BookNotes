Php Jump Start=Callum Hopkins;Note=Erxin

# Introduction 
- material 
http://www.sitepoint.com/books/jsphp11


# charpter 1
- server kick-start 

- php is mainly development for server side scripting 

- setting up, lamp
    + WINDOW 
    apache
    php
    mysql
    phpMyAdmin
    
    dependencies, vc++ 2010 sp1 redistribution
    
    + icon of lamp, red both apache and mysql are offline
    orange, one of the server fail to start 
    green 
    
- php configuration, check configuration by 
pipinfo();

for example wrapper it in a <?php phpinfo()?>

it will display the full path of the configuration file 

check the php.ini, will contain all the configuration, http://www.sitepoint.com/a-tour-of-php-ini/
- which processor do i have 
- popular html editor 
adobe dreamweaver
sublime text 
komodo edit 
coda 
notepad++

- php variables 
$var_ name
first char after $ must be letter or underscore 

- variable types 
Integer
Float
String
Boolean
Array, $ary = array(1,2,3,4);

use array as dict 
$ary = array('key0' => value, 'key1'=> value);

$ary['key0'];

php5.4 support shorthand create array 
$ary = ['key0'=>value, 'key1'=>value]

- comments 
//
/*..*/

- preparing our project 
    + create folder structure 
/ 
/admin
/frontend
/includes


# chapter 2
- php data 
- operators 
., string concatenation operator 

- condition statements 
if (expression){
} 
elseif {
}
else{
}

- switch statement 

switch(expression){
    case expression:
        ...;
        break;
    ...
    default:
        ....;
        break;
}

- loops
for($var = v; $var < 10; $var++){

}

while(expression){
}

foreach($ary as $iter){
}

foreach($ary_dict as $key=>$value){
}

- databases, mysql and php, there are two extension to make mysql works with php 
MySQLi and PDO

check the info.php of the php configuration file, make sure the PDO is enabled 

- create empty database with phpMyAdmin, open phpMyAdmin in browser and login 
    + go to the privilege options 
    + select add user
    
    + connect database with pdo
<?
$db = new PDO("mysql:host=localhost;dbname=kickstartapp", "USERNAME", "PASSWORD");
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
try{
    $queryStr = "CREATE TABLE users (id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
                                     name VARCHAR(40),
                                     password VARCHAR(100),
                                     email VARCHAR(150))";
    $db->query($queryStr);    
}
catch(PDOException $e)
{
    echo $e->getMessage();
}

- insert data 
$queryStr = "INSERT INTO users(username, password, email)" values('admin', MD5('admin'), 'youremail@domain.com')";
$db->query($queryStr);

//another way to execute query 
$query = $db->prepare($queryStr);
$query->execute();
$query->closeCursor();


# Chapter 3
- objects and oop 
//dog.php
class Dog 
{
    public $name;
    public function __construct($name){
        $this->name = $name;
    }
    
    public function speak(){
        return 'woof!';
    }
}

//use the class 
require 'dog.php';

$dog = new Dog('fido');

- including code from other files 
include, includes the content of the file
include_once, php will perform the check to make sure the file is only included once 
require, similar to include but php will stop executing with a fatal error if the file isn't found 
require_once,...

- inheritance 
class Subclass extends ParentClass
{

}

use the same method name to override the methods in the parent class 

have three choice 
public, protected, private 

- templates, allows use to separate our front-end display logic from the data crunching process that run on the back-end 

    + php mvc framework 
    CakePHP, Zend Framework, CodeIngniter 
    
    + template file example
//template.php 
<?php  //this means php only file ?
<html>
    <head>
        <title><?php echo $pageTitle; ?></title>
    </head>
    <body>
        <ul>
        <?php foreach($array as $item){ ?>
            <li><?php echo $item; ?></li>
        <?php } ?>
    </body>
</html>

//use the tempalte file 
$pageTitle = 'my template example';
$array = array('one', 'two');
require '/../template.php';

    + another kinds of template is used their own template syntax which is different with php 
    
        * a famouse template syntax example in Expression Engine CMS 

- project files 


# Chapter 4 
- forms element 
    + attributes 
action, set the destination to which the form data is submitted, absolute or relatie uri 
method, how the data is send to post/get, get is the default option 
enctype, how the form is encoded when it's submitted, how three possible values appliaction/x-222-form-urlencoded, multipart/form-data and text/plain 

- there are two attributes that can be set on any form element that are also important 
name, is an identifier used to collect the data when it's sent to the destination url <input type="text" name="data"

value, the attribute is where the information or data is set 

- post and get 

    + php predefined variables 
$_SESSION variable 
$_POST, represent the data arrray send by the form element with post method 
$_GET, the data arrary send by get method 

//get the form data in the aim php of the action 
if(!empty($_POST['data'])){
}
$_GET['data'];

- form action with php 

predefined variables 
$_SERVER, hold server and execution environment information, one of the key in $_SERVER array is PHP_SELF, the value will be url to the current php file 

echo $_SERVER['PHP_SELF'];

we could use this key/value pair in form action to let the form pass the data to the current php file 

<?php
if (!empty($_POST['data'])) {
    echo 'Form has been submitted';
// code to process data from form
}
?>
<html>
<body>
    <form action="POST" action="<?php echo $_SERVER['PHP_SELF']; ?>">
        <input type="text" name="data" type="text" placeholder="Type in a string here" />
        <button type="submit">submit</button>
    </form>
</body>
</html>

when use it, it's important to use the htmlspecialchars() function to prevent cross site scripting(XSS) attach 
<form action="POST" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">

    + prevent XSS in php 
    http://blog.astrumfutura.com/tag/xss/
    http://seancoates.com/blogs/xss-woes

- superglobals and $_REQUEST
$_POST, $_GET are belong to superglobals variables, normally arrays 

$_REQUEST created by all variables generated by curernt HTTP request, suggest to not access it directly because it can access user cookie directly 

use php.ini to configure not support access cookie in $_REQUEST

- forms and databases 

- building on our platform 

# Sessions and Cookies 
- cookies store data in client machine 
- session store data in server 
- access cookie and session 
$_COOKIE
$_SESSION 

they are also superglobals variable 

The isset() function checks to see if a variable or element has been assigned a
value. In the code above, isset()

<?php 
$expire = time() + 60 * 60 * 24 * 30; 
// This equals to the time now plus 30 days in the future
setcookie("user", "Joe Public", $expire);
if (isset($_COOKIE["user"])) {
    echo "Welcome " . $_COOKIE["user"] . "!";
} else {
    echo "Welcome guest!";
}
?>

- use the session, Initially , we need to tell PHP we'd like to use a session, which we do with the session_start() function. remove session variables individually, and collectively, using functions such as session_unset() and session_destroy(). 
session_unset will remove all session information 
session_destroy will remove current session information 

<?php
session_start();
$_SESSION["username"] = "myusername";
echo "Username = " . htmlspecialchars($_SESSION["username"]);
?>

also recommand to not store sensitive data in session too 

- project, namespace is used to create a unique identifier for a class 
namespace Project;
class MyProject{

}

- using Gravatar for user header, http://en.gravatar.com/


# Chapter 6, php and security 
- php.ini is used to configure the behavior of php 
- settings 
allow_url_include, by default it is turn off, turn on then you can include additional files via url 
opn_basedir, help restrict file that scripts are allowed to load on the server 

    + error management 
    + session state 
session.save_path 
session.cookie_httponly 

    + validating submitted data 
    isset
    is_nuberic 
    checkdate(), checks the validaity of a give data 
    strip_tags(), remove a string with html and php tags removed 
    empty(), check a string is empty 





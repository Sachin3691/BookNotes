Microsoft Official Course 2778A, Writing Queries Using Microsoft SQL Server 2008 Transact-Sql; note = eshang

Sql server components
1. database engine
2. analysis services
3. reporting services
4. integration services
;
5. full text search, replication, service broker, notification services

management tool
management, configuration manager, profiler, database engine tuning advisor, business intelligence development studio

database engine components
protocol, relational engine, storage engine, sqlos (operating system with a powerful api, bring together all system components)

Normalization, 标准化

ANSI, American National Standard Institute(ANSI)
ISO, International Standards Organization

ANSI-SQL, define by ANSI, other kinds of SQL script:
T-SQL, Transact SQL Microsoft implementation
PL/SQL, Procedural Language/SQL   Oracle's PL/SQL
IBM's SQL Procedual Language

Categories of SQL Statements
DML, DCL, DDL data defination language, TCL transactional control language, DQL sql select statements

T-SQL language:
Operator likes VB and variable definition likes batch files
arithmetic: +, -, *, /, %
assignment: =, set @varName = value
comparision: =, <, >, <>, !, >=, <=
logical: and, or, not
string: str0 + str1
;
Function:
rowset: return objects that can be used as table references
	containstable, opendatasource, openquery
aggregate: operate on a collection but return single value
	avg, checksum_agg, sum, count
ranking: return a ranking value fore each row in a partition
	rank, dense_rank
scalar: operate on a signle value and then return a single value
	create function dbo.ufn_cubicVolume
;
variables:
declare @varName as type

Control-of-flow statements
begin...end, break, goto, continue, if...elese, while, return, waitfor

exception handling
begin try
	...
end try
begin catch
	...
end catch;
raiserror (... ... ); --raise the specify expception

select [distinct]...
[into new table]
from table...
where ...
group by...
having ...
order by ... [asc|desc]
;
Comparison Operators like VB
;
Filtering Data
where value0 = value1
where string0 like string1   -- %, replace zero or more; _, replace single char
where contains( collection, value)	--collection like columns, fuzzy search
where freetext(description, value) -- search columns for value match the meaning not just the exact word
;
logical operators
~, bit not
%, mod
^, bit exclusive or
|, bit or
other operators:
not, and, all, between, in ,like, or, some

Working with NULL value
NULL is unknow value, not zero or empty string and NULL not equal to NULL
anything compare to NULL returns UNKNOWN
NULL can't included in a calculation
"sparse" keyword can be used to conserve space in columns that allow null
is NULL, used for test something is NULL or not.
;
function:
isnull(column, value), if the column value is NULL then return value
nullif(), returns NULL if both specified expressions are equal
coalsce(arguments...), returns the first non NULL expression among the arguments

Labeling columns in result sets
columnName as otherName, rename columns in result.

Create more efficient queries
reduce these kinds of sentence in query:
like '%...', leading wildcards
!=, not in( collection ),  Negative condition test
Expression use two columns in the same table;
Expression use column names in search arguments; use index column if possible
Avoid use multiple aliase for same table

Aggregate Function
avg, mix, max, sum, count, grouping, var
Aggregate function can only appear in the select statement, compute/compute by and having clause
For NULL value, use ISNULL(columnName, repalceValue )
Exp:
	select avg( isnull( columnName, replaceValue) ) as aliasName
except count(*) exclude null value, count() include null value.

CLR integration, assemblies, such as c#,...
Implementing:
create assembly StringUtilitties from 
'PathToAssembly\StringUtilities.dll' --strDllPath
with PERMISSION_SET = SAFE;
;
create aggregate concatenate( @input nvarchar(40000))
returns nvarchar(4000)
external name [StringUtilities].[concatenate]
;
UDA, User Dfined Aggregate, when UDA is loaded in can be use as buildin function

ROLLUP, CUBE
ROLLUP, generate a result set showing the aggregates for hierarchy of values in selected columns
CUBE, generates a result set that shows the aggregates for all combination of values in selected columns
Exp:
select a, b, c, sum(<expression>)
from t
group by ROLLUP(a,b,c)
;
--generates a subtotal for each unique combination of values for (a, b, c), (a, b) and (a)
;
group by CUBE(a,b,c)
--generates a row for each unique combination of values of (a, b, c), (a, b), (a, c), (b, c), (a), (b) and (c)

Pivot, converts values to columns
unpivot, convert columns to values
;
select * from table
pivot (sum(columnName)) for columnName in ( [value0], [value1] ) PVT

Grouping and Summarization
Group by
rollup, give a statistic about each group
one attribute: grouping_id, returns the level of grouping

join table can be use in the same table. You have to give the same table two alias name for this purpose. 
t0 join t1 on condition
;
Use user define function to return joined table
create function functionName( parameters )
returns table as return (select ... )

Limited the return results, top, tablesample
select top ( 10 [percent] ) * from tableName

use all, any exists to limited the subquerys
ntext, text, image cannot be used in subquerys

Common table expression(CTE), implement by WITH expression:
with CommonTableName( columnNamesOrColumnAliaNames ) as
(/*subquerys*/
	select columnExpression_For_ColumnNamesOrColumnAliaNames ...
)
Use CTE in recursive expression

Use Insert statement
insert [into] tableName (columnList) values( ... )
insert [into] tableName selectStatement
insert [into] tableName execute storeProcedureName(parameters)
insert top (#) into tableName selectStatements // use to insert top n rows to the aimTable
;
use set identity_insert on statement to insert identity column
;
use output statement to retrieve the value of identity column
insertStatement output columnList

Use Delete statement, likes insert.
;
Use Truncate statement, remove all rows from a table.
truncate table tableName
compare to the delete statement, truncate table do less log, fewer locks, and zero pages left in the table.

Transaction
Begin transaction, commit, rollback
;
begin transaction transactionName|@tranName
;
use set statement to set the database locker
set transaction isolation level <levelNumber>;
;
limited transaction to atomic operation

Querying Metadata, XML, FullText Indexes
;
Metadata, is data about stored data. Such as length of the column, relationship, and so on.
Begin with sql2000, we can use compatibility views to check the metadata.
select * from sys.sysobjects
;
All the system informations have been saved in sys module.
;
Information_schema use to check the current database schema, includes  columns, tableName, views and so on. 
information schema view examples
select column_name from information_schema.columns where table+name = n'product'
;
Dynamic Management views and functions
look at the internal working of sql server by TSQL
table:
CATEGORY	VIEW						FUNCTIONS
Execution	dm_exec_requests			dm_exec_sql_text
Index		dm_db_index_usage_stats		dm_db_missing_index_columns
I/O			dm_io_pending_io_requests	dm_io_virtual_file_stats
Operating System	dm_os_sys_info
;
sys.dm_exec_query_stats have saved all the executed sql squery's detail information, such as sqlHandle which can be use by dm_exec_sql_text
;
System stored Procedures and Functions
sotred procedures, name begin with sp_xxxx which can be selected from sys.sysobjects
;
sp_database, sp_tables, sp_columns, sp_statistics, sp_pkeys, sp_fkeys
dataBaseProperty, columnproperty, objectProperty, col_length, db_name, db_id

XML, implements by SQL Server 2008
Serialize means make sqlquery results to XML format
Deserialize means make XML format to sqlquery results
Deserialize by OpenXML function
XQuery support query based interaction with data stored in XML format
XML schema collections provide the ability to define schemas for typed XML storage.
;
XQuery base on the XPath query language. 
;
Before create xml variables ... much use CREATE XML SCHEMA first to regist the XML schema
;
XML is a build-in data type in sql server. have five methods
Query, Value, Exists, Modify, Nodes
;
Exp:
select * for xml auto {raw('elementName')|explicit}
for xml ... can be used for any rowset. 
;
OpenXML return a rowset
select * from openXML(parameters) with( columnName type, ... )
One useful storage procedure sp_xml_preparedocument

FullText Indexing and Querying Process
query->full-text index -> dataTable-> results
;
Enable full-text indexs in sql server by:
sp_fulltext_database 'enable'
Create the full-text index for the required tables(s)
sp_fulltext_table
Add query columns to the index
sp_fulltext_column
Set population options for index
sp_fulltext_table
;
Contains Predicate offer a complex syntax for using full-text indexed
contains( Name, '"Mountain" OR "Road"' )
Freetext Predicate used to search columns containing character-based data types
select * from textColumnName where freetext( textColumnName, var )
;
Functions:
freeTextTable, likes Contains and Freetext, but returns matches in table form.

Views
create|alter view viewName
as 
begin
	select ...
end
;
drop view viewName
we can changed data by view.
;
view can be indexed using Create Index
Precondition:
View must be defined suing the with schemabinding option.
create view viewName With Schemabinding
as
begin
	select ...
end
create unique clusterd index ... on ...
;
Partitioned Views
Can set a member tables across one or more servers, making the data appear as if from one table. Use union all statements to combine the rows form the member tables.
create table tableName (columnsName...)
create view viewName
select * from tableName0
unionall 
select * from tableName1
...

User defined function 
create|alter function functionName (parameters)
returns varType // such as int, table, ...
as 
begin
	...
end
;
Restriction:
If update data, use stored procedures instead
Objects referred to by the function have to be previously declared and created
;
Consider balance between performance and maintainability
If user define function is used in select or where statement, it will be executred for every row!!!!
;
Call user define function
functionName(parameters)

Stored Procedures
create procedure procedureName @ParameterName type [in|output|inoutput]
returns Type
as 
begin
	...
end
;
return a status value to a calling procedure

Stored Procedure, stored procedure don't return a value. Only functioin could return a value to the caller. 
create procedure Name @parameter type [in|out|inout]...
as
begin ... end
have to validataion all the input parameter

Trigger
A special typeo of stored procedure that executes when attempt modify the data in a table.
two categories of DML triggers: instead of (before) and after.
create trigger Name on table type // type = instead of insert, after insert|update|delete
begin
	...
end
;
a trigger apply to only on table
triggers must belong to the same schema as their target

Sql server works with Heterogeneous(多相的) Data, 从多种数据库中同时筛选数据，如Oracle, DB2
;
use distributed query to access another data source
use sp_addlinkedserver to define specific login
;
exec sp_addlinkedserver
	@server = 'Marketing',
	@srvproduct = 'Oracle',
	@provider = 'MSDAORA',
	@datasrc = 'OraServer'
;
exec sp_addlinkedsrvlogin
	@rmtsrvname = 'Marketing',
	@useself = 'false',
	@locallogin = 'Mary',
	@rmtuser = 'MaryP',
	@rmtpassword = '...'
;
Using Ad hoc Distributed query
select * from openDataSource('msdaora', 'data source=OraServer; user=name; password=...').catalog.dbo.table'
select * from openRowset('msdaora', 'oraServer', 'name', 'password', 'select * from dataName.dbo.table')
select * from openQuery(OracleSvr, 'select * from talbe')

Execution Plans represent the execution cost of specific statements

cast with convert
cast is comply with ISO.
convert take advantage of style functionality

Date, time type
DataType		Format		Accuracy
time			hh:mm:ss	100 nanoseconds
date			YYYY-MM-DD	1 day
smalldatetime	YYYY-MM-DD	1 minute
				hh:mm:ss
datetime		YYYY-MM-DD	0.00333 seconds
				hh:mm:ss[.nnn]
datetime2					100 nanoseconds
datetimeoffset				100 nanoseconds

Using Dynamic SQL
;
use SQL generate sql script and run it with the store procedure
@sqlString = '....'
sp_executesql @sqlString
exec|execute @sqlString [output]
;
Should consider:
sql injection
security is checked for every object
use sp_executesql for best chance at plan reuse

Sqlcmd is command line operator

sql server could connect to Excel file

   












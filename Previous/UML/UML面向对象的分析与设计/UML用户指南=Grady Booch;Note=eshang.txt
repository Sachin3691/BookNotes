# UML用户指南=Grady Booch;Note=eshang #

#  入门 #
- 目的, 可视化, 文档化
- 原理
选择模型, 每个模型精度不同, 模型要与现实相联系, 多个模型多个角度描绘系统

# 介绍  #
- UML, unified modeling language, 统一建模语言
- UML文档化
需求, 体系结构, 设计, 代码, 项目计划, 测试, 原型, 发布

# 概念模型 #
- 构造块  
事物, 关系, 图
    - 事物  
        结构, 行为, 分组, 注释
    - 关系
        - 聚合
        - 组合, 是聚合的一种特例, 整体与部分的声明周期一致
- 结构事物
    - 类, class
    - 接口, interface
    - 协作, collaboration
    - 用况, use case
    - 主动类
    - 构件
- 行为事物
    - 交互
    - 状态机
- 分组事物
    - 包
- 注释
- UML中的关系
    * 依赖
    * 关联
    * 泛化
    * 实现

## UML中的图 ##
- 类图, class diagram
    * 普通特性
    * 内容包含, 类, 接口, 协作, 依赖, 泛化和关联
    * 使用系统词汇
    * 逻辑数据模型
    * 表示简单的协作
    * 接口, 是系统中部件的接缝
- 对象图, object diagram
- 用况图, use case diagram
- 顺序, sequence diagram
- 协作, interaction diagram
- 状态, statechart diagram
- 活动, activity diagram
- 构件, component diagram
- 实施, deployment diagram

## UML中的公共机制 ##
- 规格说明
- 修饰
说明操作范围等+(public), -(priavte), #(protected)

## 体系结构 ##
- 软件系统组织
- 对组成系统的结构元素及其接口的选择
- 元素间的协作及行为
- 子系统
- 系统组织风格

## 体系结构组成 ##
- 用况, use case view
- 设计视图, design view
- 进程视图, process view
- 实现视图, implementation view
- 实施视图, deployment view

## 基本构建建模 ##
- 系统术语
- 系统构建的类及职责
- 对非软件部分建模

# 关系 #
- 常见关系,  依赖, 泛化, 关联

# 公共机制 #
- 定义系统中关系的标记值与约束
- 术语和概念
- 其他修饰
- 构造型
- 标记值
- 约束
- 构造块建模
- 特性建模

# 图  #
## 通常用一下四种图观察系统的静态部分 ##
- 类图
- 对象图
- 构件图
- 实施图

##以下下五种图观察系统的动态部分 ##
- 用况
- 顺序
- 协作
- 状态
- 活动

# 包, 可以拥有元素, 包含 # 
- 类
- 接口
- 构建
- 节点
- 协作
- 用况
- 其他包

# 实例, 是抽象的具体表示 #
- 名称
- 操作
- 状态

# 对象图, 某一时间点上一组对象以及它们之间的关系 #
- 对象, 即实例
- 链

# 基本行为建模 #
# 交互, 是在语境中实现某一目标的一组对象之间的交换的一组消息所构成的行为 #
- 语境
- 对象和角色
- 链
- 消息

# 用况, 包含系统与参与者的交互, 要文成一些确定的工作 #
- 名称
- 用况与参与者
- 事件流
- 协作
- 组织用况
- 普通建模技术
    * 语境建模
    * 对需求建模
- 正向工程
    * 对于图中每个用况, 辨别事件流和异常事件流
    * 选择测试深度, 为每个流产生测试底稿, 前置条件作为初态, 后置条件作为结束判定
    * 根据需要, 产生一个测试支架来描述每个与用况交互的参与者
    * 每次发布用况图应用的元素, 都使用工具来运行响应的测试
- 逆向工程
    * 识别与系统进行交互的每一个参与者
    * 对于每个参与者考虑它与系统的交互方式, 改变该系统的状态或环境对参与者的响应
    * 跟踪可执行系统中每个参与者有关的事件流, 从主要的开始, 之后考虑可选的
    * 通过声明一个用况, 将相关的流聚集在一起, 考虑用延伸的关系对变体建模
    * 将参与者和用况放在一张用况图中, 并建立它们之间的关系

# 交互图, 描述一个特定群体的动态方面, 是对象和他们之间关系的组成 #
- 公共特性
- 内容
    * 对象
    * 链
    * 消息
- 顺序图, 有对象生命线, 有控制焦点
- 协作图, 有路径, 有顺序号
- 语义等价, 顺序图与协作图在语义上是相同的
- 交互图用于对系统动态方面建模
    * 时间顺序
    * 组织对控制流建模

# 活动图 #
- 建筑领域用途
    * 甘特图, gantt chart
    * 波特图, pert chart
- 活动图, 类似于gantt与pert图, 关注对象间发生的活动
- 内容
    * 活动状态
    * 转换
    * 对象
    * 分支
    * 分叉与汇合
    * 泳道
    * 对象流
- 应用
    * 对工作流建模
    * 对操作建模

# 高级行为建模 #
## 事件 ##
- 事件种类
    * 信号
    * 调用
    * 时间推移
    * 状态变化
- 信号，　表示一个对象异步的发送并由另一个对象接收的一个已命名对象
- 调用事件, 代表一个操作的调度
- 时间事件和变化事件, 是时间推移
- 发送与接收事件
- 建模方法
    * 对信号族建模
        - 考虑主动对象响应的所有信号
        - 寻找信号公共类
        - 寻找多态性, 注意调整层次结构
    * 对异常建模
        - 对每个元素的每个操作考虑发生异常的条件
        - 分层排列所有异常, 寻找公共类
        - 对每个操描述可能出现的异常

# 状态机, 对系统动态方面建模 #
- 语境, 每个对象有生命期
- 状态, 对象生命期满足某些条件,执行某些活动等得条件和状况
- 转换
    * 源状态
    * 事件触发
    * 监护条件
    * 动作
    * 目标状态
- 高级状态和转换
    * 内部转换
    * 延迟事件
- 子状态
- 应用
    * 对对象生命周期建模
        - 如果语境是一个类或者一个用况, 则收集相邻的类
        - 如果语境是整个系统, 那么集中到系统行为上

# 进程和线程 #
- 每个独立的控制流被建模为主动对象
- 主动对象, 拥有一个进程或者线程
- 控制流
- 类和事件, 主动类代表独立的控制流, 普通的类不能体现这样的流
- 标准元素
    * 进程, process
    * 线程, thread
- 通信, 是类的相互协作
- 同步
- 进程视图
- 应用
    * 对多控制流建模
        - 识别并发
        - 考虑主动类的责任, 均衡分布
        - 捕捉静态决策, 突出主动类
        - 考虑类的协作
        - 关注主动类的通信
        - 关注主动类与协作对象的通信及同步
    * 对进程间通信建模
        - 考虑那个代表进程
        - 对通信消息建模

# 时间和空间 #
- 实时系统, 是某些行为必须在精确的, 某些相对时刻, 可预见的时间段内完成
- 分布式系统, 构建可以物理的分布在各个节点上
- 时间标记, timing mark, 表示事件发生的时刻
- 时间
- 位置
- 应用
    * 对时间约束建模
    * 对对象分布建模
    * 对移动的对象建模

# 状态图 #
- 简单的状态和组合
- 转换, 包含事件和动作
- 应用
    * 反应型对象建模

# 对体系结构建模 #
- 名称
- 构建和类
- 构建和接口
- 二进制可替换性, 可以用构建创建系统, 然后可以通过增加和替换老构建来进行系统演化
- 构建种类
    * 实施构建, deployment component
    * 工作产品构建, work product component
    * 执行构建, execution component
- 组织构建
    * 依赖
    * 泛化
    * 关联
- 标准元素
    * 可执行体, executable
    * 库, library
    * 表, table 
    * 文件, file 
    * 文档, document
- 应用
    * 对可执行体和库建模
        - 划分物理系统
        - 使用合适的标准元素
    * 对文件, 表, 文档建模
    * API建模
        - 系统中的可编程接缝, 每个接缝一个接口, 收集边界属性和操作
        - 只显露给定语境中比较重要的接口特性
    * 对源代码建模
        - 根据开发工具施加约束
        - 版本控制

# 实施 #
- 节点和构建
- 组织节点
- 连接
- 应用
    * 对处理器和设备建模
    * 对构建的分布建模

# 协作 #
- 结构, 说明共同完成工作的类; 行为部分说明关于这些元素如何交互的动态特性
- 行为, 协作部分通常用类图表示, 行为部分通常用交互图表示
- 协作的组织
    * 协作和它实现的事物之间存在的关系
    * 协作之间的关系
- 应用
    * 对用况建模
    * 对操作实现建模
    * 对机制建模, 机制是独立存在的协作, 语境是整个系统

# 模式和框架 #
- 模式和体系结构, pattern, framework
- 模式, 是给定语境中通用的解决方案
- 框架, 一个领域类的应用系统提供可扩展模板的体系结构
- 机制, 只是应用于类群体的设计模式的别名, mechanism
- 应用
    * 对设计模式建模, 表现使用模式的类实现, 模式的行为
    * 对体系结构建模, 预计某些语境中复用和调整的系统体系结构建模
        - 从以证明有效的体系结构中提取框架
        - 将框架建模为结构化的包, 包中包括描述性元素,特别是设计模式
        - 显示对以设计模式和协作形, 明确表明那些类必须扩展, 哪些类必须被实现

# 构件图 #
- 构件
- 接口
- 关系, 依赖, 泛化, 关联和实现
- 应用
    * 对源代码建模
    * 对可执行体系的发布建模
    * 对物理数据库建模
    * 对可适应的系统建模

# 实施图 #
# 对系统建模 #
- 节点
- 关系, 依赖和关联
- 子系统
- 模型和视图

# 参考资料 #
- UML VISIO 图形库, http://www.softwarestencils.com/uml/index.html


 

# 术语表 #
- SE Software Engineering 软件工程 
- BURS Business and User Requirement Specification 业务和用户需求规格说明 
- CCB Change Control Board 变更控制委员会 
- CI Configuration Item 配置管理项 
- CR Change Request 变更申请 
- CMM Capability Maturity  Model 软件能力成熟度模型 
- COQ Cost Of Quality 质量成本 
- CUT Coding&Unit Test /Construct 编码及单元测试 
- DD Detail Design 详细设计 
- DP Defect Prevention ( CMM Level 5 KPA ) 缺陷预防(CMM第五级的KPA) 
- FURPS+ Functionality, Usability, Reliability, Performance,
- Supportability, + Localizability, Portability 功能性，可用性，可靠性，性能，支持性
- ＋ 本地化，可移植性 
- HLD High Level Design 概要设计 
- IC (IGC) Intergroup Coordination ( CMM Level 3 KPA ) 组间协调（CMM第三级的KPA） 
- ISM Integrated Software Management ( CMM Level 3 KPA ) 集成软件管理（CMM第三级的KPA） 
- IT Integration Test 集成测试 
- KPA Key Process Area 关键过程区域 
- LC Lifecycle 生命周期 
- LLD Low Level Design 详细设计 
- OOA Object Oriented Analysis 面对对象分析 
- OOD Object Oriented Design 面向对象设计 
- OPD Organization Process Definition ( CMM Level 3 KPA ) 组织过程定义（CMM第三级的KPA） 
- OPF Organization Process Focus ( CMM Level 3 KPA ) 组织过程焦点（CMM第三级的KPA） 
- OSSP Organization Standard Software Process 组织标准软件过程 
- PCB Process Capability  Baselines 过程能力基准 
- PCM Process Change  Management ( CMM Level 5 KPA ) 过程更改管理（CMM第五级的KPA） 
- PDSP Project's Defined  Software Process 项目定义的软件过程 
- PI Process Improvement 过程改进 
- PMR Project Management Review 项目管理评审 
- PM Project Manager 项目经理 
- PP Project Planning 项目策划 
- PR Peer Reviews ( CMM Level 3 KPA) 同行评审（CMM第三级的KPA） 
- QC Quality Champion 项目SQA人员 
- QP Quality Plan 质量计划 
- QPM Quantitative Process  Management  ( CMM Level 4 KPA ) 定量过程管理（CMM第四级的KPA） 
- RA Requirement Analysis 需求分析 
- RCA Root Cause Analysis 根本原因分析 
- RFP Request for Proposal 提议和请求 
- RM Requirements  Management  ( CMM Level 2 KPA ) 需求管理（CMM第二级的KPA） 
- ROI Return On Investment 投资收益率 
- SCCB Software Configuration Control Board 软件配置控制组 
- SCM Software Configuration Management ( CMM Level 2 KPA) 软件配置管理（CMM第二级的KPA） 
- SCMP Software Configuration Management Plan 软件配置管理计划 
- SDLC Software Development Life Cycle 软件开发生命周期 
- SEI Software Engineering Institute 软件工程研究所 
- SEPG Software Engineering  Process Group 软件工程过程组 
- SD System Design 系统设计 
- SMR Senior Management  Review 高级管理评审 
- SPC Statistical Process Control 统计过程控制 
- SPE Software Product Engineering ( CMM Level 3 KPA ) 软件产品工程（CMM第三级的KPA） 
- SPI Software Process  Improvement 软件过程改进 
- SPP Software Project Plan ( CMM Level 2 KPA ) 软件项目策划（CMM第二级的KPA） 
- SPTO Software Project Tracking & Oversight 软件项目跟踪和监督 
- SQA Software Quality  Assurance  ( CMM Level 2 KPA ) 软件质量保证（CMM第二级的KPA） 
- SQM Software Quality Management 软件质量管理 
- SRS System/Software Requirement Specification 软件需求规格说明 
- SSD System Sequence Diagram 系统时序图 
- SSM Software Subcontract Management  ( CMM Level 2 KPA ) 软件子合同管理（CMM第二级的KPA） 
- TCM Technology Change Management 技术改革管理 
- TP Training Plan / Training Program  ( CMM Level 3 KPA ) 培训大纲（CMM第三级的KPA） 
- TQM Total Quality Management 总质量管理 
- UAT User Acceptance Test 用户验收测试 
- UC Use Case 用例 
- UCD Use Case Diagram 用例图 
- UT Unit Testing 单元测试 
- WBS Work Breakdown Structure 工作分解结构 

 

 

类的定义
与java一样，所有的程序运行在类中；
[attributes][modifiers]class identifier [:base-list]
{
  //数据与函数成员定义
}
属性定义:
[attributes][modifiers][type] identifier
{
  get
  {
  }
  set
  {
  }
}
attributes:附加声明信息public, private 等
modifiers:可以用new, abstract, sealed
identifier:类名
base-list:父类及接口
例如：
using system
public class Complex
{
  private float real; //类属性，及属性方法
  public float Real
  {
    get
    {
      return real;
    }
    set
    {
      real = value;
    }
    public Complex //类构造函数
    {
      this.real = 0;
      this.imaginary = 0;
    }
    public void print()
    {
      console.writeline(this.real);
    }
}
namespace ConsoleApplication1
{
  class Program
  {
    static void Main(string[] args)
    {
      Complex v = new Complex();
      v.real = (int)console.readline();
      v.print();
    }
  }
}

操作符重载
public static result-type operator system-operator(parameters)
例如在类Complex中定义
public static Complex operator + (Complex x, Complex y )
{
  return Complex( x.real + y.real);
}

继承
public class Square: Shape
{
  private double Area;
  public Square():base()  //调用基类构造函数
  {
  }
  public override double Area //重载属性函数
  {
    get
    {
    }
  }
}

接口,类不可以多重继承，只有接口可以
[attributes][modifier] interface identifier [:base-list]
{
}
例如：
interface IMetric
{
  float Length();
}
interface IEnglish
{
  float Length();
}
class box: IEnglish, IMetrix
{
  float lengthInches;
  public box(float length, float width)
  {
    lengthInches = length;
  }
  float IEnglish.Length() //实现接口
  {
    return lengthInches;
  }
  float IMetrix.Length()  //实现接口
  {
    return lengthInches * 2.54f;
  }
}

结构,结构不可以继承，内部可以定义函数，可以实现接口
[attributes][modifier] struct identifier [:interfaces]
{

}
interfaces:表示实现的接口

枚举
[attributes][modifiers] enum identifier [:base-type]
{
}
例如
enum Days { sun, mon, tue};
enum Months{ jan = 1, Mar = 3 };
[flagsAttribute]  //使用位来作为标志
enum colors{ red = 1, green =2, blue = 4, yellow = 8}

数组
int[] array = new int[5];
int[] array = new int[]{1,2,3};

索引器,用于对数组类型的属性进行控制
public dataType this[int index]
{
  get{}
  set{}
}
例如
class Number
{
  private int[] str = new int[10];
  public int this[int index]
  {
    get
    {
      if( index < 0 || index >= 0 )
        return 0;
      else
        return str[index];
    }
    set
    {
      if( index >= 0 && index < 10 )
        str[index] = value;
    }
  }
}

委托
即是函数指针
一般委托的声明
[attributes][modifier] delegate resulte-type identifier(parameters);
关联事件处理程序和事件
objWithEventName.EventObj += new EventDelegate( EventHandleMethod );
例如：
class program
{
  public delegate void sort( int[] array);  //定义委托
  public void insertSort( int[] array);     //定义插入排序
  public static void selectSort( int[] array);     //定义选择排序
  static void main(string[] args)
  {
    int[] a = new int[3]{2,1,3};
    sort funHandle;
    program p = new program();
    funHandle = p.insertSort; //非静态方法需要实例化后委托
    handle(a);
    funHandel = selectSort; //静态方法可以直接委托
    handle(a);
  }
}

匿名方法,使用委托调用匿名方法
delegate void Name(int x);
Name n = delegate(int k)
{
  //匿名方法定义
};

事件, 相当于一种委托，即一种函数指针
public event xxxEventHandler EventName;
例如定义事件
class upper
{
  char current_char;
  public event CharEventHandler Demo;
  public char CurrentChar
  {
    get
    {
      return current_char;
    }
    set
    {
      if( Demo != Null )
      {
        current_char = value;
        Demo(this.current_char);    //引发事件
      }
    }
  }
}
namespace Events
{
  delegate void CharEventHandler(char c); //定义事件处理的委托
  class Program
  {
    static void up(char c)         //事件处理函数
    {
      console.write("{0}->", c);
      if( c > 'a' && c < 'z' )
        c = (char)((int)c - 32);
      console.writeline(c);
    }
    static void Main( string[] args )
    {
      upper a = new upper();
      a.Demo += new CharEventHandler(up); //事件处理程序与事件相关联
      a.currentChar = 'b';                //触发事件
    }
  }
}

泛型, c++中模板
用于编写其他客户端代码能够使用的单个类，引入类型参数的概念,将一个或多个类型的参数的制定推迟到客户端代码声明并实例化该类或方法的时候
public class GenericList<T>
{
  void Add( T input )
  {
  }
}
GenericList<int> list1 = new GenericList<int>();
例如
class stack<T>
{
  private T[] items;
  private int size, top = 0;
  //分配堆空间
  public stack(int num)
  {
    size = num;
    items = new T[size+1];
  }
  //入栈
  public void push(T data)
  {
    if( top >= size )
      console.writeline("full!");
    else
    {
      top++;
      items[top] = data;
    }
  }
  //出栈
  public void pop( ref T data ) //引用地址
  {
    if( top == 0 ) 
      console.writeline("empty!");
    else
    {
      data = items[top];
      top --;
    }
  }
}
class program
{
  static void main( string[] args)
  {
    stack<int> s = new stack<int>(10);
  }
}

迭代器，使得程序可以对自定义类型使用foreach语句，不必事先整个IEnumberable接口
public interface IEnumberable<T>:IEnumberable   //公开的泛型枚举接口
IEnumberable<T>GetEnumberator()   //返回一个循环访问集合的枚举数
class stack<T>:IEnumberable<T>
{
  //接着之前定义的泛型
  //实现接口中的泛型方法
  public IEnumberable<T> GetEnumberator()
  {
    for( int i = top; --i >= 0; )
    {
      yield return values[i];     //关键字yield促使程序暂时停止并返回值
    }
  }
  //非泛型方法，调用已经有的泛型方法
  IEnumberable IEnumberable.GetEnumberator()
  {
    return GetEnumberator
  }
}

可空类型
表示基础值的基础上再加一个null值
system.nullable<T> variable / T? variable;
bool? bValue = null;
可空类型不能用于条件语句

不安全代码来使用指针
需要使用unsave关键字,关键字内部可以使用指针运算
unsave
{
  char *s1 = stackalloc char[26]; //stackalloc关键字启用CLR中的缓冲区溢出检测功能
}

线程
能够执行并发处理，可以执行多个操作
Thread threadName = new Thread( startMethod);
threadName:线程名称
startMethod:启动线程时的执行方法
字段中使用volatile关键字来说明字段可以被多个并发执行线程修改
线程类Thread中有方法isalive, start, join等方法用于线程的控制，程序的主线程只用thread关键字的静态方法控制，如thread.sleep

异常处理
try{} catch(exception e){} finally{}

动态链接库
在c#中创建动态链接库的方法，监理程序后使用模板为 class library来制定解决方案的类型，来保存为库文件
在生成的模块空间内可以建立多个类，使用add reference来添加引用
代码段中自动添加 using libaryName 语句添加对动态链接库的引用，之后代码中可以直接使用类名加静态方法的方式来应用库中的函数

窗体
属性中有transparencyKey属性可以设置窗体透明
使用location 属性控制窗体移动
使用panel与spliter控件来拆分窗体
timer控件的tick事件作为计时器相应事件
窗体设置属性ismdiContainer来设置多窗体显示
动态创建菜单，控件都是向菜单或窗体的集合中添加新建数据，使用集合方法add
窗体使用addcontrol方法动态控制添加控件的位置

文件读取，可以使用streamReader类
using( streamReader sr = new StreamReader( strFileName ) )
{
  sr.readline();  //读取文件行
}
使用fileStream长度
fileattributes类的公共属性来标示文件属性
使用file类的copy方法来实现文件的复制

操作注册表
Registry类
使用lang类设置输入法

导入动态链接库
[dllImport("kernel32.dll")]
private extern static void getsystemtime(ref systemTime lpSystemTime);

取得屏幕分辨率
screen类的方法 screen.getbounds(this)

取得系统运行信息，如CPU利用率
performancecounter类

获取系统进程列表
using system.diagnostics
process类的静态方法getprocess

clipboard类操作剪贴板

application类来进行应用程序本身的操作

屏幕保护程序
将*.exe保存到%windir%/system32/更名为*.src，之后再桌面选择对应的屏幕保护程序即可
设置的参数为命令行参数，具体举要查看对应的文档

系统托盘程序
可以拖动一个NotifyIcon控件进入应用程序，并设置其对应的contextMenuStrip属性即可

重写系统 winproc方法，并使用processhotkey 来注册全局快捷键

调用系统其它应用程序
processStartInfo()类设置需要启动的应用程序，使用system.Diagnostics.Process.start(objProcessStartInfo)方法来调用对应的应用程序

获取计算机名和IP地址
IpHostEntry类来保存Internet主机地址，DNS类来实现域名解析；用IPAddress类来保存计算机的IP地址
dns.gethostEntry("http://www.sina.com")
使用ping()类来测试连接速度

使用webbrowser控件来制作浏览器

使用TcpListener类监听制定端口；tcpClient发送连接请求，并取得服务器返回信息；使用socket类实现数据传输
添加system.net, system.net.sockets名称空间引用

处了强制类型转换外可以使用convert类的静态方法来进行数据的类型转换

使用UDP连接服务器，udpClient

使用webRequest类访问资源，是.net请求/相应模型的基类，子类有httpWebRequest, FtpWebRequest, FileWebRequest, 使用webRequest类发送请求，在协议不可知的情况下发送连接，之后使用对应的子协议分别于HTTP，与FTP服务器进行通信
使用命名空间system.net, system.io
可以使用其来下载指定连接的文件

添加事件响应托管函数
obj.event += eventNameHandler( funName );

webclient访问网络资源，可以使用异步下载和阻塞方式下载

数据库编程
直接可以通过.net建立数据库
databinding， datasource属性
可以使用dataset designer可以设置数据库的查询，及带参数查询，在工具箱的data工具中选择dataset 

屏幕绘图程序，重写窗体的onPaint方法
Brushes类创建画刷，使用graphic类创建gdi,创建了graphic实例后等于C++中取得设备实例，可以使用其对应的方法来绘制各种图形

installedFontCollection类可以枚举出系统中所安装的字体,画刷可以用来填充图形颜色
BitmapData可以指定图像的属性

调用系统声音SystemSounds类

强制窗体重回方法 objForm.Invalidate();

选择chooseItem菜单，可以添加任何coms组件
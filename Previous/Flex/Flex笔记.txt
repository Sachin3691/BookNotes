FLEX学习网站
作者网站
www.greenlike.com/flex/learning
例子
www.oreilly.com/catalog/9780596517328
下载FLEX地址
www.adobe.com/products/flex
下载eclipse编译器
www.eclipse.org
flashdevelop编译器
http://osflash.org/flashdevelop
文本编译器支持各种代码
http://macromates.com
www.textpad.com
yahoo搜索引擎FLEX，API接口
http://developer.yahoo.com/flash/astra-webapis/
FLEX程序皮肤
www.scalenine.com
身份验证网站
Thawte: www.thawte.com
Verisign: www.verisign.com
Microsoft Authenticode: http://msdn2.microsoft.com/en-us/library/ms537364.aspx
FLEX服务器网站
www.xmethods.net

FLEX中的MXML是由XML文档中继承而来所以遵循XML编程风格

xml文档的声明开头，在xml文档声明的开头是不准许有空行的
<?xml version="1.0" encoding="utf-8"?>
XML可以准许用户自定义标签

flex中编程秉承HTML风格，标签格式有开头，有结尾例如
<book></book>这种书写方法是通用的声明可以用于嵌套
<book/>单一斜线格式不能用于嵌套，只能用于正常的书写中

xml是大小写输入敏感的

FLEX中的TEXT控件格式
<mx:Text>
使用单斜线标签

对于XML文档可以使用如下两种风格
<book title="Learning Flex" author="Alaric Cole">
    <chapter title="Getting Up to Speed"/>
    <chapter title="Setting Up Your Environment"/>
</book>
等效于使用双标签方法
<book>
    <title>Learning Flex</title>
    <author>Alaric Cole</author>
    <chapter>
        <title>Getting Up to Speed</title>
    </chapter>
    <chapter>
        <title>Setting Up your Environment</title>
    </chapter>
</book>

单标签
<mx:Label text="Learning Flex"/>
双标签
<mx:Label>
    <mx:text>Learning Flex</mx:text>
</mx:Label>

单标签与双标签的嵌套模式
<mx:DataGrid>
    <mx:columns>
        <mx:DataGridColumn headerText="Column 1"  
dataField="col1"/>
        <mx:DataGridColumn headerText="Column 2"  
dataField="col2"/>
        <mx:DataGridColumn headerText="Column 3"  
dataField="col3"/>
    </mx:columns>
</mx:DataGrid>
代码前的mx是命名空间的名称，FLEX默认的命名空间名为MX，可以自己 
定义自己的命名空间例如<special:Label>等

典型的MXML文件命名空间声明
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml">
后面的网址部分相当于标示，标志了这个mx命名空间的建立者
可以自己修改命名空间
<flex:Application xmlns:flex="http://www.adobe.com/2006/mxml">
则<mx:button> 变为<flex:button>,网址部分可以自己随意设置。
 xmlns名称为 xml name space

对比ActiveScript与FLEX的声明控件过程
ActiveScript方法
import mx.containers.Panel;
import mx.controls.Button;
var panel:Panel = new Panel();
var button:Button = new Button();
addChild(panel);
panel.addChild(button);

Flex方法：
<mx:Panel>
    <mx:Button/>
</mx:Panel>

函数的声明
<mx:Script>
  <![CDATA[
  //Your code goes here
  ]]>
</mx:Script>
其中<mx:Script>标签只能在代码模式下使用，其中CDATA标签的意思是通知MXML编译器方括号内的代码不是XML代码，而是ActiveScript语句，也可使用单行语句<mx:Script/>, 函数代码：
public function setForm(txt:String = "John Smith", sel = true):Number
{
  fullNameTextInput.text = txt;
  expertCheckBox.selected = sel;
}
其中设置的默认值

事件响应的添加方法，例如按钮事件格式
<mx:Button id="myButton" click="someComponent.someProperty =
'something'" />
多行事件响应
<mx:Button label="Click me" click=" fullNameTextInput.text='John Smith';
expertCheckBox.selected=true "/>
事件的函数调用
<mx:Button label="Click me" click="setForm();"/>

元素属性的两种引用方式
MXML格式
<mx:TextInput id="fullNameTextInput" text="John Smith"/>
ActiveScript格式
fullName.Attribute = "SetProperty"

样式操作style，对于不同的组件对于外观与行为的控制
mxml使用
<mx:Button id="myButton" cornerRadius="14" />
而对于ActiveScript使用
myButton.setStyle("cornerRadius",14);
同理
myButton.getStyle("cornerRadius",14);为取得指定样式值

addEventListener(事件参数，响应函数)添加事件响应函数
函数名无需加圆括号
使用 MXML添加按钮响应事件:
<mx:Button id="myButton" click="doSomething()" />
使用ActionScript:
import mx.controls.Button;
var myButton:Button = new Button();
myButton.addEventListener("click", doSomething);
addChild(myButton);


在Application标签中加入，增加程序加载完成后的响应。是在FlashPlayer得到焦点的前提下产生的
applicationComplete="fullNameTextInput.setFocus()"

变量声明
[public] var  Name;
数据类型
String, Number, uint, int, Boolean, void, object
uint 为无符号数
[public] var pi:Number = 3.14;

NaN 全称Not a number 

自定义object使用ActiveScript
var car:Object = new Object();
car.type = "sports car";
car.color = "red";
car.topSpeed = 170;
car.isInsured = false;
car.driver = undefined;   //即声明一个空指针
;
var person:Object = new Object();
person.name = "Steve";
person.age = 19;
;
car.driver = person;

自定义类，object是Class的实例，使用ActiveScript
public class Car
{
  var type:String;
  var color:uint;
  var topSpeed:int;
  var isInsured:Boolean;
  var driver:Person;
}
public class Person
{
  var name:String;
  var age:int;
}
var car:Car = new Car();
car.type = "sports car";
car.color = 0xFF0000;
car.topSpeed = 170;
car.isInsured = false;
car.driver = undefined;
var person:Person = new Person();
person.name = "Steve";
person.age = 19;
car.driver = person;
；
var name:String = new String("hello");
为类赋值语句

MXML与ActiveScript的关系
其中MXML是标记语言，为了简化ActiveScript的编程，其实整个程序都可以由ActiveScript产生，而且其是FlashPlayer的核心
例如标签的MXML语句
<mx:Button id="myButton" label="Click Me"/>
等效于下面语句，并且在编译时是编译ActiveScript下面语句的
import mx.controls.Button;
var myButton:Button = new Button();
myButton.label = "Click Me";
addChild(myButton);

Flex中的事件处理，button 对label text属性的改变
<mx:Label id="myLabel" text="The Button will change my text" />
<mx:Button id="myButton" label="Change it!" click="myLabel.text  
='Somenew text'"/>

可以从帮助中查看常量字符Constant
包括普通数学常量例如 Math.PI， 事件常量 Event.MOUSE_LEAVE等

弹出式对话框
 Alert.show("Your name is " + fullNameTextInput.text + " and your age is " + ageNS.value);
之所以可以不用创建实体而直接调用Alert类中的show方法是由于show方法是static型的函数

注释
ActiveScript使用同C++一样的方法
mxml使用同HTML类似的方法
<!-- This is a comment in MXML -->
可以通过选择指定字符串的方式在源码菜单栏中将其转换为注释

《A Beginner’s Guide》是学习ActiveScript的起步教材

数据类型转换
例如使用数据类型构造方法进行强制转换
String( 12344 )
或者使用对象中自带的 toString()方法来完成
number.value.toString()

程序小例子
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
layout="absolute"
applicationComplete="fullNameTextInput.setFocus()">
<mx:Script>
<![CDATA[
  import mx.controls.Alert;
  public function showInfo():void
  {
  Alert.show("Your name is " + fullNameTextInput.text +
  " and your age is " + ageNS.value);
  }
]]>
</mx:Script>
  <mx:Panel id="panel" x="10" y="10" width="250" height="200"
  layout="vertical" title="Howdy Ya'll" paddingLeft="5">
    <mx:Label text="My name is:" fontWeight="bold"/>
    <mx:TextInput id="fullNameTextInput"/>
    <mx:Label id="ageLabel" text="My age is:" fontWeight="bold"/>
    <mx:NumericStepper id="ageNS" maximum="120" minimum="18" />
    <mx:CheckBox id="expertCheckBox" label="I'm a Flex Expert!"/>
    <mx:Button label="Click me" click="showInfo()"/>
  </mx:Panel>
</mx:Application>

DEBUG 过程中的trace()函数的使用，结果将显示在Console面板上，可以使用windows->console调出面板

使用事件作为函数调用的参数
public function showInfo(event:Event):void
{
  trace("The type is " + event.type +
  " and the current target is " + event.currentTarget);
}
例如在BUTTON中调用该函数，其中Event为flex自带的特殊变量，专门指代组件中发生的事件
<mx:Button label="Click me" click="showInfo(event)"/>

可通过设置断点来进入DEBUG模式的透视界面，可以看到当前组件的名称及事件列表

数据绑定，实现指定数据的同时刷新，在绑定时ID是必须制定的值，可以一对多绑定。缺点是在绑定过程中缺少对数据变化的限制
组件间绑定：
<mx:TextInput id="helloTextInput" text="Hello, World"/>
<mx:Label text="{ helloTextInput.text }"/>
使得一个一个标签的文字与一个文本输入框绑定
绑定内存变量：
使用内存变量绑定组件，例如字符串绑定标签
<mx:String id="firstName">Alaric</mx:String>
<mx:String id="lastName">Cole</mx:String>
<mx:Label id="nameLabel" text="{firstName}"/>
绑定后加操作：
<mx:String id="displayName">Jed90210</mx:String>
<mx:Label text="{'Hello, ' + displayName}"/>
转义字符&quot
其中花括号{}内部在字符串定义中可以加入数学运算，如：
text= "hello, {48*3}"
标签外部绑定：注意这是绑定无需加入花括号
<mx:String id="firstName">Alaric</mx:String>
<mx:Label id="nameLabel"/>
<mx:Binding source="firstName" destination="nameLabel.text"/>
一对多绑定：
<mx:Binding source="oneTextInput.text" destination="confusedLabel.text"/>
<mx:Binding source="anotherTextInput.text" destination="confusedLabel.text"/>
<mx:TextInput id="oneTextInput"/>
<mx:TextInput id="anotherTextInput"/>
<mx:Label id="confusedLabel"/>
外部绑定不可以放在容器说明内部，其余位置可以随意放置，一般均放在application开始的标签下方
使用Adobe Flex 3 Language Reference mx.binding.utils.BindingUtils class, 可以使用ActiveScript语言动态在脚本中建立可断开绑定


同一项目下可以建立多个应用，其中只有一个应用可以设置为默认，default application. 对于多应用的项目，调试运行的规则是，1.如果一个application 在编辑状态下，则运行是运行该application，2.如果一个application 被在navigator状态下选中，则运行此application. 3.如果没有任何application 被选中则运行默认application .也可以在运行下拉菜单中想要运行的application对象

数据模型，同结构体
使用MXML建立数据模型
<mx:Model id="model">
  <info>
    <name>
      <firstName>Tim</firstName>
      <lastName>O'Reilly</lastName>
    </name>
      <email>tim@oreilly.com</email>
      <phone>(707)827-7000</phone>
  </info>
</mx:Model>
<mx:Binding source="model.phone" destination="nameLabel.text"/>
<mx:Label id="nameLabel"/>
其中数据的引用方法为
model.firstName; model.phone; 引用时无需使用model.name.firstName; model.phone;因为数据直接与Model模型的数据元model链接，所以无需增加中间名，中间名只是为了满足XML的要规范要求

使用ActiveScript建立绑定。使用了metaData（元数据）功能，需要使用方括号说明。在要绑定的变量前加[Bindable]说明
<mx:Script>
  <![CDATA[
    [Bindable]
    public var firstName:String = "Alaric";
    [Bindable]
    public var lastName:String = "Cole";
  ]]>
</mx:Script>

十六进制数的书写
#ff0000,0xff0000

其中<mx:button>类似的标签中只能改变属性,property 而不能修改样式，style。例如backgroundColor修改时在标签中只能放在花括号中（数据绑定时）。或者使用ActiveScript中的getStyle() 与setStyle()
例如：MXML下修改
backgroundColor="{favoriteColorPicker.selectedColor}"
使用ActiveScript事件响应
<mx:ColorPicker id="favoriteColorPicker"
  change="setStyle('backgroundColor',
  favoriteColorPicker.selectedColor)"/>

在组件的相互绑定过程中，不同的类型的数值赋予字符串时进行了默认的类型变化。其中flex中每个组件的属性都有.tostring()方法来变换为字符串，可以使用强制转换来将字符串变为数字或其他类型的数据Number().
综上所述，字符串标记双引号内部的花括号{}的作用是通知编译器花括号里面表示的内容是执行语句而不是字符串。

FLEX的布局方法LayOut,在浏览器或者应用程序窗口大小改变时，窗口内组件的响应布局的三种方法，坐标，容器，和限制。
绝对坐标法的声明,在application标签中加入属性赋值, layout= "absolute"
相对坐标法，需要使用容器，例如panel或canvas等，有两种相对坐标，Vertical, Horizontal. 声明语句为 layout = "vertical" 
其中HBox和VBox可以按照水平或者垂直的顺序逐次放置内部组件
使用Design模式下设计的应用程序默认为绝对坐标，如果代码模式下建立的应用程序时未设置布局属性，则认为是相坐标垂直排列。

布局时的层次显示与组件放置的顺序有关，先放的索引值小，后方的索引值的，小的值在低层次
从容器访问子组件的方法getChildAt(index),其中index值从0开始，顺序由放置顺序决定，AddChild()在容器中增加子组件
使用ActiveScript方式动态添加子组件：
//import the required classes
import mx.containers.Panel;
import mx.containers.Canvas;
public function createBoxes():void
{
  //create a Panel
  var colorsPanel:Panel = new Panel();
  colorsPanel.layout = "absolute";
  colorsPanel.width = 250;
  colorsPanel.height = 250;
  
  //add the Panel to the Application
  addChild(colorsPanel);
  
  //create a red box
  var redBox:Canvas = new Canvas();
  redBox.x = 70;
  redBox.y = 70;
  redBox.width = 50;
  redBox.height = 50;
  redBox.setStyle("backgroundColor", 0xFF0000);
  
  //create a green box
  var g:Canvas = new Canvas();
  greenBox.x = 90;
  greenBox.y = 90;
  greenBox.width = 50;
  greenBox.height = 50;
  greenBox.setStyle("backgroundColor", 0x00FF00);
  
  //create a blue box
  var blueBox:Canvas = new Canvas();
  blueBox.x = 100;
  blueBox.y = 60;
  blueBox.width = 50;
  blueBox.height = 50;
  blueBox.setStyle("backgroundColor", 0x0000FF);
  
  //add the boxes to the Panel
  colorsPanel.addChild(redBox);
  colorsPanel.addChild(greenBox);
  colorsPanel.addChild(blueBox);
}
同样可以使用.removeChild(idName),方法来移除制定子组件，移除子组件并不把组件从内存中删除，只是移除显示
函数定义
public function moveUp(event:Event):void
将事件目标转换为ID名
var box:Canvas = event.currentTarget as Canvas;
在组件的事件中调用moveUp事件处理函数
click="moveUp(event)"
其中子组件可以从不同的容器中移出，移入。因为组件是相对于application的。

访问一个组件中的子组件时不能使用点方法，例如 panel中的 canvas，访问时只能使用显示API panel.getchild(canvasID).

改变大小有两种方法
直接改变大小；相对大小使用百分率；在MXML中可以使用任何一种方式。ActiveScript下只能使用数值，如果要设置相对百分率必须使用属性percentWidth, percentHeight.
<mx:Button height="100%" maxHeight="300" />

使用CSS填充效果
paddingLeft, paddingRight, paddingTop, paddingBottom.设置
是指容器内部的子组件放置位置。用于panel或者list。不单单是容器类的组件可以使用
horizontalGap属性用于指定容器内子组件的间隔

高级容器
HDividedBox, VDividedBox. 同HBox和VBox类似，但是他们准许改变大小。
Tile容器可以让内部的子组件自动另起一行
grid容器可以让容器内部的子组件占用相邻格，属性由cowSpan,rowSpan来设置
Form容器，如下代码，即使在输入框的左边不需要加标签，formItem标记也是必须的.这样才能保证form里面的子组件正确排列
<mx:Form id="formName">
  <mx:FormItem label="A Short Label">
    <mx:TextInput/>
  </mx:FormItem>
  <mx:FormItem label="A Very, Very Long Label">
    <mx:TextInput/>
  </mx:FormItem>
</mx:Form>

组件中的tab引用顺序由tabIndex决定，FLEX系统自动自定临近的元素接受TAB焦点

spacer组件，用于提供站位，可放置在容器中帮组其他组件定位
类似的组件有VRule, HRule.
有些时候可以通过标签大小来达到控制布局的效果。因为标签的大小并不影响内部文字的现实

在设置组件嵌套层数要尽量少，可以考虑改变application的布局属性来减少层数等。

对齐，如果没有明确的设置容器大小，对齐功能将不起作用。

约束基础布局，constraints-based layout.可以点击在属性栏的缩略图的小方框来进行设置，来限制窗口变化时的显示方式。
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute">
  <mx:Button label="Button" right="5" bottom="5" />
</mx:Application>
在增加了右下角限制布局的设置后，配合上面代码来使得按钮一直显示在窗口的右下角
可以建立约束行，约束列<mx:constraintColumn/>,<mx:constraintRow/>使用方法为
<mx:constraintRows>
  <mx:ConstraintRow id="row1" height="100"/>
  <mx:ConstraintRow id="row2" height="100%"/>
</mx:constraintRows>
<mx:Button top="row2:5"/>
其中row2为建立的强制约束列明，5表示对于该列顶部的距离为5像素


可以设置中心位置horizontalCenter, verticalCenter. 

可以使用绑定数据的方式在布局时使得容器为制定形状，如矩形

可以建立单选框数组，MXML语句为：
<mx:RadioButtonGroup id="phoneRadioButtonGroup" />
<mx:RadioButton label="mobile" groupName="phoneRadioButtonGroup"/>
<mx:RadioButton label="home" groupName="phoneRadioButtonGroup"/>
<mx:RadioButton label="other" groupName="phoneRadioButtonGroup"/>
其中<mx:RadioButtonGroup id="groupName" />为不可视组件
对于必需用户填写数据的部分可以在标签的required 属性设置为true

对于DataField控件可以指定输入的数据格式 如 formatString = "YYYY-MM-DD"

使用<mx:StringValidator />组件来检测字符串有效性，即保证字符串输入，最好将所有不可视组件全部放在<mx:Application />标签下方，这样方便查找和修改。使用方法如下
<mx:StringValidator id="firstNameValidator"
source="{firstNameTextInput}"
property="text" requiredFieldError="I'm sure
you've got a name.&#13;Why not enter it here?" />
可以加入自定义错误提示，其中 &#13为 MXML的换行符，在ActiveScript中为\n
其他字符非法性可以查帮助

同样有EmailValidator， PhoneNumberValidator, ZipCodeValidator, DateValidator。自定义错误检测 RegExpValidator

每个组件都有一个errorString属性用于设置限制出错提示

每一个字符串合法性检测都有一个属性trigger, 默认的目标是组件对应的validator，即合法性检查所制定的输出检测字符串。可以重定义这个事件，trigger的事件即为VB中的LostFocus事件。 通过triggerEvent属性进行设置，例如：
使用源本身的事件
<mx:EmailValidator id="emailValidator"
  source="{emailTextInput}"
  property="text"
  requiredFieldError="Please enter your email.&#13;I promise not to
  send spam."
triggerEvent="change" />
使用其他按钮等组件响应源的检测
<mx:EmailValidator id="emailValidator"
  source="{emailTextInput}"
  property="text"
  requiredFieldError="Please enter your email.&#13;I promise not to
  send spam."
  trigger="{submitButton}"
  triggerEvent="click"
/>
或者使用事件响应函数调用的形式
private function validateAndSubmit():void
{
  emailValidator.validate();
  //添加其他控制代码
}

限制输入内容，使用 restrict属性
<mx:TextInput id="firstNameTextInput"
restrict="a-z A-Z \-"/> 只能输入英文 ,其中反斜线是转义字符，由于短横线是特殊字符
restrict="^0-9"    除了数字均可输入

定义格式化输入
<mx:CurrencyFormatter id="priceFormatter"/>
<mx:TextInput text="{priceFormatter.format(10243)}"/>

年纪计算法，Date的使用，其中1970是基数
格式化数字取整
<mx:NumberFormatter id="numberFormatter"
rounding="down"/>
调用计算年龄函数
<mx:Label
text="{numberFormatter.format(calculateAge(birthdayDateField.
selectedDate))} years old"/>
使用ActiveScript函数计算年龄
private function calculateAge(birthDate:Date):Number
{
var today:Date = new Date();
var ageDate:Date = new Date(today.time – birthDate.time);
var age:Number = ageDate.fullYear - 1970;
return age;
}

使用LIST组件链接数据库，XML，和其他WEB服务器,使用LIST的dateProvider属性来指定数据来源
<mx:List
width="150"
dataProvider="{['Red','Orange','Yellow','Green','Blue','Indigo',
'Violet']}" />
或者使用纯MXML标签法
<mx:List  width="150">
  <mx:dataProvider>
    <mx:Array>
      <mx:String>Red</mx:String>
      <mx:String>Orange</mx:String>
      <mx:String>Yellow</mx:String>
      <mx:String>Green</mx:String>
      <mx:String>Blue</mx:String>
      <mx:String>Indigo</mx:String>
      <mx:String>Violet</mx:String>
    </mx:Array>
  </mx:dataProvider>
</mx:List>
列表中不能直接显示object对象。
需要在label属性中加入labelField说明制定复杂元素要显示的名称

建立数组
MXML方法
<mx:Array>
  <mx:String>red</mx:String>
  <mx:String>green</mx:String>
  <mx:String>blue</mx:String>
</mx:Array>
ActiveScript方法
var color:Array = [ "red", "green", "blue" ];

XML的格式，其中<contacts> </contacts>标签为XML的基本文件,在MXML中引用需要加入<mx:xml></mx:xml>标签
<mx:xml id = "contactsXML" xmlns="">
<contacts>
  <contact id="">
    <firstName/>
    <lastName/>
    <email/>
    <phone/>
    <phoneType/>
    <address/>
    <zip/>
    <birthday/>
    <color/>
    <company/>
  </contact>
</contacts>
</mx:xml>
使用DataGrid组件来使用上面的XML内容，其中数据绑定部分使用的是contactsXML.contact
直接绑定到xml标签中的contact标签的内容
<mx:DataGrid id="contactsDataGrid"
  dataProvider="{contactsXML.contact}">
    <mx:columns>
    <mx:DataGridColumn headerText="ID" dataField="@id"/>
    <mx:DataGridColumn headerText="First" dataField="firstName"/>
    <mx:DataGridColumn headerText="Last" dataField="lastName"/>
  </mx:columns>
</mx:DataGrid>
使用@的作用是说明绑定的id内容为根级标签xml，而不是自标签，之后的firstName等未使用就是说明firstName是子标签。@标记说明后面跟的是属性而不是子标签
上面使用的技术是E4X，ECMAScript for XML,是ActiveScript的基本API方法，XML使用的是更新的API

为了保证代码整洁可以将XML脚本另存为XML文档以供调用，例如将之前<mx:xml>标签内的内容保存在contact.xml中，在执行的MXML中引用的方法为
<mx:XML id="contactsXML" xmlns="" source="contacts.xml" />

使用<mx:HTTPService/>标签来快速载入网络上的其他数据文件，包括XML文档
<mx:HTTPService id="contactsService"
  resultFormat="e4x"
  url="contacts.xml"/>
在HTTPService中触发载入需要使用事件调用，使用send()事件，之所以叫send是程序申请调用外部文件
<mx:Application
xmlns:mx="http://www.adobe.com/2006/mxml"
applicationComplete="contactsService.send()">
可以加入对error事件的响应，来进行错误处理
可以将xml文件放置在远程服务器中
<mx:HTTPService id="contactsService"
  resultFormat="e4x"
  url="http://greenlike.com/flex/learning/projects/contactmanager/
  contacts.xml" />
其中远程服务器中的XML文档需要设计跨域许可，例如：
<?xml version="1.0"?>
  <!DOCTYPE cross-domain-policy SYSTEM "http://www.adobe.com/xml/
    dtds/cross-domain-policy.dtd">
  <cross-domain-policy>
    <site-control permitted-cross-domain-policies="all"/>
    <allow-access-from domain="*" />
    <allow-http-request-headers-from domain="*" headers="*"/>
  </cross-domain-policy>

FLEX项目中的所有文件会在bin-debug文嘉夹中有副本，作为编译时使用，每次编译都会被src文件夹中源文件覆盖

每个属性的设置都可以加入ActiveScript脚本混合的方式进行设置
<mx:Label id="zipLabel" text="Zip Code: {contactsDataGrid.selectedItem.zip}" />

每个组件都有allowMultipleSelection属性以提供复选的功能

可以到雅虎网站下载FLASH/FLEX的搜索引擎API接口
http://developer.yahoo.com/flash/astra-webapis/
在调用时由于编译的内容非FLEX内部组件，所以使用的命名空间不再是mx, 而是yahoo。或者直接输入<searchservice 则编译器会自动补充缺少的命名空间

SWC文件，是预编译的源码，在程序中使用即可以保护源码又可以提高程序编译速度

在使用list组件时，启用dragEnable和dropEnable属性可以允许列表拖曳
在text组件中的defaultButton="{searchButton}"属性指定后可以直接接受回车和退格键

使用itemRenderer标签，可以建立自己的组件，例如在list组件中加入下面代码
<mx:itemRenderer>
  <mx:Component>
    <mx:Label
    text="{data.name}"
    fontWeight="bold"/>
  </mx:Component>
</mx:itemRenderer>
itemRenderer是后台构建的。而且组件可以进行嵌套

可以使用的网络服务组件目录的查询网站
www.xmethods.net

调用远程网络服务器，使用data->webservice向导进行建立

访问远程文件可以使用RemoteObject来连接，例如访问JAVA EE或者COLDFUSION建立的文件,data push 功能可以使得在远程文件更新时自动替换当前使用的文件，在建立FLEX工程时即可选择是否使用远程文件系统

选项卡组件 <mx:TabNavigator/>接受tab navigate
标签内部使用<mx:viewStack/>来组织TAB键的导航顺序，也可用viewStack来组织其他组件，viewStack内容为不显示的

两个组件间的数据链接可以使用dataprovider属性

使用按键响应方式选中ViewStack 中的子项，使用selectedChild属性
<mx:ViewStack 
  id="view"
  width="200"
  height="200">
  <mx:Canvas id="”redBox"
    label="Red"
    backgroundColor="#FF0000"/>
  <mx:Canvas id="greenBox"
    label="Green"
    backgroundColor="#00FF00"/>
  <mx:Canvas id="blueBox"
    label="Blue"
    backgroundColor="#0000FF"/>
</mx:ViewStack>
<mx:Button
  label="Make Green"
  click="view.selectedChild = greenBox"/>

MXML内引用XML文档，使用<mx:httpService/>组件，对于XML文档中子元素的title属性，在E4X引用时（MXML文档中）必须加入@title，以表示title是属性，而不是标签

在网络中发布文件时，可以使用progressbar（进度条）来辅助说明下载量，例如将进度条绑定到一个图片中
<mx:Image id="image"
  source="{photosList.selectedItem.@image}"
  left="270"
  top="10"
  bottom="10"
  right="10"
  horizontalAlign="center"
  open="progressBar.visible = true"
  complete="progressBar.visible = false"/>
<mx:ProgressBar id="progressBar"
  x="270"
  y="10"
  source="{image}"
  visible="false" />

可以使用creationPolicy属性，来保证两个现实，或者列表刷新的同步，其值有四种,auto,all,queued,none. 赋值为all. 以保证所有现实组件同时建立

可以使用组件的historyManagementEnabled属性来启用浏览器的向前，向后按钮的响应。用mx.managers.BrowserManager类，来自定义浏览器配置

使用场景组件，<mx:state />，类似于显示布局的一帧，可以在场景切换时按需要改变组件的位置
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
layout="absolute">
  <mx:states>
  <mx:State name="stageRight">
  <mx:SetProperty
  target="{button1}"
  name="x"
  value="570"/>
</mx:State>
</mx:states>
<mx:Button id="button1"
  x="10"
  y="10"
  label="Click to move"
  click="currentState='stageRight'"/>
</mx:Application>
默认的currentState的值为""空，代表基本场景base state
对于样式内容需要使用setStyle
<mx:State name="green">
  <mx:SetStyle
    target="{canvas}"
    name="backgroundColor"
    value="#00FF00"/>
</mx:State>
在场景中可以设置改变按钮的事件响应函数
<mx:SetEventHandler
  target="{button1}"
  name="click"
  handler=" currentState='' "/>
每次只能修改一个组件，不能再一个setStyle或setEventHandler修改该多个值

<mx:addChild/> 方法，为容器内增加组件
<mx:AddChild relativeTo="{loginForm}" position="firstChild">
    <mx:FormItem id="fullNameFormItem"
    label="Full Name:">
    <mx:TextInput/>
    </mx:FormItem>
</mx:AddChild>
删除容器内组件使用<mx:removeChild/>

在编辑模式下切换场景时，可以直接修改选定组件的属性值，编辑器会自动生成代码

在场景的option属性栏中可以设置起始的场景

其中在MXML中的每个属性，及样式设置类似于调用类的内部函数来处理对象的具体属性值

模块化设计程序，建立组件 File->New->MXML使用一个MXML文件建立独立组件，一用来模块化设计程序，例如下面建立一个基于面板的容器模块。代码自动生成如下：
<?xml version="1.0" encoding="utf-8"?>
  <mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
  layout="verical"
  width="400"
  height="300">
</mx:Panel>

直接选择New Component来信建立组件

xmlns:ns1="*"，建立一个新的命名空间，并代表引用所有当前的工程
com/oreilly/controls 用反向domain（域名）命名法，来表示为某个程序建立的组件，用自定义的命名空间来表明自己建立的组件

在编辑模式下，非base场景中修改的组件只有在程序运行并且还到该场景时才会显示

在现实组件中可以添加效果来响应对应的时间effect
特效中的，透明度与旋转效果(alpha(Fades),rotation(Rotate))
为了给进度条(progressbar)加上Fade特效，即alpha效果。使用embed font（嵌入式文字）或直接让进度条的label属性为空

当在切换场景时使用effect可以增加效果

可以设置horizantalScrolPolicy = "on/off" 来设置开启或关闭滚动条，verticalScrolPolicy = "on/off"

也可以为特定的组件或组合组件加入特效(effect)，例如<mx:Resize/>，并可以为其设定设定的属性
可以使用<mx:sequence/>组件来顺序指定显示的效果effect

增加声音特效<mx:SoundEffect/> 可以使用该组件来定向mp3等文件，并可以把声音特效绑定到任何其他特效上，例如绑定到image对象的completeEffect特效等。
<mx:SoundEffect id="shutterSound"
  source="camera_shutter.mp3"/>
<mx:Image id="image"
  source="{photosList.selectedItem.@image}"
  left="270"
  top="10"
  bottom="10"
  right="10"
  horizontalAlign="center"
  open="progressBar.visible = true"
  complete="progressBar.visible = false"
  completeEffect="{shutterSound}"/>

使用一下方法来把一些特效effect效果绑定到容器内部组件中，并且限定了特效发生的场景为search，同时也可以使用toState，来制定场景，加入<mx:sequence>的目的是为了防止一个特效未播放完时被后面的效果或事件中断，而有序的显示效果。主要有四种方法SetPropertyAction, SetStyleAction, AddChildAction, RemoveChildAction.
<mx:transitions>
  <mx:Transition fromState="search">
    <mx:Sequence>
      <mx:Parallel target="{hbox1}">
        <mx:Move />
        <mx:Resize />
      </mx:Parallel>
      <mx:AddChildAction target="{resultsList}"/>
    </mx:Sequence>
  </mx:Transition>
</mx:transitions>
<mx:Transition/>组件用于指定场景state内部的特效播放循序
下面将移动代码绑定到按钮特效中
<mx:Move targets="{ [submitButton,
resetButton] }" />

按照指定顺序播放效果
<mx:Sequence targets="{[button1, button2]}">
  <mx:AddChildAction target="{button1}"/>
  <mx:Dissolve target="{button1}"/>
  <mx:AddChildAction target="{button2}"/>
  <mx:Dissolve target="{button2}"/>
</mx:Sequence>

也可以使用组件中的play()方法来播放特定的效果

<mx:transitions>
  <mx:Transition fromState="search">
    <mx:Sequence targets="{[hbox1, resultsList]}">
    <mx:Parallel>
    <mx:Move filter="move" />
    <mx:Resize filter="resize" />
    </mx:Parallel>
    <mx:AddChildAction filter="add" />
    </mx:Sequence>
  </mx:Transition>
</mx:transitions>

FLEX中可以添加不同的filter效果，例如DisplacementMapFilter， 可以将平面转换为球状  

可以使用设置效果坐标位置的方法防止组件的标签显示被带入效果中
<mx:Button
  label="Fancy Button Text" >
  <mx:filters>
    <mx:BlurFilter blurX="0" blurY="0"/>
  </mx:filters>
</mx:Button>

对于样式中的cascade表示样式可以继承给他的子组件

Flex中自带的颜色名称"black", "blue", "green", "gray", "silver",
"lime", "olive", "white", "yellow", "maroon", "navy", "red", "purple",
"teal", "fuchsia", "aqua", "magenta", "haloOrange",
"haloBlue", "haloSilver", and "haloGreen".and "cyan".也可以使用16进制来制定颜色0xXXXXXX开始

可以使用<mx:style/> 组件内部来定义CSS样式。也可以把CSS文件放到额外的 .css文件中
<mx:Style>
.someStyleRule                       //名称
{
  someColorProperty : #FFFFFF;       //赋值
  someNumberProperty : 18;
}
</mx:Style>
使用该样式的方法为
<mx:Button styleName="someStyleRule" />
在HTML中对应的名称为class, Flex中为styleName

使用外部 *.css文件
<mx:Style source="styles.css"/>

其中下面为CSS的两种命名方式,Flex可以使用任意一种
1.MXML中命名方式，注意区分单词的大小写
Button
{
  fontSize: 14;
}
2.标准HTML中命名方式，不同的单词要用折线分开
Button
{
  font-size: 14;
  font-weight: bold;
  corner-radius: 7;
}
其中上面的CSS命名为Button，与FLEX命名空间中的Button类型一样时。代表对当前程序中所有的Button类型自动使用该样式，而不需要在在个别的Button类型中给予CSS赋值。只针对当前代码文件。而对于整个程序使用，应用于MXML文件中
<mx:Style>
  global
  {
    color: #FFFFFF;
    fontSize: 18;
  }
</mx:Style>

Flex支持在程序运行时动态载入样式文件称为runtime styles.使用flex编译器即可建立css文件，在CSS文件中无需加入<mx:Style/>标签

在Flex中可以将MXML文件使用的<mx:Style/>脚本编辑的样式脚本随时转换为CSS文件

CSS的优先级顺序为
Inline > Class Selectors > Type Selectors > Global Selectors

可以在编辑模式下插入图标，然后查看代码模式下的代码，例如
icon="@Embed(source='search_icon.png')"

插入声音
<mx:SoundEffect source="@Embed(source='whoosh.mp3')"/>

可以插入自定义字体，使用CSS顶一个格式中插入在Style sheet中
@font-face
{
  src:local("Arial");
  fontFamily: myEmbeddedFont;
}
接下来的CSS脚本中可以引用上面的自定义字体
Application
{
  fontFamily: myEmbeddedFont;
}

Flex组件支持皮肤效果（skinning），例如给按键插入皮肤下过
<mx:Button
  upSkin="@Embed(source='up.png')"
  overSkin="@Embed(source='over.png')"
  downSkin="@Embed(source='down.png')"
  disabledSkin="@Embed(source='disabled.png')" />
其中Button属性中的skin项允许定义所有响应的统一皮肤格式
可以加入Scaling Skin让组件在放大缩小时免去变形对皮肤效果的影响

在发布时CSS文档被打包成*.SWC文件
默认的windows下Flex会产生一个默认皮肤场景文件位置在
C:\Program Files\Adobe Flex Builder 3\sdks\3.0.0\frameworks\themes\HaloClassic\haloclassic.swc
场景文件网站
www.scalenine.com

Flex打包生成的html文档中嵌入的打包名称
${application} 是嵌入的swf文档的id名称
${bgcolor}
${height}
${swf} .swf文件的完整路径
${title} 浏览器标题栏显示的内容
${version_major} 推荐的播放器版本
${version_minor} 至少需求的播放器版本
${version_revision}
${width}

生成程序文件 project -> Export Release Build, 可以选择支持发布源文件，也可以部分发布。其中生成的PlayerProductInstall.swf用于播放器升级或下载。
对发布程序的下载选项时可以选择framework cache 以提高浏览速度和保证多进程运行。但其只对flex 内部组件起作用，对外部引用文件无效
对于大应用程序可以使用flex提供的module component组件来分块提供下载，以保证浏览的可靠性

在project 的 properties选项中可以找到flex build选项中可以指定编译时所包含的library，也可以加入自定义库文件

为了进一步提高效率可以使用编译菜单中的run -> Profiler，来检查程序中的瓶颈

建立左面应用程序方法New->Flex Project. 可以选择建立Application type, Desktop application(run in Adobe AIR)
生成windows桌面应用程序后再AddressBook.mxml文件中代码为
should look like the following:
<mx:WindowedApplication
  xmlns:mx="http://www.adobe.com/2006/mxml"
  layout="absolute">
</mx:WindowedApplication>
即桌面应用程序与网络脚本程序的区别在于标签有<mx:application>变为<mx:windowedApplication>
可以修改application discriptor file内容来达到修改应用程序样式的目的

可以为应用程序加入数字签名，flex程序可以从以下网站获得有效的个人数字签名，来标识从程序发布后是否被修改过
Thawte: www.thawte.com
Verisign: www.verisign.com
Microsoft Authenticode: http://msdn2.microsoft.com/en-us/library/ms537364.aspx

任何编程问题可以查看www.adobe.com/go/flex_cookbook,来查找相关资料







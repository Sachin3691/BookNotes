Mastering c# 4.0;Note=Erxin

# Encoding
- in the System.Text there is a Encoding class which is used to deal with text encoding
var ec = Encoding.UTF8.GetString(stream);
- create md5 use System.Security.Cryptography;
    + hash, a one way virtually non-decodable encryption of a bit of data
    + encryption, the encoding of data according to a cipher with the intention of decoding it later on
- encoding and work with md5
var md5  = MD5.Create();
byte[] hash = md5.ComputeHash(new byte[10]);
string hashAsText = Convert.ToBase64String(hash);
byte[] backAgain = Convert.FromBase64String(hasAsText);

# Culture
- Culture bug
var turkish = CultureInfo.CreateSpecificCulture("tr");
Thread.CurrentThread.CurrentCulture = turish;
const string MailHeader = "MAIL";
string header = "mail";
Assert.AreEqual(MailHeader, header.ToUpper()); //this will failed 
// the reason when run this code not in Turkish OS the mail will turn to MAIL which I change to have a dot on the top
To fix this bug need to 
    + use strObj.ToUpperInvariant() 
    + better way is 
    bool isMailHeader = header.Equals(MailHeader, StringComparison.InvariantCultureIgnoreCase);

# Datetime
- DateTimeOffset class
- DateTime class
- System.Time; use the System.TimeZoneInfo class to get the time zone relative data  
TimeZoneInfo z = TimeZoneInfo.Local;
z.GetUtcOffset(new DateTime(2011, 2, 23, 0, 0, 0));

# Array
- when you create an array, it can't change its size. Force to change will create a new array
    
# Delegate and Event
- Multicast Delegate
delegate void Init32Action(int value);
Int32Action ac1 = new Int32Action(Delegates.StaticRob);
Int32Action ac2 = new Int32Action(Delegates.StaticRob2);
Int32Action ac = ac1 + ac2;
- long event handler, c# should define a delegate and used with event
public event CustomEventHandler EventName
{
    add { };
    remove {};
}
- short event handler, only use the event keyword and delegate property which will auto generate the private delegate
public event CustomEventHandler EventName;
public void OnEvent()
{
    CustomEventHandler handler = EventName;
    if(CustomEventHandler != Null)
    {
        handler(this, null);
    }
}

# Lambda Expression
- difference between lambda and delegate    
Convert<int, double> converter = delegate {return 5.5;}
converter(10);
if you create the converter with lambda, you need to specify the parameters explicitly
- be careful with captured variable
List<string> words = new List<string> {"danger", "capture"};
List<Action> actions = new List<Action>();

foreach(string word in words)
{
    string  copy = word; //remove this word will display three capture
    actions.Add(()=> Console.WriteLine(copy));
}
the lambda expression capture the outside value address, c# team is discussing this and may be change the default lambda capture behaviour
    
# Advanced anonymous types
- anonymous types
var person = new { FirstName = "jon", lastName ="skeet"};
person = new { FirstName = "jon", lastName ="adsf"};
    + the anonymous types after created, the base on the sequence and type of the sub items
    + anonymous types also support equal test, which is overwrite getHash and equals method
    + the anonymous type is mutable after created
    + create a array
    var person = new { firstname="jon", lastname"sk};
    var people = new[] {person, new{firstname="other", lastname=""};
# Extension Methods
- static class will only contain static method
- extension class must be in top level
- must be not generic
- reverse string is not easy way
- could use it to implement linq or make codes more readable
- the first parameter should be this Type, and the method should be static
- the class name of contain the static method is not important
- the key word from, where select in linq expression just fire the relative interface method such as where and select

# LINQ
- linq example
var Regex = new Regex("([^,]*),(.*)")
var query = from line in names
            let match = pattern.Match(line)
            select new {name=match.Groups[1].Values,
                        relationShip=match.Groups[]}
            into association
            group association.name by association.relatioinship;
foreach(var group in query)
{
    Console.WriteLine("Relationship:{0}", group.Key);
    foreach(var name in group)
    {
        Console.WriteLine("{0}", name)
    }
}
- how linq works and why, linq base on select, where, extension methods the above query is same as 
var query = names.Select(line=>new{line, match=pattern.Match(line,)})
                 .Where(..)
                 .GroupBy(...);
the c# compiler just compile the key words to function call and lambda expression
- When to use other expression patterns in code
    + the simple requirement, extension method is much easy to under standard 
    + when use with join, the extension method is become worse to read compare to the query form
    + linq also support select from multiple source such as 
    from ...
    from ...
    where ...
    ...
    + example
    var query = from line in names
                join length in lengths on line.Length equals length
                where line.StartWith("T")
                select new {name=line.ToUpper(), foo=length*2};
                
    var query = name.Join(lengths,
                           line=>line.Length,
                           length=>length,
                           (line, length)=> new {line, length})     
                    .Where(z=>z.line.StartWith("T"))
                    .Select(z=>new {name=z.line.ToUpper("T"),
                                    foo=z.length*2});
- Other Operations Not in Query Expressions, such as Max and ToLookup functions
- Introductoin to LINQ to SQL
IQueryable<string> sql = null;
sql.Provider
    + IQueryable is similer to the IEnumerable
    + Example to use expression tree, which is a lambda expression
    Func<sring, bool> lengthFilter = text => text.Length < 10;
    Expression<Func<string, bool>> lengthFilter2 = text => text.Length < 10;
    This is kind of work is done by c# compiler, the text variable in lambda expression will be expand as paramete expression
    ParameterExpression param = Expression.Params("text");
    MemeberExpression property = Expression.Property(param, "Length");
    
    var shortNames = names.Where(text=>text.Length < 10);
    + Example to use linq
    var lines = from file in Directory.GetFiles("*.log")
                from line in File.ReadLines(file)
                where line.Contains("error")
                select line.Substring(10);
- check linq
http://edulinq.googlecode.com
parallel linq
linq to sql and xml
every linq function

# Covariance and Contravriance
- Covariance example, syntax to define a Covariance type is out
public interface IEdible{}{}
public abstract class Fruit:IEdible{}
public class Apple:Fruit{}
public class Banana:Fruit{}
public class Pizza:IEdible{}

public interface IFoo<out T> //Covariance
{
    T GiveMeFoo();
    
    void AddFoo(T value); // this will not compile
    List<T> GetListofFoo(); // this will not compile, because the compiler can't sure the List object is added object or not
    IEnumerable<T> GetAllFooValues(); // this will compile, in covariance only accept interface for output
}
    
public void Demo()
{
    IFoo<string> foos = null;
    IFoo<object> general = foos; // if remove the interface out tag this will not compile, general type should not convert to non generate type without convert functions

    List<Banana> bananas = new List<Banana>():
    IEnumerable<Fruit> fruit = bananas;
    
}

public void Eatall(List<IEdible> edibles)
{
    edibles.Add(new Pizza());
    foreach(IEdible e in edibles)
    {...}
}
- Contravariance, this is used to pushing things in
public interface IFoo<in T>
{
    int Compare(T x, T y);
}
- all is used to restrict assign subclass to base class not convert base class to subclass
- Use both together
public interface IFoo<in Tin, out Tout>
{
    int Compare(Tin x, Tin y);
    Tout GetDummyTTout();
}
- make it dynamic with delegate
public delegate void DoSomethingWith<in T>(T input);
public delegate T GiveMeAnExampleOfT<out T> ();
public delegate T ConvertValue<T>(T input);
- Delegates and Variance
- The class can't be set with Covariance and Contravariance, only reference type can work with Covariance and Contravariance, immutable types such as int can't work work with Covariance
- Covariance and Contravariance is converted to each other when it is used in a interface, such as Action<Action<string>> => Action<Action<object>>, just like negative multiple negative
    
# Overview of Dynamics
- dynamic text
    + strong type 
    + weak type
    + dynamic type in c#
    dynamic text = "hello"
    
    //Reflection way to make the same function
    //PropertyInfo property = text.GetType().GetProperty("Length");
    //int length = (int) property.GetValue(text, null);
    
    int length = text.Length;
    + dynamic conversion is still type save
    + dynamic is different with var which is still a static type
    + in MVC web development pattern dynamic is more convenience
- The dynamic expando object type    
dynamic expando = new ExpandoObject();
IDictionary<string, object> dic = expando;
dic["Name"] = "Jon";
expando.Age = 35
Action greeting = (Action)(()=>Console.WriteLine("Hello"));
expando.Greating = greeting;

expando.Greating();

This is just like javascript to add dynamic property
- More realistic example
public dynamic GetProperties()
{
    Dictionary<string, object> properties = new Dictionary<string, object>
    {
        {"name", "jon"},
        {"age", 35}
    };
    IDictionary<string, object> expando = new ExpandoObject();
    foreach(var pair in properties)
    {
        expando[pair.Key] = pair.Value
    }
}
dynamic properties = GetProperites();
string nme = properties.Name;
int age = properties.Age;

use the dynamic types will avoid cast type all around the code 
- A Dynamic SQL Example with DynamicOjbect
using System.Dynamic;

internal class DynamicSql:DynamicObject
{
    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
        var callInfo = binder.CallInfo;
        StringBuilder builder = new StringBuilder("Select * from " + binder.Name + "Where ")
        for(int i=0; i < callInfo.ArgumentCount; i ++)
        {
            if (i !=0 )
            {
                builder.Append("And");
            }
            builder.AppendFormat("{0}=@{0}", callInfo.ArgumentNames[i]);
        }
        Console.WriteLine("Would execute SQL: {0}", builder);
        for(int i = 0; i < callInfo.ArgumentCount; i++)
        {
            Console.WriteLine("Would set parameter {0} to {1}", callInfo.ArumentNames[i], args[i]);
        }
        result = new[] {new {Title="C# in Depth"}};
        return true
    }
}

dynamic sql = new DynamicSql();

dynamic results = sql.Books(author:"Jon Skeet", year:2010);
foreach(var result in results)
{
    Console.WriteLine(result);
}

this will try to find method, named argument
sql.Books(string author, int year)
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    






    
    
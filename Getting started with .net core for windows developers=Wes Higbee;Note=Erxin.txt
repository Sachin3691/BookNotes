Getting started with .net core for windows developers=Wes Higbee;Note=Erxin

# Building console apps with .net core 
- what to install 
    + dot.net 
    www.microsoft.com/net 
    
    download .net core 1.0 and choose a platform 
    
    + distribution 
    .net core 
    .net core sdk 
    
    + after install sdk test execute 
    $ dotnet 
    will display command 
    
- dotnet use nuget to help manage packages 

- use new command to create a new project for dot net core 
$ dotnet new 

get help for new by 
$ dotnet new -h 

$ dotnet new -t <type>
Console 
Web
Lib 
xunittest 

in the future will support f# and visual basic .net 

- build a .net project 
$ dotnet build 

the default project contain 
project.json 
project.cs 

run dotnet restore to restoring pacakge 
$ dotnet restore 

run dotnet build again 
$ dotnet build 

$ dotnet run 
compile and run 

after run will create a project.lock.json 

- create a .net core console app with visual studio 
- how code executes with the .net core 
*.cs

the c# compiler csc only support upto c# version 5

compile *.cs with csc compiler 

- use ildasm to diassembley the .net executable to IL
$ ildasm to check the .net file 


source(.cs) -> compiler -> CLR JIT compiler  -> machine code 
FCL 
framework CL 

to seperate different compilers to compile to same type of IL code and use the CLR to run a common intermedia code to machine code 


- how code executes with .net 

Roslyn, is a new csharp compiler 
csc only support to c# 5 
Roslyn is also support visual baisc 

CoreFx, reimplementation of class libraries 
new runtime .net core clr CoreCLR RyuJIT compiler 

- .net core is a open source 
    + search corefx, will get the core source code 
    
    + coreclr, also link to .net core clr which also opensource on github 
    
    + roslyn, c# and vb .net compiler aslo open source 
    
- modularity 
    + .net frameworks are splited into several packages and reimplemented in .net core 
    
    + mscorelib, as a god assembly of .net in previous versions of .net 
    + in .net core the internal namespace of mscorelib are seperated into several packages and dlls such as System.Console.dll which is a namespace in mscorelib 
    
- project uses all files on disk 
    + lead to performance benifets such as for asp.net applications 
    
    
- openweathermap.com is a public website to get weather information 
- project uses all files on disk 
- default package references 
    + .netCoreApp 
    it's a nuget packages 

- adding package references 
    + add json searializer 
    + check corefx repository in github. There are lots of packages. there will be a build in package in corefx 
    
    https://packagesearch.azurewebsites.net
    it's a reverse package search website 

    + we could use visual studio to add nuget package or directly modify the project.json to add the dependencies like nodejs 

    + right click the error message in code will also display the add required packages message 

- dotnet publish to Mac 
    + csproj will replace the xproj and project.json in the future of dotnet core project 
    
    + publish project by 
    $ dotnet publish 
    
    will display the publish successfuly message 
    
    the additional reference assembly will be shipped will be copied to the publish folder 
    
    $ dotnet *.dll 
    
    the dotnet core have to be installed on Mac 
    
- deployment FDD vs SCD 
dev machine 
    + donet publish, there are two types of publish 
    
        * FDD, framework dependent deployment, FDD. the product machine doesn't contain the runtime 
        * self contained deployment, SCD. this assumed the required core framework are already installed 
    
Production machine no runtime 
production machine shared runtime, sdd 


# Building UWP Apps with .net core 
- The universal windows platform 
    + in traditional .net platform 
App models 
asp.net, wpf, winForms, console, service
BCL                     
CLR                     

    + in .net core 
app models 
asp.net core, UWP, console, service 
CoreFx 
CoreCLR

    + UWP is very similar to wpf 
    + universal apps 
devices + IoT, Mobile, PC, XBox, Surface hub, HoloLens 

- installing the windows 10 sdks make sure check the universal windows app development tools 

- enabling windows developer mode for windows 

    + open settings for window, use developer features and select the developer mode 
    
    for window 10 search use developer features 
    
- create a UWP apps 
Windows/Universal

there are three different sdk versions 
14393, anniversary edition 
10586
10240

    + select minute and max version 
    + .net core and UWP both simplify multi-targeting 
    + we could run on xbox too 
- UWP uses msbuild 
    + copy and past files to visual studio project folder 
    + add files by show all files in visual studio and choose the new added file and select included in project 
- running the sample app 
    + check the package.appxmanifest and check the capabilities to let the project enable to use the required capabilities for a device 
    
    also check build and deploy ni configuration manager 

- reaarange the projects 
- the universalWindowsPlatform
    + install nugetpackageexplorer
    https://chocolatey.org/packages/NugetPackageExplorer
    
    UWP is based on dotnet core 

- the windows runtime has been factored into a series of API contracts 

https://msdn.micorsoft.com/en-us/library/windows/apps/dn706135.aspx 


windows.Foundation.UniversalApiContract 

use ApiInformation.IsApiContractPresent('contract-name') to check if the current API contract is supported on current device 

- .net core & UWP: forcus on APIs needed not platform limitations 

in runtime can react base on the running device 

- runs on XBox 

search store search dev mode activation in xbox and launch it 

go to website to set up account 
https://developer.microsoft.com/xboxactivate 

switch to and restart xbox will reboot in developer mode 

need xbox IP to connect with visual studio 

    + debug choose remote machine 
    + select remote machine as target 
    + type in the pin code 
    switch to xbox and select pair with visual studio record the pin code and type in visual studio 
    
    the code could be dynamic injected into xbox 
    
- .net native, default part of UPW use a head of time, ready to run application, the app is much more performance. will remove bits and pieces doesn't needed 


# Targeting the .net standard library 
- creating a .net standard library 

.net core library is a .net standard library in the backend 























Designing Mobile Games with a Game Design Document=Christopher Kao;Note=Erxin

# Introduction 
- how to write game design document 


# The Game Design Document 
- document, biobo of game contain all the necessary information of your game 

lay out the machanics of your game 
features 
type of game 
subsystem 
purcase 
update 

organize the game into manageable sections, break down the game into sections to define which system should be develop first 

gives the development team an anchor point to work off of 

answers top tomid level questions about the game 

who is the GDD for, in order of priority
    + should be for programmers 
    + Artists, for UI developers supply framework 
    + marketing team, certain parts only 
    
software you will use, word/open office/google docs 
flow charts, visio, rfflow 
wireframing, balsalmiq, illustrator or photoshop 
pictures, photoshop

- break down the pitch 

- breaking down the pitch 
    + intro & summary section 
    give a brief overview for the reader 
    game some flavor andgame mechanics 
    can be separated out for marketing 

    + intro section breakdown 
    introduction, your story line pitch,what's on the back of the box, this is where your flavor and pretty adjectives are
    concept, actually explain the gameplay mechanics, without save the world. explain the gameplay mechanics
    features, bullet pointed break down of the previous two sections 
        * random generated dungeons 
        * 4 different playable characters 
        * customizable characters
    target platform
    genre, what type of game is, such as platformer, puzzle, social online, music game, etc 
    target audience, who is the game for, always list your audience, such as kids, adults, boys, girls, age groups. you should determine what should be done. list it out in the introduction section 
    reference games, what type of games are similar? useful for designers and development team. it also lets you scout the competition 

- setting up the framework 
    + first list all the sections first 
    
- explaining the gameplay mechanics 
    + what are the main gameplay mechanics of your game 
    + what are you actually doing hwne you play the game? describe the scene
    + break down the mechanics 
    think single mechanics movement, attacking, puzzules 
    can it be prototyped? if not break it down more, prototyped means it can be quickly created a small demo 
    
    + how does it link to other systems if it does? 
    
    super mario bros, example 
    
    run, jump, coin collecting and so on 
    
    + edge cases, normally you get a mushroom first then you grow then you get a fire flower 

    what if marios gets two power ups out of order? 
    mushroom + mushroom = nothing 
    fireflower + firefower = nothing 
    
    fireflower + no power up = big but no fire flower 
    
- mapping game systems with flowcharts, basic show the map of games 

main perpose of flow chart

show the order of the screensand how they are connected 

different kinds of within your gdd  
    + overall map, this will be a large flow chart, will take all the different screen, and all the possibility 
    
    + screen to screen menus 
    
    + gameplay to gameplay, such as gameplay death restart 
    
    + separate out the systems, save system, purchasing system 

- understanding the importance and features of wireframes 
    + figure out any functionality issues before production 
    + help to easily prototype features 
    + necessary for UI 
    + should accompany as many of your write up in the gdd as possible 
    + flow fidelity 
    + give an idea of whatthe game is supposed to look like without full art. it's for functionality concept art is for the environement 
    + help the UI artist known what they needto put into the art 
    + be easy to mainpulate and adjust 
    
    design -> prototype -> build -> QA 
    low    -----> high cost to change 
    
    + use them to accompany your game features 
    
- building the mobile game wireframe
    + create wireframe screen for each screen and add notes 
- adding proper art style and narrative details 
    + art style and narrative details 
    + gdd is not a style guy
    + art style heading, give example for these three concepts 
    envirnoment 
    characters 
    user interface 
    
    + the first iteration of the GDD will just have reference art 
    update the concept art later 
    
    write out your character personality also, use reference art just like envirnoment if you can't draw 
    
    story and dialogure, you are not writting your entire your story, give the back of the book summary. same wth the dialog. keep thesein separate documentsand reference them 
    
    GDD, story doc, dialogure script is like TV or movie dialog script 
- determining the proper retention mechanic 
retention is what makes you come back to play the game later, not what makes you play longer 

retension mechanics need to be designed with them in mind. it is extremely hard to add them in later 

number one key retention, make a fun game with fun game mechanics! 

retention, depth of gameplay lots of things to do, skills to master 

changing gameplay, new content, evolving worlds, competition 

appointment mechanics, cool down time, caring obligation 

clash of clans is a good example for retention, it have new content, evolving worlds, competition, appointment mechanics, cool down time, caring obligation 

- designning virality into the game 
virality is spreading your app to others...

as marketing your mobilegame becomes more andmore expensive, virality is important to keep you at the top of the charts 

sharingto social media 

asking for resource, example of virality

word of mouth, easy to let people share your game 

group challenges, send your friend a bonos cards 

3 things to remember, mechanics should be writen in gdd. keep the virality relavent to the game. 

incentivize it

makeit easy 

do not just put a share button and think people will push it! 

- save system, don't over look the save system! 
cloud vs local 

think about what type of game you are making. don't assume you can save everything on the phone or everything on the cloud 

will you need a profile system, will this profile system need to be accessed by other palyers at any time? social game will most likely need some kind of profile system. with that you most likely need some kind of cloud storage 

other considerations, how are in app purchase items being stored? might be local. there are guide line for apple and google for inline purcase 

tracking metrics might need a cloud, such as which item is used most, how many player are in the level 7 such kind of static information 

in your gdd list out what needs to be saved. list out example should be store and let your technical guy to think what to save such as 
players level 
player experience 
players coins 
players items 
profile information, such as pictures, names, guild 

- picking the monetization model 
how your game makes money

build this into your game design early too. it should be integratedin your gdd under the game features headings. they should be with your gameplay mechnics 

while you will always be asked about retention, virality and monetization, they don't require a separate heading 

two montization method 
    + premium ($0.99) vs freemium(play for free and ask for new items in the game)
    
    + what kind of inline purchase you are using 
    Pros, 
    freemium, give more people to try, unlimited spend potential, longer tail life 
    Cons 
    lots of spending or pinch points frustrate players who leave
    lots of non paying players, they require customer service and social 

    + in-app purchasing 
    consumable are one time use 
    examples, coin, health pack, extra life, speical puzzle piece, keys 
    
    permanents stay for multiple uses, example new levels a weapon a new skin 
    
- turning the gdd into a living document 

keep this updated, as things change the gdd needs to update with it 

if you have large development team, the gdd should reflect that 

table of contens & version control 

take the document into version control 

simple version control by add table to record
version, date, author, change details 













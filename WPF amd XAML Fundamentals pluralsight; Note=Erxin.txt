WPF amd XAML Fundamentals pluralsight; Note=Erxin

# wpf ui edit tool
- xamlpad

## Introduction
- Integration, just like html 
- WPF design, structure
directX->composition engine->presentation core->presentation framework
unmanage								| managed
- XAML
- UITree, xaml elements construct the UITree
	* logical tree
	* visual tree, contains everything, is a super set of logical tree, use to custom reaction
- event and command, whenever event happens wpf will search the event hander 
	* bubbling, from the target to the root
	* tunneling event, from the root to the target
- controls
	* element with behavior
	* button
	click event, focus, command, automation, content model
	* template
	any single control could have seperate template
	* ex.
	<button background="blue">
		<button.template> //this means template is a property of button, it is property contract
			<control.template target="button">		//it could be set seperate from the button
				<rectangle fill="{templateBinding background}" radiusx="5" radiusy="5"/> //this is appear
				<textBlock text="{templateBinding content}" /> //this bind the content of the button or use below
				// The content presenter will support graphic content enclude text will accept accelerate key
				<contentPresenter content="{templateBinding content}" recognizeAccessKey="true"/>
			</control.template>
		</button.template>
		_click me!
	<button>
- primitive elements
	* vector graphics
	* simple text
	* bitmaps and video
- control, means visual elemnt
	* textblock is not a control, is a way to render text
- layout
	* grid
	* canvas, fixed layout, also support anchoring
	* stackpanel
	* dockpanel
	* wrappanel, flow-like formatting
- flowed text
	* flow document
	html like, reader controls
- data
	* ubiquitous data binding support
	* data template
- silverlight, WPF/e, everywhere
	* crossplatform, windows and mac, 3_th party linux support
	* internet explore
	* v1.0, just graphic engine
	no 3d, no clear type, no hardware accelerate
	* v2.0, include core clr and dlr
	support c#, .net, python, ruby, etc
	subset of full class library
- designers
	* expression blend, use to desige ui
	* visual studio 2008, use to manage code

## controls
- button
toggle button, button, repeat button which will trigger click event when whole on button
- group box, like vb frame
- content model
	* flexible caption
	* ubiquitous pattern
- proeprty could be add as html property or use wpf property syntax
	<object.property>
	</object.property>
- text input, could set spellcheck.isEnable="true"
	* textBoxBase
	* plain text
	* rich text
	* password box
	* set property also could be done by
	SpellCheck.SetIsEnable(object, true); //the object is some one have the spellCheckIsEnable
	* databinding syntax
	<element property="{Binding ElementName=element_name}">
	</element>
	<element1 x:Name="element_name"/>
	* label is use to handling focus and target the focus to some other element, if want text just use text element
- attach property
	* could be set in xaml  < ... attachPropertyClass.Property="value"
	* could be set as class normal property,   object.attachPropertyClass.Property = value;
	* could be se as attach class property set method,  attachProeprtyClass.SetValue(object, value);
- range control
sliter, prograss bar, scrollbar
- item controls
selector, listbox, combobox, treeView, menu, toolbar
- items controls and content models
	* content control, button, label
	* headered content control, groupbox, tabitem
	* items control, listbox, combobox
	* headed items control, menuitem, treeviewitems
- item containers
	* items always wrapped
	* generated automatically
- controls vs elements
	* not all elements are controls, e.g. textblock, image, border, ellipse
	* control implies behavior, appearance replaceable
- there is two elements to interact with user input
	* events, low level handle user input
	* commands, higher level
	raise by controls 
	* three kinds of event routine
		+ tunnel
		+ bubble, such as click event, mark the event.Handled = true to stop bubble
		+ direct
	* add event handling in code will be better to isolate the view from codes
	* if the background of the control is not set, the control is total transparent to the mouse or the use event. If the background of the control is set event the value is "transparent" it is visible to the mouse or the user. 
	* due to the click event would bubble up, so we could handle the children's event from the container. 
	container.AddHandler(EventKind, new RoutedEventHandler(function_name));
	when use this kind of handle, we should use the event.source to the the real source object of the event, rather than the sender
	function fn_name(sender, event)
	{
		source_control = event.source as source_control;
	}
- build-in commands
	* applicationCommands, print, copy, save
	* componentCommands, moveDown, selectToEnd, scrollPageUp
	* editingCommands, toggleBlod, delete
	* mediaCommands, pause, play, increaseVolume
	* navigationCommands, browseBack, refresh
	* the command kinds is nothing more than a name
	* the wpf build-in controls implement some of these commands such as textbox implement copy, button implement some app commands. The commands should be use in specify content. The controls could be set which kinds of comand is related. 
	when the control associate which specify commands only the commands have at lease one handler the control could be automatic set to enable, otherwise it will be set disable
	we should tell the wpf the contect of each event handler
	CommandBinding copyCmd = new CommandBinding(ApplicationCommand.Copy);
	contentObject.CommandBindings.Add(copyCmd);
	copyCmd.Executed += new ExecutedRoutedEventHandler(function_name);
	* when the menus set the command property it will automatic assign the menu name and the common shortcut
	use the <inputGestureText="Ctrl + P"/> to control the menu accelerate key
	
## Layout
- layout have two phase process
	* measure
		+ walk UI tree, determine preferred size
		+ constrain or unconstrained
		+ size to content
	* arrange
		+ walk UI and assign size and location
- declarative layout
	* dynamic change with data binding and localization
	* common layout properties
	margin, padding, horizontalAlignment, verticalAlignment, min/maxWidth, min/maxHeight, width, height
	* margin, space between boundary of each control
	margin="all", margin="horizontal, vertical", margin="left, right, top, bottom"
	The margin of two adjacent controls will add together, not merge into the max
	* padding, space between boundary and content
	* alignment
		+ vertical, top, center, bottom, stretch(default)
		+ horizontalAlignment, left, center, right, stretch(default) all the other three will change the size by the content
		+ horizontalContentAlignment, verticalContentAlignment, like relationship of margin and padding
	* width, height, min, max
	* grid, is derived from panel
		+ if the row or column is define to have auto height or width, the value will auto size by the content
		+ use number* to set the property value is number time size of the other column/row, the start size will automatic change the value
		+ grid.rowspan, gridcolumnspan to enlarge the content size
		+ gridsplitter, use to split grid horizontal or vertical
	* dockpanel, stackpanel, wrappanel(like html flow)
	* canvas, absolute position with canvas.left, canvas.top property for the child ctrl, use to caculate the position and redesign drawing
	* scrollviewer, wrap any element, the child element will feel the virtual space is real, the child could implement a interface to control the scroll
	* viewbox, scales content to fit, viewbox need to know the fit size of the content
	<viewbox [stretch="uniform|strench"]>
		<object width="xx" height="xx"/>
	</viewbox>
	* window, fixed content
	* popup, transient window, is similar to the window class
	* navigate between page
		+ <hyperlink navigateUri="page.xaml">text</hyperlink>
		+ app.xaml contain a startupUri="xxx.xaml" property to link to a page	
		+ navigationWindow
		+ frame, could contain navigation button in the page

## graphic
- wpf build on directx pipline, wpf -> mil -> directx
- transformability
	* rotatetransform, when the childcontrol rotate, wpf will call the win32api greate a wrap window around the ctrl
- composite and integration
	* winform don't support overlap directly compare to the wpf
- procedural vs declarative
	* rewrite OnRender method for on customClass derived from frameworkElement
	OnRender method is different from OnPaint in winForm, its a calculate method to get the. It's construct a message to send to the visual tree
	* xaml support declarative style code
	  C# support both declarative like and procedural styles to create element
- Primitives vs shape
	+low-level, direct like 
	brush, pen, point, rect, geometry
	+ higher level, shape, use the framework element ask possible as you can
	line, rectangle, ellipse, polyline, polygon, path
- basic brash
solidColorBrush, linearGradientBrush, radialGradientBrush
- pens
anyBrush + thickness, dash pattern, join style
- geometries, have to use in fit container such as path
<path>
	<path.data>
		<pathGeometry>
			...
		</pathGeometry>
	</path.data>
<path>
If the path objects is have the default fill color and inside another path, it will become transparent, the behind object will be seen
geometries segment types
lineSegment, polyLineSegment, arcSegment, quadraticBezier, polyQuadraticBezierSegment, BezierSegment, PolyBezierSegment
- simple geometry, compare to the path geometry
	+ line geometry
	+ rectangle geometry
	+ ellipse geometry
- geometry group use to combine the geometry together
	+ use blend will create a effective streamGeometry
- combineGeometry
exclude, intersect, union, xor
- drawing, the container could be image, it could improve draw performance
drawingGeometry
<image>
	<image.source>
		<drawingImage>
			<drawingImage.Drawing>
				<drawingGroup>
					<drawingGroup.Transform>
					</drawingGroup.Transform>
					<geometryDrawing>
					</geometryDrawing>
					...
				</drawingGroup>
			<drawingImage.Drawing>
		<drawingImage>
	<image.source>
</image>
drawingImage
drawingBrush could set to any UI element's brush
	+ draw back, lose event handle, layout feature
	+ benefits, improve UI performance and add less UI element to UI tree
- use image brush to draw loaded image
<imageBrush>
	<imageBrush/>
<imageBrush>
- video 
<mediaElement source="....wmv">/
silverlight have video brush, wpf don't have video brush could be instead with drawing
- tileBrush
imageBrush, drawingBrush, VisualBrush, stretch, titleMode
imageBrush have viewBox property to set which part of big image to display
- transform
renderTransform, this property of the UI element is make during the render time will not effect layout
layoutTransform, this transform will effect the layout of the container of the UI element
geometry
relativeTransform
ScaleTransform, transformTransform, rotateTransform, skewTransform, TransformGroup, MatrixTransform
- clipping and opacityMask, each UI elements have this two property, this will use more memeory
- bitmap effect
dropShadowBimmapEffect, blurBitmapEffect, EmbossBitmapEffect, BevelBitmapEffect, OuterGlowBitmapEffect, OuterGlowBitmapEffect, , BitmapEffectGroup
- Animation
<UIElement.Trigger>
	<EventTrigger RoutedEvent="Load">
		<BeginStoryBoard>
			<StoryBoard>
			</StoryBoard>
		</BeginStoryBoard>
	</EventTrigger>
</UIElement.Trigger>
- 3D
<Viewport3D>
	<viewport3D.Camera>
		<perspectiveCamera position="2,0,10" lookDirection="0.2, 0.4, -1" FieldOfView="65" upDirection="0,1,0"/>
	</viewport3D.Camera>
	<modelVisual3d>
		<modelVisual3d.content>
			<model3dGroup>
				<ambientLight color="#ff"/>
				<geometryModel3d>
				</geometryModel3d>	
			</model3dGroup>
		</modelVisual3d.content>
	</modelVisual3d>
</Viewport3D>

## DataBinding
- databinding
	+ datasource, could be any kinds of data such as database, xml, memory object
	+ binding target
	<element property="{Binding path=property}"/>
	+ dependencyProperty, it is manage by the wpf property system
	property 		usage
	path			   source property
	xpath		   xml source node
	source	  source object 			//it's rare to use the source property directly
	mode 		  OneTime/OneWay/OneWayToSource/TwoWay
- creating binding in code
Binding binding = new Binding("CurrentCulture");
binding.Source = Thread.CurrentThread
myTextBlock.SetBinding(TextBlock.TextProperty, binding)
	+ obj.SetBinding
	+ bindingOperations, is a binding helper for dynamic runtime binding
	+ explicit data source as resource
	<grid.resource>
		<s:string x:key="val">Foo</s:string>
	</grid.resource>
	<textblock text="{binding source={staiticResource val}}"/>
	+ binding source, is rarely use binding source directly
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:t="clr-namespace:System.Threading;assembly=mscorlib"
	<textblock text="{binding path=currentCulture, source={x:static t:Thread.CurrentThread}"
- datacontext, use to multiple page share single datasource
	+ set datacontent in the container property
	<grid datacontext="{x:static s:environment.osversion}">
		<textblock text="{binding dataContextPropertyName}"
	</grid>
	+ set datacontent in cs file
	this.datacontent = someDataObj;
- binding trigger, could specify the trigger event
"{binding property, updateSourceTrigger=propertyChanged}"
- add property changed interface, INotification interface to datasource object and rewrite the set function
- datatemplate
define a data template for a custom class to how to display on page
	+ define a template in window resource 
	<window 
		xmlns:x:="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:cst="clr-namespace:CustomNameSpace"
	>
		<window.resource>
			<datatemplate datacontent={"x:type cst:CustomClass"}>
				<some ui element and binding information/>
			</datatemplate>
		</window.resource>
		<grid> //or other ui container
			<grid.rowDefinition>
				<rowDefinition height="auto"/>
			</grid.rowDefinition>
			<contentControl content="{binding}"/>			
			//could be any other ui element, the binding is specify to current datacontent, witch could be set in 
			//xaml or cs. the content of the content control will display the it's content base on the template 
			//define in the window resouce and base on the binded data
			<listbox itemSource="{binding}"/> 
			//this ui container is use to display a data collection base on the defined data template
		</grid>
	</window>
- datatemplate trigger, trigger can only check for specify value
	+ normal value trigger
	<datatemplate>
		<datatemplate.triggers>
			<datatrigger binding="{binding dataContentProperty}" value="triggerValue">
				<setter targetName="otherUIKeyName" property="propertyName" value="newValue"/>
			</datatrigger>
		</datatemplate.triggers>
	</datatemplate>
	+ enter trigger with animation, the default target value is the default window value
	<datatemplate>
		<datatemplate.triggers>
			<datatrigger.enterAction>
				<beginStoryBoard>
					<colorAnimation Storyboard.TargetName="uiTargetName"
												Storyboard.TargetProperty="(Label.Background).(SolidColorBrush.Color)"
												to="red"	duration="0:0:1"/>
				</beginStoryBoard>
			</datatrigger.enterAction>
		</datatemplate.triggers>
	</datatemplate>
- binding to collections
	+ itemControl base class
	listBox, comboBox, listView, tabControl, treeView, menu etc.
	+ isSynchronizedWithCurrentItem, will synchronized change the ui control with the binding data
	+ add a slash into the binding expression to make the current binding object relative to the current selected object
	<textbox grid.column="1" grid.row="0" text="{binding familyNames[en-us]}" fontFamily="{binding /}"
	binding to the current object and the slash mean to the current selected object
	the familyNames is a dictionary and the key is en-us	
- hierarchical binding
	+ support treeView, menu, custom controls
	<xmlDataProvider x:key="src" xpath="/mydoc/item">
		<x:xdata>
			<myDoc xmlns=''>
				<item title="one"/>
				<item title="two">
					<item title="child of two"/>
				<item title="three"/>
			</myDoc>
		</x:xdata>
	</xmlDataProvider>
	<treeView dataContext="{staticResource src}" itemSource="{Binding}">
		<treeView.ItemTemplate>
			<hierachicalDataTemplate itemSource="{binding xpath=item}">
				<textBlock text="{binding xpath=@title}"/>
			</hierachicalDataTemplate>
		</treeView.ItemTemplate>
	</treeView>
- xml data provider, is could be use from expression blend to bind data. The data provider should be added in to the window resource
- xml binding
	+ use xpath instead of path
	+ binding don't distinct xml or other type data. The binding operation always treat the data source as object
	+ the path keyword is specify the binding data source property
	{Binding xpath|path=...}
+ binding with out xmlDataProvider in code behind, set the xml node to dataContent
+ xml namespace
	+ the binding the xml node with specify namespace may change the xpath expression differently
	<xmlDataProvider x:key="src" xpath="/td:myDoc/td:item">
		<xmlDataProvider.xmlNamespaceManager>
			<xmlNamespaceMappingCollection>
				<xmlNamespaceMapping prefix="td" uri="http:...."
			</xmlNamespaceMappingCollection>
		<xmlDataProvider.xmlNamespaceManager>
		<x:xdata>
		</x:xdata>
	</xmlDataProvider>
	+ use the provdier by setting the itemSource property of UI element
- collection view
	+ relationship between source and view
	source->collectionView->view
	operations: sorting, filtering, grouping
	+ add groupName property in the xData items to specify each item belong to which group
	+ collectionViewSource use to rearrange the data items to new format
	<xmlDataProvider x:key="menuData">...</xmlDataProvider>
	<collectionViewSource x:key="srcKeyName" source="{binding source={staticResource menuData}",
	  xpath=items/item}">
	  <collectionViewSource.GroupDescriptions>
		<propertyGroupDescription propertyName="@groupName"/>
	  </collectionViewSource.GroupDescriptions>
	</collectionViewSource>
	
	<menuItem.ItemContainerStyle>
	</menuItem.ItemContainerStyle>
	<menuItem.GroupStyle>
		<GroupStyle>
			<GroupStyle.HeaderTemplate>
				<DataTemplate>
				</DataTemplate>
			</GroupStyle.HeaderTemplate>
		</GroupStyle>
	</menuItem.GroupStyle>
- writting data source classes
inotifyPropertyChanged, INotifyCollectionChanged; property changed interface can't handle the 
ObservableCollection<T>, just like normal collection object such as list
- Converters
	+ custom class implement iConvert interface
	+ add the convert object into the xaml in the window resource property and define a key for it
	+ reference the convert in the binding expression
	property="{binding path=xxx, converter={staticResource myConverter}}"
- validation
	+ custom validation rule by derived from ValidationRule class
	public class myRule:validationRule
	{
		public override validationResult Validate(object o, cultureInfo ci)
		{
			if(!doMyCheck(o))
				return new ValidationResult(false, "oops");
			else
				return validationResult.ValidResult;
		}
	}
	+ use the validationRule
	<uiElement.property>
		<binding path="foo">
			<binding.validationRules>
				<exceptionValidationRule/>	//this make the data binding treat exception but by default wpf will ignore data binding exception for the null data during the app init
				<my:myRule>
			</binding.validationRules>
		</binding>
	</uiElement.property>
	+ wpf push the validation logic into code behind by set the data source implement IDataErrorInfo interface
	public class dataSourceClass:IDataErrorInfo
	{
		public string this[string nameKey] // wpf will use the index property to check if everything is OK, the empty string means OK, any other value will be treat as error info
		{}
	}
	+ use the self define errorInfo by add ValidatesOnDataError in the binding expression
	property="{binding path=xxx, updateSourceTrigger=PropertyChanged, validateOnDataErrors=True}"
- showing validation errors
	+ failure sets attached properties
		validation.HasErrors, boolean
		validation.Errors, array of validationError object
	+ visualization options
		validation.ErrorTemplate attached property
		setToolTip using style with triggers
	+ validation.AddErrorHandler(or validation.Error event)
		binding must have NotifyOnValidationError = True
- other binding types
	+ multi-binding feeds multiple properties to converter
	IMultiValueConverter, input object is array obj
	+ priorityBinding selects first viable binding
	
## Core types
- dependenceObject
	+ clr property are basic, the custom object's property may requirement
	change notifications, default values, type coercion, data binding attached properties, validation, inheritance, styling
	+ dependence object already implement the up properties, add dependence properties to fill the dependence objects
	+ use the dependency property
	public class Foo:DependencyObject
	{
		public double Roughness
		{get{return (double)GetValue(RoughtnessProperty);}
		 set{ SetValue(RoughnessProperty, value); }}
		public static readonly DependencyProperty RoughnessProperty = DependencyProperty.Register("Roughness", typeof(double), typeof(Foo), new UIPropertyMetaData(0.0));
	}
	+ the MetaData, could be set as
	default value, change callback, coercion callback
	+ add call back
	public static readonly DependencyProperty RoughnessProperty = DependencyProperty.Register("Roughness", 
                              typeof(double), 
                              typeof(Foo), 
                              new UIPropertyMetaData(0.0, OnRoughnessChanged));
	private static void OnRoughnessChanged(DependencyObject s, DependencyPropertyChangedEventArg e);
	+ attached properties
	//xaml code, wpf will call the dependency property's relative method to get set the value
	<anyElement Foo.Bar="newValue"/>
	//cs code
	public static double GetBar(DependencyObject o){ return (double) obj.GetValue(BarProperties);}
	public static void SetBar(DependencyObject o, double value){obj.SetValue(BarProperty, value);}
	DependencyProperty.Register("Bar", 
                              typeof(double), 
                              typeof(Foo), 
                              new UIPropertyMetaData(0.0));
	+ inheritance property, will automatic set the same value to his child element
	DependencyProperty.Register("Bar", 
                                  typeof(double), 
                                  typeof(Foo), 
                                  new UIPropertyMetaData(0.0, FrameworkPropertyMetadataOptions.Inherits));
	Note: don't use it mix with dependency property call back feature, when set the dependency property in root element, the call back will be called on each it's subelements
- visual, uielement and content element
	dependencyObject			//window base
	^					^
	visual 			contentElement, (such as text, span, etc)		//presentationCore
	^																	^
	UIElement (such as button, ellipse)			|
	^																	|
	frameworkElement 								frameworkContentElement //presentationFramework
- frameworkElement and FrameworkContentElement
- freezable, freezable element could be share to many ui element. You could set the freezable element to freeze then any change will trigger exception. Freezing complex 3d model will increase the effective 5 or 6 times. 
	+ brushes, pens
	+ geometries, drawings, transform
	+ bitmapEffect, textEffect
	+ animations
	+ 3d models
	+ inherite tree
	dependencyObject <-Freezable <-animatable
	
## templates
- customization continuum
	+ window form period
	properties->(owner draw)->custom control
	+ wpf
	properties -> content model -> template -> custom control
	+ the template define the lookless of control
	+ ex.
	<Button>
		<Button.Template>
			<ControlTemplate targetType="{x:Type Button}">
				<Ellipse Fill="Red"/>
				<Ellipse Fill="{TemplateBinding Background}"/>
				<Ellipse Fill="{Binding Background, RelativeSource={RelativeSource TemplatedParent}"/>
			</ControlTemplate>
		</Button.Template>
	</Button>
- Triggers
	+ control template could have property trigger
	<ControlTempate.Trigger>
		<Trigger Property="IsMouseOver" Value="True">
			<Setter Property="Background" Value="Blue">
		</Trigger>
	</ControlTempate.Trigger>
- Trigger target could set the key of the UI element as the template target
- Contract between control and template
there is a contract define between the uicontrol and it's template. Tempalte is used to customise control
	+ such as the template of the progress bar have two parts of template
	with property name PART_TRACK, NAME=PART_Indicator
	+ contentControl with contentTemplate and binding with TemplateBinding
	+ virtualizingStatckPanel is the only stack panel to caculate the display range of the current display content.
	+ ex.
	<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
			xmlns:sys="clr-namespace:System;assembly=mscorlib" 
			xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" >
			<ListBox ItemsSource="{x:Static Fonts.SystemFontFamilies}">
				<ListBox.ItemsPanel>
					<ItemsPanelTemplate>
						<VirtualizingStackPanel Orientation="Horizontal"/>
					</ItemsPanelTemplate>
				</ListBox.ItemsPanel>
				<ListBox.ItemTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding}" FontFamily="{Binding}" FontSize="30"/>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
	</Page>
	+ content template can't do two way binding
	+ isItemPlaceHoster property is the 
	+ templates are factories
	ControlTemplate bt = new ControlTemplate(typeof(Button));
	FrameworkElementFactory fact = new FrameworkElementFactory(typeof(Ellipse));
	fact.SetValue(Ellipse.FillProperty, Brushes.Red);
	bt.VisualTree = fact;
	//this is equal to the xaml code
	<ControlTemplate TargetType="{x:Button	}">
		<Ellipse Fill="Red"/>
	</ControlTemplate>
- visual and logical trees

## Resource
- reuseable resource
the wpf resource is define in xaml and implement with dictionary. any kinds of data could be saved as resource and make it reusable
	+ ex.
	<Page.Resource>
		<SolidColorBrush x:Key="PluralsightGreen" Color="#63b941"
	</Page.Resource>
	<GeometryDrawing Brush="{StaticResource PluralsightGreen}"/>
	+ it's possible to make button element as resource but it's not a good idea to do that. This make cause the app throw exception
- ResourceDictionary, have these property
frameworkElement, frameworkContentElement, style, frameworkTemplate
	+ define in code 
	public resourceDictionary {get; set;}
- resource reference, two kinds
	+ staticResource, only bind once
		* xaml code
		<SomeElement prop="{StaicResource Name}"/>
		* cs code
		elem.Prop = FindResource("Name");
	+ dynamicResource, the property will be updated whenever the resource changed
		* xaml code
		<SomeElment prop="{DynamicResource Name}"/>
		* cs code
		elem.SetResourceReference(SomeElement.Property, "Name");
	+ each element of visual tree could have it's own resource dictionary
- resource hierarchy
wpf will start looking a resource from the current element then it's parents till the root element, the most top resource is the app object, the end is the system resource (with contain the logon session resource or system environment data)
	+ app resource
	<Application.Resource>
	</Application.Resource>
	+ reference the system resource, the wpf instead of use gui or url to reference resource, it use object
	<Rectangle Height="40" Margin="10" Fill="{DynamicResource {x:Static SystemColors.HighlightBurshKey}}"/>
	<Rectangle Height="40" Margin="10" Fill="{StaticResource {x:Static SystemColors.HighlightBurshKey}}"/>
	+ wpf can't share resource cross process
	+ there is two way to a sign resource
		* assign the resource by the property of element
		* assign the resource by the xaml code
		<Elem>
			<Elem.Prop>
				<StaticResource ResourceKey="Name"/>
			</Elem.Prop>
		</Elem>
	+ data template resource, data template is self key type which means they could create without setup a x:key name that is diff from the other kinds of resource, wpf look the data template by type
	Style have the same trick, if it's specify with the type it don't need the specific key
	<Page.Resource>
		<DataTemplate DataType="{x:Type m:MyData}">
			<Ellipse Fill="Red"/>
		</DataTemplate>
		<Style TargetType="{x:Type Button}">
			...
		</Style>
	</Page.Resource>
- MergedDictionary
wpf could put all the control template into one file, the blend could do this too.
	+ the merged dictionary background operation
		* create a merged dictionary at the app.xaml
		<Application
			//specify namespace reference
			<ResourceDictionary>
				<ResourceDictionary.MergedDictionaries>
					<ResourceDictionary Source="ButtonTemplate.xaml"
				</ResourceDictionary.MergedDictionaries>
			</ResourceDictionary>
		* create a seperated resource dictionary file
		* create the specify control template or resource in the file
		* reference the resource in the ui element by property or xaml code
	+ if two merged dictionaries have same name, the wpf will pick the first one. this is a little difficult to debug this kind of senerial
- binary resource, there is three way to reference binary resource
	+ external
	+ loose
	+ embedded
	img element don't support embedded resource directly by xaml, to use it by
	Assembly asm = typeof(xamlFileNameToUseTheEmbeddedResource).Assembly;
	Stream emResStream = asm.GetManifestResourceStream("BinaryResource.EmRes.jpg");
	JpegBitmapDecoder jpegDecoder = new JpegBitMapDecoder(emResStream, BitmapCreateOptions.None, BitmapCacheOption.Default);
	img.Source = jpegDecoder.Frames[0];
	+ the embedded and loose resource could sepecify the build action
	build action			resource type  //good
	content					loose			//good
	resource				resourceManager resource
	embedded resource		assembly manifest resource
	<propertyGroup>			win32 resource
		<win32Resource> ...
	+ the xaml file will be build into *.baml file and added into the resource when wpf project is builded. the loose resource name will be added into resource too, these are contain in the BinaryResources|Resources|BinaryResources.g.resources中
	+ the resource manager have implement the internationalization, the localization could be implement by deploy the local resource file with the app
	+ url to reference the resource
		* absolute
		<image source="http://..."/>
		* relative url
		<image source="*.img"/>
		<image source="folderName\*.img"/>
+ application class resource methods
	+ GetResourceStream, resourceManager style embedded resource
	+ GetContentStream, loose resources
	+ GetRemoteStream, non-local resources
	+ LoadContent, use to load compiled xaml, *.baml
	load content will be called behind by the wpf in the part of xaml file compile to the cs code. The parameter is uri which is pack uri format with "projectName;Component/CustomXamlFileName.xaml", when the function called it will interprete the xaml code to return a object define in the first line of xaml code. if x:class present it will return the specify custom class object or just return the container object such as window or control
- themes, compiled xaml resource in themes folder
	+ general.xaml
	+ aero.normalColor.xaml
	+ luna.normalColor.xaml
	+ luna.homestead.xaml
	+ luna.metallic.xaml
	+ classic.xaml
	+ royale.normalColor.xaml
- Internationalization
	+ resource manager and satellite assembles
	+ wpf automatic layout can simplify process
- localization workflow
	+ unlocalized xaml with uid annotations
	msbuild /t:updateuid
	+ tool to change abstract localize 
	locBaml /parse myApp.exe /out:myApp.csv
	fr-BE\myApp.csv
	+ LocBaml is a sample in SDK
	some assembly required
	+ another way is use data binding and change the data source for difference local
- encoding, official suport three
ascii, utf-8(default), utf-16
	
## Text
- xaml tag name is map to class name so the tag name is capitalize tag
- inline text elements
frameworkContentElement 
^
|
TextElement
^
|
Inline
^
|
LineBreak, Span, Run
			^
			|
	Bold, Italic, Underline, Hyperlink
- block text elements
frameworkContentElement 
^
|
TextElement
^
|
Block
^
|
List, Paragraph, Section, Table
- document viewer controls
	* flowDocumentScrollViewer
	* flowDocumentPageViewer
	* flowDocumentReader
- paragraph element is like text block
- section, element
	* allows grouping of others such as contain many paragraphs and make them have the same style
- list elment set type markerStyle property to set the look of list mark. Don't support custom list mark current but could use table elemnt to get this requirement
- table element
	* table is derive from frameworkContentElement, so it's support text format
	* grid is derive from frameworkElement, it don't support text relative formatting
- figure and floaters
	* floater, like the html float left/right to make the text wrap around 
	* figure, design for pagenating view
- typography, text relative element have this properties to control typography requirement
ligatures, stylistic alternatives, swashes,capitals, numerical styles, fractions
- integration
	* frameworkContentElement FCE
	* frameworkElement FE
	* hosting FCE in FE world
	flowDocument + reader control, textBlock
	* hosting FE in FCE world
	blockUIContainer, inlineUIContainer
- TextBox and richTextBlock
textbox use plain text, richTextBlock use flowDocument to display the text


















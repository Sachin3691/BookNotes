Linq data access=Scott Allen;Note=Erxin

# linq to xml
- why another xml api
- programming xml with linq to xml
- loading, creating  and updating
- xpath and xlst
- xml today
    + atom 
    + rss
    + soap
    + ajax
    + HL7 and other industry standards
    + xhtml
    + xaml
    + rest
    + configuration files
    + POX
    + microsoft office
    
- microsoft xml support
    + MSXML
    40+ releases over 8 years
    XML DOM and streaming SAX APIs
    XSLT, XPath and XSD and XDR support
    + system.xml
    2 major release over 5 years
    xml DOM and xmlReader(pull) APIs
    XPathDocument and cursor APIs
    MSXML 6.0 2005
    .net 3.5 and linq 2008
    
- motivation for a new API
    + we need another API?
    system.xml is showing some signs of age
    verbose and lacks new language features
    
    + individual technologies require time to learn
    xPath for quering, XSLT for transformations
    
    XmlDocument, query have to use XPath
    Transform XML to text file or html have to turn to XLST
    
- new xml API Goals
    + work with language integrated query
    use the standard query operators
    add some new operators for xml
    + provide a modern programming API
    XDocument doc = new XDocument(
        new XElement("Emplyee",
            new XElement("Emplyee", "Matt"),
            new XElement("Emplyee", "Dev")
    );
    
- System.Xml.Linq
    + the assembly and the namespace for linq to xml
    XDocument, XNode, XAttribute, XElement, XObject, for old xml API is start with Xml such as XmlDocument
    
    extension methods to facilitate queries
    + XElement is the header of the API
    provides the ability to load XML from URL, stream or string
    
    <?xml version="1.0" encoding="utf-8"?> //XDeclaration
    //XDocument
    <Employees>                            //XElement
        <!--comment -->                    //XComment
        <Employee type="Developer">Doug</Developer> //type is XAttribute
    </Employees>

- creating xml
XDocument doc = new XDocument();

XElement root = new XElement("Modules");
XElement intro = new XElement("Module");
intro.Value = "Introduction to linq";

XElement cs = new Element("Module");
cs.Value = "linq and c#";
root.Add(intro);
root.Add(cs);
doc.Add(root);

XContainer.Add(object content)
XContainer.Add(params object[] contents)

also support nested format to create xml doc





















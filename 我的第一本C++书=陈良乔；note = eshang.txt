我的第一本C++书=陈良乔；note = eshang

C++/CLI->MSIL微软中间语言->CLI公共语言运行时

C++ visual Assist是VS的一个插件，加亮代码，查找代码，查找语法错误

visual Source safe是管理源代码的工具，用于存储软件的不同版本信息

C++网站
http://www.codeproject.com
http://www.codeguru.com

函数声明与实现的分离

函数库OPENGL, WIN API, STL, WTL, MFC...

重载函数注意默认值的处理
type FunName( type var = value ){};

拷贝构造函数
class name
{
	name( const class &name){}
}

操作符重载
type Operator optionSignal ( parameter[,parameter] )
{
}

友元
friend className;
friend type functionName(parameters...);

多太, 使用虚函数来实现
virtual functionName(parameters...);

抽象类
class name
{
	virtual functionName(parameters...) = 0;
	...
}

在C++中null是
#define NULL 0

异常处理
try{}
catch( type parameterName)
{}
finall:
{}
;
throw exceptionalExpression; //抛出异常 throw 0; throw "error"...
;
异常的函数接口声明, throw指定可能抛出的异常，如果为空则表示函数不会抛出任何异常
type functionName(parameters...) throw( type, type... )
{
}

命名空间
namespace name
{
};
;
引用明明空间中的变量
name::varName
或使用using
using namespace name;

对于引入的文件只编译一次
#pragma once

真正的项目内全局变量
extern varName;
extern functionName;

预处理
#include, #define, #undef, #if ... #else ... #endif, #ifndef...#endif, #pragma once

别名
typedef

类模板
template < typename parameterType >
class name
{
}
;
函数模板
template < typename parameterType >
type function(parameters...)
{
}
;
特定类型的模板函数，例如string类型
template<>
type functionName<string>(parameters)
{
}
;
模板类实例化
1.隐式
templateClassName<type> name(parameter);
2.显示
template type templateClassName[<type>](type...);
tempalte class templateClassName<type>;

STL，标准模板库
容器
1.顺序：vector, list, dequeue, heap, stack, queue, priority queue
2.关联：set, map, multimap, unordered_set, unordered_multiset, unordered_map, unordered_multimap
;
迭代器，即指向当前容器中内容的指针,例如
vector<int>::iterator name;
;
算法
for_each(), find(), find_if(), copy(), merge(), transform(), sort(), unique(), max_element(), min_element()

函数对象，弥补函数的不足，在一个类中定义一个函数操作附加一些与该函数相关的属性来记录函数运行过程中的中间变量，使用操作符重载“（）”来使得代码更清晰
template< trypename parameterType >
class className
{
public:
	type operator () (parameter[,parameter])
	{
	}
	...
}
;使用
className<int> varName;
varName(value0[,value1]);

Lambda表达式
[signal](parameters...)->returnType
{
}
其中[signal]用于指定访问作用域内的变量方式，为[&]参数为引用，[=]为只读方式
;
[&, varName] 则其中一个为引用，另一个变量varName为值传递
；
复用lambda表达式
auto varName = []( int x ){ ... }
之后可以使用varName 来引用Lamda表达式

右值引用, 例如引用函数返回值，临时变量，无名变量等
int&& varName = functionName();
用来提高程序效率，减少中间值的赋值

智能指针 shared_ptr，类似于C#中的垃圾回收器，占用40个字节，实际是一个模板类，具有一些相关的操作，如rest(), get(), use_count(),使用
#include "stdafx.h"
using namespace std;
shared_ptr<int> pName;
；
轻量级unique_ptr,于shared_ptr的区别是不能进行复制，程序中只能有唯一的一个unique_ptr类型指针指向某一资源

PPL进行多线程，parallel patterns library
parallel_for(...);
parallel_for_each(...);
parallel_invoke(...);
使用task_handle来表示任务
task_group
task

OpenMP实现并行， open multi-processing
只要在代码的for中加入预处理执行
#include <omp.h>
#pragma omp parallel for
for(int i = 0; i ... ){}





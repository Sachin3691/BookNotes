Jenkins Fundamentals=Arnold;Note=Erxin

# Preface
- softwares
Docker 
Git 
Python 
Blue Ocean
-  GitHub at https://github.com/TrainingByPackt/Beginning-Jenkins.
- terms 
continues delivery, manual trigger to production
continues deployment, involes automatic releases to production
continues integration, both and involing testing, building of any new updated source code 

- expact 
minimal release management 
feedback loops are faster 
work with market demand 
testing easier 

# Setup jenkins 
- import terms 
continuous delivery 
continuous deployment 
continuous integration 

- basic process 
local git -> developer write code and pass local test -> commit -> automatic tests and build are triggered on each push -> jenkins CI + CD -> passed tests will trigger an application build -> manual production deploy trigger

- check docker is running from command line 
$ docker 

$ docker run ^

run container 
$ docker run 

$ docker run -u root, run as root 

automaticall removes the container when it's shutdown 
$ docker ... --rm 

runs our container in the background 
$ docker ... -d 

maps port 
$ docker ... -p 

specify jenkins data, maps the jenkins_home container directory to a volumn 
$ docker ... -v jenkins-data:/...

communicate with docker daemon 
$ docker ... -v /.../*.sock 

jenkins image 
$ jenkins/blueocean 

navigate to http://localhost:8080 or the mapped port 

check jenkins log 
.../jenkins_home/secrets/initialAdminPassword

identfy docker container process id 
$ docker ps command 

get log 
$ docker logs <add container id> 

install suggested plugins 

- the jenkins dashboard

- jenkins rest API

- matrix based security allows admin to grant permission in groups 


# Administering jenkins
- plugins 
    + administration plugins 
    service authentication 
    audit trail and general security 
    node and job-related management 
    
    + user interface(UI) plugins 
    
    + source code management plugins, SCM. ALLOW Jenkins  to run version control systems. pull code 
    
    + build management, trigger notification, manage build artifacts, trigger deploys 
    
- setting up jenkins with plugins

Open the following link: https://plugins.jenkins.io/internetmeme

manage jenkins option

manage plugins 

- maintenance windows, https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-maintenance.html

jenkins host and installed plugins,  Sometimes, plugins are dependent on a specific version, which raises compatibility issues, eventually leading to unavailability

- retrieving jenkins logs and metrics 

    + open manage jenkins -> System Log. Install logging frameworks like
    ELK, ELASTICSearch, Logstash, and kibbana 
    GrayLog

    + memory crucial factor that needs to be considered 
    
- improve memory management, log rotation, memory is still consumed. An option would be to set up backup databases or datastores, depending on the size of the data that the host consumes. backup database 

Amazon S3 
Cassandra 
Postgres/MongoDB 
Google's Clould storage

- Checking the version release notes  and update server and plugin 
- configuring Jenkins for Production 

    + security 
    + access limited to the master node 
    + backup of jenkins home 
    + project naming conventions should be followed 
    + getting rid of jobs and resources that are not in use 

- evaluating our jenkins server 
    + vulnerability to hackers 
    + data loss 
    + man in the middle attacks 
    
    get SSL certificate 

- Access points, Head on to Configure Global Security, under Manage Jenkins.


# Jenkins views and freestyle projects 
- Freestyle means improvised or unrestricted. A freestyle project in Jenkins is a project that spans multiple operations. It can be a build, a script run or a pipline 
- application builds jobs 
- test jobs 
- script runs such as report delivery and command executions
- setting up freestyle projects 
- item types 
freestyle project, central festure, build your project, combining any scm with any build sytem
pipline, long-running activities, span multiple build slaves. which do not fit for freestyle project 
external job, record execution of a process run outside jenkins, even on remote machine 
multipe configuration project, need a large number of different configurations 
bitbucket team/project 
folder, creates a container that stores nested items in it. used for grouping things together 
github organization
multibranch pipline, creates a set of pipline projects 

- Add a freestyle
    + New Item 
    + enter a name 
    + specify scm,  you can add the repository details and Jenkins will clone it.
    + Clone or download button and copy the link
    + The Build Triggers resource helps in automating builds. The Build Environment resource, as its name suggests, is involved with the environment–more precisely, the application environment. 
    + set Build environment options
    + build steps 
        * execute scripts 
        * other actions...
    
    + The Post-Build Actions are actions you want to do after a task is done
    
- Setting up a view to manage our projects 
    + Manage Jenkins set up configure global security 
    + Authorization type Matrix based Security
    
- Set up views
    + use left navigation menu of the home pae to add new view
    list view, shows jobs or items in list 
    my view, automatically displays all jobs you have access to 
    
    + add name and configure the view  
    
    + add description
    
    + add job for job filters 
    

# Parameterized and Up/Downstream Project 
- Build parameters helps us set environment variables for our projects 
- configure parameters for projects 
- Add build parameters during add free style project 
- parameter types 
    + boolean 
    + choice 
    + credentials 
    + file 
    + list subversion tags 
    + string 
    + multiline string 
    + password 
    + run, parameter allows user to pick a single run of a specific project. this can be used during the build to query jenkins for further information 

- read more about Bash flags at https://www.tldp.org/LDP/abs/html/options.html.

- build triggers 
    + start a build when upstream/downstream projects completed 
    + running builds at periodic intervals 
    + polling source code management for changes 
    + triggering build remotely 

- creating upstream/downstream projects 

    + two project using one trigger the other 
    + configure one project as build after one project complete
    + conditions 
    trigger only if build is stable 
    trigger even unstable 
    trigger even build fail
    + add post build actions 

- Running an upstream project will automatic trigger its downstream project 


# Jenkins Pipelines
- The CI workflow 
    + pull code from source control 
    + preparing the application environment 
    + testing 
    + building 
    + deployment 

- Git branches and install git 
Ensure that you download and install Git from https://git-scm.com/downloads











    
    
    
    
    
    
    
    
    
    
    
     

Hands-On JavaScript High Performance=Justin;Note=Erxin


# youtube, convert typescript to webassembly 
- reference 
https://www.youtube.com/watch?v=3KuDtqFxvRg

$ npm instal -S AssemblyScript/assemblyscript
$ npx  asinit .
$ npm run asbuild

reference the assembly in html 
fetch("build/optimized.wasm")
    .then(res=>res.arrayBuffer())
    .then(buf=> WebAssembly.instantiate(buff))
    .then(m=>{
        var exports = m.instance.exports;
        exports.foo();
    });
    
- assemblyscript 
https://github.com/AssemblyScript/assemblyscript

- OpenGL Shading Language (GLSL),  WebAssembly and the WebAssembly System Interface (WASI) standard

- HTTP/3 standard is loosely based on. They created the Native Plugin Interface (NaCL) that helped, alongside asm.js, to create the standard for WebAssembly.

- v8 engine, https://v8.dev/blog, chrome
    + chrome performance tab
    + memory tab, heap snapshot 
    
- render tab, chrome 

fps meter turned on 

scrolling performance issues 

paint flashing 

- jsPerf and benchmarking 

    + Head on over to https://jsperf.com
    
    + https://benchmarkjs.com/.
    
- Redux is a great state management system. 
    + install with npm 
    + add in the actions 
    + setup reducers 
    + store and prepare it for data changes 
    + subscribe to those data changes and update UI 
    + todo elements that we want to t see 
    + reducers will be separated with one for our visibility filter 
const visibilityFilter = function(state = 'SHOW_ALL', action) {
    switch(action.type) {
        case 'SET_VISIBILITY_FILTER': {
            return action.filter;
        }
        default: {
            return state;
        }
    }
}

const todo = function(state = [], action) {
    switch(action.type) {
        case 'ADD_TODO': {
            return [
                ...state,
                {
                    text : action.text,
                    completed : false
                }
        }
        case 'TOGGLE_TODO': {
            return state.map((todo, index) => {
                if( index === action.index ) {
                    return Object.assign({}, todo, {
                        completed : !todo.completed
                    });
                }
                return todo;
            }
        }
        default: {
            return state;
        }
    }
}

store.subscribe(() => 
    const state = store.getState();
    // first type of actions ADD_TODO
    if( prevState.todo.length !== state.todo.length ) {
     container.appendChild(createTodo(state.todo[state.todo.length
     - 1].text));
    // second type of action SET_VISIBILITY_FILTER
    } else if( prevState.visibilityFilter !== 
      state.visibilityFilter ) {
        setVisibility(container.children, state);
    // final type of action TOGGLE_TODO
    } else {
        const todos = container.children;
        for(let i = 0; i < todos.length; i++) {
            if( state.todo[i].completed ) {
                todos[i].classList.add('completed');
            } else {
                todos[i].classList.remove('completed');
            }
        }
    }
    prevState = state;
});

- immutable.js, We want to turn a list of lists into a list of objects (think of a CSV).

const fArr = new Array(fillArr.length - 1);
const rowSize = fillArr[0].length;
const keys = new Array(rowSize);
for(let i = 0; i < rowSize; i++) {
    keys[i] = fillArr[0][i];
}
for(let i = 1; i < fillArr.length; i++) {
    const obj = {};
    for(let j = 0; j < rowSize; j++) {
        obj[keys[j]] = fillArr[i][j];
    }
    fArr[i - 1] = obj;
}

    + reference 
    https://immutable-js.github.io/immutable-js/docs/#/
    
    Immutable data encourages pure functions (data-in, data-out) and lends itself to much simpler application development 
    
    + Stop maintain

- safe mutable code, Primitive types, in JavaScript, are anything that are not considered objects.
- resource allocation is initialization 
- functional style programming 

    + lazy evaluation, Generators are functions that will pause execution until the next method is called on them.
    
const simpleGenerator = function*() {
    let it = 0;
    for(;;) {
        yield it;
        it++;
    }
}

const sg = simpleGenerator();
for(let i = 0; i < 10; i++) {
    console.log(sg.next().value);
}
sg.return();
console.log(sg.next().value);

- tail end recursion optimization to prevent break out stack. using trampoline function 

const trampoline = (fun) => {
    return (...arguments) => {
        let result = fun(...arguments);
        while( typeof result === 'function' ) {
            result = result();
        }
        return result;
    }
}

const _d = new Array(100000);
for(let i = 0; i < _d.length; i++) {
    _d[i] = i;
}
const recurseSummer = function(data, sum=0) {
    if(!data.length ) {
        return sum;
    }
    return () => recurseSummer(data.slice(1), sum + data[0]);
}
const final = trampoline(recurseSummer);
console.log(final(_d));

- currying ability of a function that takes multiple arguments to actually be a series of functions that takes a single argument and returns either another function or the final value 

const add = function(a) {
    return function(b) {
        return a + b;
    }
}

console.log(add(2)(5), 'this will be 7');const add5 = add(5);console.log(add5(5), 'this will be 10');

- Currying is the idea that we will use partial application, but that we are going to compose a multi-argument function with multiple nested functions inside it.


# Vanilla Land - Looking at the Modern Web
- Let/const and block scoping
- arrow function takes the scope of the parent, so whatever this points to for the parent, we are now going to do the same inside the arrow function.
- reflection and proxies 
spread operator 

- destructuring 
const desObj = {item1 : 'what', item2 : 'is', item3 : 'this'};

- parameter defaults 
const defParams = function(arg1, arg2=null, arg3=10) {
}

- string templates 
const literal = `This is a string literal. It can hold multiple lines andvariables by denoting them with curly braces and prepended with the dollar sign like so \$\{\}.here is a value from before ${a}. We can also pass an arbitrary expression that evaluates ${a === 1 ? b : c}.`

- BigInt

const bigInt = 100n;
console.log('adding two big ints', 100n + 250n);
console.log('add a big int and a regular number', 100n + BigInt(250));

- internationalization 
const amount = 1478.99;
console.log(new Intl.NumberFormat('en-UK', {style : 'currency', currency : 'EUR'}).format(amount));
console.log(new Intl.NumberFormat('de-DE', {style : 'currency', currency : 'EUR'}).format(amount));
const date = new Date(0);
console.log(new Intl.DateTimeFormat('en-UK').format(date));
console.log(new Intl.DateTimeFormat('de-DE').format(date));

- understanding classes and modules 

We came up with many module concepts and libraries, such as RequireJS or AMD
 
- working with the DOM, The shadow DOM is usually paired with templates and web components, but it can also be utilized by itself.

- web components, The following code creates this custom element (modified from https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements)

- understanding the fetch API 
const oldReq = new XMLHttpRequest();
oldReq.addEventListener('load', function(ev) {
    document.querySelector('#content').innerHTML = 
     JSON.stringify(ev.target.response);
});
oldReq.open('GET', 'http://localhost:8081/sample');
oldReq.setRequestHeader('Accept', 'application/json');
oldReq.responseType = 'json';
oldReq.send();

- back to fetch 

We will write a basic example of a TransformStream that takes our input and does a simple ROT13 encoding to it

- This runtime can be almost all attributed to a Virtual DOM (VDOM) and a state system.

located at https://svelte.dev. On their front page, it even states the following

Svelte is a tool for building fast web applications.

It is similar to JavaScript frameworks such as React and Vue, which share a goal of making it easy to build slick interactive user interfaces.

But there's a crucial difference: Svelte converts your app into ideal JavaScript at build time, rather than interpreting your application code at run time. 

- a basic weather application 

pull from https://openweathermap.org/api. Here, the free service will allow us to get the current weather.


# Switching contexts, no DOM, different vanilla
- getting node.js 

RollupJS to change the code into a system version that is universally recognized, such as the Universal Module Dependency (UDM) system.

- package.jsln file 

    + parts of the fields in package.json
    Prepare, will run the script before the package is packed into a tarball and published to the remote repository.
    
    Install, will run the script after the package has been installed. 
    
    + reference 
    https://docs.npmjs.com/
    
- DOM less world 

    + The libuv library queues up requests for I/O onto a stack of requests. Then, it farms them out to a certain amount of threads (Node.js utilizes four by default). Once the responses come back from these threads, libuv will put them on the response stack and alert V8 that the responses are ready to be consumed.
    
    the Node.js runtime is able to have asynchronous I/O and still maintain a single thread of execution (at least, that's how it looks to the user).
    
    
- Node.js took the POSIX style of I/O. This means that everything is treated like a file. In this case, everything is assigned a file descriptor (fd). 

- The net module gives us access to lower-level socket systems and even to local InterProcess Communication (IPC) schemes that we can use. IPC schemes are communication strategies that allow us to talk between processes. 
    + unnamed pipes 
    
    + named pipes/local domain sockets 
    
    + TCP/UDP sockets 
    
//main file 
import { fork } from 'child_process';

const child = fork('child.js');
child.on('message', (msg) => {
    switch(msg) {
        case 'CONNECT': {
            console.log('our child is connected to us. Tell it to dispose 
             of itself');
            child.send('DISCONNECT');
            break;
        }
        case 'DISCONNECT': { 
            console.log('our child is disposing of itself. Time for us to 
             do the same');
            process.exit();
            break;
        }
    }
});


//child file 

process.on('message', (msg) => {
    switch(msg) {
        case 'DISCONNECT': {
            process.exit();
            break;
        }
    }
});
process.send('CONNECT');

- http module,  high-level look at is the http module. This module allows us to create http servers with ease.

const server = https.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type' : 'text/html' });
    res.end(`
        <html>
            <head></head>
            <body>
                <h1>Hello!</h1>
                <p>This is from our server!</p>
            </body>
        </html>
    `);
});

- debugging and inspecting code 

$  node --inspect bad_code.js 
Debugger listening on ws://127.0.0.1:9229/6abd394d-d5e0-4bba-8b28-69069d2cb800

open the displayed URL with chrome devtool url 

chrome-devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=<url>


- Message passing - learning about the different types 

- workers, learning about dedicated and shared works 

- offloading work to a dedicated worker 
Thread::runAsync((data) -> {
   for(d : data) { //do some computation }
});

- Go (https://golang.org/), which uses a technique of message passing, and Rust (https://www.rust-lang.org/)

- moving data in our application 

const dedicated_worker = new Worker('worker.js', {name : 'heavy lifter'});document.querySelector("#in").addEventListener('change', (ev) => {    dedicated_worker.postMessage(parseInt(ev.target.value));});

- sending binary data in the browsers 

const dataToSend = new Array(100000);
const baseObj = {prop1 : 1, prop2 : 'one'};
for(let i = 0; i < dataToSend.length; i++) {
    dataToSend[i] = Object.assign({}, baseObj);
    dataToSend[i].prop1 = i;
    dataToSend[i].prop2 = `Data for ${i}`;
}
console.log('send at', Date.now());
postMessage(dataToSend);

- SharedWorker is just what it sounds like, when one spins up, just like BroadcastChannel, and someone else makes the same call to create a SharedWorker

- When this is the case, we can utilize two systems, SharedWorker and SharedArrayBuffer.

let shared = new SharedArrayBuffer(4);
const worker = new Worker('worker_to_shared.js');
worker.postMessage(shared);
shared = new Int32Array(shared);

- building a simple shared cache 


# Service worker caching and marking things faster 
- download the ServiceWorker is downloading itself for domain or subdomain 
- Install, attaching itself to the domain or subdomain 
- Activate the ServiceWorker is fully attached
- example 

//node 
const handler = require('serve-handler');
const http = require('http');
const server = http.createServer((req, res) => {
    return handler(req, res, {
        public : 'source'
    });
});
server.listen(3000, () => {
    console.log('listening at 3000');
});

//html 
<!DOCTYPE html>
<html>
    <head>
        <!-- get some resources -->
    </head>
    <body>
        <script type="text/javascript">
              navigator.serviceWorker.register('./BaseServiceWorker.js', 
             { scope : '/'})
            .then((reg) => {
                console.log('successfully registered worker');
            }).catch((err) => {
                console.error('there seems to be an issue!');
            })
        </script>
    </body>
</html>

// add event listener 
self.addEventListener('install', (event) => {
    console.log('we are installed!');
});
self.addEventListener('fetch', (event) => {
    console.log('a request was made!');
    fetch(event.request);
});

// main.css 
*, :root {
    margin : 0;
    padding : 0;
    font-size : 12px;
}

//service worker caches 

caches.open('v1').then((cache) => {
    return cache.addAll([
        './main.css',
        '/'
    ]);
})

- caching pages and templates for offline use 
caches.open('v1').then((cache) => {
    return cache.addAll([
        '/',
        './interactions.js',
        './main.css'
    ]);
}).then(() => {
    console.log('we are ready!');
})

- saving requests for later 

//index.html 
<!DOCTYPE html>
<html>
    <head><!-- add css file --></head>
    <body>
        <h1>Offline Storage</h1>
        <button id="makeRequest">Request</button>
        <table>
            <tbody id="body"></tbody>
        </table>
        <p>Are we online?: <span id="online">No</span>
        <script src="interactions.js"></script>
        <script>
            let online = false;
            const onlineNotification =  
             document.querySelector('#online');
            window.addEventListener('load', function() {
                const changeOnlineNotification = function(status) {
                    onlineNotification.textContent = status ? "Yes" 
                     : "No";
                    online = status;
                }
                changeOnlineNotification(navigator.onLine);
                 navigator.serviceWorker.register('.
                 /OfflineCacheWorker.js', {scope : '/'})
                window.addEventListener('online', () => {
                 changeOnlineNotification(navigator.onLine) });
                window.addEventListener('offline', () => {
                 changeOnlineNotification(navigator.onLine) });
            });
        </script>
    </body>
</html>

//OfflineServiceWorker.js 
self.addEventListener('install', (event) => {
    event.waitUntil(   
     // normal cache opening
    );
});
self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request).then((response) => {
            // normal response handling
        })
    )
});

//interactions.js 
const requestMaker = document.querySelector('#makeRequest');
const tableBody = document.querySelector('#body');
requestMaker.addEventListener('click', (ev) => {
    fetch('/request').then((res) => res.json()).then((fin) => {
        const row = document.createElement('tr');
        row.innerHTML = `
        <td>${fin.id}</td>
        <td>${fin.name}</td>
        <td>${fin.phone}</td>
        <td><button id=${fin.id}>Delete</button></td>
        `
        row.querySelector('button').addEventListener('click', (ev) 
         => {
            fetch(`/delete/${ev.target.id}`).then(() => {
                tableBody.removeChild(row);
            });
        });
        tableBody.appendChild(row);
    })
})


# Building and Deploying a full web application 
- RollupJS, is a build tool allow us to prepare app in different, https://rollupjs.org/guide/en/. Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application. It uses the new standardized format for code modules included in the ES6 revision of JavaScript, instead of previous idiosyncratic solutions such as CommonJS and AMD. 


Build start 
Dependency injection 
Compilation 
POst compilation 
Build end 

- Take Sass (https://sass-lang.com/), for example

- utilizing the following technologies to help us with this process:

CircleCI
GitHub

Go to https://circleci.com/ and click on Sign Up and then Sign up with GitHub.


# WebAssembly a brief look into native code on the web 
- reference 
the following resource is of great help: https://www.nand2tetris.org/.
-  C/C++ code that we will be writing in depth, for those that are interested, a great resource is https://www.learn-c.org/.
- setting up our environment 
    + For Linux/OS X, this just means going to https://cmake.org/download/ 
- writting webassembly modules 
$ wat2wasm useless.wat

//code 
(module
    (func $add (param $p1 i32) (param $p2 i32) (result i32)
        local.get $p1
        local.get $p2
        i32.add
    )
    (export "add" (func $add))
)

//using in js 
WebAssembly.instantiateStreaming(fetch('useless.wasm')).then(obj => {    // nothing here});

- writting c/c++ for web, JavaScript (https://github.com/AssemblyScript/assemblyscript), a good chunk of modules will be written while utilizing system

- The Rust language (https://www.rust-lang.org/) provides us with a safer alternative to C/C++. 

- c/c++, Emscripten SDK to compile to WebAssembly. This can be found at https://emscripten.org/index.html.

-  floating-point representation can be found here: https://www.cprogramming.com/tutorial/floating_point/understanding_floating_point_representation.html.

- bit wise operators,  read up on them at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators.

- using sqlite,  https://github.com/kripken/sql.js/ and pull the repository into our local system.

porting sqlite to javascript (webassembly)

https://github.com/sql-js/sql.js

- other game/ui relative features 

Blazor: https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor
Unity: https://blogs.unity3d.com/2018/08/15/webassembly-is-here/
Qt: https://doc.qt.io/qt-5/wasm.html








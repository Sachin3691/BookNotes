Software Architecture with Python=Anand;Note=Erxin

# Overview 
- how python fits into an application architecture 
- architecturally significant demands and how to determine them 
- complete understanding of different architectural quality requirements 
    + maintainability or reusability 
    + testability and scalability 
    + performance, usability and security 
    
- section 1 principal 
- section 2 defining modifiable code 
- section 3 define testable code 
- performance improvement sdlc 

# Defining software architectural 
- versus design 
    + fundamental organization of a system embodied in its components, their relationships to each other, and to the environment, and the principal guiding its design and evolution 
        * architecture 
        higher level of description structures 
        
        questions entailing decision making 
        
        * design 
        components of system 
        subsystems involved in making system 
        
        * problems 
        what modules to split code into 
        how to organize modules 
        which classes or modules to assign the different functionalities to? 
        which design pattern should I use for class C? 
        how to my objects interact at runtime 
        what are the message passed and how to organize the interaction? 
        
- different between architecture and design 
    + architecture 
    design of the system 
    
    
    + software design 
    details, typically at the implementation level of the various subsystems and components that make up those subsystems 
    
    + comes up in both contexts 

- aspects of software architectural 
    + system, collection of organized components 
    + aspects, structure 
    + environment 
    + stakeholder 
    
- characteristics of software architecture 
    + most important characteristics
    defines structures 
    captures early design decisions 
    manages stakeholder requirements 
    influences organizational structure 
    influences by its environment
    often conforms to pattern 
    
    + best represents as structural details of the system 
    + common practice for practitioners to draw the system architecture 
    
    structure components 
    
    class graph 
    
    + examples 
    runtime structure 
    deployment 
    strongly connected to quality attributes 
    
    the module structures 
    code is broken down and organized into modules 
    packages for task breakdown 
    direct brearing on the maintainability and modifiability 
    
    organize code view to extensibility 
    parent classes in separate well defined packages 
    
    proper documentation and configuration 
    easily extensible by external modules 
    
    dependent on external third-party developers 
    provides setup or deployment steps 
    
    pull the dependencies from external sources 
    
- early design decisions 
    + corollary to characteristics show previously 
    + helps architect to focus on some core elements 
    + result of early design decisions 
    + decisions play major role in further development 
    
- architecture influences by its environment 
    + quality attributes 
    + standard conformance 
    large set of governing standards for software 
    banking insurance 
    external technical context 
    
     organizational constraints 
     + professional context 
    
- quality attributes 
    + modifiability, ease + flexibility 
    local 
    
    non-local 
    
    global 
    
        * factors affecting modifiability 
        size of module 
        number of team members 
        external third-party dependencies 
        wrong use of module API 
        
    + testability 
    
    + scalability 
    performance acceptable limits 
    horizontal 
    vertical scalability 
    horizontal scalability 
    
    + performance 
    work per unit ratio 
    performance 
    response time 
    latency 
    throughput 
    
    + security 
    avoid damage to system data and logic from unauthenticated access 
    
    security crisis or attack occurs when illegally accessed
    
    deny access to legitimate users 
    roles: user > db admin > reports > admin 
    security aspect: integrity origin authenticity 
    + deployability 
    use of containers 
    standardized infrastructure 
    standardized configuration 
    module structure 
    production versus 
    development ecosysstem support 
  
  
# Modifiable and readable code 
- understanding readability 
    + antipatterns 
    spaghetti code 
    big ball of mud 
    copy-paste programming 
    ego programming 
    
    + PEP-8 

- fundamentals of modifiability 
    + simple function signature API 
    + no two way coupling 
- exploring strategies for modifiability 
    + late binding technique 
    plugin 
    brokers lookup service 
    notification services 
    deployment time binding 
    using creational pattern 
- metrics tools for static analysis 
code smell 
cyclomatic complexity 
running static checkers 
    + tools 
    pylint 
    pyflakes 
    mccabe 
    pycodestyle 
    flake8 
    
    + code smells 
    design problems, negative impact development
    
    class level 
    function level 
- refactoring codes 
    fix complex code 
    |
    V
    do an analysis of the code 
    |
    V
    fix code smells 
    |
    V
    run checkers 
    |
    V 
    fix low-hanging fruits 
    |
    V 
    perform a final check using the tools 
    
    
# defining testable code 
- understanding testability 
aspects of software testability 

the degree of ease with which a software system exposes its faults through execution based testing 

- gives up its faults easily to tester 
- behave in predictable way 
- less amenable to testing 
- deterministic behavior, important to assure testability of system 
- testability and related attributes 
    + substructures of the system 
    + system easily identifiable to subsystems 
    + becomes less testable if 
    software system 
- aspects of software testing 
security 
functional, white box, black box 
usability 
installation 
performance, load testing, stress testing, scalability 
accessibility 

- control and isolate external dependencies 
need to load/save data to/from a database 
test running on specific times of day 
require fetching data from URL on the web 

- data sources 
read from a database 

- techniques 
stubs 
mocks 
fakes 
    
- white box testing 
    + unit testing 
    function test 
    
    using nose2 to execute the python test 
    
    + pytest 
    
    + integration tests, before the delivery test 
    software system functional type of testing 
    importance of integration tests 
    verify functional performance, and other quality requirement 
    deliver some piece of functionality 
    each component defined its own unit test 
    defined after unit testing, and before validation testing 
    
    + big bang 
    all components integrated and tested at end of development 
    saves time for development 
    not give enough time to test critical modules 
    no specific software 
    define their own specific integration test frameworks 
    popular webtest frameworks 
    
    + test automation using selenium webdriver 
    
- code coverage, it is measured as the degree to which the source code under test is covered by a specific test suite 

expose large percentage of source code to tests 

metrics reported as percentage of lines of code 

test example datatimehelper 

    + coverage 
    $ pip install coverage 
    
    $ pip install cov-core 
    for nose2 
    
    $ pip install pytest-cov 
    
- mocking things up 
patch support of unit test.mock 
provided by unit test is more poweful 
class that performs keyword search on large dataset 
returns results ordered by weightage 
dataset stored in database, results returned as list of tuples 
relevance is hit weightage 

- doctests 
inline unit test 
    + function 
    + class or module documentation 
    
works by looking pieces of text in code documentation

executing sessions 

- TDD with Palindromes 
    + test driven development 
    + tdd with palindrome development 
    
    agile practice of software development 
    mapped to specific test case 

    
# Performance improvisation 
- performance, system meets its throughput and latency requirements 

measured, response time/latency/throughput 
latency, time taken for application to complete request 
throughput, rate at which system process its input 

function of software hardware capabilities 
increasing performance 
software tuned for hardware in optional fashion 

- software performance engineering 
includes activities of software engineering and analysis 
performance testing and feedback, SDLC software development life cycle 
approach measurement based and waits 
develops performance models early in SDLC 
function of software hardware capabilities 
meet performance requirements in multiple interations 

- approaches 
    + SDLC
functional requirements specification 
|
V 
design and architecture 
|
V 
application development and unit testing 
|
V
integration test and UAT 
|
V 
production development 

    + Performance engineering life cycle 
Non-functional requirements specifications 
|
V 
performance modeling and design for performance 
|
V 
performance unit testing and code optimization 
|
V 
system performance testing 
|
V 
system monitoring and capability management 
- tools 
    + performance testing and diagnostics 
    stress testing tools 
        * supply workload to system 
        * simulate high stress 
        * test the robustness of system 
        * example, http perf, apachebench, loadrunner, apache jemter, locust 
    
    + performance and metrics gathering and instrumentation 
    monitoring tools 
        * generate performance metrics 
        * dynamic program analysis 
        * optimization with profiling 
        
- performance complexity 
response to changes in the input size 
time spent in executing the code 
big O notation 
order of the function 

- measuring performance 
context manager 
code using timeit module 
time complexity using the graphs 
measure CPU time with the timeit function 

    + timeit output 
real, actual wall clock time for the operation, from start to finish, sleeps, block, i/o, etc 
user, CPU time spend in user mode outside of kernel, sleep, i/o wait doesn't count into user mode 
sys, kernel time to run the program 

    + use context manager 
from contextlib import contextmanager

@contextmanager 
def foo():
    pass 
    
    + timeit module 
allows to measure time taken to execute small code snippets 
execute as module 

- profiling 
profilers 
modules in the python standard library 
third party libraries 
deterministic profiling is not very expensive operation 

    + cProfile and Profile module 
support deterministic profiling 
minics interface of the profile module 
reports statistics converted into reportable results 

    + the primes module is used to calculate prime number 
    from primes import Prime 
    
    + use the pstats module allow to sort the profile output 
    
    + line profiler, third party module 
    kernprof.py is a script provided by the line profiler 
    application performance line by line profiling 
    
    $ pip3 install line_profiler 
    
    profile function by add decorator @profile 
    
    + profile by memory consumption 
    $ pip3 install memory_profiler 
    
- other tools 
    + object graph
    $ pip3 install objgraph 
    
    install 
    $ sudo apt install graphviz xdot -y 
    
    + pympler, print object memory usage 
    $ pip3 install pympler 
    
    muppy package to print object info 
    
- programming for performance - data structures     
    + common python data structures 
    + best and worst performance scenarios 
    + ideal fit 
    
    + list
absence of lookups 
non-hashable elements 
indexed object     
    
    + dictionary 
storing arbitrary data 
random insertion order 
no duplicate elements 

    + set 
intermediate data 
keeping heterogeneous 
processing intermediate data    

    + immutable containers, tuple 
store large heterogeneous ordered immutable data 
less memory overhead 

    + collection modules 
deque, double direct queue 
default dict, provide missing value for dict 
ordered dict
counter 
chain map, groups multiple dictionaries, iterating over multiple dictionaries as a view 
tuple 
    
    
    
    
    
    
    
    
    
    
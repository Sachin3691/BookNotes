XML W3School Tutorial;Note = Erxin

# XPath
## Introduce
- XPath is used to navigate through elements and attributes in an XML document.
    * XPath is a syntax for defining parts of an XML document
    * XPath uses path expressions to navigate in XML documents
    * XPath contains a library of standard functions
    * XPath is a major element in XSLT
    * XPath is a W3C recommendation
- XPath expression, to select nodes, like file path
- XPath Standard functions, build-in functions for string, numeric, date and time comparison, node and QName manipulation...
- Current XPath version 2.0

## XPath Terminology
- Nodes, there are seven kinds of nodes
    * element
    * attribute
    * text
    * namespace
    * processing-instruction
    * comment
    * document nodes
- Relation ship of nodes
Parent, Children, siblings, ancesstors, descendants

## XPath Syntax
- Select nodes, xpath use path expression to select nodes
    * nodename
    * /, select from the root node
    * //, select nodes from current node
    * ., select current node
    * .., select current node's parent
    * @, select attribute
- Predicates, use to find a specific node or a node that contains a specific value. It's always embedded in square brackets.
    * /root/element[1], first element, (IE5 and later is started from 0)
    * /root/element[last()]
    * /element[last()-1]
    * /element[position()<3], first and second selement
    * //title[@lang], all the title element have lang attribute
    * //title[@lang="eng"]
    * /bookstore/book[price>35.00], select all the book elements of bookstore element that have a price element with a value greater than 35.00
    * /bookstore/book[price>35.00]/title
- select unknown nodes
    * *, match any element node
    * @*, match any attribute node
    * node(), match any node of any kind
- select several pathes, use | to seperate multiple selector
    
## XPath Axes
- an axis define a node-set relative to the current node
    * ancestor
    * ancestor-or-self
    * attribute
    * child
    * desendant
    * desendant-or-self
    * following, select everything in the document after the closing tag of the current node
    * following-sibling, select all siblings after the current node
    * namespace, select all namespace node of current node
    * parent
    * preceding, select all nodes that appear before the current node in the document, except ancestors, attribute nodes and namespace nodes
    * preceding-sibling, select all sibling before the current nodes
    * self
- location path expression, can be absolute or relative, a absolute path start with (/), and relative path doesn't
- ex.
    * child::book, Selects all book nodes that are children of the current node
    * attribute::lang, Selects the lang attribute of the current node
    * child::*, Selects all element children of the current node
    * attribute::*, Selects all attributes of the current node
    * child::text(), Selects all text node children of the current node
    * child::node(), Selects all children of the current node
    * descendant::book, Selects all book descendants of the current node
    * ancestor::book, Selects all book ancestors of the current node
    * ancestor-or-self::book, Selects all book ancestors of the current node - and the current as well if it is a book node
    * child::*/child::price, Selects all price grandchildren of the current node

## XPath Operators
- operators can be used in XPath expression
|, +, -, *, div(division), =(equal), !=, <, <=, >, >=, or, and, mod
- Loading the xml document
Code for most modern browsers:
var xmlhttp=new XMLHttpRequest()
Code for old Microsoft browsers (IE 5 and 6):
var xmlhttp=new ActiveXObject("Microsoft.XMLHTTP")
- selecting nodes
xmlDoc.selectNodes(xpath);
xmlDoc.evaluate(xpath, xmlDoc, null, xpathResult.AnyType, null);

## XPath Syntax and semantics
- source page: http://en.wikipedia.org/wiki/XPath
- each location step step has three components:
    + an axis
    + a node test
    + zero or more predicates.
- An XPath expression is evaluated with respect to a context node
- The XPath syntax comes in two flavours: 
    + the abbreviated syntax
        * /A/B/C
        The XPath syntax is designed to mimic URI (Uniform Resource Identifier) and Unix-style file path syntax.
        * More complex expressions can be constructed by specifying an axis other than the default 'child' axis, a node test other than a simple name, or predicates, which can be written in square brackets after any step. For example, the expression
        A//B/*[1]
        selects the first element ('[1]'), whatever its name ('*'), that is a child ('/') of a B element that itself is a child or other, deeper descendant ('//') of an A element that is a child of the current context node
    + The full syntax is more verbose, Here, in each step of the XPath, the axis (e.g. child or descendant-or-self) is explicitly specified, followed by :: and then the node test, such as A or node() in the examples above
        * the equal full syntax of /A/B/C
        /child::A/child::B/child::C
        * the equal full syntax of A//B/*[1]
        child::A/descendant-or-self::node()/child::B/child::*[position()=1]
- Axis Specifiers
FULL SYNTAX      ABBREVIATED    NOTES
                  SYNTAX
ancestor 		
ancestor-or-self 		
attribute 	        @ 	        @abc is short for attribute::abc
child 		                    xyz is short for child::xyz
descendant 		
descendant-or-self 	// 	        // is short for /descendant-or-self::node()/
following 		
following-sibling 		
namespace 		
parent 	            .. 	        .. is short for parent::node()
preceding 		
preceding-sibling 		
self 	            . 	        . is short for self::node()
    + ex.
        * As an example of using the attribute axis in abbreviated syntax, //a/@href selects the attribute called href in a elements anywhere in the document tree.
        * h3[.='See also'] selects an element called h3 in the current context, whose text content is See also.
- Node tests, Node tests may consist of specific node names or more general expressions.
the namespace prefix gs has been defined, 
//gs:enquiry will find all the enquiry elements in that namespace
//gs:* will find all elements
Other formate
    + comment()
    + text()
    + processing-instruction() 
    finds XML processing instructions such as <?php echo $a; ?>. In this case, processing-instruction('php') would match.
    + node(), find all nodes
- Predicates, expressions in square brackets, can be used to restrict a node-set to select only those nodes for which some condition is true. 
    + There is no limit to the number of predicates in a step, and they need not be confined to the last step in an XPath. 
    + the value of the predicate is numeric, it is interpreted as a test on the position of the node.
    + the expression a[/html/@lang='en'][@href='help.php'][1]/@target selects the value of the target attribute of the first a element among the children of the context node that has its href attribute set to help.php, provided the document's html top-level element also has a lang attribute set to en
    + Predicate order is significant if predicates test the position of a node. Each predicate 'filters' a location step's selected node-set in turn.
- functions and operators, define in xpath 1.0
    + The available operators are:
    The "/", "//" and "[...]" operators, used in path expressions, as described above.
    A union operator, "|", which forms the union of two node-sets.
    Boolean operators "and" and "or", and a function "not()"
    Arithmetic operators "+", "-", "*", "div" (divide), and "mod"
    Comparison operators "=", "!=", "<", ">", "<=", ">="
    + The function library includes:
    Functions to manipulate strings: concat(), substring(), contains(), substring-before(), substring-after(), translate(), normalize-space(), string-length()
    Functions to manipulate numbers: sum(), round(), floor(), ceiling()
    Functions to get properties of nodes: name(), local-name(), namespace-uri()
    Functions to get information about the processing context: position(), last()
    Type conversion functions: string(), number(), boolean()
- node set functions
position(), count(node-set) returns the number of nodes in the node-set supplied as its argument
- string functions
string(object)
concat(str0, str1, ...)
starts-with(s1, s2), test s1 is start with s2
contains(s1, s2)
substring(string, start, length?), start is count from 1
substring-before(s1, s2), return the substring before the specify s2
substring-after(s1, s2)
normalize-space(string?), all leading and trailing whitespace is removed and any sequeneces of whitespace characters are replace by a single space
- boolean functions
not(boolean)
true()
false()
- number functions
sum(node-set), converts the string values of all the nodes found by xpath argument and convert to number then return the sum
- combine the xpath expression
Entire node-sets can be combined ('unioned') using the vertical bar character |. Node sets that meet one or more of several conditions can be found by combining the conditions inside a predicate with 'or'.
- operators in xpath 2.0
+, -, *, div, mod, idiv, Arithmetic on numbers, dates, and durations
=, !=, <, >, <=, >=, General comparison: compare arbitrary sequences. The result is true if any pair of items, one from each sequence, satisfies the comparison
eq, ne, lt, gt, le, ge, Value comparison: compare single items
is, Compare node identity: true if both operands are the same node
<<, >>, Compare node position, based on document order
union, intersect, except 	Compare sequences of nodes, treating them as sets, returning the set union, intersection, or difference
and, or 	boolean conjunction and disjunction. Negation is achieved using the not() function.
to, 	defines an integer range, for example 1 to 10
instance of, 	determines whether a value is an instance of a given type
cast as, 	converts a value to a given type
castable as,	tests whether a value is convertible to a given type
- functions in xpath 2.0
    + General string handling
 	lower-case, upper-case, substring, substring-before, substring-after, translate, starts-with, ends-with, contains, string-length, concat, normalize-space, normalize-unicode
    + Regular expressions
 	matches, replace, tokenize
    + Arithmetic 	
    count, sum, avg, min, max, round, floor, ceiling, abs
    + Dates and times
 	adjust-dateTime-to-timezone, current-dateTime, day-from-dateTime, month-from-dateTime, days-from-duration, months-from-duration, etc.
    + Properties of nodes
 	name, node-name, local-name, namespace-uri, base-uri, nilled
    + Document handling
 	doc, doc-available, document-uri, collection, id, idref
    + URIs
 	encode-for-uri, escape-html-uri, iri-to-uri, resolve-uri
    + QNames
 	QName, namespace-uri-from-QName, prefix-from-QName, resolve-QName
    + Sequences
 	insert-before, remove, subsequence, index-of, distinct-values, reverse, unordered, empty, exists
    + Type checking
 	one-or-more, exactly-one, zero-or-one
- xpath 2.0 backwards compatibility
When using XSLT 2.0, this mode is activated by setting version="1.0" as an attribute on the xsl:stylesheet element. 
xpath 1.0 have more relaxed about type conversion ex.
("4" > "4.0") xpath 1.0 will do number comparison; xpath 2.0 will do string comparison
    
    
# XLink
## XLink introduction
- XLink defines a standard way of creating hyperlinks in XML documents. XPointer allows the hyperlinks to point to more specific parts in the XML document.

# XSLT
## XLST introduction
- XSL stands for EXtensible Stylesheet Language, and is a style sheet language for XML documents.

# XQuery
## XQuery introduction
- XQuery is to XML what SQL is to database tables. XQuery was designed to query XML data.
    
 # XML Schema Tutorial
 ## XML Schema introduction
 - w3c school link
 http://www.w3schools.com/Schema/default.asp
 - XML Schema is more powerful than DTDs, XML-based alternative to DTD.
 - ex.
 <?xml version="1.0"?>
 <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
     <xs:element name="note">
       <xs:complexType>
         <xs:sequence>
           <xs:element name="to" type="xs:string"/>
           <xs:element name="from" type="xs:string"/>
           <xs:element name="heading" type="xs:string"/>
           <xs:element name="body" type="xs:string"/>
         </xs:sequence>
       </xs:complexType>
     </xs:element>
 </xs:schema>
- xml syntax rules
	* it must begin with the XML declaration
	* it must have one unique root element
	* start-tags must have matching end-tags
	* elements are case sensitive
	* all elements must be closed
	* all elements must be properly nested
	* all attribute values must be quoted
	* entities must be used for special characters
- XML schema compare with dtd
    * ex, a simple xml doc
    <?xml version="1.0"?>
     <note>
       <to>Tove</to>
       <from>Jani</from>
       <heading>Reminder</heading>
       <body>Don't forget me this weekend!</body>
     </note>
    * it's dtd doc
    <!ELEMENT note (to, from, heading, body)>
    <!ELEMENT to (#PCDATA)>
    <!ELEMENT from (#PCDATA)>
    <!ELEMENT heading (#PCDATA)>
    <!ELEMENT body (#PCDATA)> 
    * an equivalent  xml schema
     <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
     targetNamespace="http://www.w3schools.com"
     xmlns="http://www.w3schools.com"
     elementFormDefault="qualified">
     <xs:element name="note">
       <xs:complexType>
         <xs:sequence>
           <xs:element name="to" type="xs:string"/>
           <xs:element name="from" type="xs:string"/>
           <xs:element name="heading" type="xs:string"/>
           <xs:element name="body" type="xs:string"/>
         </xs:sequence>
       </xs:complexType>
     </xs:element>
     </xs:schema>   
    * add dtd reference in xml file
    <!DOCTYPE note SYSTEM "http://www.w3schools.com/dtd/note.dtd">
    * add xml schema reference in xml file
    <note 
    xmlns="http://www.w3schools.com" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.w3schools.com note.xsd">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
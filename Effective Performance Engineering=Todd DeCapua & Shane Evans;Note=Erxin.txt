Effective Performance Engineering=Todd DeCapua & Shane Evans;Note=Erxin

# Thrive in the new
- test application performance 
http://www.hpe.com/software/insights 

support:
mobile 
web 
network 
simulate constrained environment 


# Chapter 1, Getting started 
- Peroformance Engineering, represent a cultural shift in the way organizations view their essential processes. It embraces practices and capabilities that build quality and performance throughout an organization. 

PE embraces practices and capabilities

- google culture based on 10 things 
	+ performance culture is a team spot 
	+ mobile networks add a tremendous amount of latency 
	+ we are not our end users. the new devices and fast networks we use are not necessarily what our users are using 
	+ 40% people abandon a site that takes longer than 2-3 seconds to load 
	+ performance cops(developers or deigners who enforce peroformace) is not sustainable 
	+ the first step is to gather data, look at your traffic stats load stats and render stats to better understand the shap
	+ conduct performance experiments on your site 
	+ test across devices to experiments 
	+ add performance into your build tools to automatically performan optimizations and build a dashboard 
	+ surfacing your team's performance data 
	+ celebrating performance wins both internally and externally 


# Overview of Performance Engineering
- mike cohn's user story template 
As a/an		 I want to...											So that...
moderator	create a new game by entering		  I can start inviting estimators 
						a name and optional description
...

- breakdown of epic to tasks 
epic, a very large idea or goal 
	\-Story, one of many work concepts to achieve an epic 
		\- acceptance test criteria, defined objectives to consider a story done 
			\- tasks one of many specific work items to complete a story 
			
	+ example 
story												   acceptance test criteria 
as a father i want a						   must carry 2 adults and 3 children
vehicle that can go							must tow a 2000lb trailer 
forward, left, right,						   must go at least 60 mph in any direction
and backward so 
that i can safely get my 
family places

	+ example of dev/test organization 
	the code is included in proper branch in the source code control system 
	the code compiles from a clean checkout without errors using production branch 
	the code is appropriately covered with unit test and all tests are passing using the production branch 
	the code has peer reviewed by another developer 
	database changes have been reviewed and approved by a DBA
	the code has passed integration regression, stress and load testing 
	application support is aware of the backlog item and the system impact
	deployment and rollback instructions are defined, tested and documented 
	
	+ use history data to compare the performance testing data 
	
- security 
- monitor 
- usability 
	+ net promoter score, was developed by Fred Reichheld, Bain& Company. it's a way of measuring user satisfaction 
	
	+ user sentiment score, developed by hpe is created by a sentiment analysis
	
- performance engineering within usability 
	+ the time it takes for an end user to complete a task 
	+ workflow simplicity reflects the experience of the end user in being able to easily learn and navigate the interface 
	+ success rate is a measurement of what percentage of end users were able to complete the task they set out to achieve 
	+ subjective feedback tends to be a narratie of how users felt about the overall experience 
	+ error rate is percetnage of time an end user received an error or failure while using the interface to perform a task 
	+ heatmap and eye tracking are another way to capture seemingly subjective feedback in an objective way 
- design
	+ system design 
	+ infrastructure architecture, provides for undestanding and prototyping the various components and dependences 
	+ application architecture 
	+ deployment models
	+ resiliency, when your product or service experiences a disruption it can continue to deliver value to your end user 
	+ scalability 
- development 
	+ code framework and service reuse 
	+ metadata repository 
	+ automated tests 
	+ lifecycle virtualizations, creating production like environment within your pre-production environment is often expensive and labor-intensive 
	+ quality gates
	
dev -> BVT, build verification															  |virtual env
			development standalone env for build verification				|
			verify, app deployment															 |
		-> dev IT, development integration env									  |
			execution of smoke tests														   |
		-> QA integrated env																	|
			execution of workflow tests													  |
			execution of regression tests 
			execution of functional tests 
		-> pre-product QA staging env													  |physical env 
			execution:																					 |
			workflow tests																			 |
			regression tests																		   |
			performance tests																	   |
			release coordination																	|
		-> production/release																	  |

- test 
- build result 
- canary deployment approach 
- support 
    + threshold analysis and automated migration implementation 
    + incident management, root-cause analysis and reporting 
    + re-create production incidents pre-production 
    
- stackholders
- the list: 102 questions to ask 
    + server sizing 
    how many application servers are needed to support the customer 
    + server tuning and optimization 
    which specific hardware configration provide the best performance 
    + capability planning 
    + thrid-party validation 
    + security exposure 
    + infrastructure 
    + browser/user profile issues 
    + internet issues 
    + site web pipe issues 
    how much bandwidth does the site have 
    + brder router issue 
    what kind of load-balancing are the multiple pipes configured for 
    + load-balance issues 
    what type of load-balancing scheme is used 
    + time out 
    + do any connection pool?
    + peripheral systems issues 
    + external systems issues 
    + distributed hosting issues 
    + firewall issues 
    + intrusion detection systems 
    + application 
    + web server issues 
    + application server issues 
    + database 
- security 
    + firewalls and multiple DMZs
    + intrusion detection system 

# Proven practices of performance engineering 
- requirements, architecture and design 
    + dientfy componetns 
    + set performance budgets 
    + establish acceptace criteria 
    + plan for outliers 
    + build in performance culture 
    + prototype 
- introduction 
- scenario 
- challenges
- proven practices for devtest 
    + build performance into your unit tests 
    + build performance into your build validation test 
    + track the trends of results for system and components 
    + automate quality gates in the build in order to avoid perpetuation poorly performing components 
    + consider a branching strategy that enables you to "keep out" pieces that will break the code and/or make it performance poorly 
    
- key implementation consideration 
    + organizational 
    who is responsible for your builds?
    are they considering performance? 
    what does "pass" mean?
    
    + cultural 
    what happens when you break a build?
    how is progress/status socialized?
    
    + technical 
    how are you enabling automation across tools, teams and roles? 
    
# Chapter 4 
- tying it all together 
- top file software quality metrics 
    + committed storeis versus delivered results meeting doneness criteria 
    + production incidents over time and recurrence, the target for typical organization is 95% of committed stories delivered and zero production incidents 
    
- other performance engineering metrics 
    + release quality 
    + throughput 
    + workflow and transaction response time 
    + automated performance regression success rate 
    + forecasted release confidence and quality level 
    + breaking point versus current production as a multiplier 
    + defect density 
    
- automation 















Mercurial for mozillians;Note=Erxin

# Installing mercurial
- installing on windows 
$ pip install --upgrade Mercurial

- install on mac 
$ brew install mercurial 

- verify install  
$ hg debuginstall 


# Recommended versions 
# installing configuring extensions 
- add a line to your mercurial configuration file 
your global hgrc 
a per repository hgrc 

a per repository hgrc 

- install an extension by add a line under the 
[extensions] 
foo=path/to/extension 

- core extensions are almost everyone wants 
    + fsmonitor monitor file system changes 
[extensions]
fsmonitor=

- history rewriting 
    + histedit, similar to git rebase -i 
    $ hg histedit 
    
    + rebase, enable hg rebase command 
    
    + strip, enable delete changeset completely 
    
- core extensions to enable different workflows 
- 3rd party extensions, highly consider chg. a C wrapper for hg, hg can improve performance by avoid launch another python process 
    
    + evolve, The evolve extension opens up new workflows that harness Mercurial’s ability to record how changesets evolve over time.
    
    + githelp, for git user 

# configuring authentication
- your SSH config, ~/.ssh/config
Host hg.mozilla.org
  User me@mozilla.com

Host reviewboard-hg.mozilla.org
  User me@mozilla.com

  
The fingerprints of the host keys for hg.mozilla.org
ED25519 (server preferred key)
256 SHA256:7MBAdqLe8+aSYkv+5/2LUUxd+WdgYcVSV+ZQVEKA7jA hg.mozilla.org
256 SHA1:Ft++OU96cvaREKNFCJ6AiuCpGac hg.mozilla.org
256 MD5:96:eb:3b:78:f5:ca:19:e2:0c:a0:95:ea:04:28:7d:26 hg.mozilla.org

RSA
4096 SHA256:RX2OK8A1KNWdxyu6ibIPeEGLBzc5vyQW/wd7RKjBehc hg.mozilla.org
4096 SHA1:p2MGe4wSw8ZnQ5J9ShBk/6VA+Co hg.mozilla.org
4096 MD5:1c:f9:cf:76:de:b8:46:d6:5a:a3:00:8d:3b:0c:53:77 hg.mozilla.org


for reviewboard-hg.mozilla.org 
ED25519 (server preferred key)
256 SHA256:4zGDMk+ftX6ZmYX5A25HxqbtujOvv+MQGj99u931dwA reviewboard-hg.mozilla.org
256 SHA1:5K5e1UWQluIlbgsTDBUwY5k4Xqk reviewboard-hg.mozilla.org
256 MD5:0b:4c:0d:7e:3e:79:5a:6a:c9:bb:a2:3f:5d:d8:83:d9 reviewboard-hg.mozilla.org

RSA
SHA256:O6C9zLi4leD/mb4lPNmR50R1ampZgeEi7StDEbZDmyA
MD5:a6:13:ae:35:2c:20:2b:8d:f4:8d:8e:d7:a8:55:67:97


GPG signed document
curl https://hg.mozilla.org/hgcustom/version-control-tools/raw-file/tip/docs/vcs-server-info.asc > mozilla-vcs-info.asc
gpg --verify mozilla-vcs-info.asc

    + verify ssh connection 
 $ ssh hg.mozilla.org
 A SSH connection has been successfully established.

 Your account (me@example.com) has privileges to access Mercurial over
 SSH.

You are a member of the following LDAP groups that govern source control
access:

   scm_level_1

This will give you write access to the following repos:

   Try

You will NOT have write access to the following repos:

   Autoland (integration/autoland), Firefox Repos (mozilla-central, releases/*), ...

 You did not specify a command to run on the server. This server only
 supports running specific commands. Since there is nothing to do, you
 are being disconnected.
 Connection to hg.mozilla.org closed.
 
- authenticating with services. mozhg.auth contains a unified API for any Mercurial extension or hook wishing to obtain authentication credentials


# the DAG and mercurial 
- DVSC, distributed version control 
$ hg init repo 
$ cd repo 

repository history 
$ hg log -G 

add file 
$ hg add file 

commit 
$ hg commit -m "message"

check log 
$ hg log -G -T '{desc}'
-T '{desc}' tells Mercurial to only print the description or commit message from the changeset/node. Without it, output would be much more verbose.

- move between commits 
$ hg update/up checksum 

- Mercurial uses @ to represent the node currently attached to the working directory
$ hg log -G -T '{desc}'
@ D
|
o C
|
o B
|
o A

- merging branche,  multiple DAG branches, it is sometimes desirable to merge them back into one. The Mercurial command for performing this action is hg merge. 

$ hg merge checksum


# workflows 
- feature branches and head-based development 
- each branches tracks a specific feature or line of work 
- the general way feature brancehs/head-based development work is 
    1. set your starting point via hg up <starting node> 
    2. modify files 
    3. hg commit 
    4. repeat #2 and #3 until work is done 
    5. integrate DAG branch somehow (typically a rebase or merge)
    
    
hg log -G to help us sort through these commits.

- finding heads, can be used to see all repository heads 
$ hg heads 

hg heads can be useful to get a quick overview of all unmerged DAG branches.

- labeling
    + Bookmarks are specially behaving labels attached to changesets. 
    $ hg bookmarks 
    
    display all of the bookmarks 
    
    + branches, The use of Mercurial branches for feature development is highly discouraged. For Firefox, Mercurial branches are never used for tracking features.

    + Mercurial Queues (MQ) is a workflow extension that focuses on interacting with stacks of labeled patche. 
    
    doesn't works well 
    
- Refining what changesets are shown 
$ hg heads
$ hg bookmarks 
$ hg branches 
$ hg qseries 

We need a way to view the important information from the aforementioned commands, without the overload that hg log -G

- To label or not to label, The concept of label-less heads does not exist in Git: Git requires all heads to have a label (a Git branch name) or the head 

- hg wip 
It’s a custom hg wip command, a variation of hg log. You can see the DAG on the left, what looks like commit summaries in white, and what looks like usernames in mauve. 

http://jordi.inversethought.com/blog/customising-mercurial-like-a-pro/

Note in the DAG that this commit is marked with an “@”.

Revsets are a very useful language for selecting a subset of commits. Here you can see me talking about them


# using bookmarks 
- Instead of a numeric revision ID or alphanumeric SHA-1 (fragments), bookmarks provide human-friendly identifiers to track a

- pull and push bookmarks 
$ hg push -B my-bookmark user 

- official wiki for bookmarks 
https://www.mercurial-scm.org/wiki/Bookmarks

Bookmarks are references to commits that can be automatically updated when new commits are made. Can associate a name to a changeset  

Bookmarks can be active or inactive. Only a single bookmark can be active at any given time, and only a bookmark that points to the current revision can be active. Mercurial only tracks and updates the currently active bookmark (if there is any). 
    + active bookmark by update with its name 
    $ hg update --rev bookmark-name 
    
    + update to revision number will not active bookmark 
    
Mercurial will mark the incoming bookmark either with the path alias (e.g. feature@alice), or with a number if the remote i

    + create a bookmark 
    $ hg bookmark name 
    
    + update to 
    $ hg update bookmark-name 
    
    +  we can move the feature bookmark directly to match the tip. Note the need to use -f to force an existing bookmark to move.


 $ hg book -f hgweb-fix
 
working with remote repository 
$ hg pull -B bookmark 
bookmark along with the relevant changesets will be pulled to the client.
    
$ hg push -B bookmark and the bookmark along with the relevant changesets will be pushed to the server

in the hg log The asterisk (*) indicates that the bookmark is active, which means that it will move along if she makes a new commit. Because the active bookmark moves along when you commit, it will always point to the head of the branch you’re working on.

- incoming and outgoing bookmarks 
hg outgoing -B to see if there are any bookmarks in the local repository that aren’t present in the repository on the server (similarly, hg incoming -B will tell you about any bookmarks present on the server that do not exist in the local repository):


# performing common tasks 
- review old commits 
$ hg graft should be used to revive old commits.

hg graft recreated the original commit. The merging lines in the output above indicate that Mercurial invoked its merge resolution algorithm to as part of grafting

hg graft is roughly equivalent to git cherry-pick

- upgrading repository storage, upgrade of repository data to take advantage of the new storage format 

    + Run hg debugupgraderepo
    + re-clone the repo 
    
- The mozext extension replicates pushlog data to a local SQLite database during hg pull


# firefoxtree extension
- enhance the interaction with Firefox repositories 
The firefoxtree extension allows you to easily combine the separate remote repositories into a local, single, unified repository.

think of these repository labels as remote refs.

To view a summary of which repositories are on which changesets, run hg fxheads:


# working with a unified firefox repository 
- reference, http://mozilla-version-control-tools.readthedocs.io/en/latest/hgmozilla/unifiedrepo.html


# firefox workflow 
- optimally configure mercurial run 
bootstrap.py or 
$ mach bootstrap 

- you should also run mach bootstrap periodically to ensure mercurial support files are up-to-date 

- this workflow assume firefox-extension is actived 
- clone repo 
$ hg clone https://hg.mozilla.org/mozilla-unified firefox
$ cd firefox

- feature development 
$ hg pull 
$ hg up central 
$ hg commit 
$ hg push review  #push changes to MozReview to initiate code review 

    + reference mozilla review guide 
    http://mozilla-version-control-tools.readthedocs.io/en/latest/mozreview-user.html#mozreview-user
    
- changing code after reviews, for most workflow 
$ hg wip 
o   6139:5060abe260e9 gps  vcsreplicator: explicitly record obsolescence markers in pushkey messages
: o   5940:e16f6960cdeb gps  hgmo: update automationrelevance for Mercurial 3.8; r?smacleod
: o   5939:e62f4eb60ef3 gps  mozhg: fix test output for Mercurial 3.8; r?glob
: o   5938:f71be022e59c gps  global: upgrade Mercurial to 3.8.3 (bug 1277714)
:/
o   5937:5a8623230b7a gps  pushlog: convert user and nodes to bytes (bug 1295724); r=smacleod
: o   5717:9c2ca05479e9 gps  hgmo: handle obsolete changesets (bug 1286426); r?glandium

If you want to edit e16f6960cdeb, you would hg up e16f6960cdeb.

- squash the changesets together 
$ hg histedit

hg histedit --continue to continue with the history editing.

once all set submit to reveiw again 
$ hg push review 

- autolanding, if review passed 
You can access Autoland through the Land Commits option of the Automation menu. 

Autoland will attempt to rebase you commits on the head of the autoland repo for you automatically.

There was a file merge conflict during the base), an error will (eventually) be displayed in MozReview and you will have to rebase yourself and push the result back to MozReview and try the autoland request again.

$ $ hg push -r . inbound


# using mercurial in automation 
- read the scripting help topic 
$ hg help scripting (introduced in Mercurial 3.5) gives a Mercurial generic overview of how machines should consume Mercurial.

- using the command server,  python-hglib is the Python client and it can be installed via pip install python-hglib.

- debug 
When debugging Mercurial commands, consider adding --verbose or --debug to the command invocation to get Mercurial to print more information


# reporting issues with mercurial 
- report issue 
https://bugzilla.mozilla.org/enter_bug.cgi?product=Developer%20Services&component=Mercurial%3A%20hg.mozilla.org

- make bug reports more useful 
prove useful when reporting bugs:

--debug
When this option is present, Mercurial will print debug info to output. This may aid debugging hangs and other issues.
--traceback
When this option is present, Mercurial will dump its execution stack when aborted. Using –traceback plus ctrl+c is a good way to see which method is spinning the CPU.
--profile
Profile Mercurial execution and print a summary after execution. This is useful for debugging performance issues to see where Mercurial is spending most of its time.


# hg.mozilla.org
- reference 
http://mozilla-version-control-tools.readthedocs.io/en/latest/hgmo/index.html

# Github webhook
Mozilla collects and republishes GitHub Webhooks for a number of Mozilla’s organizations and projects.
- http://mozilla-version-control-tools.readthedocs.io/en/latest/githubwebhooks.html


# version control synchronization 
- http://mozilla-version-control-tools.readthedocs.io/en/latest/vcssync/index.html

# Cross channel l10n 
http://mozilla-version-control-tools.readthedocs.io/en/latest/cross-channel-l10n/index.html



















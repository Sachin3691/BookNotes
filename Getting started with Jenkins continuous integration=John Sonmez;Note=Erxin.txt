Getting started with Jenkins continuous integration=John Sonmez;Note=Erxin

# What is jenkins
- module 1
understanding jenkins
- module 2-3
getting up and running 
- module 4
extensibility(plugins)
- module 5
the big picture

- jenkins is open source
web based java tool
- highly extensible, there are many and many plugins 
- history
started around 2007 as Hudson  2009-2010 Turmoil in the ranks   2011 the great fizzure
---->                       ------------>                             Hodson split to jenkins
        rapid rise in 2008

- splitting of projects The Jenkins/Hudson Controversy, Give me GitHub or give me death!
- the problem, integrating is painful, developer woking in there own little cave 
- what is continue integration(CI)?
    + combine our code frequently and run unit test
    + have a build everything check in a code 
    + pluralsight course by JamesKovacs
    http://pluralsight.com/training/courses/TableOfContents?courseName=continuous-integration
    
    much deeper coverage of the topic

- where jenkins fits in?
    + setup jenkins on the build server
    + workflow
    developer -->check in --> source control 
        ^                       ^
        |                       |
        Report                get latest
        Back                    |
        +---------Jenkins-------+
                |    |
                |    V
                Build output
                
    + jenkins can notify develop automatically 
- summary
http://jenkins-ci.org/
http://hudson-ci.org/


# Installing Jenkins
- prerequisites
    + java 1.5 or higher
    + java in your path(optional, but preferred)
    + suggest use JDK
    + web server( only if you want to host outside of jenkins), jenkins can self host
    
- getting jenkins
    + distributes with .war, java pacakge 
    + or native package
    + download .war file and copy to the jenkins workspace which you specify
    .war file is a zip file, .jar is also a zip file
    
- starting jenkins
    + go to command prop 
    $ java -jar jenkins.war
    
    will create use home directory to create a jenkins folder. all the data and log will be save to the home directory
    after a while jenkins will start and running
    
    + testing the install 
    http://localhost:8080
    
    + command line options, change the running port
    $ java -jar jenkins.war --httpPort=8000 
    
    $ java -jar jenkins.war --httpPort=-1 --httpsPort=8000
    use https security connection
    
- getting the service installer
    + download the jenkins installer file, running jenkins as a service, install the *.msi
    
    manage jenkins|install jenkins as window service
    
- nodes
    + node uses
    use different build job for different operation system
    
- configuring a node
    + manage jenkins|manage nodes
    + add new node, set dumb slave
    + with plugin can add other different kinds of nodes
    name
        * set the executetor numbers for the slave # of executors
        * remote FS root, will be the root source folder 
        * usages
        utilized this slave as much as possible
        leave this machine for tied jobs only
        * launch method
        launch slave agents on unix machines via ssh
        launch slave agents via java web start
        launch slave via execution of command on the master
        let jenkins control this windows slave as a window service
        
        * availability
        keep only as much as possible
        schedual online
        
- setting up a node 
    + access the jenkins website from the client machine
    + manage jenkins|manage node
    + click previous created slave node and click launch 
    there are also other options to install jenkins slave
    
    java -jar slave.jar -jnlpUrl http://mario:8080/computer/NodeName/slave-agent.jnlp
    
    + after install the test node will online
    + also you could install the slave as window service, click the pop up window File|Install as service to make jenkins slave install as service 
    
- UI Tour
    + new job
    + people, if turn on authentication will list all the user
    + build history, will list all the build history
    + manage jenkins
        * configure system, set up most of the parameter such as JDK, Ant, Source Control, email notification
        * global security
        * reload configuration from disk 
        * manage plugins
        * system information, all the java variable and OS
        * system log
        * load statistics, display how often utilize a server
        * jenkins CLI, command line interface of jenkins
        * script console, Groovy script with
        * manage nodes
        * about jenkins, display the dependences
        * manage old data
        * install as windows service
        * prepare for shutdown, stop new build process
    + Build Queue
    
    
# Create a simple job
- Basic project
    + build script
    source code + tests
    + source control
    + jenkins
    
- set up jenkins with .net project, work with svn
    + looking at the code
    + build script is the solution file
    + install visual svn for manage svn
    
- moving to jenkins
check in changes -> get latest -> build source -> build tests -> run tests -> report results

any process fail will report as fail

    + diagram manual process
    + follow manual steps, should be able to manually do, then automatic it
    + get most basic automation working
    + add each step 
    + never leave the build in a failed state, want to make failed on jenkins mean something
    
- manually building 
    + get the source
    do a svn check out
    
    + open a visual studio command prompt
    navigate to the solution folder
    $ msbuild Solution.sln
    
    + run the test
    mstest /testcontainer:TestProjectPath\TestProject.dll
    
    will generate the result file *.trx file, the file could be open in visual studio
    
- build triggers, make the trigger chain together
    + after other projects
    + periodically
    + poll source control

- jenkins plugins
    + check the plugins installed in jenkins
    + jenkins plugins for run .net project, Jenkins|Manage Jenkins|mange plugins
    JENKINS MSTestRunner
    JENKINS MSTTest
    jenkins msbuild 
    
    + install the plugins from the available tab
    
- creating a job
    + new job
        * choose build a free-style software project
        * maven2/3 is a java build tool
        * build mult-configuration project
        * monitor an external job
        
    + choose the source control and path the repository apth
    
    + poll SCM, syntax, which is a cron symtax
    + after this you could run the job
    + save svn credential
    
- build steps
    + first build step 
    right click the build job and select the configure
    
    + set up the build step
    + add a visual studio project or solution using msbuild(which is add with the msbuild plugin)
    
    add build step, setup such as execute shell command 
    
    + finished setup the build process for msbuild
    
- enable auto refresh from jenkins will fresh the web page
- add tests
    + configure the job
    + add build step, choose run unit test with mstest
    + set the test file path
    + set the result file name *.trx
    
    the build step order could be drag and drop to change the sequence 
    
- workspaces choose a job and right click to select the workspace, the workspace contain the output 
- post build actions, could be email or analyse script, also could be a deployment action
- reporting test results
    + choose publish msbuild result report (added with plugin)
    + after build the result will be publish into the relative build # action
    

# plugins
- introduction
- plugin architecture
jenkins UI
A
|
+-> plugin --> source control
               triggers
               build steps
               results
               
- extensions points
    + http://wiki.jenkins-ci.org/display/JENKINS/Extension+points
    will list all the class can be extended 
    
- getting plugins
    + manage jenkins | manage plugins
    
    can manual update plugins, the available tab will list all the plugins

    + setup http proxy from the manage plugin page
    
- plugin wiki
http://wiki.jenkins-ci.org/display/JENKINS/Plugins

plugin by topick will list all the plugins

- useful plugins overview
    + source code plugins
    git, mecurial, tfs
    
    + trigger plugins
        * github pull request, cause a github trigger
        * join, run multiple job in parallel and allow configure project, all multiple projects run before a single job
        * locks and latches, control which parallel job
        
    + build tools
    copy artifacts
    fitness
    msbuild
    mstest runner
    nant
    powershell
    promoted builds, manage the process of build
    
    + wrapper plugins
    selenium RC, automatic test framework in a web browser
    VMWare, start a job can start a virtual machine and run a job in a virtual machine
    Virtual Box

    + notifier plugins
    Hipchat
    IRC, publish to a irc channel
    Twitter
    Jabber
    
    + Reporting plugins
    Cobertura, java tool for code coverage
    Findbugs
    MSTest
    NCover, code coverage
    PMD, statistic code coverage tool
    
    + artifact and UI plugins
    artifact deployer
    deploy, target to java, allow you automatic deploy to webserver
    
    chuck norris, keep things fun
    emotional jenkins
    claim, claim a build when it is broken some one will fix the build
    CI Game, keep scores and build for jenkins
    
- installing a plugin 
    + install the chuck norris plugin
    
    + manage jenkins|manage plugins|check it and download and install after restart
    make sure don't restart jenkins during some one running a job
    + post build action active chuck norris
    + check the plugin wiki for how to use it
    
- plugin configuration 
    + plugin may add some configuration section in the Manage Jenkins
    
    for example the msbuild plugin
    
    set up the msbuild exe file path 
    
    it's the global configuration in the manage jenkins menu
    
- security overview
    + Jenkins | Configure Global Security
    enable security
    
    + project base matrix 
    
    + the first use should be configure as administrator
    
    
# the big picture
- a case study
    + golden coders incorporated, software should be plated in gold
    
- the flow, golden flow of code check in for a software development
code checkin -> build code       ----------build unit test       -------> static code analysis
                modules build in parallel   unit tests run                  code generation
                build database              unit test run in parallel        doc generation
                                            selenium VMs started                    |
                                            acceptance tests run in parallel        |
                                                |                                   V
                                                |                                   Reports 
                                                |                                   created
                                                V
                                                deploy packaging
                                                |
                                                |
                                                V
                                                deployed to test every 4 hours
on failure, email notification chart room notification

- demo the flow
    + configure a build job
    + add build step, package build with command 
    + add with violation plugin
    + configure virtual box plugin and start a virtual box client to run a test, add new virtual box server
- stay calm
    + it takes time to build complex environment

- areas of discipline
    + unit testing
    + test coverage
    + acceptance testing
    + code quality metrics
    + notifications
    + documentation
    + deployments
    
    you too, can be a golden coder
    
- unit testing
    + depends on source code being built
    + never let them fail
    + keep them unit size
    + keep them short
    
- test coverage 
    + coverage doesn't mean quality
    + perhaps fail the build

- acceptance testing
    + can be show
    + takes serious effort
    + blog series: black box automatic test
    http://simpleprogrammer.com/getting-up-to-bat-series/
    
- code quality metrics
    + static analysis
    + java tools
    MPD
    FindBugs
    
    + .net tools
    FxCop
    StyleCop
    
    + set a threshold
    things should not get worse

- notifications
    + make failures known
    + don't false fail
    + multiple channels
    + analyze failures

- documentation, generate document in a jenkins job
    + source code doc generators
    + help file generation
    + api documentation

- deployments
    + jenkins is great for deploying
    + periodic deployments
    + manual deployments
    + reporting built in
    
- growing
    + parallelization is key
    + VMs are your friend
    + to the cloud
    






























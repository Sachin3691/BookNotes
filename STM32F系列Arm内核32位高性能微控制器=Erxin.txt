STM32F系列Arm内核32位高性能微控制器=Erxin

:Keil 公司简介
>Arm公司收购Keil, 并发布适合中国国内的Keil版本
>Arm在中国开设的网站, http://www.realview.com.cn
>MDK, mcu development kit
>coresight for cortex m3
支持8个断点, 运行时访问内存
原来Arm7, Arm9 只有2个

:kernel, 微内核
>rtx, 比ecos多了时间片分配
>ecos

:stm32 resource at st
http://www.stmicroelectronics.com.cn/internet/mcu/product/221020.jsp
http://www.arm.com
http://www.realview.com.cn

:stm32f105xx and stm32f107xx
>arm cortex m3 32-bit risc operating at 72mhz, (Flash memory up to 256 Kbytes and SRAM 64 Kbytes)
>three different package, from 64 pins to 100 pins
>stm32f107vc
	- three SPI and two of them could be multi use as I^2C
	- frequency 72mhz
	- operating voltage 2.0 ~ 3.6v
	- 12bit adc and dac
	- one I^2c
	- five USART, Universal Synchronous Asynchronous Receiver Transmitter
	- one usb otg fs
	- two can
	- ethernet, ethernet MAC  interface with dedicated  DMA and IEEE 1588 support
	- SRAM, 64kb
	- flash memory, 256kb
	- CRC (cyclic redundanc y check) calculation unit
	- NVIC, Nested vectored interrupt controller able to handle up to 67 maskable interrupt channels (not including the 16 interrupt lines of Cortex™-M3) and 16 priority levels.
	- EXTI, External interrupt/event controller 20 edge detector lines 
	- build in rc 8 mhz oscillator
	- three boot modes
		* Boot from User Flash
		* Boot from System Memory
		* Boot from embedded SRAM
	- power supply schemes
		* VDD = 2.0 to 3.6 V: external power supply for I/Os and the internal regulator. 
		* VSSA, VDDA = 2.0 to 3.6 V: external analog power supplies for ADC, Reset blocks, RCs and PLL
		* VBAT = 1.8 to 3.6 V: power supply for RTC,  external clock 32 kHz oscillator and backup registers (through power switch) when VDD is not present.
	- Power supply supervisor
	- RTC (real-time cl ock)
	- timers and watchdog  an advanced-control timer, four general-purpose timers, two basic timers, two watchdog timers and a SysTick timer(dedicated to real-time operating systems or as standard down counter).
	- I^2s, Inter-integrated sound
	- Minimum and maximum values
	- Loading capacitor, 50pf
	- pin input voltage
	- VPVD Programmable voltage detector level selection
	- PLL, phase lock loop
	
:STM32F10x Standard Peripherals Library
>overview, 3 abstraction levels
	- A complete register address mapping with all bits, bit fields and registers declared in C.
	- A collection of routines and data structures which covers all peripheral functions (drivers with common API). 
	- A set of examples covering all available peripherals with template projects for the most common development toolchains. 
>developing safety-critical systems, The Motor Industry Software Reliability Association’s Guidelines (MISRA)
C language in critical systems MISRA-C 2004 [1] a subset of C. This library is compliant with that.
>CMSIS, Cortex Microcontroller Software Interface Standard 
>Check the cold is compliant with MISRA-C2004, check your code for MISRA-C 2004 compliance using the IAR MISRA-C Checker
>Acronyms used in the firmware library
	- ADC, Analog/digital converter 
	- BKP, Backup registers 
	- CAN, Controller area network 
	- CEC, Consumer Electronics Control 
	- CRC, CRC calculation unit 
	- DAC, Digital to analog converter 
	- DBGMCU, Debug MCU 
	- DMA, DMA controller 
	- EXTI, External interrupt/event controller 
	- FSMC, Flexible static memory controller 
	- FLASH, Flash memory 
	- GPIO, General purpose I/O 
	- I2C, Inter-integrated circuit 
	- I2S, Inter-integrated sound 
	- IWDG, Independent watchdog 
	- NVIC, Nested vectored interrupt controller 
	- PWR, Power controller 
	- RCC, Reset and clock controller 
	- RTC, Reset and clock controller 
	- SDIO, SDIO interface 
	- SPI, Serial peripheral interface 
	- SysTick, System tick timer 
	- TIM, Advanced-control, general-purpose or basic timer 
	- USART, Universal synchronous asynchronous receiver transmitter 
	- WWDG, Window watchdog 
>naming convention
	- prefix ‘stm32f10x_’. PPP means the peripheral devices
	- All constants are written in upper case. 
	- Registers are considered as constants. Their names are in upper case.
	- Function name, ex. USART_SendData. Only one underscore is allowed in a function name to separate the peripheral acronym from the rest of the function name. 
	- initialize the PPP peripheral according to parameters specified in PPP_InitTypeDef are named PPP_Init, for example TIM_Init. 
	- reset the PPP peripheral registers to their default values are named PPP_DeInit, for example TIM_DeInit. 
	- fill the PPP_InitTypeDef structure with the reset values of each member are named PPP_StructInit, for example USART_StructInit. 
	- enable or disable the specified PPP peripheral are named PPP_Cmd, for example USART_Cmd. 
	- enable or disable an interrupt source of the specified PPP peripheral are named PPP_ITConfig, for example RCC_ITConfig. 
	- enable or disable the DMA interface of the specified PPP peripheral are named PPP_DMAConfig, for example TIM_DMAConfig. 
	- configure a peripheral function always end with the string ‘Config’, for example GPIO_PinRemapConfig. 
	- check whether the specified PPP flag is set or reset are named PPP_GetFlagStatus, for example I2C_GetFlagStatus. 
	- clear a PPP flag are named PPP_ClearFlag, for example I2C_ClearFlag. 
	- check whether the specified PPP interrupt has occurred or not are named PPP_GetITStatus, for example I2C_GetITStatus. 
	- clear a PPP interrupt pending bit are named PPP_ClearITPendingBit, for example I2C_ClearITPendingBit. 
>code rules, specific variable are already defined with a fixed type and size in stm32f10x.h
	typedef enum 
	{ 
	  FALSE = 0, 
	  TRUE = !FALSE 
	} 
	bool; 
	typedef enum { 
	  RESET = 0, 
	  SET = !RESET 
	} 
	FlagStatus, ITStatus, BitStatus; 
	typedef enum { 
	  DISABLE = 0, 
	  ENABLE = !DISABLE 
	} 
	FunctionalState; 
	typedef enum { 
	  ERROR = 0, 
	  SUCCESS = !ERROR 
	} 
	ErrorStatus; 
>All Peripheral’s registers are define in stm32f0x.h
>Peripheral declaration 
	#define PERIPH_BASE ((u32)0x40000000) 
	#define APB1PERIPH_BASE PERIPH_BASE 
	#define APB2PERIPH_BASE (PERIPH_BASE + 0x10000) 
	... 
	/* SPI2 Base Address definition*/ 
	#define SPI2_BASE (APB1PERIPH_BASE + 0x3800) 
>Registers bits 
	PPP_<register_name>_<bit_name> 
>Bit-Banding, Cortex-M3 memory map includes two bit-band regions. All the STM32F10x peripheral registers are mapped in a bit-band region. consequently intensively used in functions which perform single bit set/reset in order to reduce and optimize code size. 
	- Mapping formula 
	bit_word_offset = (byte_offset * 32) + (bit_number * 4) 
	bit_word_addr = bit_band_base + bit_word_offset 
	where: 
	bit_word_offset is the position of the target bit in the bit-band memory region 
	bit_word_addr is the address of the word in the alias memory region that maps to the targeted bit. 
	bit_band_base is the starting address of the alias region 
	byte_offset is the number of the byte in the bit-band region that contains the targeted bit 
	bit_number is the bit position (0-7) of the targeted bit. 
>stm32f10x standard peripheral's library architecture
	Application Layer (user code)
	Library Layer(stm32f10x standard peripherals driver)
				 (cmsi layers, core peripheral access layer +
				 stm32f10x device peripheral access layer)
	Hardware (STM32 MCU)
>STM32F10x Standard Peripheral's Drivers files 
application.c<-stm32f10x.h<-stm32f10x_it.h<-stm32f10x_conf.h<-misc.h
						    core_m3.h						  stm32f10x_ppp.h
							system_stm32f10x.h
>CMSIS files
	stm32f10x.h,  CMSIS Cortex-M3 STM32F10xxx device peripheral access layer header file. This file contains: 
		configuration section that allows to select: 
		-  the device used in the target application 
		-  to use or not the peripheral’s drivers in application code
			#define USE_STDPERIPH_DRIVER 
		-  to change few application-specific parameters such as the HSE crystal frequency 
		data structures and the address mapping for all peripherals 
		peripheral's registers declarations and bits definition 
		macros to access peripheral’s registers hardware 
	system.stm32f10x.h,  CMSIS Cortex-M3 STM32F10xxx device peripheral access layer system header file. 
	system.stm32f10x.c,  CMSIS Cortex-M3 STM32F10xxx device peripheral access layer system source file. 
	startup_stm32f10x_cl.s, Connectivity line devices startup file. 
	startup_stm32f10x_xl.s, XL-density devices startup file.  
	startup_stm32f10x_hd.s, High-density devices startup file. 
	startup_stm32f10x_hd_vl.s, High-density Value line devices startup file. 
	startup_stm32f10x_md.s, Medium density devices startup file. 
	startup_stm32f10x_md_vl.s, Medium density Value line devices startup file.  
	startup_stm32f10x_ld.s, Low-density devices startup file. 
	startup_stm32f10x_ld_vl.s, Low-density Value line devices startup file.  
>stm32f10x standard peripheral library files
	stm32f10x_conf.h, Peripheral’s drivers configuration file 
	stm32f10x_ppp.h, Header file of PPP peripheral 
	stm32f10x_ppp.c, Driver source code file of PPP peripheral written in C language 
	stm32f10x_it.h, Header file including all interrupt handlers prototypes 
	stm32f10x_it.c,  Template source file containing the interrupt service routine (ISR) for CortexM3 exceptions. User can add additional ISR(s) for the used peripheral(s) (for the available peripheral interrupt handler's name, please refer to the startup file startup_stm32f10x_xx.s). 
>supported toolchains
RealView Microcontroller Development Kit MDK-ARM  
Embedded Workbench for ARM EWARM 
Raisonance Integrated Development Environment RIDE7 
Hitex Development Tools HiTOP 
Atolic T rueSTUDIO 
>How to use the Standard Peripherals Library
- Create a project and setup all your toolchain's start-up files 
- include The Library entry point is stm32f10x.h 
- Select the target product family to be used, comment/uncomment the right define in the file stm32f10x.h:
 #if !defined (STM32F10X_LD) && !defined (STM32F10X_LD_VL) && !defined (STM32F10X_MD) && !defined (STM32F10X_MD_VL) && !defined (STM32F10X_HD) && !defined (STM32F10X_XL) && !defined (STM32F10X_CL) 
  /* #define STM32F10X_LD */   /*!< STM32F10X_LD: STM32 Low density devices */
  /* #define STM32F10X_LD_VL */  /*!< STM32F10X_LD_VL: STM32 Low density Value Line devices */  
  ...
#endif
- Then user has the choice to use or not the Peripheral’s Drivers
	* use standard perheral's drive api
	Uncomment #define USE_PERIPH_LIBRARY
	include the periperal's driver api header and library(*.c) file
- Add the system_stm32f10x.c file in your application
- User code Peripheral initialization and configuration
	* Before configuring a peripheral, its clock must be enabled by calling one of the following functions: 
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_PPPx, ENABLE);
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_PPPx, ENABLE);
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_PPPx, ENABLE);
	* declare a PPP_InitTypeDef structure, for example: PPP_InitTypeDef PPP_InitStructure
	* PPP_InitStructure variable with the allowed values of the structure member. 
		PPP_StructInit(&PPP_InitStructure);
		PP_InitStructure.memberX = valX;
		PPP_InitStructure.memberY = valY; /*where X and Y are the members the user wants to configure*/
	* PPP_DeInit(..) function can be used to set all PPP peripheral registers to their default values: 
		PPP_DeInit(PPP);
	* Initialize the PPP peripheral by calling the PPP_Init(..) function. 
	PPP_Init(PPP, &PPP_InitStructure);
	* At this stage the PPP peripheral is initialized and can be enabled by making a call to PPP_Cmd(..) function. 
		PPP_Cmd(PPP, ENABLE);
	* To modify the peripheral settings after configuring the peripheral, the user can proceed as follows: 
		PPP_InitStucture.memberX = valX;
		PPP_InitStructure.memberY = valY; /* where X and Y are the only members that user wants to modify*/
		PPP_Init(PPP, &PPP_InitStructure);
>bit banding ex.
#define BITBAND_SRAM_REF   0x20000000
#define BITBAND_SRAM_BASE  0x22000000
#define BITBAND_SRAM(a,b) ((BITBAND_SRAM_BASE + 
 (a-BITBAND_SRAM_REF)*32 + (b*4)))  // Convert SRAM address
#define BITBAND_PERI_REF   0x40000000
#define BITBAND_PERI_BASE  0x42000000
#define BITBAND_PERI(a,b) ((BITBAND_PERI_BASE + 
 (a-BITBAND_PERI_REF)*32 + (b*4)))  // Convert PERI address
;
#define MAILBOX   0x20004000
#define TIMER     0x40004000
#define MBX_B0    *((volatile unsigned int *) 
 (BITBAND_SRAM(MAILBOX,0))) // Bit 0
#define MBX_B7    *((volatile unsigned int *) 
 (BITBAND_SRAM(MAILBOX,7))) // Bit 7
#define TIMER_B0  *((volatile unsigned char *) 
 (BITBAND_PERI(TIMER,0)))   // Bit 0
#define TIMER_B7  *((volatile unsigned char *) 
 (BITBAND_PERI(TIMER,7)))   // Bit 7
;
int main(void)
{
    unsigned int temp = 0;
;
    MBX_B0 = 1;      // Word write
    temp = MBX_B7;   // Word read
    TIMER_B0 = temp; // Byte write
    return TIMER_B7; // Byte read
}
















	
	
	
	
	
HTTP Fundamentals=Scott Allen;Note=Erxin

# HTTP, the world wide web of resource
- Introduction 
    + Understanding HTTP 
    resources, messages, connections, security, hardware 
    
    + this module is focus on resources 

- uniform resource locators, url 
http://www.example.com:port/the-tail?variable=value
http://www.example.com:port/the-tail#fragment
http://www.example.com:port/the-tail?variable=value#fragment

a resource are represent for text, video

http:, is url scheme, tell the browser which protocol to use, other such as ftp:, mailto:, the uri may different from different protocol 

example.com, is the host name, which will be turn to IP address 
the-tail, is the url path, like file path 
:port, is default set to 80 
?variable=value, the query string which is used to passed name value pair to the server, which is a little different for different service programming language 
\#fragment, this is a fragment which is only used on the client browser, will make the fragment to the top of the screen 

may web site want to hide the resource extension name to hide the technology, add keywords into url will optimize the search engine optimization 

- HTTP and IIS, internet integration service, iis will handle the incomming http request and allocate the resource from the server

- query strings and asp 
<body>
    <% 
        dim name
        name = Request.QueryString("name")
        
        dim message 
        message = "hello" + Server.HtmlEncode(name);
    %>
    <div>
        <%=message%>
    </div>
</body>

- url encoding, some unsafe character is not avaliable in url such as space and pound sign
RFC 3986, which is the internet standard or the low for URLs, defines safe characters 
a-z, 1-0, A-Z, $-_.+*'(),

all other unsafe character need to be url encoded 
AscII character         URL-encoding 
space                   %20 
!                       %21
"                       %22
#                       %23 
$                       %24
%                       %25
&                       %26

- content types, when return a response from the server, will add a content-type to the response 
common                      MIME types, multi-purpose Internet Mail Extensions or MIME standard 
application/atom+xml        atom feed 
application/json            json data 
image/gif                   gif image 
video/mp4                   mp4 video 
text/xml                    xml 
text/html                   html 
text/plain                  just text 

the text, image is the primary media type and the gif, mp4, xml are the sub type 

in most of the time the file extension will be the last play for the browser to determine the content type of the file 

iis support configure the MIME type for file extension mapping to the MIME type, if a file extension don't in the IIS MIME configuration the service will refuse to return the file 

- content negotiation, when client send request to the server, it could tell the server which type of the response he want to tell the server 

change browser language and put the other language configuration first will let the server return the required language content 

- Conclusion
Resources, URLs, Representations 


# HTTP Message 
- Introduction
- http fundamentals 
to ask a time process 
    + understand your language 
    + have a time device to 

http specification, http 1.1 it defiens the language for message exchange 
http://www.w3.org/Protocol 

http is a request response protocol 

http request send -> server use http response to response 

the request and response is transfer in a single http transaction 

- a manual request 

http://www.odetocode.com

we could use telnet to send http request too  
$ telnet odetocode.com 80 
GET /odetocode.jpg HTTP/1.1 
Host: www.odetocode.com 

//press two enter will get the response 

    + earch engine optimization technic is Url Canonicalization every resource access with a single url 
    
- http methods 
get, retrieve a resource 
post, update a resource 
put, store a resource 
delete, remove a resouce 
head, retrieve the headers for resource 

primarily web browser is used get and post, the other methods is used to implement http services 

post, could be generate by a form from browser  

- safe methods, safe versus unsafe 

safe method is read and get resource from server 

unsafe method will read and modify the message 

    + get is safe, post is unsafe, browser will alert doulbe send post message 
    
    there is common pattern to prevent this kinds of alert 
    
    post/redirect/get 
    http://en.wikipedia.org/wiki/post/redirect/get PRG for short  
    
    this alert will pop up when a user try to refresh a result of post operation 
    
    <form method="post">
        ...
    </form>
    
    <form method="get">
        ...
    </form>

    use get message will encode the form information into url 
    
- request message, message is alwasy ascii 
[method] [url] [version]
[headers]   
[body]
    
    + example get message 
get http://server.com/... HTTP/1.1 
Host: odetocode.com
Accept-Language: fr-FR 
Date: Fri, 9 Aug 2002 21:21:00 GMT 
User-Agent: Mozilal/5.0(Window NT 6.1; WOW64) Chrome/16.0.912.75 Safari/535.7
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3 

the q value is alway from 0 to one call the relative quality value 
ISO-8859: 100% like 
UTF-8: 70% like 
All else: 30% like 

    + date time syntax of http RFC822 Section 5.1 
    http://tools.ietf.org/html/rfc822#section-5.1 
    
    + common request headers 
referer, the url of the referring page 
user-agent, information about the browser 
accept, preferred media types 
accept-language, preferred language 
cookie, cookie information 
if-modified-sinc, date of last retrieval 
date, creation timestamp for the message 
    
- response message 
[version] [status] [reason]
[headers]
[body]

    + example 
HTTP/1.1 200 OK 
Cache-Control: private 
Content-Type: text/html;charset=utf-8
Server: Microsoft-IIS/7.00
X-AspNet-Version: 2.0.50727
X-Powered-By: ASP.NET 
Date: Sat, 14 Feb 2003 04:00:08 GMT 
Content-Length: 17151 

<html>
    ...
</html>

    + X-headers are reserved for nonstandard headers 

- status code 
range           category 
100-199         informational 
200-299         successful 
300-309         redirection 
400-499         client Error
500-599         server Error 
    
    + popular status code 
200, ok 
301, moved permanently, resource moved don't check here again expecially for search engine optimization 
302, moved temporarily, resource moved, but check here again 
304, not modified, resource hasn't cahnged since last retrieval 
400, bad request, bad syntax? 
401, unauthorized, client might need to authenticate 
403, forbidden, refused access 
404, not found, resource doesn't exist 
500, internal server error, something went wrong during processing 
503, service unavailable, server will not service the request 

- http fiddler 
check the http trafic 

    + check implement the http-post-redirect-get pattern, to let the user able to refresh the post result 
    
    the status code 4xx, 5xx is http perspective status 

- summary 


# HTTP Connections 
- Whiriwind Networking 
http is an application communication protocol 

a message from a web browser have to travel to lower level protocol -> tcp (which is not technically required by http) -> browser open a tcp socket with the url specified port(default is 80) -> 

tcp will specify flow control and udp 

tcp is the first layer protocol 

ip is the network level protocol, is used to move piecies of information to deliever the message 
break message into packages 

ip package use data link layer is Ethernet -> become frame like 01xxx... -> media(wire) the recieved computer reverse the process to get the information 


- programming socket 

Uri, uniform resource identifier, url is a kind of uri 

    + use c# application use lower level socket connection 
    
public sttic void Main(string[] args)
{
    var uri = new Uri(args[0]);
    var result = GetResource(uri);
    Console.WriteLine(result);
}

private static string GetResource(Uri uri)
{
    var host = uri.Host;
    var resource = uri.PathAndQuery;
    var hostEntry = Dns.GetHostEntry(host);
    
    var socket = CreateSocket(hostEntry);
    SendRequest(socket, host, resource);
    return GetResponse(socket);
}

private static Socket CreateSocket(IPHostEntry hostEntry)
{
    const int httpPort = 80;
    
    var endPoint = new IPEndPoint(hostEntry.AddressList[0], httpPort);
    var socket = new Socket(endPoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
    socket.Connect(endPoint);
    
    return socket.Connected? socket:null;
    
}

private static void SendRequest(Sockect socket, string host, string request)
{
    var requestMessage = String.Format(
        "GET {0} HTTP/1.1\r\n" +
        "Host: {1}\r\n"+
        "\r\n",
        resource, host
    );
    
    var requestBytes = Encoding.ASCII.GetBytes(requestMessage);
    socket.Send(requestByptes);
}

private static string GetResponse(Socket socket)
{
    int byptes = 0;
    bypte[] buffer = new byte[256];
    var result = new StringBuilder();
    
    do 
    {
        byptes = socket.Receive(buffer);
        result.Append(Encoding.ASCII.GetString(buffer, 0, byptes));
    }while(byptes > 0);
    
    return result.ToString();
}

    + the code is simulate a web browser executing 

- Handshakes with a Shark, examine every data, we could check the tcp handshakes 

    + configure the previous created simulate browser program with visual studio debugger 
    
    + specify capture options for wire shark, add filter to only get the program 
    Capture Filter: host xxx.com 
    + excute progarm 
    + the packages are captured by wire shark 
    there will be three tcp handshake packages 
    
    + the http performance is dependent on the performance of tcp 
    
- on the evolution of http 
from client to server open -> close, ... 

- parallel connections

http specification suggest one client should only keep two connections at the same time 

with different www.xx.com, bbb.xx.com will get four connection 

ie 8 support 6 parallel connection 

- persistent connections, http 1.1 suggest implement persistent connections

a server can only server a finite number of connections, supporting thousands of connection 

the configuration could prevent Dos attack 

timeout connection apache default setting is five seconds 

the http 1.1 is the default connection strategy, if a server doesn't support persistent connection have to add Connection: Close to the response header to signal the client

    + pipline connection, not widely support, user agent can send multiple http request allow before get any response 
    
- summary 

    
# HTTP Architecture 
- Introduction
- resource redux 
url doesn't restrict the technology, resource representation 

reference article 
Architectural Styles and the Design of Network-based Software Architectures 
http://ics.uci.edu/~fielding/pubs/dissertation/top.html 

- architectural qualities, all require and response information are contain in the message, http could relay on different service to process communication 

- adding value 
Web Server Process 
|
app0, app1, app1 

you could automatica compress by web server software 

web server also could log the incomming and out going messages 

these are all relay on the self description messages 

- proxies 
proxy, restrict website outside of office 

inspect messages 

forward proxy, require some configuration, provide service just for the user in a specific location 

reverse proxy provide send request from internet to the servers, the proxy server could use proxy server to compress the message to give computer time to the real web application server 

- proxy server
proxy server could do load balancing 

proxy server could also do request security check for sql inject ...

proxy server also could do cache 

proxy could not have to be a physical hardware 

fidder is install itself as a proxy so it could analyze the incomming http request, use a loop back ip address 

- cache 
proxy server could cache the response 

there are two type of cache 
    + public cache, share by all of users, from a same company, such as public cache for amzone 
    
    + web browser make the private cache for specify user 
    chrome, use chrome://cache to access the current cache files 
    
    internet explorer use the Temporary Internet Files to save the current cache 
    
    + cache rules, is a little complecated 
    
    the get request could be cache 
    
    the PUT, POST, DELETE should not be cache 
    
    http 1.1 have a cache control header, the Expires is a depericate header 
    
    + Cache control 
    public, a resposne for everyone 
    private, a response for a single user 
    no-cache, don't cache the response 
    no-store 
    
    asp.net you could control the cache by
    Reponse.Cache.SetCacheability(HttpCachebility.Public);
    Reponse.Cache.SetExpires(DateTime.Now.AddSeconds(60));
    
    
    HTTP/1.1 200 OK 
    Content-Type: image/png 
    Last-Modified: Tue, 23 Aug 2011 13:28:21 GMT 
    Cache-Control: private, max-age=31536000

- fiddling with the cache 
    + use fiddler menu Cache|Clear will clear all the browser cache 

    + when use advertisement make sure use the cache-control:no-cache to make sure the ad is hit one each browse 
    
    + add expire header to a previous time will also make sure the content is download each time 
    
    ETag: "xx", is a generated header like a hash tag, server could compare the ETag to determine if a content is changed 

- summary 


# Security 
- the stateful stateless web 
http is design for stateless transfer 

    + require for state website 
    bank website 
    website wizard 
    
    + saving state 
    place a hidden value into a form to represent the state of the server, it is used by asp.net 

        * user session, session may live in memory or database. the session is scoped to individual user 
        
        it is good for short live state.
        
        if session data is in memory it is hard to increase the scalability 
        
        * stick session
        
        * in the earlier days web server use ip address to check if it is from different user 
        
        * use cookie to seperate different user session 

        http://tools.ietf.org/html/rfc6265
        
        http state management mechanism, it is used cookie 
        
        limitations 
        cookie support unique identifer to help the server authenticate
        
        fat url, put some user identifier into the url, each website give the user much contain the identifier for the user     
        
        website use set cookie header in a http response 
        
        example:
        GET /search?q=lyrics HTTP/1.1 
        Host: searchengine.com 
        ...
        
        HTTP/1.1 200 OK 
        Set-Cookie: fname=Scott&lname=Allen;domain=.searchengine.com;path=/
        
        or use GUID=...;
        
        Cookie size limitation is 4kb; the server should not trust any uncryptographically content from the client 
        
- tracing sessions and httpOnly  
    + cookie is browser relative, different browser will have different save location 
    
    + high jack session by change the session_id such as ASP_SESSION_ID
        
    + in the set cookie header, HttpOnly, cross side scripting attack, malicious users inject javascript code into other website and use the script to steal the cookie information from the user of that website 
    
    HttpOnly flag is introduce by Microsoft now it become the standard, it tell the browser, user agent, that not allowed script code to access the cookie. 
    the cookie is only exist for travel through http request in the header of every http request message 
        
- cookie paths, domains, and persistence 
session cookie, the cookie is only exist a single user session, it get distroy after user close the browser 

a persisten cookie, the browser will save the cookie to disk. it needs a expire value 
    + example 
HTTP/1.1 200 OK 
Set-Cookie: GUI=00a...;
domain=.searchegine.com;
path=/
expires=Monday, 09-July-2012 21:12:00 GMT 

if you set domain to www.searchegine.com it is only restrict to the domain, it will not allowed go to subdomain 

if you set domain to .searchengine.com, it will include all subdomain too 

the response of the Set-Cookie could only specify to one domain in a session 

    + path attribute, is another path to the domain, /, /sub-directory only to the specify path 
        
- basic and digest authentication, user identity, http authenticaltion protocols, there are five basic popular protocol 
    + basic authentication, request have a user account on the server machine 
    
    //client 
    GET /acount HTTP/1.1 
    Host 
    ...
    
    //server 
    HTTP/1.1 401 Unauthorized 
    WWW-Authenticate: Basic realm="Giant Bank"
    
    //client, most the browser will pop up dialog for username/password
    GET /account HTTP/1.1 
    Host: giantback.com 
    Authorization: Basic Z2V.. //base64 encoding
    
        * go to iis configure the basic authentication by 
        go the website directory
        click the Authentication
        disable the anonymouse authentication and enable basic authentication 
        
        there will be a waring if SSL not enabled 
        
        * after authenticated each request will contain the authentication header 
        
    + digest authentication, improved basic authentication, instead of base64 encoding user/password client send a digetst of the password. the client need to compute the digest using an Md5 hasing algorithm with a nonce that the server provides during the authentication challenge. the client will send back a request with a authorization header and encrypted form of the user name and password 
    
    GET /account HTTP/1.1 
    Host:...
    ...
    
    HTTP/1.0 401 Unauthorized 
    WWW-Authenticate: Digest realm="Giant Bank",
        qop="auth,auth-int",
        nonc="dcd95...",
        opaque="5cc09..."

    digiest authentication is bettern than basic authentication when secure http is not available but still vulnerable to the middle attacks to steal the authorizate token 
    
- window authentication, it's commonlly used for internal and internet Websites aprticularly at companies have microsoft active directly setup 
        
the process is similar with the digest authenticaltion. the server will challenge that request with an HTTP 401 status code replay saying that was unauthorized please authorized 

GET /account HTTP 1.1           //client 
Host: giantbank.com 
...

HTTP/1.0 401 Unauthorized       //server response 
WWW-Authenticate: Negotiate 

window support several security providers such as NTLM and Kerberos. next time we could send some credential base on the protocol request by the security provider. then that will be come a authorizate header 

go to IAS(iis manager) disable the basic authentication and enble window authentication. the digest authentication will be avaliable if there is an active directory server avaliable. if not enable the window authentication which is authenticate base on the server machine 
IE will authomatic try to authenticate with active directory 

- forms authentication, most popular approach. it's not a standard protocol and it doesn't use www dash authenticate or authorize headers that we've seen so far 

many web develop framework support form base authentication 

    + process 
        * client request a secuirty resource
        GET /account HTTP/1.1 
        Host: giantbank.com 
        ...
        
        * server redirect the user to the login page 
        HTTP1.1 302 Found 
        Location: /login?ReturnUrl=/acount

        generally the current user request url will send as a query string to help the user successfully redirect to the resource after success login 

        the login page is generally contain a form and login button 
        
        most successful authenticate will response with another redirect and add cookie to the user machine to help identify the authenticated user 
        the cookie value commonly hashed and encrypted 

- OpenID, it is a site to save authentication, other website want to authenticate a user. the website to use the authentication provider to helper identify the user 

- Secure HTTP, HTTPS, ssl or TLS 
    + https is encrypted the content before sending the content 
    + https default port is 443
    + add addtional security layer on the http message 
application 
|
V
SSL/TLS   //addtional layer 
|
V 
Transport 
|
V
Network 
|
V 
Data Link 
|
V 
Media 
        
    + https requires the server to have a acryptographic certificate. the certificate is sent to the client during the set up of HTTPs. during the setup of communication channel 
    
    the certificate contain the server host name 
    
    the browser could use the certifcate the validate if the it is talking to the server that it is trully talking to 
    
    the validation is made possible using public key cryptography and the existence of certificate authorities like bearsign(phonetic) that will sign and vouch for the integraity of certificate 
    
    administrator have to purchase and install certificates from certificate authorities
    
    
there are lots of detail but for developer we need to known 
    + all traffic over https is encrypted in the reqest and respones  
    
    + server is authenticated thanks to the server certificated 
    
    + use client side authentication with https. it will authenticate the client in the most secure manner possible      
    
    + https cause performance downside. large website have to use SSL accelerators to take caculation load from web server 
    
    there are addtional steps to setup https communication. 
    
    the chrome could display the https information when navigate with a https connection 
    
- Summary 


#Done 
        
        
        
        
        
        
        
        
        
        
        
        






        
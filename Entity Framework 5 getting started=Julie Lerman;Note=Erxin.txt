Entity Framework 5 getting started=Julie Lerman;Note=Erxin

# Entity Framework 5, Planning Ahead
- EF5
- outline
    + why
    + ef5 and .net framework versions
    + getting started with entity framework 5
    + what's new in ef5 
    + moving to ef5 from previous versions
    + choosing a modeling workflow for your app
    + thinking ahead to ef6 
    
- why 
    + object relational mapper, ORM
    + developer productivity 
    + consistent query syntax with linq to entities 
    + focus on domain, not on db, connections commands, etc 
    
- ef vs other orms
db <--> types, such as hybernate 

entity framework, runtime metadata 
conceptual model mapping mutltiple table to single table 

- ado.net today & tomorrow 
    + dataSet, not invest 
    + linq to sql, most are bug fix 
    + entity framework, recommend over other technologies 
    
- EF conceptual model in your appls 
    + conceptual model of your domain 
    + model of your application
        * UI
        * app logic
        * business objects   <---> conceptual modle of your domain --> db 
        
    + highlights 
    a microsoft.net tool 
    open source as of entity framework 5 (RTM aug 2012)
    not dependent on .net release cycle, rabbit than .net update 
    works with any relational database with valid ef provider 
    sql command genreate from linq to entities 
    ef will create parametered queries, will do the same with sql, if you use variable, ef will create parameter in sql query 
    tracks changes to in-memory objects 
    insert, update and delete command generation 
    work with a visual model or with your own classes definitions
    stored procedure support one notable limitation with be solved in EF6, code first support this in EF6
    default behavior == "magic unicorn"
    very flexible 
- entity framework via nuget 
    + code first model-less EF
    + dbContext simpler access, find local, validation, etc...
    + EF core apis in .net 4 & .net 4.5 
    enum support, Geo data, auto query cache 

- ef's basic workflow 
    + define model 
    + or start from empty model 
    + or code first 
    + express & execute query 
    + ef determines & execute sql 
    + ef transforms results into your types 
    + modify data 
    + ef SaveChanges, will figure out insert, update, delete and will row back if anything fail 
- new to ef5   
    + query performance
    auto cached queries 
    
    + even with .net 4 apps running on a box with .net 4.5 installed, whenever 4.5 is installed 
    + spatial data support
    + table valued function support 
        * only for db first edmx 
    + code first adds new tables to existing databases 
    + designer improvements
        * dbCminomerontext code generation template by default
        * most notable, color& 
    + open source 
    http://entityframework.codeplex.com 
    
- upgrading ef 5 projects, from ef 4.x to ef 5
    + make reference 
    + security source folder
    packages\entityframework40/50\

    + change target framework before upgrade ef5 then 
    + upgrade by nuget from visual studio 
    + make sure change the target framework version 
    
    + open the model and directly select the modify will change the emdx file's target framework version 
    
    + then ef 5 is supported 

- choosing db first, model first, or code first
    + code first for create brand new project 
    + database first for database is exist 
    + prefer visual designer 
    + prefer to code first 
    + existing classes should choose code first 
    
- what about ef 6 
    + follow the progress from the codeplex.com
    + open source at entityframework.codeplex.com
    + nightly build available
    + features
        * stored procedure 
        * async/await pattern
        * return of custom conventions
        * migrations support for multi-tenant databases 
        * full ef api moves from .net into nuget package 
        * enum & spatial data support for .net 4. ef projects 
        * power tools upgraded and incorparated into ef designer 
        * more 
        * because ef power tool will be corporate with designer 
        * ef 6 api is separate from .net api so we could use ef 6 in .net 4.0 application 
- resources 
http://thedatafram.com/blog

ef team blog
http://blogs.msdn.com/adonet

ef open source site
http://entityframework.codeplex.com

books of the author 
programming entity framework 1 & 2 edition 
programming entity framework code first 2011
programming entity framework code first 2012 

more pluralsight videos on ef 
http://pluralsight.com/training/course#entity-framework


# Database first modeling 
- introduction 
    + creating a database first model
    + look at the model metadata
    + vs2012 adds color and diagrams to ef designer 
    + updating the model when database changes 
    + more with stored procedures 
    + .net 4.5 enums & spatial types 
    + fixing up entity keys when mapping to database views 
    
- create entity framework project into separate project to isolate it 
    + choose the data project type 
    + create project ado.net entity data model 
    + generate model from database 
    + point to the db 
    + save eneity connection settings in app.config
    + choose the objects from the database 
        * table value function 
        * store procedure 
        
    pluralize or singularity generated object names 
    include foreign key columns in the mode 
    import selected stored procedures and functions into the entity model 
    
    depend on entity key to track which is map to primary key 
    
    if table don't have primary key will compose all not nullable column to entity key 
    
    break variety of diagram in visual studio 2012
    
    display different color 
    
    don't display the store procedure and function 
    
    scalar value function 
    
    use model browser to see everything which include functions and store procedure, will be put into the folder Functions Imports 
    
    for each one of functions and table value function is created Complex Types, they are special type and make it use the function 
    
    use t4 template to generate codes, poco, plan old clr object 
    
    both of the property is used to support lazy loading 
    
    wizard use default function and types, complex types is the result types for store procedure 

    could rename the complex name, set the function / stored procedure name 
 
    regenerate the code to update the code 
    
- model to database mapping 
    + choose table mapping, will check the database mapping property 
    + you could change the name of the property for the entity 
    + you could reorder property 
    + Designer Supported EDM Customization pluralsight course 
    
- Fill color of the entity item , you could create your own color for the color the entity 
use color to provide visual group, such as entity relative to product, relative to different subject 
- use diagram feature to separate the big ton of tables 
    + not breaking up the model 
    + just create different design time diagrams from the 
    + use model browser to create new diagrams and drag entity to the diagram 
    + color are specify for a single diagram 
    + select a entity with context module select include relate to add relatives entity into the diagrams 
    + only click delete on a entity will pop up to remove entity, hit yes to delete entity from model the entity will not know there is a table in the database, hit not to delete meta data that describes the data table
    + right click a entity to remove entity from the diagram 
    + select multiple entities could move them to new diagram, undo this need click three times 
    
- updating a model from the database 
    + on the context menu choose update model from database 
    + the list will display new added items from the database 
    + the update will not remove or update existing properties if only the type of the property is changed 
    + check the table the mapping
    + right click and select validate the model to check if the mapping is ok. 
    + the new added entity will not automatic display on the diagram
    
- more on stored procedure
    + by default the result is always create complex type for store procedure and function 
    
    + edit the function mapping, select and set the property for the store procedure and function to manually control the return type such not use complex type 
    + complex type is not editable 
    
    + store procedure mapping, could override insert, update, delete default generate sql. They could be set as store procedure
    
    right click a entity and select store procedure mapping to do the mapping 
    + when import store procedure, de-select the Import selected stored procedure and function into entity model that the wizard automatically create import function along with the complex types when they were necessary 
    
    you could also delete imported function if you select the checkbox
    
    the The store procedure will be place at Store Procedures/Function in the entity browser 

    + using enum, the support is only availabe for .net 4.5 
        * could create manually from the entity browser
        * also could reference a exist enum but the name must keep the same 
    
- using Spatial (Geography or Geometry in your model, there is a System.Data.Spatial.DBGeography type 
- fixing up the keys of entities that map to views 
    + if a view don't contain a nullable column, entity framework will skip the view/table to generate the entity 

    + could manually change the mapped entities, such as entity key 
    
- view should named begin with vViewName 


# Model first 
- create for start a new project and want a visual designer 
- design model -> generate the sql -> create the database
- outline 
    + creating a model first model 
    + controlling the attributes of entities properties 
    + defining enums
    + adding relationships between entities 
    + entity container properties 
    + generating the databse schema 
- create a model 
    + create a class library project 
    + add ADO.NET entity data model 
    + create empty model 
    + reference dll 
    entity framework, system.data.entity 
    add *.context.tt and *model.tt

    + for entity framework 6.x will need to choose the context tt file at first 
    
    + the property of a entity table 
        * StoreGeneratePattern, which have three options
        Computed, means column is depend on other expression will calculate the column such as in database first have a expression in database 
        Identity, the property maps to identity column 
        None 
    
        * Facets properties such as 
        Fix length,
        Max Length,
        Unicode,
        
        by default entity framework will map to nvarchar 
        by default ms sql map to nchar(4000)
    
        these property are relative to database column and not effect of the model 
        
    + entity framework support Geo types use Geography in the type properties 
    
    + entity framework support enum in 4.x+ only on the types that could corework with enum such as 
    int16, int32, int64, byte, sbyte
    
    + add relationships, in entity called associations, use context menu to add association is better and add foreign keys 
    
        * the property of End1 OnDelete, End2 OnDelete could configure to support cascade delete 
    
        Cascade delete in entity framework will delete tracked related objects in memory 
        Cascade delete in database will delete the table 
        
        in model first model will auto generate both of the delete together 
    
        * many to many relationships, will depend on join table, database will have a join table, all you only to care about relationships and entity framework will automatic create the join table 
    
    + entity code container code, not the individual entity click the background of the model 
        * code generation strategy, None for the generate model 
        * lazy loading enable
        * database script generation 
        * could specify the database schema 
        
    + relative module
    customizing the mapping used in entity framework 
    
    + generate the database model 
        * specify the connection 
        * generate the database

- what happen to change the database, will drop the table 
    + made change to the database 
    + use database first model to update the model, update changes in the database and then update the model 
        
      
        
# Code first
- introduction
- why code first 
    + code 
    + no visual designer
    + no code generation 
    
- domain class is not relationship about entity frameworks 
- entity framework have a context 
    + domain class is not relative to entity frameworks 
    + dbContext modelbuilder will auto generate the entity class in the runtime, the DbContext moduleBuilder
    + database initialization & migration 
    + custom configurations 
    
- outline   
    + code first default model 
    + managing how model changes affect the database 
    + specifying configurations 
        * declaratively with data annotations 
        * imperatively  with fluent api 
    + reverse engineer existing database for code first 

- Create a DbContext Data Layer 
    + install EntityFramework from nuget package manager in visual studio 
    + add data layer project with entity framework 
    + create custom dbcontext 
    class SaleModelContext:DbContext 
    {
        public DbSet<Customer> Customers {get;set;}
    }
    
    use dbset to define single entity type 
    public class DbSet<TEntity> : System.Data.Entity.Infrastructure.DbQuery<TEntity> where TEntity:class 
    member of System.Data.Entity 
    
    add domain object reference and add them as dbset 
    add relationship with dbset to take advantage for entities 
    
    context.Customers.Include(c=>c.ContactDetail)
    
- entity framework enterprise dbcontext reference pluralsight training 
- Entity Framework Database Interaction 
linq to entities -> EF runtime -> sql 
object instances <- mappings 
object changes -> data structure schema -> insert update delete 
    
install entity framwork power tool, could support create a readonly model from a code dbContext , choose the dbContext-> right click -> select entity framework -> generate the model 

code first need to specify the connection method by configuration or code configuration 

key property convention 
    + id 
    + type + id 
    + use annotations in side of class to add key for the code first model 
    
    using system .componentModel.dataAnnotation ;
    using system .componentModel.dataAnnotation.schema;
    
    public class ContractDetail
    {
        [Key, ForeignKey("Customer")]
        public int CustomId{get;set;}
        
        public virtual Customer Customer {get;set;}
    }


- initializing a database from the model 
    + database connection workflow 
    connection string available -> build string sql server express(by default or specified provider ) -> databae exists -> create database -> use database 
    
    + when execute a query the first time in code first will be created at the first time 
    
- using migrations to update database schema when the model changes 
    + default initialization flow is not allow to change the model

    + with package manager console(nuget), use enable-mirgration -EnableAutomationMigration
    + database initialization/migration strategies, IDatabaseInitializaer
        * CreateDatabaseIfNotExists(default)
        * DropCreateDatabaseIfModelIChanges
        * DropCreateDatabaseAlways
        * MigrateDatabaseToLatestVersion
    //specify the migration configuration 
    Database.SetInitializaer(new MigrateDatabaseToLatestVersion<SaleModelContext, Configuration>());
        
    public sealed class Configuration:DbMigrationConfiguration<SalesModel.DataLayer.SelesModel>
    {
        public Configuration()
        {
        }
        
        protected override void Seed(SalesModel.DataLayer.SalesModelContext context)
        {

        }
    }
    
    by default migration is not allow to remote columns which contain data, could change the configuration to allow this 
    
    configuration class contain a Seed method to let initialize the tables for the database 
- seeding a database during a migration 
- using data annotation to configuration mappings 
    + For Validation
    StringLength
    MaxLength
    MinLength
    Required
    
- Configuring mapping with Fluent api 
DbContext have a virtual method to OnModelCreating(DbModelBuilder modelBuilder)
{
    modelBuilder.Entity<ContactDetail>().HasKey(c=>c.CustomerId);
    modelBuilder.Entity<ContactDetail>().Property(c=>c.CustomerId).HasClumnName("CellPhone");
    modelBuilder.Entity<ContactDetail>().HasReuqired(c=>c.CustomerId).WithOptional(c => c.ContactDetail);
}

you have to define both side 
Has With [FK]

with fluent api could remote the data annotation and relationship out of the domain class to make the domain class clear 

- Reverse Engineering a database for code first select, with entity framework6 and power tool 
Select the project ,context menu-> entity framework -> Reverse engineering code first 


# Interacting with Your Data Model 
- DbContaxt API as a bridge to the database 
    + query
    + tracking 
    + state management 
    + relationship management 
    + db persistence 
    
- outline 
query 
insert, update, delete 
profiling the database 
creating and retrieving graphs 
loading related data 
interacting with stored procedures and other database commands 

- your first queries, linq methods force query evaluation
    + Enumerables
    ToList, ToArray, ToDictionary
    
    + Singleton
    Average, Count, First, FirstOrDefault, Max, Single, SingleOrDefault
    
(using var db = new Context())
{
    db.EntitySet.Add(new Entity());
    db.SaveChanges();
}

update, find the record 
delete, delete the finded record

- building and inserting graphics 
your code, myCustomer.Orders.Add(myOrder)

    + relationships with & without dbContext, if dbContext already track the entity, only required set on side relationship
    EF "adds"
    db.myOrder.Add(myOrder)
    order.Customer = myCustomer

    + if not need to add tracks to both side of entities 
    Your code 
    EF "adds"

    + use entity framework profiler to check the translated sql statements which is equal to entity framework operations
    
    all commands which relative to save changes are surrounded by save changes
    
    if query a entity from a dbContext and it is used in another dbContext, this will trigger the entity framework to add a new value into the database 
    
    Entity Framework in Enterprise will introduce the detail.
    
    To add disconnected relationship of entities, is used the id 
- linq method syntax or query syntax 

    + linq method syntax with method 
    + linq query 
    
    + query, quering the entity framework 
    
- loading related data 
    + when querying 
    eager, include method in query
    full graphs from database in one call 
    projection
        * project related properties in query 
        * full graphs from database in one call 
    + after the fact, use lazy loading 
    
    + loading relative data with linq method 
    context.Customers.Include("Orders.LineItem");
    
    + explicit loading 
    context.Entry(entityInstance).Collection(c=>c.Orders).Load();
    
    this method is not return anything, this will pull the orders and into the memory and added to the customer graph 
    
    + lazy load adding virtual keyword to allow a property to lazy load from a context
    public class SomeContext
    {
        public virtual ICollection<Customer> CusomterSet;
        public virtual Product Product {get;set;}
    }
    
- Performance considerations(entity framework), is a website to introduce the performance detail

- Working with stored procedures 
    + open mapping details customer 

    call procedures & more with code first model 
    
    + use database first method and use store procedure mapping 
    + mapping store procedure at the bottom of the model, maps the property to the parameter of the store procedure 
    add result column binding and map the result to customer id
    
    the store procedure is 
    insert (...) values (...)
    select scope_identity() as CustomerId
    
    then the CustomerId will be return as a return value from the store procedure 
    + use the model browser to check the model mapping and store procedure 
    

# Using EF in your solutions
- tweaking the demoware architecture 
    + separate EDMX Generated Domain Classes
    + applying logic to generated classes 
    + overriding savechanges 
    + encapsulating dbContext logic into reporsitories 
    
- EF at work in 
    + a client-side wpf app
    + an asp.net mvc app
    + a wcf data service exposing odata to a mobile device 
    
- demo, if using DbGeography will required namespace system.data.spatial 
    + make the entity framework project generate the output class to a separate domain project, there are several ways to do it
        * reference the *Model.tt file from the domain class project to the entity framework project which support by visual studio 
        
        reference existing file as link 
        
        * directly reference *Model.tt file from the domain class project and delete the file in the EF model project 
        open the tt file with text editor and change the *.edmx model file path to point to the entity framework model project. this will make there is only on *.tt file in the solution without reference as link 
        
        const string inputFile = @"..\\*.edmx";
        
        whenever change the model required to manually right click the *.tt file and Run Customer Tool to regenerate the output classes 
        
        you also have to change the context.tt to add reference to the domain class project and the project 
        using DomainClass;
        
- adding logic to generated code using partial classes for the EF generated classes 
add full name for the customer class , the paritial class have to at the same name space 

public partial class Customer 
{
    public string FullName
    {   
        get{ return string.Format("{0}, {1}", this.FirstName, this.LastName);}
    }
}
    
- using meta class for decorated to the generated class
http://ardails.com/Adding-Attributes-to-Generated-Classes

- overriding SaveChanges 
datetime.MinValue in .net is Jan 1, 0001
Sql Server datatime minium is Jan 1, 1753

so whenever you insert a minvalue into sql from .net to sql server will trigger a exception from sqlserver 

modify the SaveChanges method of the Context to overriding the method to add modifyDate 

public override int SaveChanges()
{
    foreach(var entry in this.ChangeTracker.Entries()
                                           .Where(e=>e.State==EntityState.Added||
                                                     e.State==EntityState.Modified))
    {
        entry.Property("ModifiedDate").CurrentValue = DateTime.Now;
    }
    base.SaveChanges();
}

use the StateInfo class to track the modified property this will avoid using the ModifiedData string to track the property 
public override int SaveChanges()
{
    foreach(var stateinfo in this.ChangeTracker.Entries()
                                           .Where(e=>e.Entity is StateInfo && 
                                                   (e=>e.State==EntityState.Added||
                                                    e.State==EntityState.Modified)
                                           .Select(e=>Entity as StateInfo))
    {
        stateinfo.ModifiedDate = DateTime.Now;
    }
    base.SaveChanges();
}

- Building a Repository to Access your DBContext, 
    + Encapsulating data access into Repositories
    User interface, logic for interacting with user 
    
    + Repository, logic for interacting with Data Layer, separation of concerns
    public class SimpleRepository
    {
        readonly SaleModelContext _context = new SalesModelContext();
        
        public void InsertCustomerAndSave(ref Customer customer)
        {
            _context.Customers.Add(customer);
            _context.SaveChanges();
        }
        
        ... other database relative operations 
    }
    
    use this pattern will separate the data layer from the applicaiton layer 
    
- EF in your apps, client apps web apps mobile apps 
- add IsDirty property for a entity class with property decorate from entity framework

public class StateInfo:INotifyPropertyChanges
{
    public DateTime ModifedDate {get;set;}
    [NotMapped]
    public bool IsDirty {get;set;}
    public event PropertyChangedEventHanlder PropertyChanged;
    
    [NotifiedPropertyChangedInvocator]
    protected virtual void OnPropertyChanged([CallerMemeberName])
    {
        this.IsDirty = true;
        PropertyChangedEventHanlder handler = PropertyChanged;
        if(handler != null)
        {
            handler(this, new PropertyChanged)
        }
    }
}

make the domain class inherit from the SateInfo class to make them all have the same flag

to prevent entity framework try to map it to the database 
    
after save the changes, set the IsDirty property to false in the overrided SaveChanges method 

public override int SaveChanges()
{
    foreach(var stateinfo in this.ChangeTracker.Entries()
                                           .Where(e=>e.Entity is StateInfo && 
                                                   (e=>e.State==EntityState.Added||
                                                    e.State==EntityState.Modified)
                                           .Select(e=>Entity as StateInfo))
    {
        stateinfo.ModifiedDate = DateTime.Now;
    }
    base.SaveChanges();
    foreach(var stateinfo in this.ChangeTracker.Entries()
                                           .Where(e=>e.Entity is StateInfo && 
                                                   (e=>e.State==EntityState.Added||
                                                    e.State==EntityState.Modified)
                                           .Select(e=>Entity as StateInfo))
    {
        stateinfo.IsDirty = false;
    }
}
    
- The tweaked repository for real world project 
public class SimpleRepository 
{
    readonly SalesModelContext _ct = new SalesModelContext();
    public SimpleRepository()
    {}
    
    public Customer NewCustomerWithContactDetail();
    
    public Customer GetCustomerGraph(int id)
    {
        return _ct.Customers.Include(c=>c.ContactDetail).FirstOrDefalt(c=>c.Cusomter.Id = id);
    }
    
    public Customer GetCustomerById(int id)
    {
    }
    
    public List<Customer> GetCustomers(){}
    
    public ObservableCollection<Customer> CustomersInMemory()
    {
        if(_context.Customers.Local.Count == 0)
        {
            GetCustomers();
        }
        return _context.Customers.Local;
    }
    
    public void Save()
    {
        for(int i = _ct.Customers.LocalCount; i > 0; i --)
        {
            var c = _ct.Customers.Local[i-1];
            if(_ct.Entry(c).State == EntityState.Added && !c.IsDirty && !c.ContactDetail.IsDirty)
            {
                _ct.Customers.Remove(c);
            }
        }
        _ct.SaveChanges();
    }
    
    public void DeleteCurrentCustomer(Customer customer){}
}    

- Using your EF data layer in a client app(WPF), debugging and profile 
- Using your EF in a web app,
- Access your data from mobile app use odata data service to support 
public class WcfDataService:DataService<SaleModelContext>
{
    public static void InitializeService(DataServiceConfiguration config)
    {
        config.SetEnttiySetAccessRule("*", EntitySetRights.AllRead);
    }
}

- blogs for .net web development tools for odata 
blogs.msdn.com/b/webdev/arhive/2013/02/06/protected-your-queryable-api-with-validation-feature-in-asp-net-web-api-odata




























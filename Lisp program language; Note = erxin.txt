Lisp program language; Note = erxin

## introduction
- wiki
http://en.wikipedia.org/wiki/Lisp_programming_language#Language_innovations
- first homoiconic language
- first introduce the concept of automatic garbage collection
- lost of subversions
- design for ai
- competitors
    * prolog, python
- lisp is dominance among high level (ai)
- current lisp
    * common lisp
    * scheme

## syntax introduction
- This article's examples are written in Common Lisp
- Symbolic expressions (S-expressions)
-  M-expressions (Meta Expressions), which express functions of S-expressions.
- almost all lisp today use s-expression
- Lists
    * A Lisp list is written with its elements separated by whitespace
    * (1 2 foo) is a list whose elements are three atoms
    * () is represented as the special atom nil which only entity in Lisp which is both an atom and a list
    * Expressions are written as lists, using [prefix notation](http://en.wikipedia.org/wiki/Prefix_notation). The first element in the list is the name of a form, i.e., a function, operator, macro, or "special operator" 
    * ex. list will return a arguments as a list
    (list '1 '2 'foo)
    The "quote" before the arguments in the preceding example is a "special operator" which prevents the quoted arguments from being evaluated
- operators
    * Arithmetic operators are treated similarly. ex. equal to 10
    (+ 1 2 3 4)
    * (if expression true false)
    (if nil
     (list 1 2 "foo")
     (list 3 4 "bar"))
    * lambda expression, is used to bind variables to values which are then evaluated within an expression.
    (lambda (arg) (+ arg 1))
    the arguments to lambda are a list of arguments, and the expression or expressions to which the function evaluates (the returned value is the value of the last expression that is evaluated)
    ((lambda (arg) (+ arg 1)) 5) equal to 6
- data types, in lisp there were two fundamental data types: atoms and lists
    * atom, an atom was a number or a symbol. A symbol was essentially a unique named item
    * list, list was a finite ordered sequence of elements, where each element is in itself either an atom or a list
        + A Lisp list is a singly linked list. Each cell of this list is called a cons (in Scheme, a pair), and is composed of two pointers, called the car and cdr. These are equivalent to the data and next in linked single list data structure
        + 
    * difference between atom and list, difference between atoms and lists was that atoms were immutable and unique. 
    * Lisps have other data structures – such as vectors (arrays), hash tables, structures, and so forth.
- S-expressions represent list
    *  A cons can be written in dotted-pair notation as (a . b), where a is the car and b the cdr.
    *  This is conventionally abbreviated as (a b c d) in list notation. An improper list may be written in a combination of the two – as (a b c . d) for the list of three conses whose last cdr is d (i.e., the list (a . (b . (c . d))) in fully specified form).
- List-processing procedures
    * The [[append]] procedure appends two (or more) lists to one another. Because Lisp lists are linked lists, appending two lists has asymptotic time complexity 
    * Lisp provides many built-in procedures for accessing and controlling lists.
     (list 1 2 'a 3)
     ;Output: (1 2 a 3)
    * lists are constructed from cons pairs, the [[cons]] procedure can be used to add an element to the front of a list. 
    (cons '(1 2) '(3 4))
    * list structure writen in cons
    Cons cell diagram for the list (42 69 613), written with cons:
    (cons 42 (cons 69 (cons 613 nil)))
    and written with list:
    (list 42 69 613)
    result value
    (1 . (2 . (3 . nil)))
    which is generally abbreviated as:
    (1 2 3)
    ;Output: ((1 2) 3 4)
    * The [[append]] procedure appends two (or more) lists to one another. Because Lisp lists are linked lists
    (append '(1 2 3) '() '(a) '(5 6))
    ;Output: (1 2 3 a 5 6)
    * shared structure
    (setf foo (list 'a 'b 'c))
    (setf bar (cons 'x (cdr foo)))
    the tail (b c) is the same structure in both lists. It is not a copy; pointed to the same memory address
    * change list item value
    (setf (third foo) 'goose)
- tree
    * Binary trees that only store data in their leaves are also easily constructed with cons. For example, the code:
    (cons (cons 1 2) (cons 3 4))
    results in the tree:
    ((1 . 2) . (3 . 4))
- Noun
    * lisp key words the last two is removed
    car (short for "Contents of the Address part of Register number"),
    cdr ("Contents of the Decrement part of Register number"),
    cpr ("Contents of the Prefix part of Register number"), and
    ctr ("Contents of the Tag part of Register number")
- self evaluating forms and quoting, prevent expression from being evaluated (as is necessary for symbols and lists). 
This is the role of the quote special operator, or its abbreviation '. 
quote is use to get reference value, without it will get the direct value
If the variable snue has the value (bar baz) then `(foo ,snue) evaluates to (foo (bar baz)), while `(foo ,@snue) evaluates to (foo bar baz).

## lisp tutorial
- syntax
    * prefix notation
        + operator fist, arguments follow
        (+ 3 2) means add 3 and 2
    * a lots of parenthese
        + define list also programs
        + ex.
        (a b c d) define list with 4 elements(atoms) a,b,c,d
        (defun factorial(num)
            (cond((<=num 0) 1)
                 (t(* (factorial (- num 1)) num))
                 ))
- data types
    * symbols
    a, john, 34
    * lists
    (), (a) (a john 34), (lambda (arg)(*arg arg))
- for each symbol lisp attempts to find its value
    * ex
    (setq a 10)  ;;set a value of symbol a to 10
    a            ;;return the value of symbol a
    t         ;; true
    nil       ;; stand for false or NIL
    ()        ;; empty list
- lisp represent function call as basic data structures
(functionName arg)
- quote(') means do not eval the argument
- list
    * a singly linked list
    * car, get the first atom of a list, nondestructive, get the value by reference
    * cdr, get the tail of a list, nondestructive, get the value by reference
    * cons, is a pair value with head and tail, use to compound other data structure in lisp
    * list building functions
        + (cons 'b nil) ;;quote means: do not eval the argument
        (b)
        + (setq a (cons 'b(cons 'c nil))) ;;setq a is a shorthand for set 'a
        (b, c)
        + (setq v (list 'john 34 35))
        (john 34 35)
        + (setq v (list a 34 25))
        + (append '(1 2) '(2 3))
        (1 2 2 3)
    * list copying
    (setq foo(list 'a 'b 'c))
    (setq bar(cons 'x (cdr foo))) ;;cdr foo makes a copy of the remaining list
    (x b c) ;;output
    * replace
    (rplaca foo 'u)     ;;replace car component of foo (destructive op)
    (u c)
    (rplacd foo 'u)     ;;replace cdr component of foo (destructive op)
    (b u)
    the value of the bar is changed too
    * use the setf to change the list, it's the same effect of rplaca rplacd
    (setf (cadr bar) 'u)
- evaluation rules
    * a symbol value is sought and substituted
    * a quoted value is kept untouched
    * ex.
    (setq a 12)
    (setq b (+ a 4))
    16      ;;output
    (setq b '(+ a 4))
    (+ a 4) ;;output
    (eval b)    ;;explicit evaluation call
    16
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
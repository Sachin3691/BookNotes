NSIS Script files; Note = Erxin

## nsis versions
- unicode version
http://www.scratchpaper.com/
- nsis 64
https://bitbucket.org/dgolub/nsis64/src
- nsis sourceforge doc
http://nsis.sourceforge.net/Docs/

## Script files
- create script to create a nsis installer
- every line treat as a command, use '\' is the operator to continuation a line.
- string escape, $\ or use different type of quote such as ", ', `
- file extention is .nsi, header file .nsh
- include header file, !include header_name.nsh

## Script structure
- could contain 
    * attributes, such as Name, InstallDir
    * sections, 
    * functions,
- Pages, use Page or PageEx for more advanced settings
Page license
Page components
Page directory
Page instfiles
UninstPage uninstConfirm
UninstPage instfiles
- Sections, Each section corresponds to one component in the components page. The seciton code will be execute if that component is selected
    * Installer section
    Section "Installer Section"
    SectionEnd
    * Uninstaller section
    Section "un.Uninstaller Section"
    SectionEnd
    * SetOutPath which will tell the installer where to extract files and File which extracts files
    Section "My Program"
      SetOutPath $INSTDIR
      File "My Program.exe"
      File "Readme.txt"
    SectionEnd
- Functions, could contain script code, just like section
    * user functions, call by the user within sections or other functions using the call instruction
    * call back functions
    called by the installer upon certain defined events
    Function .onInit
      MessageBox MB_YESNO "This will install My Program. Do you wish to continue?" IDYES gogogo
        Abort
      gogogo:
    FunctionEnd
- Working with scripts
    * Executing code in a loop can be done using StrCmp, IntCmp, IfErrors, Goto and more
    * The following "statements" are available:
        + If|IfNot|Unless..{ElseIf|ElseIfNot|ElseUnless}..[Else]..EndIf|EndUnless
           Conditionally executes a block of statements, depending on the value
           of an expression. IfNot and Unless are equivalent and
           interchangeable, as are ElseIfNot and ElseUnless.
        + AndIf|AndIfNot|AndUnless|OrIf|OrIfNot|OrUnless
           Adds any number of extra conditions to If, IfNot, Unless, ElseIf,
           ElseIfNot and ElseUnless statements.
        + IfThen|IfNotThen..|..|
           Conditionally executes an inline statement, depending on the value
           of an expression.
        + IfCmd..||..|
           Conditionally executes an inline statement, depending on a true
           value of the provided NSIS function.
        + Select..{Case[2|3|4|5]}..[CaseElse|Default]..EndSelect
           Executes one of several blocks of statements, depending on the value
           of an expression.
        + Switch..{Case|CaseElse|Default}..EndSwitch
           Jumps to one of several labels, depending on the value of an
           expression.
        + Do[While|Until]..{ExitDo|Continue|Break}..Loop[While|Until]
           Repeats a block of statements until stopped, or depending on the
           value of an expression.
        + While..{ExitWhile|Continue|Break}..EndWhile
           An alias for DoWhile..Loop (for backwards-compatibility)
        + For[Each]..{ExitFor|Continue|Break}..Next
           Repeats a block of statements varying the value of a variable.
    * The following "expressions" are available:
        + Standard (built-in) string tests (which are case-insensitive):
         a == b; a != b
        + Additional case-insensitive string tests (using System.dll):
         a S< b; a S>= b; a S> b; a S<= b
        + Case-sensitive string tests:
         a S== b; a S!= b
        + Standard (built-in) signed integer tests:
         a = b; a <> b; a < b; a >= b; a > b; a <= b
        + Standard (built-in) unsigned integer tests:
         a U< b; a U>= b; a U> b; a U<= b
        + 64-bit integer tests (using System.dll):
         a L= b; a L<> b; a L< b; a L>= b; a L> b; a L<= b
        + Built-in NSIS flag tests:
         ${Abort}; ${Errors}; ${RebootFlag}; ${Silent}
        + Built-in NSIS other tests:
         ${FileExists} a
        + Any conditional NSIS instruction test:
         ${Cmd} a
        + Section flag tests:
         ${SectionIsSelected} a; ${SectionIsSectionGroup} a;
         ${SectionIsSectionGroupEnd} a; ${SectionIsBold} a;
         ${SectionIsReadOnly} a; ${SectionIsExpanded} a;
         ${SectionIsPartiallySelected} a
    * ex. keywords are surround with ${}
    !include LogicLib.nsh
    ${If} $0 == 'some value'
      MessageBox MB_OK '$$0 is some value'
    ${ElseIf} $0 == 'some other value'
      MessageBox MB_OK '$$0 is some other value'
    ${Else}
      MessageBox MB_OK '$$0 is "$0"'
    ${EndIf}
- Variable, define the variable by Var command, and the variables are global 
    * define
    Var var_name
    * use
    $var_name
- Stack, there is a stack for temporary storage, access the stack by Push and Pop
- Registers built-in variable, there are 20(like $0 and $R0), there could work with stack to share code in different sections or functions
    * ex.
    Function bla
        Push $R0
        Push $R1
        ...code...
        Pop $R1
        Pop $R0
    FunctionEnd
- Common, ';' to common a line
- Debug script
    * display variable, MessageBoxes or DetailPrint
    * display all variable, have to use the plugin DumpState
    * there is another way to dump the state into the file, could check the log file
- Compiler commands
    * define product's version number
    !define VERSION "1.0.0"
    * Conditional Compilation
        + !define, add gflag to global define list
        ex.
        !define USE_SOMETHING
        !define VERSION 1.2
        !define /date NOW "%H:%M:%S %d %b, %Y"
        !define /math RESULT 3 + 10
        !define /math REST 15 % ${RESULT}
        !define /file BUNCHASTUFF somesourcefile.cpp
        + !undef
        + !ifdef, !if
        + !endif
        + !ifmacrodef, !ifmacrondef
        !macro SomeMacro
        !macroend
        !ifmacrodef SomeMacro
          !echo "SomeMacro is defined"
        !endif
        + !insertmacro, Inserts the contents of a macro that was created with !macro. 
        ex.
        !macro Print text
          DetailPrint "${text}"
        !macroend
        !insertmacro Print "some text"
        + !macro, create a macro with specify name
        !marcoend
        ex.
        !macro SomeMacro parm1 parm2 parm3
          DetailPrint "${parm1}"
          MessageBox MB_OK "${parm2}"
          File "${parm3}"
        !macroend
        + !searchparse, !searchreplace
        
        ex.
        ;search filename.cpp for a line '#define APP_VERSION "2.5"' and set ${VER_MAJOR} to 2, ${VER_MINOR} to 5.
        !searchparse /file filename.cpp `#define APP_VERSION "` VER_MAJOR `.` VER_MINOR `"`
        
        ;defines ${blah} to "i like ponies"
        !searchreplace blah "i love ponies" "love" "like"
    * use macro to avoid write same code for both installer and uninstaller
    !macro MyFunc UN
    Function ${UN}MyFunc
      Call ${UN}DoRegStuff
      ReadRegStr $0 HKLM Software\MyProgram key
      DetailPrint $0
    FunctionEnd
    !macroend

    !insertmacro MyFunc ""
    !insertmacro MyFunc "un."
- Compiler, MakeNSIS.exe is the NSIS compiler, right-click .nsi file and select compile
- Compression methods
ZLIB, default and fast, use little memory
LZMA, good method for create small installer for internet distribution
BZIP2, is the middle
- Modern UI
- Plug-ins, can be called from the script. There are all dll files written in C, C++, delphi,...
    * ex. call a plug-in
    DLLName::FunctionName "parameter number 1" "parameter number 2" "parameter number 3"
    * NSIS search for plug-ins in the plugins folder, use !addplugindir to tell NSIS to search in other direcotries.
    * Common plug-ins
        + InstallOptions is a popular plug-in that allows you to create custom pages, in combination with the NSIS Page commands 
        + Startmenu plug-in provides a page that allows the user to choose a Start Menu folder.
    
## Command line usage
    
    
    
    





















    
    
    
    
    
    
    
    
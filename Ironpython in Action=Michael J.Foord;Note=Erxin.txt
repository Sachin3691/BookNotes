Ironpython in Action=Michael J.Foord;Note=Erxin

# introduce PTV 2.0 for visual studio 2012
- reference
https://pytools.codeplex.com/documentation
- edit
    + function info, display function help by press ctrl+shift+space or type the '(' after the function name
    + auto completion info, ctrl + j to display the auto completion info
    + navigate to, ctrl+comma or select Edit->Navigate To Command
    + go to definition, f12 
    + find all reference, shift + f12
    + code formatting, ctrl+k, d for reformat document, ctrl+k, f for reformat selection
- refactoring
    + extract method
    + rename
    + add import
    + remove import, remove the unused imports
- interactive window
    + execute project in python interactive
    + choose ipython as the main REPL, cross-platform and has interactive parallel computing features
    Tools/Options/Python Tools to select
    + support meta command start with $, such as $help
    + control the intelligent engine level by setting the evaluate level in the advance python tool
    Tools->Options->Editor->Python->Advanced menu
    + send code to interactive, edit some codes and right click select send code to interactive window
    + send to defining module, the interactive window will contain the history you've done in this command
    + using the IPython REPL with PTVS
        * switch the interpreter of the interactive window to ipython 
        * select the current python development virtual environment
        * the ipython output could be display in the interactive window, also support past or send edit code to the interactive window
        * run the code directly in the editor will active normal like with standard mode
        * You can also use IPython in “notebook” mode where you can use any browser on any OS as the canvas. The backend IPython engine can be local on your machine, or remote. Windows Azure has support for running IPython on a Windows or Linux VM.
    + unofficial windows binaries for python extension packages
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack
- debugging, choose the project's property window(alt+enter), there are four debuggers
    + standard VS debugger for cpython
    + ironpython /.net debugger, support debug into multi-lingual with .net debugger
    + python MPI debugger, support debugging acrosss remote processes on an HPC cluster
    + django debugger
    + the debug interactive window, The debug interactive window supports several meta commands. $help to get a list of the meta commands.
    Command	                Arguments	            Description
    $procs	 	                                                Lists the processes currently being debugged.
    $proc	                    process id	            Switches the current process to the specified process id.
    $proc	 	                                                Displays the current process id.
    $mod	                    module name	        Switches the current scope to the specified module name. This
                                                                    can also be done using the toolbar. The active module automatically changes back to <CurrentFrame> when execution breaks into the debugger.
    $threads	 	                                            Lists the threads currently being debugged.
    $thread	                thread id	                Switches the current thread to the specified thread id.
    $thread	 	                                            Displays the current thread id.
    $where,w,bt	 	                                        Lists the frames for the current thread.
    $frame	                    frame id	                Switches the current frame to the specified frame id.
    $frame	 	                                                Displays the current frame id.
    $up,u	 	                                                Move the current frame one level up in the stack trace.
    $down,d	 	                                            Move the current frame one level down in the stack trace.
    $continue,cont,c	 	                                Starts executing the program from the current statement.
    $stepin,step,s	 	                                    Steps into the next function call, if possible.
     Threads and Call Stack are not synchronized with the debug interactive window. This means each debug window is isolated
     + mixed mode debugging, mixed with C/C++, supported for CPython 2.7 and 3.3+. Unit test debugging is not supported in mixed mode.
        * enable mixed mode debugging, open the project property window, open the debug tab, check "Enable native code debugging"
        * When attaching the debugger to an existing process, mixed-mode debugging can be enabled by checking both Native and Python at the same time in the “Code Type” dialog. 
        * download the symbols
        * features
        Combined call stack, configure at Tools –> Options –> Debugging –> General –> Enable Just My Code.
        Python view of PyObject values in native code, toggling Python –> Show Python View Nodes:
        C++ view of Python values in Python code
        Stepping between Python and native
        * python symbol download page
        https://pytools.codeplex.com/wikipage?title=Symbols%20for%20Python%20mixed-mode%20debugging
- profiling
    + go to the Analyze menu and and select Launch Python Profiling
- projects
    + file extensions *.pyproj files.
    + set as start file
    + project types, need relative software, eg HPC SDK for the MPI projects
        * console application
        * ironpython silverlight web page
        * wpf application, code and design are separated with the markup being stored in a *.xaml, the WYSIWIG designer enables drags and drop editing , python code can be used to wire up event handling
        * windows forms application, don't support design UI
        * lightweight  usage project-free, the project file isn't require, any python file could be edit directly
    + create file from exist files
    + project features
        * show all file
        * linked files
        * a link file can be convert into normal file
    + .net project reference, in ironpython the completions will get after the clr.AddReference call is analyzed
    + also support add reference to WebPI project entries, this is currently used only for deployment to windows azure cloud service where you can install additional components via the WebPI feed, includes django, cpython
    + python environment, PyPy for high performance applications, as well as distributions that bundle pre-built packages, A Python environment consists of an interpreter, a library, and a set of installed packages. 
        * Global Environments, global environments can be viewed in the Python Interpreters window (CtrI+K, ` — Control + K, backtick)
        * To add a global interpreter manually, you can open Interpreter Options from anywhere in the Python Interpreters window 
        * project environment, Project environments are listed in Solution Explorer under the Python Environments node. The bold entry is currently active, Another entry can be selected and activated by right-clicking and choosing “Activate Interpreter”
        * New packages can be installed by right-clicking the environment entry (“Python 2.7” in the image below) and selecting “Install Python Package”. 
        * Python Tools will use the pip package manager if available, and will download and install it when required.
        * One common situation where pip will fail to install a package is when the package include source code for native components. Without the required version of Visual Studio installed, “error: Unable to find vcvarsall.bat.” easy_install is often able to download pre-compiled binaries.
        * virtual environment,  a virtual environment consists of a Python interpreter, a library and a set of packages. However, the interpreter and library are actually taken from a base interpreter, which you can select from your global environments.
        create virtual environment, right-click the Python Environments item in Solution Explorer and select “Add Virtual Environment…”.
- unite test
    + add new item choose python unite test
    + the added test could be found in the VS test explorer
    + notes
        * Tests must be importable from the top directory of your project. This means that each folder must include an __init__.py file.
        * For VS 2013, tests are only refreshed when the project file changes, or when it is reopened. Other versions of VS will update whenever a code file is modified and saved.
    + running test
        * select runall in the test explorer
    + debug test
        * right click a test and selecting debug selected tests
        * Note that "Analyze Code Coverage for Selected Tests" and "Profile Test" are not supported.
- PTVS support django and cloud computing on Azure
    + full document of azure django with VS
    https://www.windowsazure.com/zh-cn/develop/python/tutorials/django-with-visual-studio/
    + Django deployment from PTVS to Azure is available in two modes:
    PTVS 1.5+ supports Django on Azure's "Cloud Service". 
    PTVS 2.0+ supports Azure "Web Sites" as well. 
    Running in the local Windows Azure Emulator and Publishing to the cloud:
    support debugging
    + detail tutorial
    https://pytools.codeplex.com/wikipage?title=Django%20Web%20Site%2fCloud%20Service%20Tutorial
- The Object Browser
- HPC & Cloud Features
    - current support computations in two general ways
        * Batch mode: Via MPI, using the MPI4PY wrappers on a cluster
        * Interactive mode: Via the integrated IPython Shell on a cluster (or by using IPython by itself)
    - Writing Message Passing Interface, MPI programs in Python on a Windows HPC cluster, You can interface into MSMPI via most any language, including CPython and IronPython.
        *  MPI for Python tutorial.
        http://mpi4py.scipy.org/docs/usrman/index.html
        *  C/Fortran tutorial from LLNL.
        https://computing.llnl.gov/tutorials/mpi/
    - MPI quick start guide, make sure you have a consistent set of 32 or 64-bit of Python.exe/OS/MPI library collection installed.
        * Download and install the Windows HPC SDK -- This basically provides you with the MSMPI library and necessary headers.
        http://www.microsoft.com/en-us/download/details.aspx?id=26645
        * Download and install the Windows HPC Pack -- this gives you the Cluster Manager bits for setting up a dedicated cluster, a job scheduler, etc.
        http://www.microsoft.com/en-us/download/details.aspx?id=26646
        * To write MPI programs with CPython, you can use the MPI4PY wrappers from:
        http://code.activestate.com/pypm/mpi4py/
        * To write MPI programs with IronPython you can use the MPI.Net wrappers from: http://www.osl.iu.edu/research/mpi.net/ - click on the download tab and install the .msi.
        * As mentioned before, you can experiment with MPI on your local machine or setup a cluster. A cluster can be a dedicated one or a just a collection of PC's that are sitting around in your office (eg not used at night). Here's the Cluster setup guide.
        http://www.microsoft.com/en-us/download/details.aspx?id=19218
    + verify the program without cluster, MPI program, compute PI https://pytools.codeplex.com/wikipage?title=Detailed%20Walk-thu%20Guide%20-%20HPC%20and%20Cloud%20Features
    + run the program on the real clusters
    >clusrun /scheduler:head-node-name /all hostname.exe
    + PyCUDA, use the GPU calculation
    + In general the MPI.Net calls require less parameters since data types, sizes, etc. are known. MPI.Net in turn constructs the C API calls and P/Invokes into MSMPI.dll. 
    + IPython Quick Start Guide,  installed IPython and the Windows HPC bits
    ipcluster -n 2
    Create a cluster profile using: ipcluster create -p mycluster
    Edit configuration files in the directory .ipython\cluster_mycluster
        * detail doc  http://ipython.scipy.org 
    + profile your code
    SPMD programs where most of the ranks do similar things, you can profile one rank, optimize your code and redeploy.
    + Another option for profiling on a cluster is using ETW (Event Tracing for Windows). 
- PyKinect – write Kinect games using Python!
    + Prerequisites
        * CPython 2.7
        * PyGame (http://www.pygame.org/download.shtml)
        * Kinect SDK (http://kinectforwindows.org/  32-bit only!)
        * Speech support (Kinect for Windows Runtime Language Pack, version 0.9)
        * A kinect sensor (note you don’t need an Xbox 360 to use PyKinect) 
        * A kinect Power/USB Adaptor (eg: Sample from Amazon.com)
    + reference doc https://pytools.codeplex.com/wikipage?title=PyKinect
- Pyvot – A Python to/from Excel Connector
    + using the existing Excel object model as exposed via COM.
    + http://packages.python.org/Pyvot/, doc
    + Python Tools for Visual Studio now ships an add-on for Pyvot integration. This add-on includes a Pyvot project template as well as support for installing Pyvot into multiple interpreters.
    + https://pytools.codeplex.com/wikipage?title=Pyvot, using Pyvot in visual studio
- wfastcgi.py provide a gateway between IIS's FastCGI support to Python's WSGI protocol. It can be downloaded off of the releases page.
    + Download and install wfastcgi
    + make sure IIS has FastCGI installed
    start /wait %windir%\System32\\PkgMgr.exe /iu:IIS-CGI 
    + register the handler with IIS
    %windir%\system32\inetsrv\appcmd set config /section:system.webServer/fastCGI "/+[fullPath='c:\Python27\python.exe', arguments='C:\Python27\Scripts\wfastcgi.py']" 
    + use the handler in a web.config file, here's an example configured for a Django project
    web config for a django project
    <appSettings>
        <add key="WSGI_HANDLER" value="django.core.handlers.wsgi.WSGIHandler()" />
        <add key="DJANGO_SETTINGS_MODULE" value="DjangoProject.settings" />   
    </appSettings>
    <system.webServer>
        <handlers>
            <add name="Python_FastCGI"
                path="handler.fcgi"
                verb="*"
                modules="FastCgiModule"
                scriptProcessor="C:\Python27\python.exe|C:\Python27\Scripts\wfastcgi.py"
                resourceType="Either"
                requireAccess="Script" />
        </handlers>
        <rewrite>
            <rules>
                <rule name="Django Application" stopProcessing="true">
                    <match url="(.*)" ignoreCase="false" />
                    <action type="Rewrite" url="handler.fcgi/{R:1}" appendQueryString="false" />
                </rule>
            </rules>
        </rewrite>
    </system.webServer>
    WSGI_HANDLER,	 Specifies the fully qualified handle name, such as "mymodule.handler" or "mymodule.package.handler". The module name will be imported and the specified handler name will be accessed. If the handler name ends in "()" the handler will be called with no arguments. If the handler cannot be fetched or is None wfastcgi will exit and log the error if WSGI_LOG is set.
    WSGI_RESTART_FILE_REGEX,	 Specifies the regex for the filenames which if modified will cause wfastcgi to exit and be restarted. Defaults to ".*((\.py)|(\.config))$".
    WSGI_LOG,	 Specifies the path to a log file of errors and important messages.
    
# Python MPI
- relative projects
OOMPI, Pypar, pyMPI, Scientific Python
- avaliable tool for scientific computing 
    * Cython is a language that makes writing C extensions for the Python language as easy as Python itself. The Cython language is very close to the Python language, but Cython additionally supports calling C functions and declaring C types on variables and class attributes.
    * NumPy, SciPy
    * SWIG is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages like Perl, Tcl/Tk, Ruby and Python. 
- python MPI tutorial 
    * http://mpi4py.scipy.org/docs/usrman/index.html
    * other parallel computing tutorial, https://computing.llnl.gov/?set=training&page=index#training_materials
    * implementations of threads: POSIX (C Language only) Threads and OpenMP(C/C++, Fortran). can be very easy and simple to use - provides for
- more tutorial
POSIX Threads tutorial: computing.llnl.gov/tutorials/pthreads
OpenMP tutorial: computing.llnl.gov/tutorials/openMP

# ipython introduction
- four helpful commands
?,	Introduction and overview of IPython’s features.
%, quickref	Quick reference.
help,	Python’s own help system.
object?, Details about ‘object’, use ‘object??’ for extra details.
- Tab completion
- exploring object
To get specific information on an object, you can use the magic commands %pdoc, %pdef, %psource and %pfile
- magic functions
    + Line magics are prefixed with the % character and work much like OS command-line calls  they get as an argument the rest of the line, where arguments are passed without parentheses or quotes
    ex.
    In [1]: %timeit range(1000)
    100000 loops, best of 3: 7.76 us per loop
    + Cell magics are prefixed with a double %%, and they are functions that get as an argument not only the rest of the line, but also the lines below it in a separate argument.
    In [2]: %%timeit x = range(10000)
        ...: max(x)
        ...:
    1000 loops, best of 3: 223 us per loop
    + The builtin magics include:
    Functions that work with code: %run, %edit, %save, %macro, %recall, etc.
    Functions which affect the shell: %colors, %xmode, %autoindent, %automagic, etc.
    Other functions such as %reset, %timeit, %%file, %load, or %paste.
    +  magic system can be obtained by calling %magic, and for more details on any magic function, call %somemagic? 
    + see all the available magic functions, call %lsmagic.
- running and editing
    + The %run magic command allows you to run any python script and load all of its data directly into the interactive namespace.
    + Several other magic functions can use your input history, including %edit, %rerun, %recall, %macro, %save and %pastebin. You can use a standard format to refer to lines:
    %pastebin 3 18-20 ~1/1-5
    This will take line 3 and lines 18 to 20 from the current session, and lines 1-5 from the previous session.
- system shell command
    + run any system command with prefix !
    !ping www.bbc.co.uk
    + detail doc, http://ipython.org/ipython-doc/stable/interactive/reference.html#system-shell-access
    + define your own system aliases
     a complete system for changing directories, both via a stack (see %pushd, %popd and %dhist) and via direct %cd. The latter keeps a history of visited 
    
# Getting started
- MS specific support projects for ironpython
VS,  asp.net, silverlight, xna, microsoft robotics kit, volta (a experimental recompiler from IL to javascript), c# 4.0
- example project resolversystemone to mix python with express sheet such as excel together
http://www.resolversystems.com/products/resolver-one/
- other python implementations
    + ironpython, for .net
    + jython, for java vm
    + pypy, an experimental interpreter compiler toolchain with a multitude of backends, it includes an implementation of python in python
    + stackless, an alternative to cpython that makes minimal use of the c stack and has support for green stack
    + tinypy, a minimal implementation of python in 64kb of code. useful for embedded systems
- language run on DLR
ironpython,
ironruby,
managed jscript,
toyScript,
ironScheme
- If you enter an expression, the resulting value will be printed to the console. The result of the last expression, whether value or object, is available in the interpreter by using the underscore (_).
- .net framework assemblies, namespaces and references
    + Assemblies are compiled code (in the form of dlls or exe files), The types in an assembly are contained innamespaces. If there is no explicit defined namespace, they're contain in the default namespace 
    + Assemblies and namespaces are roughly the same as packages and modulesin Python, but aren’t directly equivalent.
    + reference clr to use .net assembly
- live objects and the interactive interpreter
    + ex. 
    >>> import clr
    >>> clr.AddReference('System.Windows.Forms') 
    >>> clr.AddReference('System.Drawing')
    >>> from System.Windows.Forms import Application, Button, Form  
    >>> from System.Drawing import Point
    >>> x = 0
    >>> y = 0
    >>> form = Form() 
    >>> form.Text = "Hello World"
    >>> button = Button(Text="Button Text") 
    >>> form.Controls.Add(button)  
    >>> def click(sender, event): 
    ...     global x, y
    ...     button.Location = Point(x, y)
    ...     x += 5
    ...     y += 5
    ...
    >>> button.Click += click 
    >>> Application.Run(form) 
    
# introduction to python
- different with point in str in cpython, all str in ironpython is unicode, the str object could be tested. Both strand unicodestrings have a common base class: basestring. 
isinstance(obj, ,basestring)
- raw string, backslashes aren't interpreted as escape characters
- a ironpython str is also a .net string, By default the .NET methods aren’t available on 
the basic types such as strings.
    + enable the clr methods by import clr module
    + files and threading also have this concept
    + numbers, integers, long integers, floating point numbers, and complex numbers. large number will automatic change to long. int divide int will 
- list
- tuple
- dictionary
- set
- everything in python is a object
- names, objects, references
- all python objects are references
- mutable and immutable objects
    + mutable, can be changed in place
    + immutable, others can't changed when they've created
    Strings and the number types are also immutable. 
- statement and expression
    + a statement does something, perform an action, Statements can’t be compounded together. 
    + a expression return a value
- condition and loop statement
- function
- built-in functions, commonly used functions
abs, enumerate, len, isinstance, max, min, open, range, reversed, sorted, sum, zip
- exception catching
try:
    pass
except (exType0, exType1, ...):
    pass
...
[finally:]
[else:]
    pass # if no exception accurs
    + .net exception percolates through to ironPython, it's wrapped as a python exception, the detail is listed at
     http://www.codeplex.com/IronPython/Wiki/View.aspx?title=Exception%20Mode
- the function could be wrapper and nested
    + ex.
    >>> def wfun():
    ... 	print('wfun')
    ... 	def wwfun():
    ... 		print('wwfun')
    ... 		def wwwfun():
    ... 			print('wwwfun')
    ... 		return wwwfun
    ... 	return wwfun
    ... 
    >>> tf = wfun()
    wfun
    >>> tf()
    wwfun
    <function wwwfun at 0x03417330>
    >>> ttf = tf()
    wwfun
    >>> ttf()
    wwwfun
    + ex.
    >>> def makeAdder(value):
    ...     def newAdder(newValue):  
    ...         return value + newValue 
    ... return newAdder
    ... 
    >>> adder = makeAdder(7)  
    >>> adder(3)
    10
    >>> adder(-4)
    3
    D
- modules and packages
    + modules, break your program down into small files containing only closely related classes or functionality. In Python, these are called modules.
    + A module is a Python source file (a text file) whose name ends with .py. Objects (names) defined in a modulecan be imported and used elsewhere. They’re very different from .NET modules, which are partitions 
    of assemblies.
    + Python allows you to group related modules together as a package. The structure of a Python package, with subpackages
    + A package is a directory containing Python files and a file called __init__.py. A package can contain subpackages (directories), which also have an __init__.py. Directories and subdirectories must have names that are valid Python identifiers.
    + Importing anything from the package will execute __init__.py and insert the resulting module into sys.modules
    + python import package process
        * check the sys.modules to see if the module has already been imported, it's a dict, keyed by module name, containing the module object
    + re-import a module
    When you re-import a module, you get a new reference to the already-created module object. This can be a pain when you’re actively developing a module and want to play with it from the interactive interpreter. 
    >>> import MyModule
    >>> reload(MyModule)  
    <module 'MyModule' from 'MyModule.py'>
    >>> import MyModule 
- docstring, A docstring is a string written inline with an object and that isn’t assigned a name. the string will be attached to the __doc__ attribute, when call the help() it will display the string
- python standard library
    + An open source project called Ironclad, created by Resolver Systems, reimplements the Python C-APIin C# with the goal of allowing you to import and use Python C extensions from IronPython.
    http://code.google.com/p/ironclad/
    + https://www.pythonanywhere.com/details/hosting, python any where, python website host
    + You then need to expose the library toIronPython. in three ways
        * Set an environment variable IRONPYTHONPATHto the location of the standard library directory.
        * Start IronPython while the current directory is C:\Python25\Lib.
        * Copy the whole standard library into a directory accessible by your application. You’ll need to add this directory to sys.pathat runtime.
    + manually expose standard lib
    >>> import sys
    >>> sys.path.append(r'C:\Python25\Lib')
- useful standard library
sys, os, os.path, re, math, random, unittest, optparse, unittest, 
cPickle, Provides object persistence. Serialize Python or .NET objects as text or binary.
decimal, time
cStringIO, Implements a file-like class (StringIO) that reads and writes a string buffer.
collections, High-performance container datatype, the dequeue.
itertools, A number of iterator building blocks.
types
- IronPython makes it simple to create prototypes, and prove that a particular approach works

# .net objects and ironPython
- create the first window form app need Application and Form class
>>> import clr
>>> clr.AddReference('System.Windows.Forms')
>>> from System.Windows.Forms import Application, Form
>>> form = Form()
>>> form.Text = 'Hello World'
>>> Application.Run(form)
- another way to set .net object property
form = Form(Text='Hello World')
- ironPython strings, numbers, and Booleans aren’t just similar to their .NET equivalents; they are .NET types.
- ironpython project could use the window designer to change the form view
- add label into the form
    + ex.
    lb = Label()
    objForm.Controls.Add(lb)
    + .net indexing mechanism by implement the ilist interface
    + common control operations
    Add, Remove, RemoveAt, AddRange
    + You can assign the parent control to the Parentproperty of the child control.
    + reference system color
    >>> clr.AddReference('System.Drawing')
    >>> from System.Drawing import Color
    >>> label.BackColor = Color.AliceBlue
    >>> label.ForeColor = Color.Crimson
- An array can only contain objects of a single type.
>>> form.Controls.AddRange([label])
Traceback (most recent call last):
TypeError: expected Array, got list
- enumeration belongs in the  System.Windows.Forms, Usually, but not always, the underlying values are 32-bit signed integers.
- delegate and event handler
    + create and make event handler
    form = Form()
    def onMouseMove(sender, event):
        print event.X, event.Y
    form.MouseMove += onMouseMove
- inherite class from clr
import clr
clr.AddReference('System.Windows.Forms') 
clr.AddReference('System.Drawing')
from System.Windows.Forms import (
Application, Form,
FormBorderStyle, Label
)
from System.Drawing import (
Color, Font, FontStyle, Point
)
class MainForm(Form): 
    pass
    
# core development technical
- writing an application and design patterns with ironpython
- Duck typing, An indexing operation will succeed if the indexed object supports the appropriate magic method, irrespective of what type it is.
    + duck typing history, gets the name from duck test(attribute to James Whitcomb Riley)
    When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck
    +  valid uses of an object should be determined by what  operations it supports rather than what type it is.
- Model view controller in ironpython
Application.EnableVisualStyles() 
Application.Run(MainForm())
This enables styles so that the application will use any theme that the user may have set under Windows.
- document, view, controller
- command pattern, is where the request encapsulated as an object
- .net system.io module
IOis a namespace in the System assembly. You don’t need to explicitly add a reference to the System assembly because the IronPython engine uses it.
- ironpython make a error mapping to .net exceptions
- create menu item and shortcuts
saveItem = ToolStripMenuItem
saveItem.Text = '&Save...'
saveItem.ShortcutKeys = Keys.S | Keys.Control
- Get current application execute path
>>> from System.Windows.Forms import Application
>>> from System.IO import Path
>>> executablePath = Application.ExecutablePath
>>> directory = Path.GetDirectoryName(executablePath)
- function decorator
    + function wrapper for check arguments
    def checkarguments(function):
        def decorated(*args):
            if None in args:
                raise TypeError("Invalid Argument")
            return function(*args)
    return decorated
    class MyClass(object):
        @checkarguments
        def method(self, arg1, arg2
            return arg1 + arg2
    >>> instance = MyClass()
    >>> instance.method(1, 2)
- .net xml operations
System.Xml Provides support for standards-based XML support. Includes the XmlReaderand XmlWriterclasses.
System.Xml.Schema Support for XML Schemas in the form of schema definition language (XSD) schemas.
System.Xml.Serialization Classes to serialize objects in XML form.
System.Xml.XPath Classes to work with the XQuery 1.0 and XPath 2.0 Data Model.
System.Xml.Xsl Support for Extensible Stylesheet Language Transformation (XSLT) transforms.
    + use XmlReader, XmlWrite to read write xml doc
    + the relative setting class is XmlReaderSetting and XmlWriterSetting
- encoding
Encoding lives in the System.Textnamespace, and is a useful class.
- add event handler
from System.Windows.Forms import *
class MyForm(Form):
    def __init__(self):
        self.lb = lb = Label()
        lb.Text = u'Hello ironpython kjkj'
        self.Controls.Add(lb)
        self.MouseHover += self.OnMouseHoverHandler
        
    def OnMouseHoverHandler(self, sender, evt):
        self.lb.Text = u'mouse hover me'
- Object serializing with BinaryFormatter

# HTTP rfc 2616 http/1.1
- An HTTP status code as defined in RFC 2616
http://www.faqs.org
- RFC 2965, HTTP State Management Mechanism

# properties, dialogs and visual studio
- full properties signature 
The full signature of propertyis as follows:
name = property(fget=None, fset=None, fdel=None, doc=None)
fget—A method to be called when the attribute is fetched
fset—A method to be called when the attribute is set
fdel—A method to be called when the attribute is deleted
doc—A docstring for the property
- example to create property
class PropertyExample(object):
    def __init__(self, x): 
        self._x = x
    def _getX(self):
        print "getting x"
        return self._x
    def _setX(self, value):
        print "setting x"
        self._x = value
    def _delX(self):
        print "Attempting to delete x"
x = property(_getX, _setX, _delX) 

# agile testing, where dynamic typing shines
- tests are as follow
    + unit tests
    Unit tests are for testing components of your code, usually individual classes or functions.
    + functional tests
    Functional tests are higher-level tests that drive your application from the outside. They can be done with automation tools, by your test framework, or by providing functional hooks within your application.
    + regression tests
    Regression testing checks that bugs you’ve fixed don’t recur. your reason for writing them is different. Once you’ve identified and fixed a bug, the regression testguarantees that it doesn’t come back.
- python test tools
    + nose
    + py.test
    + doctest
    + pyFit
- doctest is not work with ironpython in 2007
- Writing the tests first is a process called test-driven development
    + write the class or requirement specification
    + write the test that record the written specification, the test can act a specification for the code
    the test method name should express the exact meaning for the method
    + Run all the test make sure all are failed as expected. This is the TDD approach—to write the tests before the implementation. You’ll know when we have a complete implementation; all the tests will pass.
    + write the code
- the main unite test methods 
unitetest.case, setup and teardown method
- unite test module components
TestCase—The test classes.
TestSuite—Can hold multiple test classes to be executed together.
TextTestRunner—Executes test suites, outputtingthe results as text. You can control how much information this outputs through the verbositykeyword argument.
TestResult—Is returned by the runner and holds information about errors and failures.
- make test suit
import testmodule1
import testmodule2
import testmodule3
suite = MakeSuite(testmodule1, testmodule2, testmodule3)
if there are any errors or failures, it exits with an exit code of 1
- test with mock object 
    + the mock object or class just implement the method or properties the client side called
- instance attribute checking rules
>>> class AClass(object):
... pass
...
>>> instance = AClass()
>>> def method(self):
...     print 'Hello'
...
>>> AClass.method = method
>>> instance.method()
Hello
- interact with the GUI thread
    + The Windows Forms event loop must run in a Single Threaded Apartment (STA) thread.
    + Windows Forms controls provide an Invoke method, which takes a delegate and executes on the control thread.
    + IronPython provides a convenient delegate that you can create with a function and use with Invoke.
    + ex.
    import clr
    clr.AddReference('System.Windows.Forms')
    from System.Windows.Forms import Application, Form
    from System.Threading import (
    ApartmentState,
    Thread, ThreadStart
    )
    try:
        # IronPython 1.x
        from IronPython.Runtime.Calls import CallTarget0
    except ImportError: 
        # IronPython 2.x
        clr.AddReference('IronPython')
        from IronPython.Compiler import CallTarget0
    class Something(object):  
        started = False
        form = None
    something = Something()
    def StartEventLoop():
        f = Form()
        f.Text = 'A Windows Forms Form'
        f.Show()
        something.form = f  
        something.started = True
        Application.Run(f)
    thread = Thread(ThreadStart(StartEventLoop))
    thread.SetApartmentState(ApartmentState.STA)
    thread.Start()
    # Some time for form to appear
    while not something.started:  
        Thread.CurrentThread.Join(100)
    def GetFormTitle():
        title = something.form.Text
        return title
    title = something.form.Invoke(CallTarget0(GetFormTitle))
    print title
    Thread.Sleep(5000) 
    delegate = CallTarget0(something.form.Close)
    something.form.Invoke(delegate)
    # CallTarget0 is a ironpython defined lambda function wrapper, it's equal to the FUNC0 in c#
- . The ideal would be to have one line of code perline of user story.

# Meta programming protocols and more
- protocols instead of interfaces, in python could use duck typing
    + python not to enforce interface in language design
    + third-party interface packages, such as zope project
    http://www.zope.org/

- a myriad of magic methods, method start with double underscores will automatic called by interpreter, such as
_init__constructor 
__getitem__
__setitem__

- representing object as strings, when you call str on an object, python calls __str__, when you use repr, python calls __repr__

if __str__ is unavailable then will use __repre__ to replace

when you call unicode on object, will call __unicode__, in ironpython strings are always unicode

- to control whether an object evaluates to True or False by implementing the __nonzero__ method, if no __nonZero__ then python will check for __len__

- addition overwrite, __add__, __radd__

- other method in object definition
method, operator, operation
__add__ + Addition
__sub__ - Subtraction
__mul__ * Multiplication
__floordiv // Floor division, truncating the result to the next integer down
__div__ / Division
__truediv / Used for division when true division is on
__mod__ % Modulo
__divmod__ Supports the built-in function divmod
__pow__ ** Raises to the power of
__lshift__ << Shifts to the left
__rshift__ >> Shifts to the right
__and__ &BitwiseAND
__xor__ ^ Bitwise exclusive OR
__or__ | Bitwise OR

- iteration, zero-indexed, __getitem__ method, explicity call iter function will attempt to call __iter__ on the object
an iterator is an object obeys three rules
    + it has a __iter__ method that returns itself
    + it has a next method that returns the next value from the iterator
    + when iterator is consumed, calling next should raise the StopIteration exception

- generators, using yield keword, similar to c# Yield Return statement

- equality and inequality, __eq__, and __ne__, an object will only compare equal to itself and not equal to everything else. both of the method need to implement for equality test

    + hashing, it should define a __hash__ method
        * for value type
        def __hash__(self):
            return hash(self.value)
            
        * for unhashable object
        def __hash__(self):
            return TypeError('Value obejcts are unhashable')

    + comparison operators
    
    __eq__ == Equality
    __ne__ != Inequality
    __lt__ < Less than
    __le__ <= Less than or equal to
    __gt__ > Greater than
    __ge__ >= Greater than or equal to
    
    + other easy way to support compare by implement the __cmp__ method for all kinds of comparison
            
- dynamic attribute access
    + python provide arbitrary attributes access through the __getattr__ method

    + attribute access with built-in functions
    hasattr(object, name), invoke, __getattr__(self, name)
    getattr(object, name), invoke, __setattr__(self, name, value)
    set(object, name, value), invoke, __delattr__(self, name)
    delattr(object, name)

    there is a __dict__ in every object that stores attributes

- attribute access through magic methods
     
- proxying attribute access, python has no true concept of private or protected members, you can achieve the same effect as private members through a factory function and a proxy class like 
def GetProxy(thing, readlist=None, 
    writelist=None, dellist=None):
        class Proxy(object): 
            def __getattr__(self, name): 
                if readlist and name in readlist:  
                    return getattr(thing, name)
                else:
                    raise AttributeError(name) 
            def __setattr__(self, name, value):
                if writelist and name in writelist:
                    setattr(thing, name, value)
                else:
                    raise AttributeError(name)
            def __delattr__(self, name):
                if dellist and name in dellist:
                    delattr(thing, name)
                else:
                    raise AttributeError(name)
        return Proxy()

- metaprogramming, Metaprogrammingis the programming language or runtime assisting with the writing or modification of your program. 

Metaclasses have a reputation for being deep black magic.

    + introduction to metaclasses
        * everything is an object
        * Every object has a type
        
    + simple example of a metaclass
    class PointlessMetaclass(type): 
        def __new__(meta, name, bases, classDict): 
            return type.__new__(meta, name, bases, classDict) 
            
    class SomeClass(object):
        __metaclass__ = PointlessMetaclass

    assigning the __metaclass__attribute inside the class definition. Subclasses automatically inherit the metaclass of their superclass

    To customize class creation with a metaclass, you need to inherit from type and override the __new__method
    
    + the __new__ constructor, the instance that __init__ receives is created by __new__, technically more correct to call __new__ the constructor and __init__ an initializer, __new__ receives the class as the first argument, plus any additional arguments used in the construction

    you can subclass the built-in types in python, but to customize immutable values like str and int, you need to override __new_- rather than __init__

    + uses of metaclasses, can be used to perform operation that would otherwise require a manual step
        * registering class as they're created
        * enabling new coding techniques
        * providing interface registration
        * class verification, check all methods have docstrings or that classes meet a particular standard
        * decorating all the methods in a class, can be useful for logging, tracing and profiling purposes
        * mixing in appropriate methods without having to use inheritance

    + a profiling metaclass
    from System import DateTime
    start = DateTime.Now
    someFunction()
    timeTaken = (DateTime.Now - start).TotalMilliseconds

    timing a function with Stopwatch class
    from System.Diagnostics import Stopwatch
    s = Stopwatch()
    s.Start()
    someFunction()
    s.Stop()
    
    timeTaken = s.ElapsedMilliseconds
    
    create a profile metaclass
    
    from types import FunctionType 
    class ProfilingMetaclass(type):
        def __new__(meta, classname, bases, classDict):
            for name, item in classDict.items():
                if isinstance(item, FunctionType):  
                    classDict[name] = profiler(item) 
            return type.__new__(meta, classname, bases, classDict)
        
    use the profile class
    from System.Threading import Thread
    class Test(object):
        __metaclass__ = ProfilingMetaclass
        def __init__(self):
            counter = 0
            while counter < 100:
                counter += 1
                self.method()
                
        def method(self):
            Thread.CurrentThread.Join(20)
        
- ironpython and clr
    + the first line of IronPython/CLR integration is the clr module
    
    + delegates and CallTarget(), the CallTarget family of delegates, they are useful for explicitly creating a delegate when ironpython can't magically create one for you, several delegates correspond to the number of arguments your callable needs to take( CallTarget0 for zero arguments, CallTarget1 for a single argument)
    
    In ironpython 1, callTarget0 lives in IronPython.Runtime.Calls namespace, in IronPython 2, it lives in IronPython.Compiler
    
    + first dusty corner, .net arrays
    
    In IronPython, you use the following 
    syntax to achieve the same thing:
    >>> from System import Array
    >>> intArray = Array[int]((1, 2, 3, 4, 5))
        
    create generic types list, reference System.Collections.Generic
    >>> dinosaurs = List[str]()
    
    
    + create instance and mutidimensional arrays, use CreateInstance factory method to create array
    >>> multiArray = Array.CreateInstance(str, 5)
    >>> multiArray = Array.CreateInstance(str, 5, 5)
    
    access multiple array by 
    >>> amember = multiArray[2, 2]
    
    
     create arrays with any number of dimensions by passing a type and an integer array specifying the size of each dimension. The number of members of the array determines the number of dimensions.
    >>> 5dimensions = Array[int]((5,5,5,5,5))
    
    create jagged array
    >>> arrays = tuple(Array[int]((0, 0, 0, 0, 0)) for i in range(5))
    >>> multiArray = Array[Array[int]](arrays)
    >>> multiArray[0][0]

    + overloaded methods, c# allows overloaded methods, on occasion to direct access to a specific overload by an Overloads collection it can be index by type(or a tuple of types), choosing the WriteLine method that takes an object then passing None to it
    from System import Console
    Console.WriteLine.Overloads[object](None)
    
    + three more .net concepts that don't map easily to python are out, ironpython runtime does some magic and the updated value becomes an extra return value.
    test with Dictionary.TryGetValue
    
    >>> from System.Collections.Generic import Dictionary
    >>> d = Dictionary[str, str]()
    >>> d['key1'] = 'Value 1'
    >>> d['key2'] = 'Value 2'
    >>> d.TryGetValue('key1')
    (True, 'Value 1')
    >>> d.TryGetValue('key3')
    (False, None)
        
    clr.Reference is a list of the assemblies, clr.Reference is a generic, you need to tell it the type of the reference you require
    >>> from System import Array
    >>> import clr
    >>> array = Array[int]((0,1,3,3,4)
    >>> array
    Array[int](0,1,2,3,4)
    >>> ref = clr.Reference[Array[int]](array)
    
    net you call Array.Resize you need to specify the type of array (again), because Resize is a generic method, you need to specify the type of array or will report TypeError, no callable targets
    >>> Array[int].Resize[int](ref, 3)
    >>> ref.Value
    Array[int]((0,1,2))
    
    
    a pointer is a good old-fashioned kind of reference. come with unmanaged resources, are represented with the System.IntPtr structure
    >>> from System import IntPtr
    >>> ptr = IntPtr(3478)
    >>> ptr.ToInt32()
    3478
    >>> IntPtr.Zero
    <System.IntPtr object at 0x...[0]>
    
    
    c# params keyword is used to pass a variable number of arguments like python *args, in ironpython just pass parameters as normal
    
- value types

.net value types                                            reference types
All numeric datatypes (including Byte)                      Strings
Boolean, Char, and Date                                     Arrays (even arrays of value types)
All structures, even if members are reference types         Class types (like Formant Object)
Enumerations (because the underlying type is numeric)       Delegates

- enumeration values and names, enumerations (enums) are implemented in .net with underlying numeric values, in c# or ironpython you could cast enum to underlying value
>>> from System.Net.Sockets import SocketOPtionName
>>> int(SocketOptionName.UnblockSource)
18

>>> str(SocketOptionName.UnblockSource)
'UnblockSource'

Take this code that uses Point, which, as a structure, is a value type:
>>> from System import Array
>>> from System.Drawing import Point
>>> point = Point(0, 0)
>>> array = Array[Point]((point,))
>>> array[0].X = 30
>>> array[0].X

relative c# code Referencing the value type will return a copy, and the update would be lost.
void Main()
{
	var point = new Point(0, 0);
	var ary = new Point[]{point};
	ary[0].X = 30;
	ary[0].X.Dump();
	point.Dump();
}

- interfaces, where a class implements an interface, that interface will be added to the method resolution order when you use it from python, you can also implement an interface in a python class(by inheriting from it). Even if an explicitly implemented interface method is marked as private on a class, you'll still be able to call it

calling method by interface
>>> import clr
>>> clr.AddReference('System.Windows.Forms')
>>> from System.Windows.Forms import DataGridView
>>> from System.ComponentModel import ISupportInitialize
>>> grid = DataGridView()
>>> ISupportInitialize.BeginInit(grid

you don't normally pass in arguments to invoke properties, instead you can use GetValue and SetValue on interface property descriptor

ISomeInterface.PropertyName.GetValue(instance)
ISomeInterface.PropertyName.SetValue(instance, value)

- attributes, like decorators in python and annotations in java, they're metadata applied to objects that provide information to the clr, you can't apply attributes to Python classes, common solution is to write stub c# classes and then subclass from IronPython, you can even generate and compile these classes at runtime.

- static compilation of ironpython code, compile ironpython code into binary assemblies, execute a python script using the IronPython ipy.exe with parameters -X:SaveAssemblies

clr module includes a function that can save executable into assemblies
clr.CompileModules(assemblyName, *fileNames, **kwArgs)

then you can add reference to the compiled assembly
clr.AddReference('modules.dll)
import module, module2  # from the generated assembly

IronPython, Pyc is a command-line tool that creates console or window executables from python files, it comes with good document
ipy.exe pyc.py /out:program.exe /main:main.py /target:winexe module.py module2.py


# IronPython and advanced .net
- crossplatform project mono
http://www.mono-project.com
- major new apis of .net 3.0
name                                    purpose
Windows Presentation Foundation         A new user interface library
Windows Communications Foundation       Library for working with web services
Windows Workflow Foundation             For creating, managing, and working with workflows
Windows CardSpace                       For managing digital identities

- hello world with wpf and ironpython, wpf key assemblies
    + presentationFramework.dll, high-level wpf controls and types
    + presentationCore.dll, base types from which all the controls and display elements derive , including the core classes UIElement and Visual
    + windowBase.dll, contains lower-level objects, such as DispatcherObject and DependencyObject
    + milcore.dll, WPF rendering engine
    + WindowCodecs.dll, low-level imaging support library
    
- wpf namespaces
Namespace                                       Purpose
System.Windows.Documents                        Types for supporting FlowDocumentand XPS documents.
System.Windows.Media                            For integrating rich media, including drawings, text, and audio and video content in WPF applications.
System.Windows.Media.Effects                    Types for applying visual effects to bitmaps.
System.Windows.Media.Imaging                    Provides classes for working with images (bitmaps).
System.Windows.Shapes                           Various shapes (such as ellipse, line, path, and polygon, plus the base class Shape)—for use in XAML and code.
System.Windows.Markup                           Classes for working with XAML, including serialization and extensions to XAML.
    
- WPF from code
import clr
clr.AddReference("PresentationFramework") 
clr.AddReference("PresentationCore")
from System.Windows import (
    Application, SizeToContent,
    Thickness, Window
)
from System.Windows.Controls import (
    Button, Label, StackPanel
)
from System.Windows.Media.Effects import DropShadowBitmapEffect
window = Window()
window.Title = 'Welcome to IronPython'
window.SizeToContent = SizeToContent.Height  
window.Width = 450
stack = StackPanel() 
stack.Margin = Thickness(15)
window.Content = stack
button = Button()
button.Content = 'Push Me'
button.FontSize = 24
button.BitmapEffect = DropShadowBitmapEffect()  
def onClick(sender, event):
message = Label()
message.FontSize = 36
message.Content = 'Welcome to IronPython!'
stack.Children.Add(message) 
button.Click += onClick
stack.Children.Add(button)
app = Application() 
app.Run(window)
    
- hello world from xaml
    + wpf xaml, used to describe wpf content
    + wps xaml, a subset of wpf xaml for creating formatted electronic documents
    + silverlight xaml, another subset of wpf xaml support by the siverlight browser plugin
    + wf xaml, window workflow foundation xaml
    + binary application markup language(BAML), compiled form of xaml
    
    + xml escaping rules for xaml
    Less than (<) &lt;
    Greater than (>) &gt;
    Ampersand (&) &amp;
    Quotation mark (") &quot;
    
    + create hellow world from xaml
    <Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Welcome to IronPython" Width="450" 
    SizeToContent="Height">
        <StackPanel Margin="15" x:Name="stackPanel">
        <Button FontSize="24" x:Name="button">
        <Button.BitmapEffect>
        <DropShadowBitmapEffect />
        </Button.BitmapEffect>
        Push Me
        </Button>
        </StackPanel>
    </Window>
    
    consuming xaml from ironpython
    import clr
    clr.AddReference("PresentationFramework")
    clr.AddReference("PresentationCore")
    
    from System.IO import File
    from System.Windows.Markup import XamlReader
    from System.Windows import (
    Application, Window
    )
    from System.Windows.Controls import Label
    class HelloWorld(object):
        def __init__(self):
            stream = File.OpenRead("HelloWorld.xaml")
            self.Root = XamlReader.Load(stream) 
            self.button = self.Root.FindName('button') 
            self.stackPanel = self.Root.FindName('stackPanel')
            self.button.Click += self.onClick  
        def onClick(self, sender, event):
            message = Label()
            message.FontSize = 36
            message.Content = 'Welcome to IronPython!'
            self.stackPanel.Children.Add(message)
    hello = HelloWorld()
    app = Application()
    app.Run(hello.Root)
    
- relative wpf controls
grid, scrollviewer, expander, textBlock is a ligthweight document control
    
- the xaml writer, is used to turn wpf object back to xaml
from System.IO import File
from System.Windows.Markup import XamlWriter
window = ControlsExample()
text = XamlWriter.Save(window.Content)
File.WriteAllText('out.xaml', text)
    
- XPS documents and flow content, XML Paper Specification(xps) is a combination of a document markup language, XPS is a answer to Adobe's Portable Document Format(PDF) to create print-ready documents
    
- flowDocument viewer classes
flowDocumentReader, FlowDocumentPageViewer and FlowDocumenetScrollViewer

The FlowDocumentReaderis the most capable of the viewer controls. It has features that allow the user to switch the display mode between single page, two pages side by side, and continuous scrolling.
    
Regular expression to insert image locations into XAML at runtime
    
    
# window system administration with ironpython
- use Windows Management Instrumentation (WMI) and PowerShell 
    
os              Working with processes and operating system–specific information
os.path         Handling files and paths
sys             Containing more system-specific information and the standard input, output, and error streams
stat            Interpreting calls to os.stat()
shutil          High-level file operations including copying, moving, and deleting trees of directories
glob            Pathname pattern expansion
fnmatch         Path and filename pattern matching
filecmp         File and directory comparison
    
- python libraries and IRONPYTHONPATH, need the standard library pointed to by the IRONPYTHONPATH environement variable, on windows, this usually the directory c:\python27\lib or something similar also could add some modules not in the standard library, c:\python27\lib;c:\modules
    
- parsing command-line arguments
from argparse import ArgumentParser

- read configuration file
from configobj import ConfigObj
    
- wmi system.management assembly, wmi is an implementation of the platform independent web-based enterprise management(WBEM) and common information model(CIM) standards, WMI provides some very low-level system information
    
    + system.management, provide a interface to the wmi infrastructure
        * simple WQL queries, processor usage percentage every five seconds
        
    import clr
    clr.AddReference("System.Management")
    from System.Management import ManagementObject
    from System.Threading import Thread  
    
    query = "Win32_PerfFormattedData_PerfOS_Processor.Name='_total'" 
    while True: 
        mo = ManagementObject(query)
        print mo["PercentProcessorTime"]
        Thread.CurrentThread.Join(5000) 
            
    + querying the system with managementObjectSearcher
    import clr
    clr.AddReference("System.Management")
    from System.Management import ManagementObjectSearcher
    query = "Select * from Win32_LogicalDisk"
    searcher = ManagementObjectSearcher(query)
    for drive in searcher.Get():
        for p in drive.Properties:
            print p.Name, p.Value
        print
    
    + monitoring events, you use the managementEventWatcher class, use to management events
    
    import clr
    clr.AddReference('System.Management')
    from System.Management import (
    WqlEventQuery, ManagementEventWatcher
    )
    from System import TimeSpan
    from System.Threading import Thread
    timeout = TimeSpan(0, 0, 1)
    query = WqlEventQuery("__InstanceCreationEvent", timeout, 'TargetInstance isa "Win32_Process"')
    watcher = ManagementEventWatcher()
    watcher.Query = query
    
    def arrived(sender, event):
        print 'Event arrived'
        real_event = event.NewEvent 
        instance = real_event['TargetInstance']  
        for entry in instance.Properties:
        print entry.Name, entry.Value
        
    watcher.EventArrived += arrived
    watcher.Start()
    while True: 
        Thread.CurrentThread.Join(1000)
        
    intrinsic events, by polling, and the timeout tells WMI how often to poll for you
    
    + if a event don't happen, will throw time out exception
    >>> watcher = ManagementEventWatcher()
    >>> watcher.Query = query
    >>> watcher.Options.Timeout = TimeSpan(0, 0, 5)
    >>> e = watcher.WaitForNextEvent()
    Traceback (most recent call last):
    SystemError: Timed out
    
    + for example For example, to be notified of new USBstorage devices becoming available (plug-and-play events), you could use this query
    
    wql = ("Targetinstance isa 'Win32_PNPEntity' and ""TargetInstance.DeviceId like '%USBStor%'")
    query = WqlEventQuery("__InstanceCreationEvent", timeout, wql
    
    + WQL, WMI classes and EVENTS
    the basic pattern for WQL notification queries is as follows:
    
    SELECT * FROM __EventClass WITHIN PollingInterval WHERE TargetInstance ISA WMIClassName AND TargetInstance.WMIClassPropertyName = Value
    
    Intrinsic events are represented by classes derived from one of the following
    __InstanceOperationEvent
    __NamespaceOperationEvent
    __ClassOperationEvent

    instance events
    __InstanceCreationEvent
    __InstanceModificationEvent
    __InstanceDeletionEvent

    Extrinsic events derive from the __ExtrinsicEventclass

    the standard WMI classes at http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wmisdk/wmi/wmi_classes.asp

    + list all the process
    >>> StartupClass = ManagementClass('Win32_StartupCommand')
    >>> processes = StartupClass.GetInstances()
    >>> for p in processes:
    ... print p['Location'], p['Caption'], p['Command']

    + create timer events
    from System.Management import ManagementClass, WqlEventQuery
    TimerClass = ManagementClass("__IntervalTimerInstruction")
    timer = TimerClass.CreateInstance()
    timer["TimerId"] = "Timer1"
    timer["IntervalBetweenEvents"] = 1000
    timer.Put() 
    query = WqlEventQuery("__TimerEvent", "TimerId='Timer1'") 

    + get process owner
    >>> from System import Array
    >>> StartupClass = ManagementClass('Win32_Processes')
    >>> processes = StartupClass.GetInstances()
    >>> proc = list(processes)[-1]
    >>> proc.Properties['Name'].Value
    'csrss.exe'
    >>> arg_array = Array.CreateInstance(object, 2)
    >>> proc.InvokeMethod('GetOwner', arg_array)
    0
    >>> arg_array
    System.String[]('SYSTEM', 'NT AUTHORITY')

    + connecting to remote computers
        * enable remote access
        To allow remote access, the first place to try is Console Root > Component Services > My Computer > (right-click) Properties > COMSecurity from the DCOMCNFG application. You can launch DCOMCNFGfrom the command line

        Control Panel > Administrative Tools > Computer Management > Services & Applications > WMIControl > (right-click) Properties

         default scope is \\localhost\root\cimv2, which means the root\cimv2 namespace on the local machine

        CIMV2(where CIMstands for Common Information Model) is the default namespace and contains all the most commonly used classes

        other providers can register namespaces to provide instrumentation via wmi

        The BizTalk namespace is root\MicrosoftBizTalkServer, SQLServer is root\Microsoft\SqlServer

        \\FullComputerName\root\cimv2. You do this with the .NET ManagementScopeclass.

        * connection authentication and permission
        You can either connect using the credentials of the user running the script, called impersonation, or you can explicitly specify a username and password for the connection
    
        specifying username and password for a wmi connection
        from System.Management import (
            ConnectionOptions, ManagementScope
        )
        options = ConnectionOptions()
        options.EnablePrivileges = True
            
        WMI connection with impersonation
        from System.Management import (
        AuthenticationLevel, ImpersonationLevel,
        ManagementScope, ConnectionOptions
        )
        options = ConnectionOptions()
        options.EnablePrivileges = True
        options.Impersonation = ImpersonationLevel.Impersonate
        options.Authentication = AuthenticationLevel.Default 
        network_scope = r"\\FullComputerName\root\cimv2"
        scope = ManagementScope(network_scope, options)
            
        * quering remote computers
        import clr
        clr.AddReference('System.Management')
        from System.Management import (
        ConnectionOptions, ManagementScope,
        WqlEventQuery, ManagementEventWatcher
        )
        from System import TimeSpan
        from System.Threading import Thread
        options = ConnectionOptions()
        options.Username = "administrator"
        options.Password = "******"
        
        network_scope = r"\\FullComputerName\root\cimv2"
        scope = ManagementScope(network_scope, options)
        wql = ('TargetInstance ISA "Win32_OperatingSystem" AND '
        'TargetInstance.FreePhysicalMemory < 10000')
        timeout = TimeSpan(0, 0, 5)
        query = WqlEventQuery("__InstanceModificationEvent", timeout, wql)
        watcher = ManagementEventWatcher()
        
        watcher.Query = query
        watcher.Scope = scope  
        interesting_properties = (
        'FreePhysicalMemory',
        'FreeSpaceInPagingFiles',
        'FreeVirtualMemory',
        'NumberOfProcesses',
        'SizeStoredInPagingFiles',
        'TotalVirtualMemorySize',
        'TotalVisibleMemorySize',
        'LocalDateTime'
        )
        
        def arrived(sender, event):
            print 'Event arrived'
            real_event = event.NewEvent
            instance = real_event['TargetInstance']
            for prop in interesting_properties:
                entry = instance.Properties[prop]
                print entry.Name, entry.Value
        watcher.EventArrived += arrived
        watcher.Start()
        print 'started'
        while True:
        Thread.CurrentThread.Join(1000) 
        
    check memory
    TargetInstance ISA "Win32_OperatingSystem" AND TargetInstance.FreePhysicalMemory < 10000
    
    check free disk space
    TargetInstance ISA 'Win32_LogicalDisk' AND TargetInstance.DriveType = 3 AND TargetInstance.FreeSpace < 1000000
    
    set authentication level
    Setting options.EnablePrivileges = True should be enough; but, if you’re using authentication, then you may need to set options.Authentication = AuthenticationLevel. Security. This event is an __InstanceCreationEvent, and the WQLis as follows:
    TargetInstance ISA 'Win32_NTLogEvent' AND 
    TargetInstance.CategoryString = 'Logon/Logoff' AND TargetInstance.Type = 'audit failure'
    
- powershell and ironpython, there is an open source implementation of powershell for mono called Pash, PowerShell + bash
http://pash.sourceforge.net
    + using powershell from ironpython
    import clr
    clr.AddReference('System.Management.Automation')
    from System.Management.Automation import RunspaceInvoke
        
    runspace = RunspaceInvoke() 
    psobjects = runspace.Invoke("Get-Process -Name ipy")  
    process = psobjects[0] 
    print 'Path = ', process.Properties['Path'].Value
    for prop in process.Properties:
    name = prop.Name
    if name in ('ExitCode', 'ExitTime', 'StandardIn', 
    'StandardOut', 'StandardInput', 
    'StandardOutput', 'StandardError'):
    # Can't fetch these on a process
    # that hasn't exited or redirected
    # the in/out/error streams
    continue 
    print prop.Name, prop.Value
    
    + use powershell with com object
    PS > $app = Get-Object –ComObject iTunes.application
    PS > $app.UpdateIPod()
    
    + wmi inside powershell from ironpython
    import clr
    clr.AddReference('System.Management.Automation')
    from System.Management.Automation import (
    PSMethod, RunspaceInvoke
    )
    runspace = RunspaceInvoke()
    cmd = "Get-WmiObject Win32_VideoController"
    psobjects = runspace.Invoke(cmd)
    video = psobjects[0]
    print
    print 'Video controller properties'
    for prop in video.Properties:
        print prop.Name, prop.Value
    
    psobjects = runspace.Invoke("Get-WmiObject Win32_Processor")
    cpu = psobjects[0]
    print
    print 'CPU properties'
    for prop in cpu.Properties:
    print prop.Name, prop.Value
    cmd = 'Get-WmiObject Win32_Process -filter \'Name="ipy.exe"\''  
    psobjects = runspace.Invoke(cmd)
    ipy = psobjects[0]
    print
    print 'WMI process methods' 
    for member in ipy.Members:  
        if not isinstance(member, PSMethod):  
        continue
        print member
    
    + ironpython powershell sample
    >>> from powershell import shell
    >>> shell.get_process('notepad').stop_process(
    
    + multiple command in the pipline
    import clr
    clr.AddReference('System.Management.Automation')
    from System.Management.Automation.Runspaces import (
    RunspaceFactory
    )
    
    runspace = RunspaceFactory.CreateRunspace()
    runspace.Open()
    runspace.SessionStateProxy.SetVariable("processName", 'ipy')
    pipeline = runspace.CreatePipeline()
    pipeline.Commands.AddScript('Get-Process -Name $processName')
    pipeline.Commands.Add('Out-String')
    results = pipeline.Invoke()
    for result in results:
        print result
    
    + calling ironpython code from powershell
    setupSrc = @'
    import sys
    sys.path.append(r'c:\Python25\lib')
    import base64
    ' @ 
    $init_code = $engine.CreateScriptSourceFromString($setupSrc, $st)
    $src = 'result = base64.b64encode(value)' 
    $global:encode = $engine.CreateScriptSourceFromString($src, $st)
    $src = 'result = base64.b64decode(value)' 
    $global:decode = $engine.CreateScriptSourceFromString($src, $st)
    ./Invoke-GenericMethod $init_code 'Execute' $params $scope  
    Function global:B64Encode ($value){
    $scope.SetVariable('value', $value)
    ./Invoke-GenericMethod $encode 'Execute' $params $scope | out-null
    [Ref] $result = $null 
    $scope.TryGetVariable('result', $result) | out-null  
    $x.Value  
    }
    Function global:B64Decode ($value){
        $scope.SetVariable('value', $value)./Invoke-GenericMethod $decode 'Execute' $params $scope | out-null
        [Ref] $result = $null
        $scope.TryGetVariable('result', $result) | out-null
        $result.Value
    }
 

# ironpython and asp.net
- web control, aspx pages 
    + pages and user controls extensions make an aspx page more than html include 
        * directives, located at the top of a file, they tell the asp.net system how to process the file
        * the runat="server" attribute, added to html element when an element has this attribute, an object representing it is created on the server, when the page is requested, server code for the page can interact with it to cahgne its content or appearance
        * web controls, look like
        <asp:Button id="button1" runat="Server" text="Click"/>
    
        * code snippets, included in the page, encloded by <% %> tags, if starts with =, the value of the expression will be converted to a string and appear in the html send to the client
    
- rendering server code and the page lifecycle
    + Each web control in the treeknows how to convert itself into HTML
    + server code is used in two ways
        * The simplest way is that code-behind can provide methods that can be called from code snippets in the page or user control.
        * When a page is requested and the tree of controlsis being built, the system fires a number of different events that your server code can hook into
    
        page and control event lifecycle
        PreInit -> Init -> InitComplete -> PreLoad -> Load -> Load Complete -> PreRender -> SaveStateComplete -> Render -> Unload
                                                        |
                                                        -> Child Control events
    
- adding ironpython to asp.net
http://www.asp.net/ironpython/whitepaper/
    
    
# database and web services
- relational databases and ado.net
- relational model,  All of the tuples in a relation have the same attributes, and the values of the attributes have to be atomic: they can’t be lists or tuples themselves. In relational database management systems, relations are called tables, tuples are rows, and attributes are columns.

- application code talk to database using data providers directly or via datasets
    addplication code
                        ado.net dataset
    ado.net data providers (orcale provider, sql server provider, ...)
    oracle, sql server ...

the core classes in a data provider
Connection      Maintains the channel of communication with the database engine
Command         Allows executing commands to query and altering data in the database through a connection
DataReader      Gives access to the stream of records resulting from a query
DataAdapter     Manages the movement of data between the Data Provider layer and the layer above it: the ADO.NET DataSet

a dataset is a container for relational data and can contain a number of DataTables
DataSet DataTableCollection
            DataTable
            DataRow
            DataColumn
            Constraint
        DataRelationCollection
        DataView
        XML
        ExtendedProperties
        Linq to DataSet

- postgresql
www.postgresql.org
http://www.postgresql.org/docs/manuals/

whole host information about advanced uses of Npgsql in user manual
http://npgsql.projects.postgresql.org/docs/manual/UserManual.htm

>>> import clr
>>> clr.AddReference('Npgsql')
>>> import Npgsql as pgsql

>>> command = connection.CreateCommand()
>>> command.CommandText = 'insert into person (name) values (:name)'
>>> command.Parameters.Add('name', None)
>>> for p in people:
... command.Parameters['name'].Value = p
... command.ExecuteNonQuery()

reading multirow results
>>> reader = command.ExecuteReader()
>>> reader
<NpgsqlDataReader object at 0x…>

- using transactions
>>> transaction = connection.BeginTransaction()
>>> transaction
<NpgsqlTransaction object at 0x…>

    + atomicity
    + consistency
    + isolation
    + durability
    
>>> command = connection.CreateCommand()
>>> command.CommandText = ('update person set directed_count ='
... ' directed_count + 1 where id = 2')
>>> command.Transaction = transaction
>>> command.ExecuteNonQuery()

- dataAdapters and dataSets

- web services, using a simple web service
    + webclient classes provides a high-level interface for talking to websites
    >>> from System.Net import WebClient
    >>> url = 'http://www.voidspace.org.uk/ironpython/planet/atom.xml'
    >>> content = WebClient().DownloadString(url)

    + atom content example
    <?xml version="1.0" encoding="utf-8" standalone="yes" ?>
    <feed xmlns="http://www.w3.org/2005/Atom">
        <title>feed title</title>
        <link rel="self" href="link to feed"/>
        <link href="link to site"/>
        <id>unique identifier of the feed</id>
        <updated>when it was last updated</updated>
        <entry>
            <title type="html">title of this entry</title>
            <link href="url of this entry"/>
            <id>unique identifier of this entry</id>
            <updated>when it was last updated</updated>
            <content type="html">the body of this entry</content>
            <author>
            <name>author's name</name>
            <uri>author's website</uri>
            </author>
        </entry>
        (more entries)
    </feed>

    + extracting atom feed details with simple xml
    >>> from simplexml import SimpleXml
    >>> feed = SimpleXml.fromString(content)  
    >>> feed.title 
    'Planet IronPython'
    >>> feed.link.href 
    'http://www.voidspace.org.uk/ironpython/planet/atom.xml' 
    >>> len(feed.entries)  
    120
    >>> for entry in feed.entries[:3]: 
    ... print entry.title.InnerText  
    ... print entry.link.href
    ... print entry.author.name

- a url within a rest service denotes a resource managed by service, each resource is manipulated by sending an http request to the url, and which operation to perform on the resource is determined by the http method
    + common http methods
    GET, POST, PUT, DELETE
    
    + different between these methods in rest service
    PUT and DELETE act on specific individual resources, while a POST that created a new resource would act on the container.

    a POST that created a new resource would act on the container
    
    update the bookmark you’d do a PUTto /users/john/bookmarks/forum

- using SOAP services from ironpython
a tool included with the .NET SDKcalled wsdl.exe to download the WSDLfor the service and generate C# code from SOAP services

C:\Temp> wsdl.exe /namespace:MathService http://www.dotnetjunkies.com/quickstart/aspplus/samples/services/MathService/CS/MathService.asmx

compile the generated proxy
C:\Temp> csc.exe /target:library MathService.cs

using the mathService proxy
>>> import clr
>>> clr.AddReference('MathService')
>>> from MathService import MathService
>>> service = MathService()
>>> service.Add(3, 4)
7.0

calling a web service method asynchronously
>>> def showResult(s, e):
... print 'asynchronous result received:', e.Result
>>> service.MultiplyCompleted += showResult
>>> service.MultiplyAsync(4, 5)
>>> asynchronous result received: 20.0

calling a soap service using a dynamically generated proxy
>>> import wsdlprovider as wsdl
>>> url = 'http://www.webservicex.net/WeatherForecast.asmx'
>>> assembly = wsdl.GetWebservice(url)
>>> service = assembly.WeatherForecast()
>>> f = service.GetWeatherByZipCode(‘90210’)
>>> print f.PlaceName, f.StateCode
BEVERLY HILLS CA
>>> for d in f.Details:
... print d.Day, d.MaxTemperatureC
...
Sunday, June 08, 2008 24
Monday, June 09, 2008 24
Tuesday, June 10, 2008 23
Wednesday, June 11, 2008 24
Thursday, June 12, 2008 27
Friday, June 13, 2008 27

- REST services in ironpython

List notes                  /notes GET          Response will contain a list of note titles and links.
Add a note                  /notes POST         Request should be the note to add.
                                                Response will contain a link to the new note.
Get the details of a note   /notes/<note id>    GET Response will contain the details of the note.
Update a note               /notes/<note id>    PUT Request should be the updated note.
Delete a note               /notes/<note id>    DELETE

.net doesn't need any extra libraries when works with xml
Notes will look like this:
<note id="note_id" title="the title of the note">
    body
</note>
Links to notes will look like this:
<notelink title="note title" href="http://url/of/note"/>
Responses will look like this:
<response status="ok or error">
    Either a note, note link, list of links or error reason, depending on the
    request.
</response>

the notes service clients, sendMessage
from simplexml import SimpleXml
from note import Note
from System.IO import MemoryStream
from System.Net import WebException, WebExceptionStatus, WebRequest
from System.Xml import XmlDocument, XmlWriter 

def sendMessage(method, url, note=None):
    request = WebRequest.Create(url)
    request.Method = method
    if note is not None: 
        writeNoteToRequest(note, request)
    try :
        response = request.GetResponse()  
    except WebException, e:
        if e.Status == WebExceptionStatus.ProtocolError:  
            # this is an error message from the service
            # look in the response for the problem
            response = e.Response
        else:
            raise
    stream = response.GetResponseStream()
    responseDoc = SimpleXml.fromStream(stream)  
    stream.Close()
    checkResponse(responseDoc)
    return responseDoc
class ServiceError(Exception):
    pass
def checkResponse(response):
    if response.status != 'ok': | 
        raise ServiceError(response.InnerText)

def writeNoteToRequest(note, request):
    doc = XmlDocument()
    doc.AppendChild(doc.CreateXmlDeclaration('1.0', 'utf-8', 'yes'))
    doc.AppendChild(note.toXml(doc))
    request.ContentType = 'text/xml'
    stream = request.GetRequestStream()
    writer = XmlWriter.Create(stream)
    doc.WriteTo(writer)
    writer.Flush()
    stream.Close()

the notes service client, note operations
index = 'http://localhost:8080/notes'
def getAllNotes():
    response = sendMessage('GET', index)
    return [(n.title, n.href) for n in response.notelinks]
def getNote(link):
    response = sendMessage('GET', link)
    return Note.fromXml(response.note.element)
def addNote(note):
    response = sendMessage('POST', index, note)
    return response.notelink.href
def updateNote(link, note):
    sendMessage('PUT', link, note)
def deleteNote(link):
    sendMessage('DELETE', link)


the notes service is built on .net httpListener class
class NotesService(object):
    def __init__(self):
        self.listener = HttpListener()
        self.listener.Prefixes.Add('http://localhost:8080/notes/')
        self.notes = {
        'example': Note('example', 
        'An example note', 
        'Note content here')}
        
    def run(self):
        self.listener.Start()
        print 'Notes service started'
        while True:
            context = self.listener.GetContext()
            self.handle(context)


    def handle(self, context):
        path = self.pathComponents(context)
        method = context.Request.HttpMethod
        print method, path
        handlers = {}
        if path == ['notes']: 
            handlers = dict(GET=self.getNotes, POST=self.addNote)
        elif len(path) == 2: 
            handlers = dict(GET=self.getNote, 
                            PUT=self.updateNote,
                            DELETE=self.deleteNote)
        handler = handlers.get(method, self.error)  
        try :
            handler(context) 
        except ServiceError, e:
            self.error(context, e.statusCode, e.reason)

    def getNotes(self, context):
        doc = self.makeResponse()
        for note in self.notes.values():
            link = note.toSummaryXml(doc, LINK_TEMPLATE)
            doc.DocumentElement.AppendChild(link)
        self.writeDocument(context, doc)


# silverlight Ironpython in the browser
- silverlight gallery
http://silverlight.net/Community/gallerydetail.aspx
- moonlight working on multiple browsers
- silverlight give full access to DOM
- silverlight contain DLRis an ECMA3–compliant version of JavaScript called Managed JScript.
A user interface model based on WPF
APIs including threading, sockets, XML, and JSON
A powerful video player
Deep zoom and adaptive media streaming
Client-side local storage in the browser 
Access to the browser DOMand techniques to communicate between JavaScript and the Silverlight plugin

- in silverlight support all ajax tricks, in moonlight application there is a desklets can run outside the browser with full access to the mono stack

- dynamic silverlight
    + silverlight application are packaged as xap files, containing assemblies and resources
    + an ironpython application is just a normal application as far as silverlight is concerned, a dlr assembly provides the entry point and is responsible for running the python code
    + silverlight dynamic sdk
    http://www.codeplex.com/sdlsdk

- clr tracebacks in error reporting when initializing silverlight control in browser
<param name="initParams" value="debug=true, reportErrors=errorDiv, 
exceptionDetail=true" />

<div id="SilverlightControlHost" width="480" height="320">
<object data="data:application/x-silverlight,"
type="application/x-silverlight-2" 
id="SilverlightControl"
width="100%" height="100%"> 
    <param name="source" value="app.xap"/>  
    <param name="onError" value="onError" />  
    <param name="background" value="white" />
    <param name="initParams" 
    value="debug=true,reportErrors=errorLocation" />
    <a href="http://go.microsoft.com/fwlink/?LinkID=124807"
        style="text-decoration: none;"> 
        <img src="http://go.microsoft.com/fwlink/?LinkId=108181" 
        alt="Get Microsoft Silverlight" 
        style="border-style: none" />
    </a >
</object>
<iframe style='visibility:hidden;height:0;width:0;border:0px'
></iframe>
</div>

manually generate xap file in mono
bin\Chiron /d:dir_name /z:app_name.xap
mono bin\Chiron /d:dir_name /z:app_name.xap

- ironpython silverlight application that loads xaml
from System.Windows import Application
from System.Windows.Controls import Canvas
canv = Canvas()
xaml = Application.Current.LoadRootVisual(canv, "app.xaml")
xaml.textblock.Text = 'Hello World from IronPython

relative app.xaml file
<Canvas x:Class="System.Windows.Controls.Canvas"
xmlns="http://schemas.microsoft.com/client/2007"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
<TextBlock x:Name="textblock" FontSize="30">Hello world from XAML</TextBlock>
</Canvas>

- cross domain access, add clientaccesspolicy.xml file into silverlight appilcaiton to allowed cross domain access
<?xml version="1.0" encoding="utf-8"?>
    <access-policy>
    <cross-domain-access>
        <policy>
        <allow-from http-request-headers="*">  
            <domain uri="*"/> 
        </allow-from>
        <grant-to>
            <resource path="/" include-subpaths="true"/>  
        </grant-to>
        </policy>
    </cross-domain-access>
</access-policy>

twitter expose a nice and simple api for clients to use
To make the client work, we’ve implemented a simple Python proxy server that runs locally. when the you can't control the website to add the clientaccesspolicy.xml file

use the simple_proxy.py 

- fetch web content by webclient
from System import Uri
from System.Net import WebClient
from System.Windows.Browser import HttpUtility
get_url = 'http://localhost:9981/?action=%s&name=%s&pass=%s'

class Fetcher(object):
    def __init__(self, name, password, action, callback):
        name = HttpUtility.UrlEncode(name) 
        password = HttpUtility.UrlEncode(password)
        uri = Uri(get_url % (action, name, password))
        self.callback = callback
        web = WebClient()
        web.DownloadStringCompleted += self.completed  
        web.DownloadStringAsync(uri) 
    def completed(self, sender, event):
        if not event.Error or event.Cancelled:
        self.callback(event.Result)

making post requests with httpwebrequest
from System importUri
from System.Net import WebClient
from System.Windows.Browser import HttpUtility
class Poster(object):
    def __init__(self, tweet, username, password, callback):
        uri = Uri(post_url)
        self.callback = callback
        print 'Tweeting:', tweet[:10]
        tweet = tweet[:140] 
        url_encoded_tweet = HttpUtility.UrlEncode(tweet) 
        username = HttpUtility.UrlEncode(username)
        password = HttpUtility.UrlEncode(password)
        data = 'username=%s&password=%s&tweet=%s' % (username, 
        password, url_encoded_tweet) 
        web = WebClient()
        web.UploadStringCompleted += self.completed  
        web.UploadStringAsync(uri, "Post", data)

    def completed(self, sender, event):
        if event.Cancelled or event.Error:
            # Post failed
            print 'POST failed'
            return self.callback('')
        return self.callback(event.Result)

use the proxy with backslash        
http://localhost:9981/
        
- threads and dispatching onto the UI thread
Silverlight provides a single dispatcher, which is accessible via the Dispatcher property on user interface components.        
        
use the dispatcher to modify the user interface from another thread
from System.Windows import Application
from System.Windows.Controls import Canvas, TextBlock
from System.Threading import Thread, ThreadStart
root = Canvas()
Application.Current.RootVisual = root
text = TextBlock()
thread_id = Thread.CurrentThread.ManagedThreadId
text.Text = "Created on thread %s" % thread_id
text.FontSize = 24
root.Children.Add(text)

def wait():
    Thread.Sleep(3000) 
    thread_id = Thread.CurrentThread.ManagedThreadId
    def SetText():
        text.Text = 'Hello from thread %s' % thread_id
    text.Dispatcher.BeginInvoke(SetText) 
    t = Thread(ThreadStart(wait))  
t.Start()
        
- use a DispatcherTimer for timed events on the UI thread
from System.Windows.Threading import DispatcherTimer
from System import TimeSpan
text = TextBlock()
text.Text = "Nothing yet"
text.FontSize = 24
root.Children.Add(text)
counter = 0

def callback(sender, event):
    global counter
    counter += 1
    text.Text = 'Tick %s' % counter

timer = DispatcherTimer()
timer.Tick += callback
timer.Interval = TimeSpan.FromSeconds(2)
timer.Start()
        
- isolate storage in the browser, by default per application is 100 kilobytes of storage
Isolated storage provides a filesystem-like mechanism that we access through the System.IO.IsolatedStoragenamespace.

from System.IO.IsolatedStorage import (
IsolatedStorageFile, IsolatedStorageFileStream
)
from System.IO import FileMode, StreamReader, StreamWriter
def ListFiles():
    store = IsolatedStorageFile.GetUserStoreForApplication()
    return store.GetFileNames('.') 
    
def DeleteFile(name):
    store = IsolatedStorageFile.GetUserStoreForApplication()
    store.DeleteFile(name)
    
def SaveFile(name, data):
    store = IsolatedStorageFile.GetUserStoreForApplication()
    mode = FileMode.Create 
    iStream = IsolatedStorageFileStream(name, mode, store)
    writer = StreamWriter(iStream) 
    writer.Write(data)  
    writer.Close()
    iStream.Close()
    
def LoadFile(name):
    store = IsolatedStorageFile.GetUserStoreForApplication()
    mode = FileMode.Open | 
    iStream = IsolatedStorageFileStream(name, mode, store)
    reader = StreamReader(iStream)
    data = reader.ReadToEnd() 
    reader.Close()
    isolatedStream.Close()
    return data
        
        
- use media element
from System.Windows.Controls import MediaElement
from System import Uri, UriKind
video = MediaElement() 
source = Uri('SomeVideo.wmv', UriKind.Relative)  
video.Volume = 
video.Source = source
video.Width = 450
        
- access browser DOM
from System.Windows.Browser import HtmlPage
document = HtmlPage.Document
element = document.some_element
element.innerHTML = "Some <em>HTML</em>."
element2 = document.GetElementById('another_element')
element2.SetStyleAttribute('border', 'solid black 2px')
element3 = document.GetElementById('some_textbox')
element3.SetProperty('disabled', True)
element3.value = 'Text in a textblock'
        
- use silverlight interact with javascript
    + html element event handler
    + call a javascript function
    + create a javascript oject and invokes methods on it
        
from System import EventHandler
handler = EventHandler(lambda sender, event: DoSomething())  
button = document.some_button
button.AttachEvent(handler)

jscriptfunc = "function_name"
argument = "Something"
HtmlPage.Window.CreateInstance(jscriptfunc, argument)

request = HtmlPage.Window.CreateInstance("XMLHttpRequest")
request.Invoke("open", "GET", url, False) 
request.Invoke("send", "")
result = request.GetProperty("responseText")
        
- get current silverlight control
System.Windows.Application.Current.Host
    
    
# reaching out with ironpython
- create class with c# or vb and use it in ironpython
- writing a class library for ironpython, because some of the feature in .net are hard to work with ironpython such as
    + linq
    + .net attributes
- develop c# or ironpython in linux with IDE mono desktop, windows.sharpDevelop is a good open source .net IDE for windows
    + python objects from class libraries
    if a object implements IEnumerable, then we can iterate over it from ironpython
    provides toString then ironpython can produce its string
    .net methods expect delegates can receive python functions
    
    + example of c# extension
    using System;
    using System.Collections;
    namespace PythonExtension
    {
        public delegate int Callback(int input);
        public class PythonClass : IEnumerable  
        {
            private int _value;
            private Callback _callback;
            public PythonClass(int value, Callback callback)  
            {
                _value = value;
                _callback = callback;
                
                public override string ToString()  
                {
                    return String.Format("PythonClass<{0}>", _value);
                }
                
                public IEnumerator GetEnumerator()  
                {
                    for (int i = _value; i > 0; i--)
                    {
                        if ( i % 2 == 0 )  
                        {
                            yield return _callback(i);
                        }
                    }
                }
                
                public static PythonClass operator +(PythonClass a, 
                PythonClass b) 
                {
                    return new PythonClass(a._value + b._value, 
                    a._callback);
                }
                public Object this[Object index] {
                    get { 
                        Console.WriteLine("Indexed with {0}", index);
                        return index;
                    }
                    set { 
                        Console.WriteLine("Index {0} set to {1}", index, value);
                    }
                }
            }
        }
    }
        
    use the extension
    >>> import clr
    >>> clr.AddReference('PythonExtension')
    >>> from PythonExtension import PythonClass
    >>> def callback(value):
    >>>     pass
    >>> 
    >>> PythonClass(20, callback)
    
- interfaces implemented by python types, check the ironpython code to know which kind of interface have python object implement

- calling unmanaged code with the P/Invoke attribute, Platform Invoke, used for calling into unmanaged code
define a wrapper class in c#
using System;
using System.Text;
using System.Runtime.InteropServices;
namespace WindowUtils
{
    public class WindowUtils
    {
        [DllImport("user32.dll")]
        public static extern bool IsWindowVisible(IntPtr hWnd);
        [DllImport("user32.dll")]
        public static extern IntPtr GetTopWindow(IntPtr hWnd);
        [DllImport("user32.dll")]
        public static extern IntPtr GetWindow(IntPtr hWnd, uint wCmd);
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern int GetWindowTextLength(IntPtr hWnd);
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern int GetWindowText(IntPtr hWnd, [Out] StringBuilder 
        lpString, int nMaxCount);
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern int GetClassName(IntPtr hWnd, [Out] StringBuilder 
        lpString, int nMaxCount);
    }
}

From Python, we can call these functions as static methods on the WindowUtilsclass. 
In the case of GetClassName, we know that the Window class names are all less than 256 characters
use the wrapper class in python
import clr
clr.AddReference('WindowUtils')
from WindowUtils import WindowUtils
from System import IntPtr
from System.Text import StringBuilder
GW_HWNDNEXT = 2
def GetTopWindowTitle():
    handle = WindowUtils.GetTopWindow(IntPtr.Zero)
    while handle != IntPtr.Zero:
        if not _ExcludeWindow(handle): 
            break
        handle = WindowUtils.GetWindow(handle, GW_HWNDNEXT)  
    if handle != IntPtr.Zero:
        return GetWindowText(handle)
    return ''
    
excludes = 'button', 'tooltip', 'sysshadow', 'shell_traywnd'
def _ExcludeWindow(handle):
    if not WindowUtils.IsWindowVisible(handle):  
        return True
    class_name = GetWindowClassName(handle)
    for entry in excludes:
        if entry in class_name.lower():  
        return True
    return False
    
def GetWindowClassName(hWnd):
    length = 255
    sb = StringBuilder(length + 1)
    WindowUtils.GetClassName(hWnd, sb, sb.Capacity)
    return sb.ToString()
    
def GetWindowText(hWnd):
    length = WindowUtils.GetWindowTextLength(hWnd)  
    sb = StringBuilder(length + 1)
    WindowUtils.GetWindowText(hWnd, sb, sb.Capacity)  
    return sb.ToString()

- ironpython classes and interfaces
ironpython can implement a .net inteface by subclassing it and providing the required method
using System;
using System.Windows.Browser;
namespace Scriptable
{
    [ScriptableType]
    public class Scriptable
    {
        [ScriptableMember]
        public string method(string value)
        
        { return this.real(value); }
        
        public virtual string real(string value)
        { return "override me"; }
    }
}

import clr
clr.AddReference("Scriptable")
from Scriptable import Scriptable

- providing dynamic attribute access, create a natural-feeling API, provide dynamic attribute access
GetCustomMember—Runs before normal .NET lookups
GetBoundMember—Runs after normal .NET lookups
SetMember—Runs before normal .NET member assignment
SetMemberAfter—Runs after normal .NET member assignment
DeleteMember—Runs before normal .NET operator access (there’s no .NET equivalent)

using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.CompilerServices;
namespace DynamicObject
{
    public class DynamicObject
    {
        private Dictionary<string, object> _dict = new Dictionary<string, object>();
        public Dictionary<string, object> container
        {
            get { return _dict; }  
        }
        
        [SpecialName]
        public object GetBoundMember(string name) 
        {
            if (!_dict.ContainsKey(name)) 
            {
                string msg = String.Format("'DynamicObject' has no attribute '{0}'",
                n a m e ) ;
                throw new System.MissingMemberException(msg);
            } 
            return _dict[name]; 
        }
        
        [SpecialName]
        public void SetMemberAfter(string name, object o)  
        {
            _dict.Add(name, o);
        }
        [SpecialName]
        public void DeleteMember(string name)  
        {
            if (!_dict.ContainsKey(name))
            {
                string msg = String.Format("'DynamicObject' has no attribute '{0}'",
                n a m e ) ;
                throw new System.MissingMemberException(msg);
                }
                _dict.Remove(name);
            }
        }
    }
}

use it in python
>>> import clr
>>> clr.AddReference('DynamicObject')
>>> from DynamicObject import DynamicObject
>>> d = DynamicObject()
>>> d.attribute = 'an attribute'
>>> print d.attribute
>>> del d.attribute

- python magic methods
__call__method, which you can implement with a Call method marked with the SpecialName attribute. The following snippet of C# shows the Call method definition:
[SpecialName]
object Call(string someArg, int someOtherArg)

This mapping of .NET interfaces and methods into Python methods is done in the source file TypeInfo.cs.

- constructors and keyword arguments
i = SomeClass(arg1, X=value) 
is the equivalent of
i = SomeClass(arg1)
i.X = value

we can’t use the DefaultParameterValue attribute with nullable types, but we can use the Optional attribute
17 instead. 
using System.Runtime.InteropServices;

public static void DefaultValues(string string1, 
[DefaultParameterValue("default")] string string2,  
[DefaultParameterValue("another")] string string3)
{
    Console.WriteLine("1st argument = " + string1);
    Console.WriteLine("2nd argument = " + string2);
    Console.WriteLine("3rd argument = " + string3);
}

public static void OptionalIntegers(int value1, 
[Optional] int? value2, [Optional] int? value3)  
{
    if (!value2.HasValue)  
    {
    value2 = 100;
    }
    Console.WriteLine("1st argument = {0}", value1);
    Console.WriteLine("2nd argument = {0}", value2);
    Console.WriteLine("3rd argument = {0}", value3);
}

- compiling and using assemblies at runtime, to avoid copy paste relative dll into specify directory
.net provides access to the compiler infrastructure through the System.CodeDom.Compiler namespace
a generate function that uses either a CSharpCodeProvider or VBCodeProvider

create a function to compile and save or return assemblies from source code by ironpython
from System.Environment import CurrentDirectory
from System.IO import Path, Directory
from System.CodeDom import Compiler
from Microsoft.CSharp import CSharpCodeProvider
from Microsoft.VisualBasic import VBCodeProvider

def Generate(code, name, references=None, outputDir=None,
inMemory=False, csharp=True):
    params = Compiler.CompilerParameters()
    if not inMemory: 
        if outputDir is None:
            outputDir = Directory.GetCurrentDirectory()
            
        asmPath = Path.Combine(outputDir, name + '.dll')
        params.OutputAssembly = asmPath
        params.GenerateInMemory = False
    else:
        params.GenerateInMemory = True
        
    params.TreatWarningsAsErrors = False
    params.GenerateExecutable = False
    params.CompilerOptions = "/optimize"
    
    for reference in references or []: 
        params.ReferencedAssemblies.Add(reference)
        
    if csharp: 
        provider = CSharpCodeProvider()
    else:
        provider = VBCodeProvider()
        
    compile = provider.CompileAssemblyFromSource(params, code)  
    if compile.Errors.HasErrors: 
        errors = list(compile.Errors.List)
        raise Exception("Compile error: %r" % errors)
        
    if inMemory:
        return compile.CompiledAssembly
    
    return compile.PathToAssembly

code, this is the source code we are compiling as a string
name, the name of the assembly to generate
references, a list of strings with additional assemblies
outputdir, optional orguement for 
inMemory, If this is True, then the assembly will be generated in memory, and Generate will return the assembly object
csharp, is true then the source code should be c#

use the generate function 
>>> import clr
>>> assembly = Generate(source, 'WindowUtils', inMemory=True)
>>> clr.AddReference(assembly)
>>> from WindowUtils import WindowUtils

C# can do all of this; in fact IronPython is built on a similar technique but using the Reflection.Emit APIto generate code directly as ILbytecode. 

- embedding the ironpython engine
    + required assemblies
    Microsoft.Scripting.dll
    Microsoft.Scripting.Core.dll
    IronPython.dll
    IronPython.Modules.dll, provides a c# implementation of some of the built-in modules that in CPython are written in C
    Microsoft.Scripting.ExtensionAttribute.dll, .net projects using ironpython work with both .net 2.0 and .net 3.0
    
    + main entry point for applications that embed ironpython is the python class IronPython.Hosting namespace, extract a python language engine by
    using IronPython.Hosting
    ScriptEngine engine = Python.CreateEngine();
    
    for more detail information, check the source code, "DLR Hosting Spec" document
    
    the engine could execute the python script with single string or a file
    
- executing a python file, two more components
    + ScriptSource, from a file or a code string, created from a engine
    + ScriptScope, represents a python language namespace(a scope) is also created from the engine
    
    + example
        * execute from a string
        ScriptSource source;
        source = engine.CreateScriptSourceFromString(sourceCode, SourceCodeKind.Statements);
        ScriptScope scope = engine.CreateScope();
        source.Execute(scope);

        * execute from a file
        ScriptSource source;
        source = engine.CreateScriptSourceFromFile(file_path);
        SrciptScope scope = engine.CreateScope();
        source.Execute(scope);
        
        * setting the command-line arguments for python code from c#
        using IronPython.Runtime;
        
        List argList = new List();
        argList.extend(args);
        ScriptScope sys = Python.GetSysModule(engine);
        sys.SetVariable("argv", argList);
        
    + exploring the ironpython hosting api
    you can use ipy.exe and add reference to dlr and ironpython assemblies and experiment interactively with these classes

    + methods on the Python class
    CreateRuntime(): ScriptRuntime
    CreateEngine()
    GetEngine
    GetSysteModule
    GetBuiltinModule
    GetClrModule
    ImportModule
    
    + setting the search path
    string filename = "program.py";
    string path = Assembly.GetExecutingAssembly().Location;  
    string rootDir = Directory.GetParent(path).FullName;
    List<string> paths = new List<string>();
    paths.Add(rootDir);
    //IRONPYTHONPATH is the environment path of ironpython program
    string path = Environment.GetEnvironmentVariable("IRONPYTHONPATH");
    if (path != null && path.Length > 0) 
    {
        string[] items = path.Split(';');
        foreach (string p in items)
        {
            if (p.Length > 0) 
            { 
                paths.Add(p); 
            }
        }
    }
    engine.SetSearchPaths(paths.ToArray());

    + handling python exceptions, if want to run a full program, which can exit with a return code. use ExecuteProgram, it will automatic create its own ScriptScope object
    if the program terminates normally, it exits with the return code, if an exception is raised. it writes out the formatted exception message and exits with a return code of 1

    try
    {
        ScriptSource source;
        source = engine.CreateScriptSourceFromFile(file_path);
        int result = source.ExecuteProgram();
        return result;
    }
    catch(Exception e)
    {
        ExceptionOperation eo = engine.GetService<ExceptionOperations>();
        Console.Write(eo.FormatException(e));
        return 1;
    }
    pass parameter Debug set to true to CreateEngine, to compile python code in debug mode

- Ironpython as a scripting engine
    + setting and fetching variable from a scope
    the ScriptSource could be run in a new created one or a previous created with variables in it. The relative ScriptSource logic could access the variables in the ScriptScope
    
    ScriptSourceInstance.Compile() will return a CompiledCode object for reuse

    SciptScope is a DLR class and is not tied to IronPython, you can execute Python code to create an object graph and access to it with Ruby
    There are some restrictions, the class can't be inherit which is created by different language
    It's a good way to share library for different lanauge

    + methods for working with names and variable in ScriptScope
    ClearVariables
    ContainsVariable
    GetVariable(string):Object
    GetVariable<T>(string):T
    RemoveVariable(String):Boolean
    SetVariable(string, object)
    TryGetVariable

    the variable name should be valid python identifier

    for .net types, once you've pulled them out of a scope, you have full access to them, if they are dynamic objects such as functions or lcasses, you can still use thme by DLR to perform operations

    + example
    var engine = Pyhton.CreateEngine();
    var scope = engine.CreateScope();
    scope.SetVariable("__name__", "__main__");
    
    var script = engine.CreateScriptSourceFromString(source, SourceCodeKind.Statements);
    var code = script.Compile();
    
    code.Execute(scope);

    + providing modules and assemblies for the engine, add reference is done with LoadAssembly method on ScriptRuntime, ipy.exe adds references to mscorelib.dll ans System.dll
    
    runtime.LoadAssembly(typeof(string).Assembly);
    runtime.LoadAssembly(typeof(Uri).Assembly);

    ScriptRuntime.Globals is a ScriptScope object, construct a scope object ironpython is concerned is a real python module from a script scope using HostingHelpers.GetScope
    Puts the module into the runtime globals with the name __main__
    
    var scope = engine.CreateScope();
    scope.SetVariable("__name__", "__main__");
    Scope main = HostingHelpers.GetScope(scope);
    runtime.Globals.SetVariable("__main__", main);

    + python code as an embedded resource
        * set python script build action as Embedded Resource
        * fetch the script
        Assembly assembly = Assembly.GetExecutingAssembly();
        string name = "BasicEmbedding.source_code.py";
        Stream stream = assembly.GetManifestResourceStream(name);
        StreamReader textStreamReader = new StreamReader(stream);

- python plugins for .net applications
    + autodiscovery of plugins, dynamically executing them at runtime
    + diverting the standard output and error streams for hosted DLR
    + handling specific exceptions from hosted python code

    + example
    basic plugin class
    public class PluginBase
    {
        private string _name;
        public string Name
        {
        get { return _name; }
        }
        public PluginBase(string name)  
        { _name = name; }
        virtual public void Execute(TextBox textbox)  
        { }
    }

- using dlr objects from other .net languages
SourceCodeKind.Statements, SourceCodeKind.Expression, allow us to evaluate an expression and return an object

string code = "2+3+5";
ScriptSource source;
source = runtime.CreateScriptSourceFromString(code, SourceCodeKind.Expression);
int result = source.Execute<int>(scope)

string code = "lambda x, y: x * y";
var source = engine.CreateScriptSourceFromString(code, SourceCodeKind.Expression);
Func<int, int, int> lambda;
lambda = source.Execute<Func<int, init, int>>(scope);
int result = lambda(9, 8);

check objects from type by object browser

available python types for c#
List, FrozenSetCollection, PythonDictionary, PythonFile, PythonGenerator, PythonTuple, SetCollection

string code = "('hello', 'world')";
ScriptSource source;
source = engine.CreateScriptSourceFromString(code,
SourceCodeKind.Expression);
PythonTuple tuple = source.Execute<PythonTuple>(scope);
Console.WriteLine("tuple = ({0}, {1})", tuple[0], tuple[1]);

- Dynamic operations with ObjectOperations
    + ironpython or ironRuby classes are not .net classes, ironpython classes are .net objects--instances of IronPython.Runtime.Types.PythonType

    + python classes are still usable from c#, can use the python engine to perform operations like creating instances and calling methods. use ObjectOperations, a class that provides dynamic operations for DLR objects
    
    + example fetch a python class out of an execution scope and create an instance of that class
    string code =@"
    class Something(object):
        def method(self, value):
            return value + 1
    ";
    
    ObjectOperation ops = engine.Operations;
    ScriptSource source;
    source = engine.CreateScriptSourceFromString(code, SourceCodeKind.Statements);
    source.Execute(scope);
    
    object klass = scope.GetVariable("Something"); 
    object instance = ops.Call(klass);
    object method = ops.GetMember(instance, "method");
    int result = (int)ops.Call(method, 99);
    Console.WriteLine("99 + 1 = {0}", result);
    
    + methods on ObjectOperations for working with dynamic objects
    Call, calls the object with any arguments specified
    GetMember, The equivalent of the two-argument form of getattr
    SetMember, The equivalent of setattr
    RemoveMember, The equivalent of delattr
    GetMemberNames, List all memebers; equivalent of dir
    ContainsMember, equivalent of hasattr
    TryGetMember
    ConvertTo/TryConvertTo
    
    ObjectOperations ops = engine.Ooperations;
    object function = scope.GetVariable("function");
    SomeObj.SomeEvent += ops.ConvertTo<DelegateType>(function);
    
- the built-in python functions and modules
IronPython.Runtime.Builtin

bool istrue = Builtin.isinstance(isntance, klass);

- future of interacting with dynamic objects
            
- python magic methods
__new__, __init__, ... __divmode__
            
content management with with statement
with as RAII (Resource Acquisition Is Initialization) is analogous to the c# using statement
__enter__, __exit__
     
- more resources
FePy, IronPython Community Edition—http://fepy.sourceforge.net
IronPython for ASP.NET—http://www.asp.net/DynamicLanguages/
    + mailing lists and newsgroups
    IronPython mailing list—http://lists.ironpython.com/listinfo.cgi/users-ironpython.com
    Google Groups gateway—http://groups.google.com/group/ironpyPython newsgroup—comp.lang.python
    Google Groups gateway—http://groups.google.com/group/comp.lang.python/topics
    Python announce newsgroup—comp.lang.python.announce
    Google Groups gateway—http://groups.google.com/group/comp.lang.python.announce/topics   
    
    + learning python
    Michael Foord’s IronPython articles—http://www.voidspace.org.uk/            
    Python quick reference—http://rgruet.free.fr/            
    A Byte of Python—http://www.swaroopch.com/notes/Python            
            
    + code examples
    IronPython Cookbook—http://www.ironpython.info/
    ActiveState Python Cookbook—http://code.activestate.com/recipes/langs/python/
    Python Package Index—http://pypi.python.org/pypi
            
    + blogs
    Michael’s blog—http://www.voidspace.org.uk/blog
    IronPython URLs news and link aggregator—http://ironpython-urls.blogspot. 
    com
    Planet Python—http://planet.python.org
    Planet IronPython—http://www.voidspace.org.uk/ironpython/planet/
    Jeff Hardy, developer of NWSGI—http://jdhardy.blogspot.com/            
                
    + ironpython team
    Jim Hugunin, creator of IronPython—http://blogs.msdn.com/hugunin/
    Oleg Tkachenko, IronPython and Visual Studio integration—http://www.tkachenko.com/blog/            
                
    + dynamic language on .net
    Dynamic Language Runtime project page—http://www.codeplex.com/dlr
    Python.NET, CPython .NETintegration—http://pythonnet.sourceforge.net/

            
            
            



 
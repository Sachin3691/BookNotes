C++ Fundamentals=Kate Gregory;Note=Erxin

# Context 
- Introduction cpp 
- Course Overview 
    + content 
    + tools 
    + language baiscs 
    variables 
    flow of control 
    operators 
    
    + templates 
    + pointers, polymorphism
- Why C++? 
    + cpp is a general purpose language
    different kinds of applications 
    different platforms 
    
    + emphasizes power and performance 
    + cpp is popular 
    first one language for open source projects 
    
- Modern C++ 
    + the standard library provides built in capabilities you can use "out of the box"
        * string class 
        * collections(linked list, stack, queue, etc)
        * smart pointers that handle memory management for you 
        * file and screen io 
        
    + managing memory yourself is "old-school"
    + modern c++ looks a lot like c# or java 
    but faster 
- C++ As a first language 
- C++/CLI 
    + specialized variants of cpp are popular 
    + C++/CLI IS A VARIANT THAT MANAGED CODE
        * like c# or vb.net 
        * excellent for wrappers around native libraries so they can be called from .net 
        * has a few extra pieces of syntax to support CLR concepts
        * out of scope here 
    + learning c++ means you essentially know c++/cli too 
- C++ Ox 
    + c++ has a language belongs to no person or company 
    + there is a standard that defines the language 
        * a standards committee updates it from time to time 
        * c++98, c++O3 
        * new view will probably be c++ 11 or c++ 12 
    + compiler vendors implemented a lot of it in advance 
        * visual studio 2010 supports all the library changes, and almost all the language changes already 
    + in this material when syntax or library features from c++0x are used they'll be highlighted for you 
    
# Tools 
- visual studio 
- simple application 
ctrl+f5 to run application without debugging 
#include <iostream>
#include <string.h>

int _tmain(int argc, w_chart* argv)
{
}
- kinds of applications 
    + window apps (button and controls)
    + console applications 
    + services 
    + servers 
    + libraries 
    + console applications are the simplest 
        * write text to screen 
        * read text from the keyboard 
        * no graphics no controls 
- a console application structure 
    + define the entry point 
    + include the headers 
    
    //the first line is pond, hash 
    //pre-processer, is go before the codes compiled to tweak the compile process 
    combine multiple file into one 
    
    .h for c header, 
    .hpp for cpp header file  
    
    _tmain which will be transfer to main by the pre-processer
    int _tmain(int argc, _TCHAR* argv[])
    {
        std::cout<<"type your name"<<std::endl;
    }
- creating a project 
    
# language basic variables fundamental types
- introduction 
- variables 
- fundamental types 
- demo: fundamental types 
- casting 
    + compiler will convert types where they're compatible 
    warning if data might be lost, 307, 308 warning 
    error if they're not compatible 
    casting is used to suppress the warning 
    
    + this can backfire, it's your foot
    
    + c-style cast 
    + suffixes to show type of a literal
    0L, it is a long number 
    
# variables -user defined types 
- introductoin 
- classes and objects 
- demo: classes and objects 
- scope 
- demo scope 
- odds and ends 
    + struct 
        * generally used for "plain odd data" with little or no business logic 
        * can have member functions, constructor, destructor 
        * only difference, default access is public, this is the only different with class 
- demo inheritance
    + key to oo design 
    + derived classes can add or override memeber variables and functions 
    + namespaces 
        * prevent name collisions 
        * separate from class name with ::
    + enumerate
    + add class with VS content menu will help add .h and .pp file and the proper header files 
    childClass::Constructor(args):ParentClass(args), private_field(value){}
- demo namespaces, : colon
using std::count;
using std::endl;

//in the code don't required to add std when call the cout method and end 

using namespace std; 
//will not required the std:: 

don't add the using namespace inside header file which will prevent the namespace chaos

define namespace by 
namespace x
{
    class c
    {
    };
}
- demo enumerations 
enum Status 
{
    Pending,
    Approved, 
    Cacnelled 
};

Status s = Pending;
s = Approved;
- the preprocessor 
#include, pre-processor 

    + can also use for convenience 
        * include gurads with #ifndef #endif and #define 
        #ifndef _Person_h
        #define _Person_h
        ...
        #endif 
        
        this is the standard way to avoid define twice 
        * #pragma once 
        this is used to automatic prevent the same class being include twice which is same as #ifndef ... #define ... #endif ... 
        
        * can use to compile silightly different code under different circumstances 
- demo the preprocessor 
    
    
# Flow of control 
- if, for, while, switch 
- function, free function, member function 
- understand error messages 
    + when you call a function, two different checks are made 
        * have to declared(usually in a.h) that function it for compiler 
        * have you implemented(usually in a .cpp) that function which is for the linker 
        
    + different mistakes, different errors 
- immediate if 
result = something ? true:false;
    

# Operators
- arithmetic 
- comparison 
- operators 
- overloading 
- operator overloading 
    + user defined types can do everything fundamental types can do 
    int i = j + 3;
    
    Order new Order = oldOrder + newItem; 
    
    + author of the class writes a function that defines the operator for the class 
        * usually a member function 
        * occasionally a free function that takes an instance of the class 
        
        * standard library has plenty of usuful overloads 
        so useful they're invisible 
        firstname + " " + lastname works because std::string overloads + 
        << and >> are also overloads of the bit-shift operator 
        collections have iterators; ++ moves to the next 
    + demo 
    public:
        return_type operator +(first_type, second_type);
- writing an overload 
    + member function 
    myObject < something 
    bool MyClass::operator < (OtherType something)
    can operator on two MyClass objects or different types 
    + free function, fit for when you can't modify the class which you are written 
    something < myObject 
    
    bool operator(OtherType something, MyClass mc);
    free function 
    access member variables of MyClass through public functions 
    Or be declared a friend 
    
    
# templates 
- introduction
- templates 
- demo: function templates 
template <class T> 
T max(T& t1, T& t2)
{
    return t1 < t2? t2:t1;
}
- class templates 
tempalte <class T>
class Accum 
{
private: 
    T total;
public:
    Accum(T start): total(start) {};
    T operator +=(const T& t){return total = total + t;};
    T GetTotal() {return total;}
}

- template specialization 
tempalte <class T>
class Accum 
{
private: 
    T total;
public:
    Accum(T start): total(start) {};
    T operator +=(const T& t){return total = total + t;};
    T GetTotal() {return total;}
}

//template specialization for Accum 
tempalte <>
class Accum<Person> 
{
private: 
    int total;
public:
    Accum(int start): total(start) {};
    int operator +=(const Person& t){return total = total + t.GetNumber();};
    int GetTotal() {return total;}
};
- summary 
    + compile time checks mean no runtime hit 
    + auhtor of code that uses templates must ensure that types are compatible with the template chosen 

# pointers 
- introduction 
- pointers and references 
    + pointer holds the address of something else 
    one way to get one; & operator 
    int* pA = &A;
    int *pA = &A; //a integer address save at the *pA 
    
    + to get through the pointer to its target; * operator 
    *pA = 5;
    
    * shortcut for (*p).ls p-> arrow operator, points to or arrow
    * developer needs to assign a value for "not pointing to anything"
    0
    NULL, it is a macro #define NULL 0 
    nullptr (c++11), is a language keyword 
    
    + reference is an alias for something else 
    can only set its target when declaring it 
    all other actions go through the reference its target 
    
    + demo 
    int a = 3;
    int* pA = &a;
    (*pA)++; 
    
    int& rA = a;
    rA = 5; 
    
    int* badPointer = nullptr; 
    if(badPointer)
    {
        *badPointer = 3;
        cout << *badPointer << endl;
    }
    
    int& badReference; //this will not pass the compile time 
    badReference = 3;
- const 
    + cpp key word 
    a way to commit to the compiler you won't change something 
        * when declaring a local variable 
        const int zero = 0;
        
        * as a function parameter 
        int foo(const int i)
        int something(const Person& p) //to avoid the copy person but promise not change the properties of the object 
        
        * modifer on a member function 
        int MyClass::GetName const; //this means GetName will not change variables in MyClass 
    + const correctness can be difficult, use const key word to improve your code quality 
- const and pointers 
    + you can declare the pointer to be const 
    int* const cpI
    then you can't change it to point somewhere else 
    
    + or that it points at something const 
    const int* cpI; 
    
    then you can't use it to change the value of the target 
    
    + or both, if you really want to 
    const int* const crazy

- free store 
local variables go out of scope when the function ends 
    
the free store is for longer lived variables, the heap could be used as free store
    + create with new 
        * returns a pointer to the object or instance 
        * uses a constructor to initialize the object 
        
    + tear down with delete 
        * use the destructor to clean up the object else will stay until the process end 
    + slightly different syntax for "raw arrays"
        * but modern c++ avoids "raw arrays"
        
- manual memory management 
    + rule of three, if you write a destructor you should also write 
    copy constructor 
        MyClass::MyClass(const MyClass& p){...}
    copy assignment operator 
        MyClass& MyClass::operator =(MyClass& p){...}
    destructor 
        MyClass::~MyClass(){...}
    
- demo: manual memory management 
- easy memory management 
    + cpp 11 has a nice range of smart pointers 
        * they do all this for you 
        
    smart pointers will call the delete for you 
    
    + imagine a template class with just one member variable 
        * A T* that you got from new 
        
    + Constructor saves the T* in the member variable 
    + Destructor will delete that T* 
    No memory leak 
    + handle copy one of two ways 
        * prevent it (private copy constructor and copy assignment operator)
        * have a reference count:copy increments, destructor decrements, delete at 0 
    * the key thing: operator overloads 
        * *
        * -> 
- demo easy memory management 
#include <memory>

std::shared_ptr<ResourceType> pResource;

shared pointer initialize with empty, shared pointer destructor will check the resource reference count, if it is zero it will delete the shared resources 

share_pointer.reset(); //reset a share pointer has it let go of its hold on something out on the free store it will decremenets the reference count and if that takes the reference count to 0, it will delete it 

share_pointer = std::make_shared<ResourceType>(resource_constructor_args)
share_pointer is threaded like normal pointer 
- smart pointers, standard library smart pointers 
    + shared_ptr, reference counted 
    + weak_ptr, let you "peek" at a shared_ptr without bumping the reference count 
    + unique_ptr, Noncopyable(use std::move method to move resource out of the unique pointer) 
    
    + auto_ptr, should be replaced it may cause problems. it's flawed in some important ways 
- using smart pointers 


# Pointers and inheritance 
- Introduction
- Pointers and inheritance 
    + a pointer to a derived class can be stored as a pointer to the base class instead 
        * respects the "is a" relationship 
        * vital to Liskov substitutability 
    + any base class function can then be called through the pointer 
        * virtual function - derived class function executes 
        * nonvirtual function - base class function executes, will not required the virtual table, will not execute base on the pointer type 
        * this is cpp you get to choose 
    + can't put a base class pointer into a derived class pointer 
        * some member variables will be missing in the base class 
    + same rules when you using smart pointers 
        * smart pointers act like regular pointers and that includes polymorphism 
        
    + demo 
    + shared pointer and polymorphism
    #include <memory>
    using namespace std;
    
    shared_ptr<Person> spKate = make_shared<Person>("Kate", "PGregory", 458);
    
- slicing 
    + if you copy objects around, slicing can occur 
        * copy a derived object into a base object-extra member variables fall away 
        * can't copy a base object into a derived object 
        
    + some rules apply when passing into a function by value 
        * a copy is made 
        * slicing will happen 
    
    + use references or pointers to avoid slicing 
        * references use same syntax as solid objects 
        
    reference are polymorphism as pointers 
- casting 
    + (type)
        * c style cast 
        * super dangerous, doesn't tell humans much when they read your code 
        * you should add common to tell why the cast is safe 
        
    + static_cast<type_aim>, compiler will check it on compile time, 
        * compile time only 
        * up to you to be sure it's safe 
        
    + dynamic_cast<type>
        * runtime check, rely on knowing the what the type is 
        * works only when casting to pointer to a class with a virtual table 
        * returns null if cast fails 
        * slower but safer 

    + const_cast
        * for casting away const( not a beginner technique)
    
    + reinterpret_cast 
        * for bit twiddling 
        * pointer to a big enough int type 
        * int and enum to pointer 
        * function pointer to a different type function pointer 
        * type pointer to a different type pointer 
        * member function pointer to a different type function pointer 
        * data member pointer to a different type data memeber pointer 
        * random type pointer to random type pointer 
        
    safe sequence static_cast > dynamic_cast > reinterpret_cast > (type)
        
        
# the standard library 
- history 
    + at first c++ had no library that shipped with it 
        * c runtime library offered printf, strlen etc 
        
    + then came the standard template library, STL 
        * set of headers that offered functionality as templates 
        * collections and data structure, algorithms, iterators etc
        * header files end in .h, 
        
    + grew into the standard library 
        * not necessarily all the headers 
        * controlled by the c++ standard 
        * somewhat more functionality thatn STL had, same spirit 
        * header files don't end in .h everything is in std namespace 
        
- vector, all memory in the standard library are start from lower case 
    + simple collection of items 
    + grows as needed when new items are added 
        * can cause a lot of copying 
    + strongly typed through templates 
    + access with iterators or [] 
    
    #include <vector>
        
    + demo 
    std::vector<int> v;
    
    v.push_back(3);
    for (auto p = v.begin; p != v.end(); p++)
        std::cout << *p << "";
    
    v.rbegin(), v.rend()
    v[index]
    
- map, set of key-value pairs 
std::map<int, person> people;
people[intKey] = new Person();

std::pair<int,Person> p(intKey, new Person());

for(auto p = people.begin(); p!= people.end(); p++)
    p->first, p->second->PersonMemebers()

var pValue = people.find(key);
pValue->PersonMemebers();

- other collections 
    + list, a linked list 
        * faster than vector for adding new elements 
        * slower than vector for accessing elements 

    + if you use auto to declare your iteration process, whenever you change container, it is simple 
    
    + queue, dequeue, priority_queue, set 
    + multimap 
    + other are even more 
    
- sorting and searching 
    + implemented as functions that take a collection rather than as methods of the collection 
        * actually iterators that give access to the collection 

    + for_each
    + find_if 
    + etc, check the member function in the collection 
    + #include <algorithm> will give ability to search and sort in collection
    + ppl, parallel computing 

    + demo
    std::for_each(p.begin(), p.end(), print);
    ...
    void print<T>(T i)
    {
        ...
    }
    
    auto pret = find_if(p.begin(), p.end(), filter_functoin)

    template <class T>
    bool filter_functoin<T>(T i){...}

- string 
    + a string of characters like "hello"
    + can be constructed from literal "hello"
        wstring from L"hello"
    + operator overloads are natural 
    +, +=, <, ==, << output 
    + has methods as well 
    size(), substr(), etc 
    typically need to combine with iterators for more complex work 
    
    + <string>
    
- more 
    + data and time 
    #include <chrono>, access the system time 
    #include <ctime>, manipulate from different times 
    
    + complex numbers 
    #include <complex>
    
    + matrix math 
    #inlcude <numeric>
    
    + random number generator 
    #include <random> 
    
    + regular expressions 
    #include <regex>
    
    + high school match 
    #include <cmatch>


# lambda
- using building blocks with function 
- what's a lambda 
    + an expression that represents doing something 
    
    + imagine handing an operation or function (code)
        * for generic work 
        * for a functional style 
        * for concurrency 
        * for readability 
        eliminate tiny functions 
        
- tiny functions 
- use a lambda instead 
[](int x){ cout << i << "";}

- return a value 
    + lambdas may return a value 
    + only a return statement in the lambda 
        * return type inferred by compiler 
    + more than one statement 
        * developer must specify return type 
        
    two ways to return a value, one is return something is the same type as the input argument 
    [](int n) -> return_type {/*...*/ return value;}
    [](int n){ return int_value;}

- wait what is a lambda really? 
    + when you write a lambda the compiler generates an anonymous function object 
        * overrides( operator - the function call
        parameters are in the () of the lambda 
        * return type is after the -> of the lambda

    + has member variables that hold values the lambda might use 
    controlled by info in the [] of the lambda 
    + you can keep this function object in a variable or just use it right away as we've been doing 
    
- the capture 
    + empty[], catures nothing, works only with functon paramters 
    + [x, y] cature x and y by value 
        * copies are made 
        * lambda can be used when x and y have gone out of scope 
        
    + [&x, &y] capture x and y by reference 
        * no copies changes affect the originals 
        * dangling references may be an issue 
        
    + [=] copy everything by value, actually it's everything used in the body of the lambda 
    + [&] copy everything by reference 
    + mutable, don't make the member variables const, the captured variables will be changed inside the lambda body scope 
    + demo 
    int x = 3;
    int y = 7;
    for_each(v.begin(), v.end(), [x,y](int n)) {
        if(n >= x && n <= y)
            cout << n << " ";
    };

    generate_n(back_inserter(v), times, assign_value_func);
    
    
# Exception 
- Error happen, not every action succeeds 
    + errors and failures happen 
    + some are predictable 
        * user left a field blank 
        * balance in account is not enough to cover amount of withdrawal 

    + some are not 
        * out of memory 
        * result too big to fit in an integer 
        * file not found 
        * access denied 
        
    + different errors should be handled in different ways 
    
- excepted errors 
    + simplest way to handle expected errors is to test for them 
    + deal with them right where they are discovered 
    tell the user not to leave the field blank 
    
    + problem 
        * sometimes the code that finds the problem cannot deal with it 
        * eg business layer code can't get message to the user 
        
    + once approach 
        * have the function return an indication of trouble 
        * eg UpdateTimesheet() return true or false 
        
    + but 
        * what if the function already returns something (eg sqrt(), FindEmployee() etc)
        * what if the function can't return a value(eg constructor)
        * what if the developer who calls the function forgets to check the return values?
    
    
- exceptions 
    + transfer flow of execution from the problem location to somewhere that can handle it 
    skips intervening code 
    
    + developer can't forget to check return value 
    the function doesn't return 
    
    + continue to deal with things as close to the problem as possible

    + you need to know about stack unwinding 
    
    + demo 

- try and catch 
try 
{
}
catch(std::out_of_range& e)
{
}
catch(exception& e)
{
}

read the standard exception classes 

try/catch as close to the problem as possible, don't try catch any exception can't be handled 

catch exceptions by reference, great for catching a derived exception 
- throwing and catching 
    + c++ allows you to throw and catch anything 
    int, string, instance of a class 
    
    + puts quite a burden on the developer 
    + documentation might help 
        * if it exists 
        * if it mentions the exception 
        
    + the standard library includes an exception class 
        * base class to hierarchy of exceptions 
        * use classes derived from it when it needs to throw 
        
    + you can use these exception well in your own code 
- std::exception 
    + has a member function what() returns a string 
    + has a number of derived classes 
    + logic_error 
        + domain_error 
    invalid_argument
    length_error 
    out_of_range

        + runtime_error 
    overflow_error 
    range_error
    underflow_error 

        + these are "marker" classes 
        
        + throwing can catching 
    + throw Exception_Instance 
- unwinding the stack, make sure resource are lease on the catch block 
    + when an exception is thrown 
    + if in a try, everything local to try goes out of scope 
        * destructor go off 
        * control goes to the catch 
        
    + if not everything local to the functions goes out of scope 
        * control returns to where that functions was called from 
        * recurse to "if in a try" above 
    + if you get al the way out of main(), the user gets a dialog 
    but it's more interesting when you end up in catch 
- rall revisited, 
    + compare these two coe blocks 
    try
    {
        auto x = new X(stuff);
        //risky stuff 
        delete x;
    }
    catch (exception& e)
    {
        //delete or not delete x
    }
    
    don't do manually management in try, catch block, instead of use share_ptr 
    
    try
    {
        auto x = make_shared<X>(Stuff);
        //risky stuff
    }
    catch(exception& e)
    {
        //react 
    }
    X destructor will handle the release memory and the share_ptr will make sure call the destructor
    
    in cpp there is no finally block 
- exceptions have a cost 
    + little or no cost to setup a try/catch if the exception is not thrown 
    + if it's thrown, time is used up (much more than an if)
    
    + don't use for data entry validation(eg Feb 30th)
    test with if, show user error message 
    
    + more useful with deep, calling hierarchy 
        * a calls b calls c calls d 
        * each must test return value, prevent further calculations if something went wrong 
        * that can take time too 
        * using exceptions makes neater code that runs faster when everything goes well 
        * best for rare occurrences like disk full, network fell down etc 
        
- Summary 
    + exceptions handle unusual(exceptional) errors well 
    try sets up a context in which an excpetion might happen 
    
    + throw captures information about the problem and transfers it to a location that can solve it 

    + std::exception class is the class
    
    
# Understanding legacy code 
- typedef, keywords, used to define your own type 
typedef unsigned long DWORD;
typedef int BOOL;

    + once very popular 
    added meaning to types 
    in c, used to make using structs easier 
    typedef struct tagKPoint
    {
        int x,y;
    }KPoint;
    
    new cpp could use 
    struct KPoint
    {
        int x, y;
    };
    rampant in windows development 
    
    + in the previous of years cpp don't have bool type, so use typedef int BOOL 

    + still use in function pointers 
    + visual studio helps 
        * absence of syntax coloring 
        * hover of tip 
        
- Function pointer
    + decide at runtime what function to execute very powerful 
    + in c, there was on way function pointers 
    + c++ added polymorphism
    Account -> Update() will use right subclass's Update() method 
    
    + c++ 11 added lambdas 
    put the actual code to execute as a parameter to another call  
    
    + function pointers are easy to set and use 
    methodPointer = CalculateSlowly;
    methodPointer(a,b,c);

    + a little tricky to declare everyone uses a typedef, this avoid define the functoin pointer type everywhere 
    //define a function pointer with int parameter named f 
    typedef int (*CHANGER)(int i);
    CHANGE f;
- Pionter to member function 
    + include the class name when setting up the typedef, for example a member functoin of utility class, then it not only allow to point to the Utility class's member function 
    typedef int (Utility::* UF)();

    + use the class name and address-of operator when setting 
    UF action;
    action = &Utility::triplex //set the Utility function triplex to the action function pointer 
    
    + dereference when using (and lots of brackets)
    return (utilityInstance.*action)();

- void pointers 
void*, it actually a pointer to anything 
any kind of pointer(char*, Employee*, ...) can be cast to it 
popular function parameter 
cast it back to what you know it is 
there is no runtime checking policy 
in modern code, use a pointer to a base class 
    + then polymorphism 
    + or dynmaic_cast<>
    + void* throws away type safety 
    
- c-style arrays 
    + can be declared in local scope or the free store 
    whatever you new[] you must delete[] 
    
    + access elements with []
    2-d use [x][y] not [x, y]
    
    + use pointer manipulation 
    + don't know their size 
    + don't do bounds checking 
    + don't auto grow when you add more 
    + in your own use vector or other collection 
    
- c-style strings, array of char 
    + a c-style string is 
    an array of char 
    with a null character at the end 
    char* s1 = "hello";
    char s[] = {'h', 'e'}; //don't add null char at the end of the string 
    cahr s[] = "hello";
    
    strlen("kate")
    
    + a null character is '\0'
    not the same as a null pointer 
    not the same as '0' or "0" either, "0" is end with null character which is two character long 
    
    + common trap:forgetting to include room for the null character
    strlen("hello" sizeof is 5 but strlen is 4) you need to allocated 6 for it 
    
    + large collection of functions wit names that start str 
    #include <cstring>
    many are unintuitive 
    many are unsafe
    
    + use std::string and std::wstring whenever you can 
    the .c_str() method helps go back and forth 
- summary 

















    
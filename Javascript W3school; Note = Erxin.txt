Javascript W3school; Note = Erxin

# tutorial address
http://www.w3schools.com/js/default.asp

## introduction
- writing into html
document.write(), if it use after the dom ready the whole dom will be overwrite
- changing html content
x = document.getElementById("id");
x.innerHTML = new_content;
- changing element style
x.style.color = #134214;
- validate input
isNaN(x)
- script tag
<script type="text/javascript">
</script>
it is common to put function in head or at the bottom of the body
the type is not requirement in html5
external javascript, <script src="myScript.js"></script>
- Microsoft supports JavaScript for creating Windows 8 apps.
JavaScript is definitely the future for both the Internet and Windows.
- is case sensitive
- break up a code line is same as cpp, \
- comments
//, /*...*/
- variables
    * declare
    var variable_name;
    variable declare without a value will be set the value undefined by default
    * re-declare a variable will not effect the original value till allocate a value
    var unchanged = 'original_value';
    var unchanged; // this will not effect the value
    var unchanged = 'new_value'; // this will effect the value
    * local variable
    the variable define with the keyword var in a function become local scope
    * global variable 
    variable define out of any function with keyword var is global, all scripts and functions on the web page can access it
    * asign a value with out declare var will automatic set the value to global even if it is in a function
- data types
String, Number, Boolean, Array, Object, null, undefined
    * boolean have true and false
    * array
    var cars=new Array();
    cars[0]="Saab";
    or
    var cars=new Array("Saab","Volvo","BMW");
    or
    var cars=["Saab","Volvo","BMW"]; 
    * object, is delimited by curly braces, inside the braces the object's properties are defined as name and value pairs(name:value)
    var person={firstname:"John", lastname:"Doe", id:5566};
    * undefined value is the variable have no value, variable could be set empty by null
    * declare variable types by 
    var var_name = new type; // type is string, number
    * javascript's variables are all object
- objects
everything in js is an object, an object is data with properties and methods
object oriented languages is common to see camel-case function
- functions, is a block of code that will be executed when 'someone' calls it
- operators, is same as C
add two number will return sum value
add number with string will return connected string
    * compariason operators
    ==, value
    ===, value and type
    !=, value
    !==, value and type
    * logic operator
    &&, ||, !
    * conditional operator
    (condition)? value : value
- condition statements, same as C
if()...else if()... else, switch
- loop statements
    * for()
    * for/in, for(x in person), this will recurrence the person's each properties
    * while
    * do... while();
    * loop control by two statements
        + break [label_name];
        this could jump out of any code block
        without label reference can only be use inside a loop
        with a label reference can be use to jump out of any javascript code block
        + continue [label_name];
        with or without label reference can be only use inside a loop
    * define label
    label_name:
- errors
    * try, test a code block
    * catch, handel the error
    * throw, create custom error
    * ex.
    try
    {
        ...
        throw any_object;
    }
    catch(err)
    {
    }
- form validation

## javascript html dom
- finding html element by
id, tag name, class name
finding element by class is not work on IE 5-8
- change content of html elements
document.write();
never use this function after the document is loaded. this will overwrite the whole document
- changing content
element.innerHTML = value;
element.attribute_name = value;
when finded a element, it is treated as a javascript object
- changing css
element.style.property = value;
- DOM events
add javascript code to html event attribute will run the code when the event occurs
<tag onclick='java_script_code'>
- DOM Elements adding and removing nodes
document.CreateElement('type');
document.CreateTextNode('text_content'); //pure text elements
element.appendChild(elementObj);
element.removeChild(elementObj);
    
## javascript objects
- javascript objects
- object property and method
obj.property|method
- create new object
    + define and create a direct instance of an object
    var customObj = new Object();
    customObj.property0 = value;
    ...
    + use a function to define an object, then create new object instances
    function customObj(args)
    {
        this.property = value;
        ...
    }
    + create javascript object instance
    var objInstance = new customObj(args);
    + all the javascript objectInstance could dynamic add properties or method like python
- loops through the properties of an object
for(property_iter in object)
{}
- javascript number object
    + could write with or without decimal
    + all javascript object are 64-bit
    + precision
    integers have accurate up to 15 digits. the maxnumber of decimal is 17, but float point arithmetic is not always 100% accurate:
    var x = 0.2 + 0.1;  //will get wrong result
    this could be bypass by change the float to integer and then divide the factor
    var x = (0.2 * 10 + 0.1 * 10) / 10; //will get correct result
    + octal and hexadecimal
    var y=0377;  //octal number, so don't write number with a leading zero unless you want octal number
    var z=0xff;
    + number properties and methods
    MAX VALUE, MIN VALUE, NEGATIVE INFINITIVE, POSITIVE INFINITIVE, NaN, prototype, constructor
    + methods
    toExponential(), toFixed(), toPrecision(), toString(), valueOf()
- string object
    + escape char \
    + string surrounding with simple or double quotes
    + access each character in a string with its position
    + properties and methods
        * Properties
        length
        prototype
        constructor
        * Methods:
        charAt()
        charCodeAt()
        concat()
        fromCharCode()
        indexOf()
        lastIndexOf()
        match()
        replace()
        search()
        slice()
        split()
        substr()
        substring()
        toLowerCase()
        toUpperCase()
        valueOf()
- date object
    + get current date
    Date()
    + creator
    new Date() // current date and time
    new Date(milliseconds) //milliseconds since 1970/01/01
    new Date(dateString)
    new Date(year, month, day, hours, minutes, seconds, milliseconds)
    + add date are calculated in milliseconds from 01 January, 1970 00:00:00 universal time(UTC) with a day containing 86,400,000 milliseconds
    + set date time
    dateObj.setFullYear(2010, 0, 14);
    dateObj.setDate(dateObj0.getDate() + 5);
    + date time object could be compare directly
- Array object
    + create array
    var aryObj = new Array();
    aryObj[0] = value;
    ...
    var myCars=new Array("Saab","Volvo","BMW");
    var myCars=["Saab","Volvo","BMW"];
    + array could contain different types of objects
    + predefine array methods and properties
    + Extend javascript object by prototype property, prototype property is a global constructor in Javascript. It can construct new properties and methods for any Javascript object
    Array.prototype.ucase=function()
    {
      for (i=0;i<this.length;i++)
      {this[i]=this[i].toUpperCase();}
    }
- Javascript boolean object
    + create boolean value
    var boolObj = new Boolean();
    + false condition
    0, -0, null, '', false, undefined, NaN
- Math object
    + Math allow to perform mathematical tasks, it's not a constructor all the method could be used directly
    + constant of math
    Math.E
    Math.PI
    Math.SQRT2
    Math.SQRT1_2
    Math.LN2
    Math.LN10
    Math.LOG2E
    Math.LOG10E
- RegExp object
    + syntax
    var patt=new RegExp(pattern,modifiers);
    or
    var patt=/pattern/modifiers; 
        * pattern is the regex expression
        * modifier is used to specify if a search should be global, case-sensitive, etc.
    + modifiers
        * i, perform case-insensitive matching
        * g, perform global match rather than stopping after first match
    + user regex
    stringObj.match(regex); //this wil return array
    strObj.test(regex);     //this will return true or false
    strObj.exec(regex);     //searches a string for a specified value and returns the text of the found
    
## The browser object model
- window object, it represent the browser window, global objects are all become members of window
    window.document.getElementById("header"); 
    are same as
    document.getElementById("header");
    so the window keyword could be omit for global variables
- window size, the browser viewport not including toolbars and scrollbars
    + window.innerHeight, window.innerWidth
    + below IE9
    document.body.clientHeight
    document.body.clientWidth
- other window methods
    window.open() - open a new window
    window.close() - close the current window
    window.moveTo() -move the current window
    window.resizeTo() -resize the current window
- window screen, contains information about the user's screen
    window.screen.availWidth - available screen width
    window.screen.availHeight - available screen height
- window location, can be used to get the current page address(URL) and to redirect the browser to a new page
    location.hostname returns the domain name of the web host
    location.pathname returns the path and filename of the current page without host name
    location.port returns the port of the web host (80 or 443)
    location.protocol returns the web protocol used (http:// or https://)
    location.href returns the url of current page
    location.assign(url), will loads a new document specify by the url
    - window history
    history.back() - same as clicking back in the browser
    history.forward() - same as clicking forward in the browser
    - window navigator contains information about the visitor's browser
    Browser CodeName, navigator.appCodeName
    Browser Name, navigator.appName
    Browser Version, navigator.appVersion
    Cookies Enabled, navigator.cookieEnabled
    Platform, navigator.platform
    User-agent header, navigator.userAgent
    User-agent language, navigator.systemLanguage
    note: the platform and browser version is not always accuracy. To detect browser use browser related object, ex. Since only Opera supports the property "window.opera",
- Popup boxes
    + alert box
    window.alert(msg);
    + confirm box
    window.confirm(msg);
    + prompt box, let user input some text
    window.prompt()
- Time events
    var interval = setInterval(function, delay) - executes a function, over and over again, at specified time intervals
    var interval = setTimeout(function, delay) - executes a function, once, after waiting a specified number of milliseconds
    window.clearInterval(interval), use to clear the setted interval
    window.clearTimeout(interval)
- Cookies
var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
document.cookie=c_name + "=" + c_value;
    + set cookie
    function setCookie(c_name,value,exdays)
    {
        var exdate=new Date();
        exdate.setDate(exdate.getDate() + exdays);
        var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
        document.cookie=c_name + "=" + c_value;
    }
    + get cookie
    function getCookie(c_name)
    {
        var i,x,y,ARRcookies=document.cookie.split(";");
        for (i=0;i<ARRcookies.length;i++)
        {
          x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
          y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
          x=x.replace(/^\s+|\s+$/g,"");
          if (x==c_name)
            {
            return unescape(y);
            }
          }
        }
    }
    + check cookie
    function checkCookie()
    {
        var username=getCookie("username");
          if (username!=null && username!="")
          {
          alert("Welcome again " + username);
          }
        else
          {
          username=prompt("Please enter your name:","");
          if (username!=null && username!="")
            {
            setCookie("username",username,365);
            }
          }
    }

## javascript reference
- global properties 
Infinity, 	A numeric value that represents positive/negative infinity
NaN, 	"Not-a-Number" value
undefined, 	Indicates that a variable has not been assigned a value
- global functions
    decodeURI(), 	Decodes a URI
    decodeURIComponent(), 	Decodes a URI component
    encodeURI(), 	Encodes a URI
    encodeURIComponent(), 	Encodes a URI component
    escape(), 	Encodes a string
    eval(), 	Evaluates a string and executes it as if it was script code
    isFinite(), 	Determines whether a value is a finite, legal number
    isNaN(), 	Determines whether a value is an illegal number
    Number(), 	Converts an object's value to a number
    parseFloat(), 	Parses a string and returns a floating point number
    parseInt(), 	Parses a string and returns an integer
    String(), 	Converts an object's value to a string
    unescape(), 	Decodes an encoded string
- difference between, encodeURI() and encodeURIComponent()
The main difference is that:
    * encodeURI is intended for use on the full URI.
    * encodeURIComponent is intended to be used on .. well .. URI components that is any part that lies between separators (; / ? : @ & = + $ , #).
So, in encodeURIComponent these separators are encoded also because they are regarded as text and not special characters.
    + explain
    encodeURIComponent()
    Converts the input into a URL-encoded string
    encodeURI()
    URL-encodes the input, but assumes a full URL is given, so returns a valid URL by not encoding the protocol (e.g. http://) and host name (e.g. www.stackoverflow.com).
- window 
    + properties
    closed 	Returns a Boolean value indicating whether a window has been closed or not
    defaultStatus 	Sets or returns the default text in the statusbar of a window
    document 	Returns the Document object for the window (See Document object)
    frames 	Returns an array of all the frames (including iframes) in the current window
    history 	Returns the History object for the window (See History object)
    innerHeight 	Sets or returns the inner height of a window's content area
    innerWidth 	Sets or returns the inner width of a window's content area
    length 	Returns the number of frames (including iframes) in a window
    location 	Returns the Location object for the window (See Location object)
    name 	Sets or returns the name of a window
    navigator 	Returns the Navigator object for the window (See Navigator object)
    opener 	Returns a reference to the window that created the window
    outerHeight 	Sets or returns the outer height of a window, including toolbars/scrollbars
    outerWidth 	Sets or returns the outer width of a window, including toolbars/scrollbars
    pageXOffset 	Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window
    pageYOffset 	Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window
    parent 	Returns the parent window of the current window
    screen 	Returns the Screen object for the window (See Screen object)
    screenLeft 	Returns the x coordinate of the window relative to the screen
    screenTop 	Returns the y coordinate of the window relative to the screen
    screenX 	Returns the x coordinate of the window relative to the screen
    screenY 	Returns the y coordinate of the window relative to the screen
    self 	Returns the current window
    status 	Sets the text in the statusbar of a window
    top 	Returns the topmost browser window
    + methods
    alert() 	Displays an alert box with a message and an OK button
    blur() 	Removes focus from the current window
    clearInterval() 	Clears a timer set with setInterval()
    clearTimeout() 	Clears a timer set with setTimeout()
    close() 	Closes the current window
    confirm() 	Displays a dialog box with a message and an OK and a Cancel button
    createPopup() 	Creates a pop-up window, //only works in ie
    focus() 	Sets focus to the current window
    moveBy() 	Moves a window relative to its current position
    moveTo() 	Moves a window to the specified position
    open() 	Opens a new browser window
    print() 	Prints the content of the current window
    prompt() 	Displays a dialog box that prompts the visitor for input
    resizeBy() 	Resizes the window by the specified pixels
    resizeTo() 	Resizes the window to the specified width and height
    scroll() 	 
    scrollBy() 	Scrolls the content by the specified number of pixels
    scrollTo() 	Scrolls the content to the specified coordinates
    setInterval() 	Calls a function or evaluates an expression at specified intervals (in milliseconds)
    setTimeout() 	Calls a function or evaluates an expression after a specified number of milliseconds
- navigator object 
    + properties
    appCodeName 	Returns the code name of the browser
    appName 	Returns the name of the browser
    appVersion 	Returns the version information of the browser
    cookieEnabled 	Determines whether cookies are enabled in the browser
    onLine 	Boolean, returns true if the browser is on line, otherwise false.
    platform 	Returns for which platform the browser is compiled
    userAgent 	Returns the user-agent header sent by the browser to the server
    + methods
    javaEnabled() 	Specifies whether or not the browser has Java enabled
    taintEnabled() 	Specifies whether or not the browser has data tainting enabled
- screen object
    + properties
    availHeight 	Returns the height of the screen (excluding the Windows Taskbar)
    availWidth 	Returns the width of the screen (excluding the Windows Taskbar)
    colorDepth 	Returns the bit depth of the color palette for displaying images
    height 	Returns the total height of the screen
    pixelDepth 	Returns the color resolution (in bits per pixel) of the screen
    width 	Returns the total width of the screen
- history object
    + properties
    length, the lenght of uri in history list
    + methods
    back() 	Loads the previous URL in the history list
    forward() 	Loads the next URL in the history list
    go() 	Loads a specific URL from the history list
- location object, contain the information of current url
    + properties
    hash 	Returns the anchor portion of a URL
    host 	Returns the hostname and port of a URL
    hostname 	Returns the hostname of a URL
    href 	Returns the entire URL
    pathname 	Returns the path name of a URL
    port 	Returns the port number the server uses for a URL
    protocol 	Returns the protocol of a URL
    search 	Returns the query portion of a URL
    + methods
    assign() 	Loads a new document
    reload() 	Reloads the current document
    replace() 	Replaces the current document with a new one
- Array object
    + property
    constructor 	Returns the function that created the Array object's prototype
    length 	Sets or returns the number of elements in an array
    prototype 	Allows you to add properties and methods to an Array object
    + methods
    concat() 	Joins two or more arrays, and returns a copy of the joined arrays
    indexOf() 	Search the array for an element and returns its position
    join() 	Joins all elements of an array into a string
    lastIndexOf() 	Search the array for an element, starting at the end, and returns its position
    pop() 	Removes the last element of an array, and returns that element
    push() 	Adds new elements to the end of an array, and returns the new length
    reverse() 	Reverses the order of the elements in an array
    shift() 	Removes the first element of an array, and returns that element
    slice() 	Selects a part of an array, and returns the new array
    sort() 	Sorts the elements of an array
    splice() 	Adds/Removes elements from an array
    toString() 	Converts an array to a string, and returns the result
    unshift() 	Adds new elements to the beginning of an array, and returns the new length
    valueOf() 	Returns the primitive value of an array
- Boolean Object
    + property
    constructor 	Returns the function that created the Boolean object's prototype    
    prototype 	Allows you to add properties and methods to a Boolean object
    + methods
    toString() 	Converts a Boolean value to a string, and returns the result
    valueOf() 	Returns the primitive value of a Boolean object
- Date object
    + property
    constructor 	Returns the function that created the Date object's prototype
    prototype 	Allows you to add properties and methods to an object
    + methods
    getDate() 	Returns the day of the month (from 1-31)
    getDay() 	Returns the day of the week (from 0-6)
    getFullYear() 	Returns the year (four digits)
    getHours() 	Returns the hour (from 0-23)
    getMilliseconds() 	Returns the milliseconds (from 0-999)
    getMinutes() 	Returns the minutes (from 0-59)
    getMonth() 	Returns the month (from 0-11)
    getSeconds() 	Returns the seconds (from 0-59)
    getTime() 	Returns the number of milliseconds since midnight Jan 1, 1970
    getTimezoneOffset() 	Returns the time difference between UTC time and local time, in minutes
    getUTCDate() 	Returns the day of the month, according to universal time (from 1-31)
    getUTCDay() 	Returns the day of the week, according to universal time (from 0-6)
    getUTCFullYear() 	Returns the year, according to universal time (four digits)
    getUTCHours() 	Returns the hour, according to universal time (from 0-23)
    getUTCMilliseconds() 	Returns the milliseconds, according to universal time (from 0-999)
    getUTCMinutes() 	Returns the minutes, according to universal time (from 0-59)
    getUTCMonth() 	Returns the month, according to universal time (from 0-11)
    getUTCSeconds() 	Returns the seconds, according to universal time (from 0-59)
    getYear() 	Deprecated. Use the getFullYear() method instead
    parse() 	Parses a date string and returns the number of milliseconds since midnight of January 1, 1970
    setDate() 	Sets the day of the month of a date object
    setFullYear() 	Sets the year (four digits) of a date object
    setHours() 	Sets the hour of a date object
    setMilliseconds() 	Sets the milliseconds of a date object
    setMinutes() 	Set the minutes of a date object
    setMonth() 	Sets the month of a date object
    setSeconds() 	Sets the seconds of a date object
    setTime() 	Sets a date and time by adding or subtracting a specified number of milliseconds to/from midnight January 1, 1970
    setUTCDate() 	Sets the day of the month of a date object, according to universal time
    setUTCFullYear() 	Sets the year of a date object, according to universal time (four digits)
    setUTCHours() 	Sets the hour of a date object, according to universal time
    setUTCMilliseconds() 	Sets the milliseconds of a date object, according to universal time
    setUTCMinutes() 	Set the minutes of a date object, according to universal time
    setUTCMonth() 	Sets the month of a date object, according to universal time
    setUTCSeconds() 	Set the seconds of a date object, according to universal time
    setYear() 	Deprecated. Use the setFullYear() method instead
    toDateString() 	Converts the date portion of a Date object into a readable string
    toGMTString() 	Deprecated. Use the toUTCString() method instead
    toISOString() 	Returns the date as a string, using the ISO standard
    toJSON() 	Returns the date as a string, formated as a JSON date
    toLocaleDateString() 	Returns the date portion of a Date object as a string, using locale conventions
    toLocaleTimeString() 	Returns the time portion of a Date object as a string, using locale conventions
    toLocaleString() 	Converts a Date object to a string, using locale conventions
    toString() 	Converts a Date object to a string
    toTimeString() 	Converts the time portion of a Date object to a string
    toUTCString() 	Converts a Date object to a string, according to universal time
    UTC() 	Returns the number of milliseconds in a date string since midnight of January 1, 1970, according to universal time
    valueOf() 	Returns the primitive value of a Date object
- Math object
    + property
    E 	Returns Euler's number (approx. 2.718)
    LN2 	Returns the natural logarithm of 2 (approx. 0.693)
    LN10 	Returns the natural logarithm of 10 (approx. 2.302)
    LOG2E 	Returns the base-2 logarithm of E (approx. 1.442)
    LOG10E 	Returns the base-10 logarithm of E (approx. 0.434)
    PI 	Returns PI (approx. 3.14)
    SQRT1_2 	Returns the square root of 1/2 (approx. 0.707)
    SQRT2 	Returns the square root of 2 (approx. 1.414)
    + math
    abs(x) 	Returns the absolute value of x
    acos(x) 	Returns the arccosine of x, in radians
    asin(x) 	Returns the arcsine of x, in radians
    atan(x) 	Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
    atan2(y,x) 	Returns the arctangent of the quotient of its arguments
    ceil(x) 	Returns x, rounded upwards to the nearest integer
    cos(x) 	Returns the cosine of x (x is in radians)
    exp(x) 	Returns the value of Ex
    floor(x) 	Returns x, rounded downwards to the nearest integer
    log(x) 	Returns the natural logarithm (base E) of x
    max(x,y,z,...,n) 	Returns the number with the highest value
    min(x,y,z,...,n) 	Returns the number with the lowest value
    pow(x,y) 	Returns the value of x to the power of y
    random() 	Returns a random number between 0 and 1
    round(x) 	Rounds x to the nearest integer
    sin(x) 	Returns the sine of x (x is in radians)
    sqrt(x) 	Returns the square root of x
    tan(x) 	Returns the tangent of an angle
- Number object
    + property
    constructor 	Returns the function that created the Number object's prototype
    MAX_VALUE 	Returns the largest number possible in JavaScript
    MIN_VALUE 	Returns the smallest number possible in JavaScript
    NEGATIVE_INFINITY 	Represents negative infinity (returned on overflow)
    NaN 	Represents a "Not-a-Number" value
    POSITIVE_INFINITY 	Represents infinity (returned on overflow)
    prototype 	Allows you to add properties and methods to an object    
    + methods
    toExponential(x) 	Converts a number into an exponential notation
    toFixed(x) 	Formats a number with x numbers of digits after the decimal point
    toPrecision(x) 	Formats a number to x length
    toString() 	Converts a Number object to a string
    valueOf() 	Returns the primitive value of a Number object    
- String object
    + property
    constructor 	Returns the function that created the String object's prototype
    length 	Returns the length of a string
    prototype 	Allows you to add properties and methods to an object
    + method
    charAt() 	Returns the character at the specified index
    charCodeAt() 	Returns the Unicode of the character at the specified index
    concat() 	Joins two or more strings, and returns a copy of the joined strings
    fromCharCode() 	Converts Unicode values to characters
    indexOf() 	Returns the position of the first found occurrence of a specified value in a string
    lastIndexOf() 	Returns the position of the last found occurrence of a specified value in a string
    match() 	Searches for a match between a regular expression and a string, and returns the matches
    replace() 	Searches for a match between a substring (or regular expression) and a string, and replaces the matched substring with a new substring
    search() 	Searches for a match between a regular expression and a string, and returns the position of the match
    slice() 	Extracts a part of a string and returns a new string
    split() 	Splits a string into an array of substrings
    substr() 	Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
    substring() 	Extracts the characters from a string, between two specified indices
    toLowerCase() 	Converts a string to lowercase letters
    toUpperCase() 	Converts a string to uppercase letters
    valueOf() 	Returns the primitive value of a String object    
    + html wrapper functions, these function only could be use in some specific html tags such as p
    anchor() 	Creates an anchor
    big() 	Displays a string using a big font
    blink() 	Displays a blinking string
    bold() 	Displays a string in bold
    fixed() 	Displays a string using a fixed-pitch font
    fontcolor() 	Displays a string using a specified color
    fontsize() 	Displays a string using a specified size
    italics() 	Displays a string in italic
    link() 	Displays a string as a hyperlink
    small() 	Displays a string using a small font
    strike() 	Displays a string with a strikethrough
    sub() 	Displays a string as subscript text
    sup() 	Displays a string as superscript text
- RegExp object
    + property
    i 	Perform case-insensitive matching
    g 	Perform a global match (find all matches rather than stopping after the first match)
    m 	Perform multiline matching    
    + experssion brackets
    [abc] 	Find any character between the brackets
    [^abc] 	Find any character not between the brackets
    [0-9] 	Find any digit from 0 to 9
    [A-Z] 	Find any character from uppercase A to uppercase Z
    [a-z] 	Find any character from lowercase a to lowercase z
    [A-z] 	Find any character from uppercase A to lowercase z
    [adgk] 	Find any character in the given set
    [^adgk] 	Find any character outside the given set
    (red|blue|green) 	Find any of the alternatives specified
    + metacharacters
    . 	Find a single character, except newline or line terminator
    \w 	Find a word character
    \W 	Find a non-word character
    \d 	Find a digit
    \D 	Find a non-digit character
    \s 	Find a whitespace character
    \S 	Find a non-whitespace character
    \b 	Find a match at the beginning/end of a word
    \B 	Find a match not at the beginning/end of a word
    \0 	Find a NUL character
    \n 	Find a new line character
    \f 	Find a form feed character
    \r 	Find a carriage return character
    \t 	Find a tab character
    \v 	Find a vertical tab character
    \xxx 	Find the character specified by an octal number xxx
    \xdd 	Find the character specified by a hexadecimal number dd
    \uxxxx 	Find the Unicode character specified by a hexadecimal number xxxx
    + quantifiers
    n+ 	Matches any string that contains at least one n
    n* 	Matches any string that contains zero or more occurrences of n
    n? 	Matches any string that contains zero or one occurrences of n
    n{X} 	Matches any string that contains a sequence of X n's
    n{X,Y} 	Matches any string that contains a sequence of X to Y n's
    n{X,} 	Matches any string that contains a sequence of at least X n's
    n$ 	Matches any string with n at the end of it
    ^n 	Matches any string with n at the beginning of it
    ?=n 	Matches any string that is followed by a specific string n
    ?!n 	Matches any string that is not followed by a specific string n
    + property
    global 	Specifies if the "g" modifier is set
    ignoreCase 	Specifies if the "i" modifier is set
    lastIndex 	The index at which to start the next match
    multiline 	Specifies if the "m" modifier is set
    source 	The text of the RegExp pattern
    + method
    compile() 	Compiles a regular expression
    exec() 	Tests for a match in a string. Returns the first match
    test() 	Tests for a match in a string. Returns true or false
- HTML element Form object
    + form object collections
    elements[] 	Returns an array of all elements in a form
    + property
    acceptCharset 	Sets or returns the value of the accept-charset attribute in a form
    action 	Sets or returns the value of the action attribute in a form
    enctype 	Sets or returns the value of the enctype attribute in a form
    length 	Returns the number of elements in a form
    method 	Sets or returns the value of the method attribute in a form
    name 	Sets or returns the value of the name attribute in a form
    target 	Sets or returns the value of the target attribute in a form
    + method
    reset() 	Resets a form
    submit() 	Submits a form
    + event
    onreset 	The reset button is clicked
    onsubmit 	The submit button is clicked
- HTML element IFrame object
    + property
    align 	Sets or returns the value of the align attribute in an iframe
    contentDocument 	Returns the document object generated by a frame/iframe
    contentWindow 	Returns the window object generated by a frame/iframe 	No
    frameBorder 	Sets or returns the value of the frameborder attribute in a frame/iframe
    height 	Sets or returns the value of the height attribute in an iframe
    longDesc 	Sets or returns the value of the longdesc attribute in a frame/iframe
    marginHeight 	Sets or returns the value of the marginheight attribute in a frame/iframe
    marginWidth 	Sets or returns the value of the marginwidth attribute in a frame/iframe
    name 	Sets or returns the value of the name attribute in a frame/iframe
    noResize 	Sets or returns the value of the noresize attribute in a frame
    scrolling 	Sets or returns the value of the scrolling attribute in a frame/iframe
    src 	Sets or returns the value of the src attribute in a frame/iframe
    width 	Sets or returns the value of the width attribute in an iframe
    + event
    onload 	Script to be run immediately after a frame/iframe is loaded
- HTML element Frameset object
    + property
    cols 	Sets or returns the value of the cols attribute in a frameset 	Yes
    rows 	Sets or returns the value of the rows attribute in a frameset 	Yes
    + event
    onload 	Script to be run immediately after a page is loaded 	Yes
- HTML element Document object
    + property
    anchors 	Returns a collection of all the anchors in the document 	Yes
    applets 	Returns a collection of all the applets in the document 	Yes
    body 	Returns the body element of the document 	Yes
    cookie 	Returns all name/value pairs of cookies in the document 	Yes
    documentMode 	Returns the mode used by the browser to render the document 	No
    domain 	Returns the domain name of the server that loaded the document 	Yes
    forms 	Returns a collection of all the forms in the document 	Yes
    images 	Returns a collection of all the images in the document 	Yes
    lastModified 	Returns the date and time the document was last modified 	No
    links 	Returns a collection of all the links in the document 	Yes
    readyState 	Returns the (loading) status of the document 	No
    referrer 	Returns the URL of the document that loaded the current document 	Yes
    title 	Sets or returns the title of the document 	Yes
    URL 	Returns the full URL of the document 	Yes
    + methods
    close() 	Closes the output stream previously opened with document.open() 	Yes
    getElementsByName() 	Accesses all elements with a specified name 	Yes
    open() 	Opens an output stream to collect the output from document.write() or document.writeln() 	Yes
    write() 	Writes HTML expressions or JavaScript code to a document 	Yes
    writeln() 	Same as write(), but adds a newline character after each statement 	Yes
- HTML Dom Events
    + mouse events
    onclick 	The event occurs when the user clicks on an element 	2
    ondblclick 	The event occurs when the user double-clicks on an element 	2
    onmousedown 	The event occurs when a user presses a mouse button over an element 	2
    onmousemove 	The event occurs when the pointer is moving while it is over an element 	2
    onmouseover 	The event occurs when the pointer is moved onto an element 	2
    onmouseout 	The event occurs when a user moves the mouse pointer out of an element 	2
    onmouseup 	The event occurs when a user releases a mouse button over an element 	2
    + keyboard events
    onkeydown 	The event occurs when the user is pressing a key 	2
    onkeypress 	The event occurs when the user presses a key 	2
    onkeyup 	The event occurs when the user releases a key 	2
    + frame/object events
    onabort 	The event occurs when an image is stopped from loading before completely loaded (for <object>) 	2
    onerror 	The event occurs when an image does not load properly (for <object>, <body> and <frameset>) 	 
    onload 	The event occurs when a document, frameset, or <object> has been loaded 	2
    onresize 	The event occurs when a document view is resized 	2
    onscroll 	The event occurs when a document view is scrolled 	2
    onunload 	The event occurs once a page has unloaded (for <body> and <frameset>) 	2
    + form events
    onblur 	The event occurs when a form element loses focus 	2
    onchange 	The event occurs when the content of a form element, the selection, or the checked state have changed (for <input>, <select>, and <textarea>) 	2
    onfocus 	The event occurs when an element gets focus (for <label>, <input>, <select>, textarea>, and <button>) 	2
    onreset 	The event occurs when a form is reset 	2
    onselect 	The event occurs when a user selects some  text (for <input> and <textarea>) 	2
    onsubmit 	The event occurs when a form is submitted 	2
    + event object
        * constant
        CAPTURING_PHASE 	The current event phase is the capture phase (3) 	1
        AT_TARGET 	The current event is in the target phase, i.e. it is being evaluated at the event target (1) 	2
        BUBBLING_PHASE 	The current event phase is the bubbling phase (2) 	3
        * property
        bubbles 	Returns whether or not an event is a bubbling event 	2
        cancelable 	Returns whether or not an event can have its default action prevented 	2
        currentTarget 	Returns the element whose event listeners triggered the event 	2
        eventPhase 	Returns which phase of the event flow is currently being evaluated 	2
        target 	Returns the element that triggered the event 	2
        timeStamp 	Returns the time (in milliseconds relative to the epoch) at which the event was created 	2
        type 	Returns the name of the event 	2
        * methods
        initEvent() 	Specifies the event type, whether or not the event can bubble, whether or not the event's default action can be prevented 	2
        preventDefault() 	To cancel the event if it is cancelable, meaning that any default action normally taken by the implementation as a result of the event will not occur 	2
        stopPropagation() 	To prevent further propagation of an event during event flow 	2
    + eventTarget object
    addEventListener() 	Allows the registration of event listeners on the event target (IE8 = attachEvent()) 	2
    dispatchEvent() 	Allows to send the event to the subscribed event listeners (IE8 = fireEvent()) 	2
    removeEventListener() 	Allows the removal of event listeners on the event target (IE8 = detachEvent()) 	2
    + eventListener
    handleEvent() 	Called whenever an event occurs of the event type for which the EventListener interface was registered 	2
    + documentEvent object
        * method
        createEvent()
    + mouseEvent/keyboardEvent object
        * property
        altKey 	Returns whether or not the "ALT" key was pressed when an event was triggered 	2
        button 	Returns which mouse button was clicked when an event was triggered 	2
        clientX 	Returns the horizontal coordinate of the mouse pointer, relative to the current window, when an event was triggered 	2
        clientY 	Returns the vertical coordinate of the mouse pointer, relative to the current window, when an event was triggered 	2
        ctrlKey 	Returns whether or not the "CTRL" key was pressed when an event was triggered 	2
        keyIdentifier 	Returns the identifier of a key 	3
        keyLocation 	Returns the location of the key on the advice 	3
        metaKey 	Returns whether or not the "meta" key was pressed when an event was triggered 	2
        relatedTarget 	Returns the element related to the element that triggered the event 	2
        screenX 	Returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered 	2
        screenY 	Returns the vertical coordinate of the mouse pointer, relative to the screen, when an event was triggered 	2
        shiftKey 	Returns whether or not the "SHIFT" key was pressed when an event was triggered 	2
        * method
        initMouseEvent() 	Initializes the value of a MouseEvent object 	2
        initKeyboardEvent() 	Initializes the value of a KeyboardEvent object 	3
- HTML DOM HTMLElement Object
The following properties, and methods can be used on all HTML elements.
    + property
    accessKey 	Sets or returns an accesskey for an element 	Yes
    className 	Sets or returns the class attribute of an element 	Yes
    clientHeight 	Returns the viewable height of the content on a page (not including borders, margins, or scrollbars) 	No
    clientWidth 	Returns the viewable width of the content on a page (not including borders, margins, or scrollbars) 	No
    dir 	Sets or returns the text direction of an element 	Yes
    id 	Sets or returns the id of an element 	Yes
    innerHTML 	Sets or returns the HTML contents (+text) of an element 	Yes
    lang 	Sets or returns the language code for an element 	Yes
    offsetHeight 	Returns the height of an element, including borders and padding if any, but not margins 	No
    offsetLeft 	Returns the horizontal offset position of the current element relative to its offset container 	No
    offsetParent 	Returns the offset container of an element 	No
    offsetTop 	Returns the vertical offset position of the current element relative to its offset container 	No
    offsetWidth 	Returns the width of an element, including borders and padding if any, but not margins 	No
    scrollHeight 	Returns the entire height of an element (including areas hidden with scrollbars) 	No
    scrollLeft 	Returns the distance between the actual left edge of an element and its left edge currently in view 	No
    scrollTop 	Returns the distance between the actual top edge of an element and its top edge currently in view 	No
    scrollWidth 	Returns the entire width of an element (including areas hidden with scrollbars) 	No
    style 	Sets or returns the style attribute of an element 	Yes
    tabIndex 	Sets or returns the tab order of an element 	Yes
    title 	Sets or returns the title attribute of an element
    + method
    toString() 	Converts an element to a string
    
    
    
    
    
    
    
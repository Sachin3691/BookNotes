Microsoft Excel 2019 VBA and Macros, First Edition=Bill Jelen;Note=Erxin

# Contents 
- Unleashing the power of Excel with VBA 
- This sounds like Basic so why doesn't it look familiar 
- referring to ranges 
- Looping and flow control 
- R1C1 style formulas 
- Creating and manipulating names in VBA 
- Event programming 
- Arrays 
- Creating classes and collections 
- Userforms an introduction
- Data VBA to create pivot tables 
- Excel power 
- Sample user defined functions 
- Creating charts 
- Data visualizastions and conditional formatting 
- Dashboarding with sparklines in Excel 2019 
- Text file processing 
- Automating Word 
- Using access as a back end to enhance multiuser access to data 
- Advanced userform techniques 
- The windows application programming interface API 
- Handling errors 
- Customizing the ribbon to macros 
- Creating add-ins 
- An introduction to the creating office and add-ins 
- What's new in Excel 2019 and what's changed 


# About the authors 
- Excel MVP, host of MrExcel.com 
- In May 2018, Microsoft announced a new JavaScript user-defined function (UDF) that would allow macro code to run on both the client version of Excel and in Excel Online. The cross-platform ability is interesting.

- refrence book <<Excel JavaScript UDFs Straight to the Point >>
-  http://www.mrexcel.com/macvba.html Development in VBA for Mac Excel 2019 is far more difficult than in Windows
- feedback 

Let′s keep the conversation going! We′re on Twitter:

http://twitter.com/MicrosoftPress

http://twitter.com/MrExcel


# Unleashing the power of Excel with VBA 
- enable VBA 
    1. right click ribbon and choose customize the ribbon 
    2. in the right list box, select the developer check box 
    3. click ok to return excel 
 
- file types allow macros 
    + .xlsx, excel workbook, macro cannot store in this kind of file 
    + .xlsb, excel binary workbook, design to handle 1 million row grid size, introduced in excel 2007, more prone to corruption 
    + .xlsm, excel maro-enabled 
    + .xls, 97-2003, produced files that can be read by any one using legarcy excel 
    
- macro trusted location 
    + click m2acro security in developer tab 
    + click trusted location 
    
- four kinds of security settings 
    + disable all 
    + disable all with notification 
    + disable all macros except digitall signed 
    + enable all 
    
- The Personal Macro Workbook (Personal.xlsm) is not a visible workbook; it is created if you choose to save the recording in the Personal Macro Workbook. This workbook is used to save a macro in a workbook that opens automatically when you start Excel

- create macro button 
    + right click the quick access toolbar 
    + select macros from the list 
    + choose a macro from the list box and select a icon 
- addd a macro to a form control and text box. Excel offers 12 form controls and 12 ActiveX controls in this one drop-down menu. The form controls are at the top, and the ActiveX controls are at the bottom2

    + on the developer tab click insert button to open drop down menu, select controls 
    + draw the control on the worksheet 
    + choose a macro from the assign macro dialog box 
    + type a new label 
    
- Mac at http://www.mrexcel.com/macvba.html Development in VBA for Mac Excel 2019 is far more difficult than in Windows, 

- understanding the VB editor 
    + modules 
    excel objects, by default a project consists of sheet modules for each sheet in the workbook and a signle thisworkbook module 
    
    forms
    
    modules, record a macro, excel automatic creates a module 
    
    class modules, are excel's way of letting you create your own objects 


- use relative refrence when recording 
    + By default, the macro recorder records all actions as absolute actions. 
    + Toggle relative recording off, click row 1, and then toggle relative recording back on.

- never use autosum or quick analysis while recording a macro 
- four tips for using macro 
    + turn on the relative references setting 
    + use special navigation keys to move the bottom of a data set 
    Use Ctrl+* to select the current region around the active cell
    
    + macro recorder does not record the "essence" of the autosum button 
    + try recording different methods if one method does not work 
    
    

# This sounds like basic 
- understand VBA objects 
Object.method 

ActiveSheet.Shapes.AddShape 1, 10, 20, 100, 200
Worksheets.Add Before:=Worksheets(1)
ActiveCell.Interior.Color = 255

- concepts 
Object 
Collection 
Method 
Parameter 
Property 

- use the immediate window, Press Ctrl+G to display the Immediate window in the VB Editor.

Print Selectio.address 

Print ActiveCell.Address

Cells.Columns.AutoFit

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row
- Querying by hovering 

selected E11, making E11 the active cell. If you hover the cursor over ActiveCell.FormulaR1C1, you see a ToolTip showing that the formula in the active cell is "=SUM(R[-9]C:R[-1]C)".

- using watch window 

- In the left window of the Object Browser is a list of all classes available for Excel. 
- Use Cells(2,5) because it’s more convenient than Range("E2")


# Referring to ranges 
- a range of cells, such as column, row, grouping of these etc. 

Application > Workbook > Worksheet > Range

Worksheets(1).Range("A1")

Range("A1").Offset(4,3)

Range("A1:B5") equal to Range("A1", "B5")

'The following line of code selects the rectangular range from A1 to the active cell:
Range("A1", ActiveCell).Select

Range(ActiveCell, ActiveCell.Offset(5, 2)).Select

- reference named range 
Worksheets("Sheet1").Range("MyRange")

- reference cells in other sheet 

Worksheets("Sheet1").Range("A1")

- with statement 

With Worksheets("Sheet2") WorksheetFunction.Sum(.Range(.Range("A1"), .Range("A7")))End With
- using the cells property to select a range 
Cells.Item(Row,Column)

Range("A1:D5").Cells

Cells(5,"C")

Cells(5,3)
- using the offset property 

Range.Offset(RowOffset, ColumnOffset)

- using resize property to change the size of a range 
Range.Resize(RowSize, ColumnSize)

Range("B3").Resize(,2)

Resizing isn’t only for single cells; you can use it to resize an existing range. For example, if you have a named range but need it and the column next to it, use this
Range("Produce").Resize(,2)

- using the columns and rows properties to specify a range 

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

Range("A1:B9, C10:D19").Rows.Count

- using union method to join multiple ranges 

Application.Union(argument1, argument2, etc.)


- using the intersect method to create a new range from overlapping ranges 

Application.Intersect(argument1, argument2, etc.)

- check wheter a cell is empty 
IsEmpty(Cell)


LastRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 1 To LastRow

If IsEmpty(Cells(i, 1)) Then

Cells(i, 1).Resize(1, 4).Interior.ColorIndex = 1

End If

Next i

- using the currentregion propety to select a data range, CurrentRegion returns a Range object that represents a set of contiguous data. As long as the data is surrounded by one empty row and one empty column, you can select the data set by using CurrentRegion:

RangeObject.CurrentRegion


Range("A1").CurrentRegion.Select

- Using the SpecialCells method to select specific cells


Go To Special dialog box enables you to select only cells with formulas, only blank cells, or only the visible cells

RangeObject.SpecialCells(Type, Value)

- using the areas collection to return a noncontiguous range 
Range("A:D").SpecialCells(xlCellTypeConstants, xlNumbers).Copy Range("I1")

- referencing tables, A table is a special type of range that offers the convenience of referencing named ranges. 

    + reference with range 
    Worksheets(1).Range("Table1")

    + reference with ListObjects 
    Worksheets(1).ListObjects("Table1")
    Worksheets(1).ListObjects("Table1").Range.Select

    + table part proeprties 
    Range 
    DataBodyRange, returns the data part only 
    HeaderRowRange, returns the header row only 
    TOtalRowRange, returns the total row only 
    
    + select data column, Worksheets(1).ListObjects("Table1").ListColumns("Qty").DataBodyRange.Selec
    


# Looping and flow control 
- Work with For...Next loops 
    + for ... to 

For i = 1 to 10

Cells(i, i).Value = i

Next i



For i = 2 to 10

 If Cells(i, 6).Value > 0 Then

 Cells(i, 8).Value = “Service Revenue”

 Cells(i, 1).Resize(1, 8).Interior.ColorIndex = 4

 End If

Next i



FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 2 to FinalRow

If Cells(i, 6).Value > 0 Then

Cells(i, 8).Value = "Service Revenue"

Cells(i, 1).Resize(1, 8).Interior.ColorIndex = 4

End If

Next i



’ Delete all rows where column C is the Internal rep - S54

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = FinalRow to 2 Step -1

If Cells(i, 3).Value = "S54" Then

Rows(i).Delete

End If

Next i

    + for ... next 
FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 2 to FinalRow Step 2

Cells(i, 1).Resize(1, 7).Interior.ColorIndex = 35

Next i

- Get to know Do loops 

Sub FixAllRecords()

Do

ActiveCell.Offset(1, 0).Range("A1").Select

Selection.Cut

ActiveCell.Offset(-1, 1).Range("A1").Select

ActiveSheet.Paste

ActiveCell.Offset(2, -1).Range("A1").Select

Selection.Cut

ActiveCell.Offset(-2, 2).Range("A1").Select

ActiveSheet.Paste

ActiveCell.Offset(1, -2).Range("A1:A3").Select

Selection.EntireRow.Delete

ActiveCell.Select

Loop

End Sub

- Do Until ... Loop 

Do Until EOF(1)

Line Input #1, Data

If Not Left(Data, 5) = "TOTAL" Then

' Import this row

r = r + 1

Cells(r, 1).Value = Data

End If

Loop
Close
- Be introduced to the VBA loop 
- Use if then else and select case for flow control 






























    
    

Microsoft Excel 2019 VBA and Macros, First Edition=Bill Jelen;Note=Erxin

# Contents 
- Unleashing the power of Excel with VBA 
- This sounds like Basic so why doesn't it look familiar 
- referring to ranges 
- Looping and flow control 
- R1C1 style formulas 
- Creating and manipulating names in VBA 
- Event programming 
- Arrays 
- Creating classes and collections 
- Userforms an introduction
- Data VBA to create pivot tables 
- Excel power 
- Sample user defined functions 
- Creating charts 
- Data visualizastions and conditional formatting 
- Dashboarding with sparklines in Excel 2019 
- Text file processing 
- Automating Word 
- Using access as a back end to enhance multiuser access to data 
- Advanced userform techniques 
- The windows application programming interface API 
- Handling errors 
- Customizing the ribbon to macros 
- Creating add-ins 
- An introduction to the creating office and add-ins 
- What's new in Excel 2019 and what's changed 


# About the authors 
- Excel MVP, host of MrExcel.com 
- In May 2018, Microsoft announced a new JavaScript user-defined function (UDF) that would allow macro code to run on both the client version of Excel and in Excel Online. The cross-platform ability is interesting.

- refrence book <<Excel JavaScript UDFs Straight to the Point >>
-  http://www.mrexcel.com/macvba.html Development in VBA for Mac Excel 2019 is far more difficult than in Windows
- feedback 

Let′s keep the conversation going! We′re on Twitter:

http://twitter.com/MicrosoftPress

http://twitter.com/MrExcel


# Unleashing the power of Excel with VBA 
- enable VBA 
    1. right click ribbon and choose customize the ribbon 
    2. in the right list box, select the developer check box 
    3. click ok to return excel 
 
- file types allow macros 
    + .xlsx, excel workbook, macro cannot store in this kind of file 
    + .xlsb, excel binary workbook, design to handle 1 million row grid size, introduced in excel 2007, more prone to corruption 
    + .xlsm, excel maro-enabled 
    + .xls, 97-2003, produced files that can be read by any one using legarcy excel 
    
- macro trusted location 
    + click m2acro security in developer tab 
    + click trusted location 
    
- four kinds of security settings 
    + disable all 
    + disable all with notification 
    + disable all macros except digitall signed 
    + enable all 
    
- The Personal Macro Workbook (Personal.xlsm) is not a visible workbook; it is created if you choose to save the recording in the Personal Macro Workbook. This workbook is used to save a macro in a workbook that opens automatically when you start Excel

- create macro button 
    + right click the quick access toolbar 
    + select macros from the list 
    + choose a macro from the list box and select a icon 
- addd a macro to a form control and text box. Excel offers 12 form controls and 12 ActiveX controls in this one drop-down menu. The form controls are at the top, and the ActiveX controls are at the bottom2

    + on the developer tab click insert button to open drop down menu, select controls 
    + draw the control on the worksheet 
    + choose a macro from the assign macro dialog box 
    + type a new label 
    
- Mac at http://www.mrexcel.com/macvba.html Development in VBA for Mac Excel 2019 is far more difficult than in Windows, 

- understanding the VB editor 
    + modules 
    excel objects, by default a project consists of sheet modules for each sheet in the workbook and a signle thisworkbook module 
    
    forms
    
    modules, record a macro, excel automatic creates a module 
    
    class modules, are excel's way of letting you create your own objects 


- use relative refrence when recording 
    + By default, the macro recorder records all actions as absolute actions. 
    + Toggle relative recording off, click row 1, and then toggle relative recording back on.

- never use autosum or quick analysis while recording a macro 
- four tips for using macro 
    + turn on the relative references setting 
    + use special navigation keys to move the bottom of a data set 
    Use Ctrl+* to select the current region around the active cell
    
    + macro recorder does not record the "essence" of the autosum button 
    + try recording different methods if one method does not work 
    
    

# This sounds like basic 
- understand VBA objects 
Object.method 

ActiveSheet.Shapes.AddShape 1, 10, 20, 100, 200
Worksheets.Add Before:=Worksheets(1)
ActiveCell.Interior.Color = 255

- concepts 
Object 
Collection 
Method 
Parameter 
Property 

- use the immediate window, Press Ctrl+G to display the Immediate window in the VB Editor.

Print Selectio.address 

Print ActiveCell.Address

Cells.Columns.AutoFit

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row
- Querying by hovering 

selected E11, making E11 the active cell. If you hover the cursor over ActiveCell.FormulaR1C1, you see a ToolTip showing that the formula in the active cell is "=SUM(R[-9]C:R[-1]C)".

- using watch window 

- In the left window of the Object Browser is a list of all classes available for Excel. 
- Use Cells(2,5) because it’s more convenient than Range("E2")


# Referring to ranges 
- a range of cells, such as column, row, grouping of these etc. 

Application > Workbook > Worksheet > Range

Worksheets(1).Range("A1")

Range("A1").Offset(4,3)

Range("A1:B5") equal to Range("A1", "B5")

'The following line of code selects the rectangular range from A1 to the active cell:
Range("A1", ActiveCell).Select

Range(ActiveCell, ActiveCell.Offset(5, 2)).Select

- reference named range 
Worksheets("Sheet1").Range("MyRange")

- reference cells in other sheet 

Worksheets("Sheet1").Range("A1")

- with statement 

With Worksheets("Sheet2") WorksheetFunction.Sum(.Range(.Range("A1"), .Range("A7")))End With
- using the cells property to select a range 
Cells.Item(Row,Column)

Range("A1:D5").Cells

Cells(5,"C")

Cells(5,3)
- using the offset property 

Range.Offset(RowOffset, ColumnOffset)

- using resize property to change the size of a range 
Range.Resize(RowSize, ColumnSize)

Range("B3").Resize(,2)

Resizing isn’t only for single cells; you can use it to resize an existing range. For example, if you have a named range but need it and the column next to it, use this
Range("Produce").Resize(,2)

- using the columns and rows properties to specify a range 

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

Range("A1:B9, C10:D19").Rows.Count

- using union method to join multiple ranges 

Application.Union(argument1, argument2, etc.)


- using the intersect method to create a new range from overlapping ranges 

Application.Intersect(argument1, argument2, etc.)

- check wheter a cell is empty 
IsEmpty(Cell)


LastRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 1 To LastRow

If IsEmpty(Cells(i, 1)) Then

Cells(i, 1).Resize(1, 4).Interior.ColorIndex = 1

End If

Next i

- using the currentregion propety to select a data range, CurrentRegion returns a Range object that represents a set of contiguous data. As long as the data is surrounded by one empty row and one empty column, you can select the data set by using CurrentRegion:

RangeObject.CurrentRegion


Range("A1").CurrentRegion.Select

- Using the SpecialCells method to select specific cells


Go To Special dialog box enables you to select only cells with formulas, only blank cells, or only the visible cells

RangeObject.SpecialCells(Type, Value)

- using the areas collection to return a noncontiguous range 
Range("A:D").SpecialCells(xlCellTypeConstants, xlNumbers).Copy Range("I1")

- referencing tables, A table is a special type of range that offers the convenience of referencing named ranges. 

    + reference with range 
    Worksheets(1).Range("Table1")

    + reference with ListObjects 
    Worksheets(1).ListObjects("Table1")
    Worksheets(1).ListObjects("Table1").Range.Select

    + table part proeprties 
    Range 
    DataBodyRange, returns the data part only 
    HeaderRowRange, returns the header row only 
    TOtalRowRange, returns the total row only 
    
    + select data column, Worksheets(1).ListObjects("Table1").ListColumns("Qty").DataBodyRange.Selec
    


# Looping and flow control 
- Work with For...Next loops 
    + for ... to 

For i = 1 to 10

Cells(i, i).Value = i

Next i



For i = 2 to 10

 If Cells(i, 6).Value > 0 Then

 Cells(i, 8).Value = “Service Revenue”

 Cells(i, 1).Resize(1, 8).Interior.ColorIndex = 4

 End If

Next i



FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 2 to FinalRow

If Cells(i, 6).Value > 0 Then

Cells(i, 8).Value = "Service Revenue"

Cells(i, 1).Resize(1, 8).Interior.ColorIndex = 4

End If

Next i



’ Delete all rows where column C is the Internal rep - S54

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = FinalRow to 2 Step -1

If Cells(i, 3).Value = "S54" Then

Rows(i).Delete

End If

Next i

    + for ... next 
FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 2 to FinalRow Step 2

Cells(i, 1).Resize(1, 7).Interior.ColorIndex = 35

Next i

- Get to know Do loops 

Sub FixAllRecords()

Do

ActiveCell.Offset(1, 0).Range("A1").Select

Selection.Cut

ActiveCell.Offset(-1, 1).Range("A1").Select

ActiveSheet.Paste

ActiveCell.Offset(2, -1).Range("A1").Select

Selection.Cut

ActiveCell.Offset(-2, 2).Range("A1").Select

ActiveSheet.Paste

ActiveCell.Offset(1, -2).Range("A1:A3").Select

Selection.EntireRow.Delete

ActiveCell.Select

Loop

End Sub

- Do Until ... Loop,  While or Until clause includes some test that evaluates to True or False.

    + While 
Open "C:\Invoice.txt" For Input As #1

R = 1

Do While Not EOF(1)

Line Input #1, Data

If Not Left (Data, 5) = "TOTAL" Then

' Import this row

r = r + 1

Cells(r, 1).Value = Data

End If

Loop

    + Until 

' Read a text file, skipping the Total lines

Open "C:\Invoice.txt" For Input As #1

r = 1

Do Until EOF(1)

Line Input #1, Data

If Not Left(Data, 5) = "TOTAL" Then

' Import this row

r = r + 1

Cells(r, 1).Value = Data

End If

Loop

Close #1

    + Message box and input box 
TotalSales = 0

Do

x = InputBox( _

Prompt:="Enter Amount of Next Invoice. Enter 0 when done.", _

Type:=1)

TotalSales = TotalSales + x

Loop Until x = 0

MsgBox "The total for today is $" & TotalSales

    + While...Wend loops are included in VBA for backward compatibility.
While Not EOF(1)

Line Input #1, Data

TotalSales = TotalSales + Data

Wend

- For each 

For Each cell in Range("A1").CurrentRegion.Resize(, 1)

If cell.Value = "Total" Then

cell.Resize(1,8).Font.Bold = True

End If

Next cell

- Flow control using If ... Then ... Else, Select Case 

Sub FruitRedVegGreen()

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 2 To FinalRow

If Cells(i, 1).Value = "Fruit" Then

Cells(i, 1).Resize(1, 3).Font.ColorIndex = 3

Else

Cells(i, 1).Resize(1, 3).Font.ColorIndex = 50

End If

Next i

MsgBox "Fruit is red / Veggies are green"

End Sub


    + select case 
Sub SelectCase()

FinalRow = Cells(Rows.Count, 1).End(xlUp).Row

For i = 2 To FinalRow

Select Case Cells(i, 1).Value

Case "Fruit"

Cells(i, 1).Resize(1, 3).Font.ColorIndex = 3

Case "Vegetable"

Cells(i, 1).Resize(1, 3).Font.ColorIndex = 50

Case "Herbs"

Cells(i, 1).Resize(1, 3).Font.ColorIndex = 5

Case Else

Cells(i, 4).Value = "Unexpected value!"

End Select

Next i

MsgBox "Fruit is red / Veggies are green / Herbs are blue"

End Sub



# Style formulas 
- Understand A1 versus R1C1 references, Using R1C1-style addressing enables you to write more efficient code.

- Toggle to R1C1 style references 
Excel > Excel Options > Formulas > Working with formulas > R1C1 reference style 

switch to R1C1 style, the column letters A, B, C across the top of the worksheet are replaced by numbers 1, 2, 3 

B5 is called R5C2 because it is in row 5, column 2.

Ctrl+’ to switch to showing formulas rather than their results


Sub R1C1Style()

' Locate the FinalRow

FinalRow = Cells(Rows.Count, 2).End(xlUp).Row

' Enter the first formula

Range("D4:D" & FinalRow).FormulaR1C1 = "=RC[-1]*RC[-2]"

Range("F4:F" & FinalRow).FormulaR1C1 = _

"=IF(RC[-1],ROUND(RC[-2]*R1C2,2),0)"

Range("G4:G" & FinalRow).FormulaR1C1 = "=RC[-1]+RC[-3]"

' Enter the Total Row

Cells(FinalRow + 1, 1).Value = "Total"

Cells(FinalRow + 1, 6).FormulaR1C1 = "=SUM(R4C:R[-1]C)"

End Sub

- Understand the R1C1 reference 
    +  To point to a cell in a formula, you use the letters R and C. After each letter, enter the number of rows or columns in square brackets.
    
    + For columns, a positive number means to move to the right a certain number of columns, and a negative number means to move to the left a certain number of columns. For example, from cell E5, use RC[1] to refer to F5 and RC[-1] to refer to D5.
    
    + For rows, a positive number means to move down the spreadsheet a certain number of rows. A negative number means to move toward the top of the spreadsheet a certain number of rows. For example, from cell E5, use R[1]C to refer to E6 and use cell R[-1]C to refer to E4.
    
    + If you leave off the number for either the R or the C, it means that you are pointing to a cell in the same row or column as the cell with the formula. For example, the R in RC[3] means that you are pointing to the current row.
    
    + If you enter =R[-1]C[-1] in cell E5, you are referring to a cell one row up and one column to the left: cell D4.
    
    + If you enter =RC[1] in cell E5, you are referring to a cell in the same row but one column to the right: cell F5.
    
    + If you don’t know how many rows you will have in G, you can write =MAX($G:$G) in A1 style or =MAX(C7) in R1C1 style. 
    
    + To find the minimum value in row 1, use =MIN($1:$1) in A1 style or =MIN(R1) in R1C1 style.
    
- Use R1C1 formulas with array formulas 
    + Array formulas are powerful “superformulas.” At MrExcel.com, we call these CSE formulas because you have to use Ctrl+Shift+Enter to enter them. 
    
    + You do not type the curly braces when entering the formula. Excel adds them for you when you press Ctrl+Shift+Enter.
    {=SUM(WEEKDAY(ROW(INDIRECT(E1&":"&E2)),3)=6)*(DAY(ROW(INDIRECT(E1&":"E2)))=13))}


Sub EnterArrayFormulas()

Cells(4, 6).FormulaArray = "=SUM((WEEKDAY(ROW(INDIRECT(" & _

"R[-3]C[-1]& "":""&R[-2]C[-1])),3)=6)*(DAY(ROW(INDIRECT(" & _

"(R[-3]C[-1]&"":""&R[-2]C[-1])))=13))"

End Sub
 
'formulas appear in the user interface in A1-style notation, you must use R1C1-style notation for entering array formulas.

    +  add the MAX function, =MAX(C2:C6-B2:B6) and press CTRL+SHIFT+ENTER
    array formula ranges, startArray0RangeCell:endArray0RangeCell <operator> startArray1RangeCell:endArray1RangeCell
    
    Press F9 to check the cell formulas 

# Creating and manipulating names in VBA 
- Global versus local names 
    + global names are available anywhere in a workbook 
    
    The Name Manager dialog box (accessed via the Formulas tab) lists all the visible names 

    + example 
    ActiveWorkbook.Names.Add Name:="Fruits", RefersToR1C1:="=Sheet2!R1C1:R6C6"

    'In addition, the range reference must be absolute (that is, it must include the $ sign) or in R1C1 notation

    ActiveWorkbook.Names.Add Name:="Sheet2!Fruits", RefersToR1C1:="=Sheet2!R1C1:R6C6"

    'if the named range is not created with absolute location. The reference will change depending on which cell is the active cell when the name is viewed
    
    
Range("A1:F6").Name = "Fruits"

Alternatively, for a local variable only, you can use this:

Click here to view code image

Range("A1:F6").Name = "Sheet1!Fruits"

When creating names with these methods, absolute referencing is not required.

- Formulas, strings, numbers, and arrays require the use of the Add method.

The name you create becomes an object when referenced like this:

Names("Fruits")

Names("Fruits").Name = "Produce"

- Deleting names 

Names("ProduceNum").Delete

- Adding comments

ActiveWorkbook.Worksheets("Sheet7").Names("LocalOffice").Comment = "Holds the name of the current office"

- Type of names 
    + formulats, dynamic named column 

Names.Add Name:="ProductList", _

RefersTo:="=OFFSET(Sheet2!$A$2,0,0,COUNTA(Sheet2!$A:$A))"

    + Strings 
hold strings such as the name of the current fruit producer, enclose the string value in quotation marks.
 
Names.Add Name: = "Company", RefersTo:="CompanyA"
 
    + Numbers, use names to store numbers between sessions 
    
NumofSales = 5123

Names.Add Name:="TotalSales", RefersTo:=NumofSales

NumofSales = Names("TotalSales").Value

or this:

' Evaluate method (square brackets). If you know that someone else will be reading your code, avoid the use of the Evaluate method or add a comment explaining it.
NumofSales = [TotalSales]

    + Tables 
Excel tables share some of the properties of defined names, but they also have their own unique methods.


Tables are not created using the same method as defined names. Instead of Range(xx).Add or Names.Add, use ListObjects.Add.

ActiveSheet.ListObjects.Add(xlSrcRange, Range("$A$1:$C$26"), , xlYes).Name = "Table1"

    + reserved names 
Criteria 
Database 
Extract 
Print_Area, Print_Area is used when a print area is set
Print_Titles, Print_Area is used when a print area is set

- hiding names,  To hide a name, set the Visible property to False. To unhide a name, set the Visible property to True

Names.Add Name:="ProduceNum", RefersTo:="=$A$1", Visible:=False

- Checking for the existence of a name 


Function NameExists(ByVal FindName As String, _

Optional TargetBook As Workbook) As Boolean

If TargetBook Is Nothing Then

If ActiveWorkbook Is Nothing Then

NameExists = False

Exit Function

End If

Set TargetBook = ActiveWorkbook

End If

On Error Resume Next

NameExists = CBool(Len(TargetBook.Names(FindName).Name) <> 0)

On Error GoTo 0

End Function

- Using named ranges for VLOOKUP, Use a VLOOKUP function in the original data set to add a store name to all records

WSD.Range("AA2:AA" & FinalStore).FormulaR1C1 = _

"=ISNA(VLOOKUP(RC[-1], tblStoreLookup[#All],1,False))"


# Event programming 
- Levels of events 

application level based on Application_NewWorkbook

workbook level such as Workbook_Open

chart sheet level Chart_Activate

- places where you put different types of events 

Workbook events go into the ThisWorkbook module.

Worksheet events go into the module of the sheet they affect, such as Sheet1.

Chart sheet events go into the module of the chart sheet they affect, such as Chart1.

Pivot table events go into the module of the sheet with the pivot table, or they can go into the ThisWorkbook module.

Embedded chart and application events go into class modules.

- using the events,  ThisWorkbook, Sheet, Chart Sheet, or Class module is active, the corresponding events are available through the Object and Procedure drop-down menus

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, _

Cancel As Boolean)

Cancel = True

End Sub


    + enable events, To prevent an endless loop, disable the events and then re-enable them at the end of the procedure to prevent events trigger around 
Private Sub Worksheet_Change(ByVal Target As Range)

Application.EnableEvents = False

Range("A1").Value = Target.Value

Application.EnableEvents = True

End Sub


    + chart events 
Dim myClassModule As New cl_ChartEvents

Sub InitializeChart()

Set myClassModule.myChartClass = _

Worksheets(1).ChartObjects(1).Chart

- application level events 
1. insert a class module 
2. rename module to cl_AppEvents 
3. add following line of code 
Public WithEvents AppEvent As Application
 
4. insert a standard module 
5. enter the followinbg lines of code in the standard module, These lines initialize the application to recognize application events.

Dim myAppEvent As New cl_AppEvents

Sub InitializeAppEvent()

Set myAppEvent.AppEvent = Application

End Sub
    
6 the Appliction events then can access from 
AppEvent_AfterCalculate
AppEvent_NewWorkbook
AppEvent_ProtectedViewWindowActivate
AppEvent_ProtectedViewWindowBeforeClose
...


# Arrays 
- declare an array 
Dim myArray(2)

    + default base start from zero 
    
    + change the default base to 1 
Option Base 1

Sub MyFirstArray()

Dim myArray(2)

    + customize lower and up boundary 
Dim myArray(1 to 10)

Dim BigArray(100 to 200)

- two columns of the first row 

myArray(1,1) = 10 

- filling an array 

Option Base 1

Sub ColumnHeaders()

Dim myCount As Integer

'Fill the variant with array data

myArray = Array("Name", "Address", "Phone", "Email")

    + create array with range 
    
Dim myArray As Variant

myArray = Worksheets("Sheet1").Range("B2:C17")

- using array 

Sub QuickFillAverageFast()

'Writes the data to the sheet once

'Also more flexible with dynamic range

Dim myArray As Variant, MyAverage As Variant

Dim myCount As Long, LastRow As Long

Dim wksData As Worksheet

Set wksData = Worksheets("EveryOther")

With wksData

LastRow = .Range("A" & .Rows.Count).End(xlUp).Row

myArray = .Range("B2:C" & LastRow)

ReDim MyAverage(UBound(myArray))

For myCount = LBound(myArray) To UBound(myArray)

MyAverage(myCount) = _

WorksheetFunction.Average(myArray(myCount, 1), _

myArray(myCount, 2))

Next myCount

.Range("E2").Resize(UBound(MyAverage)).Value = _

Application.Transpose(MyAverage)

End With

End Sub

- using dynamic array 
Sub MySheets()

Dim myArray() As String

Dim myCount As Integer, NumShts As Integer

    + ReDim is used to set the size of the array. The following program2
ReDim myArray(1 To NumShts)

For myCount = 1 To NumShts

myArray(myCount) = ActiveWorkbook.Sheets(myCount).Name

Next myCount

- passing an array into function 

Sub PassAnArray()

Dim myArray() As Variant

Dim myRegion As String

myArray = Range("mySalesData") 'named range containing all the data

myRegion = InputBox("Enter Region - Central, East, West")

MsgBox myRegion & " Sales are: " & Format(RegionSales(myArray, myRegion), "$#,#00.00")

End Sub


# Creating classes and collections 
- inserting a class module 

each custom object must have its own module 

the class module should be renamed to reflect the custom object 

- embedded chart events 
Public WithEvents xlChart As Chart

Private Sub xlChart_BeforeDoubleClick(ByVal ElementID As Long, _

ByVal Arg1 As Long, ByVal Arg2 As Long, Cancel As Boolean)

Cancel = True

End Sub


Private Sub xlChart_BeforeRightClick(Cancel As Boolean)

Cancel = True

End Sub

- create procedure that captures the events on the embeded chart 

Public myChartEvent As New clsEvents

Sub TrapChartEvent()

Set myChartEvent.xlChart = Worksheets("EmbedChart"). _

ChartObjects("Chart 2").Chart

End Sub

- using a custom object, When a custom object is properly configured in a class module, it can be referenced from other modules.
Sub SingleEmployeePayTime()

'declare a variable as the class module/object

Dim clsEmployee As cEmployee

'set a new instance to the object

Set clsEmployee = New cEmployee

With clsEmployee

.EmployeeName = "Tracy Syrstad"

.EmployeeID = "1651"

.EmployeeHourlyRate = 35.15

.EmployeeWeeklyHours = 45

End Sub 

- Using collections 

CollectionName.Add Item, Key, Before, After


- Using dictionary 

Sub UsingADictionary()

Dim dictData As Object

Dim bItemExists As Boolean

Dim tblSales As ListObject

Click here to view code image

Dim arrData, arrReport, arrHeaders

Dim i As Long

Dim rng As Range

'create the dictionary object

Set dictData = CreateObject("Scripting.Dictionary")

Set tblSales = Worksheets("Table”).ListObjects("tblSales")

'put the data into an array for faster processing

arrData = tblSales.DataBodyRange

'loop through the array

For i = 1 To UBound(arrData)

'if key exists, add to it

'else create and add to it

If dictData.Exists(arrData(i, 2)) Then

dictData.Item(arrData(i, 2)) = dictData.Item(arrData(i, 2)) + _

arrData(i, 5)

Else

dictData.Add arrData(i, 2), arrData(i, 5)

End If

Next i

'rename a key, just for the heck of it

'the only way to rename a key is to know the name of it

dictData.Key("Tools") = "Electrical Tools"

'the location 2 rows beneath the table

Set rng = tblSales.Range.Offset(tblSales.Range.Rows.Count + 2).Resize(1, 1)

'put the dictionary keys and values each into an array

'then dump them on the sheet

arrHeaders = dictData.Keys

rng.Resize(dictData.Count, 1).Value = Application.Transpose(arrHeaders)

arrReport = dictData.Items

rng.Offset(, 1).Resize(dictData.Count, 1).Value = _

Application.Transpose(arrReport)

Set dictData = Nothing

Set tblSales = Nothing

Set rng = Nothing

End Sub

- using user defeined types to create custom properties 

User-defined types (UDTs) provide some of the power of a custom object, but without the need for a class module. 

Public Type Style

StyleName As String

Price As Single

UnitsSold As Long

UnitsOnHand As Long

End Type


# Userforms: an introduction 
- user input 

AveMos = InputBox(Prompt:="Enter the number " & " of months to average", _

Title:="Enter Months", Default:="3")

- message box 

MyMsg = "Do you want to save changes and close?"

Response = MsgBox(myMsg, vbExclamation + vbYesNoCancel, myTitle)

Select Case Response

Case Is = vbYes

ActiveWorkbook.Close SaveChanges:=True

Case Is = vbNo

ActiveWorkbook.Close SaveChanges:=False

Case Is = vbCancel

Exit Sub

End Select

- create user form 

frm_AddEmp.Show

'load form 
Load frm_AddEmp

frm_AddEmp.Hide

Unload Me

- event, button click 
Private Sub btn_EmpCancel_Click()

Unload Me

End Sub

- get open file name 

x = Application.GetOpenFilename( _

FileFilter:="Excel Files (*.xls*), *.xls*", _

Title:="Choose Files", MultiSelect:=True)


# Data mining with advanced filter 
- replacing a loop with autofilter 

CurrentRegion.EntireRow.Delete to delete the visible rows and not affect the rows hidden by the filter.
 
- using auto filter 
Range("A1").AutoFilter Field:=4, Criteria1:= "Ford"

'make all the matching green 
Range("A1").CurrentRegion.Interior.Color = RGB(0,255,0)

- clear the filter 
Range("A1").AutoFilter
ActiveSheet.ShowAllData

- selecting multiple items 
Range("A1").AutoFilter Field:=4, _

Criteria1:="Ford", _

Operator:=xlOr, _

Criteria2:="General Motors"


    
Sub Top10Filter()

' Top 12 Revenue Records

Range("A1").AutoFilter Field:=6, _

Criteria1:="12", _

Operator:=xlTop10Items

End Sub

- hiden cells 
Hide Rows command, any formatting applied to .CurrentRegion applies to the hidden rows, too

- visible cells only 
Range("A1").CurrentRegion.SpecialCells(xlCellTypeVisible)


-  using xlFilterCopy to get a unique list of values in a field. 

IRange.AdvancedFilter Action:=xlFilterCopy, _

CriteriaRange:=CRange, CopyToRange:=Orange

Set CRange = Cells(1, NextCol).Resize(2, 1)

- adjust autofilter for a column of cells 

Range("A1").AutoFilter Field:=3, VisibleDropDown:=False


# Using VBA to create pivot tables 
- demo 

Dim WSD As Worksheet

Dim PTCache As PivotCache

Dim PT As PivotTable

Dim PRange As Range

Dim FinalRow As Long

Dim FinalCol As Long

Set WSD = Worksheets("PivotTable")

' Delete any prior pivot tables

For Each PT In WSD.PivotTables

PT.TableRange2.Clear

Next PT

' Define input area and set up a pivot cache

FinalRow = WSD.Cells(Rows.Count, 1).End(xlUp).Row

FinalCol = WSD.Cells(1, Columns.Count).End(xlToLeft).Column

Set PRange = WSD.Cells(1, 1).Resize(FinalRow, FinalCol)

Set PTCache = ActiveWorkbook.PivotCaches.Create( _

SourceType:=xlDatabase, _

SourceData:=PRange, _

Version:=xlPivotTableVersion14)

- view code image 

' Set up the data fields

With PT.PivotFields("Revenue")

.Orientation = xlDataField

.Function = xlSum

.Position = 1

.NumberFormat = "#,##0"

.Name = "Revenue "

End With






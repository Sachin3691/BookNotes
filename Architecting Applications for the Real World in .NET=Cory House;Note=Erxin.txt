Architecting Applications for the Real World in .NET=Cory House;Note=Erxin

# introduction
- reference course
building inter application in c#, stiff smith

# the problem
- pragmatic architecture
i will use this everywhere, there is no silver bullet 

x is good -> it depends

- what's an expert?
anyone can design a bridge that stands, it takes an engineer to design a bridge that barely stands

- pragmatic
- reason to select an architecture
    + save money
    + save effort
    + save time
    
    + risk like
    to experiment
    + to challenge myself
    to improve my resume

- agenda & references 
    + three simple goals
    context, module 2 pragmatic principles simplicity argument timelines
    
    + layers, module 3-6
    business logic, service, data access presentation layer 
    
    + levels module
    contrast extremes, simple vs complex 
    
- references
    + design patterns library by Steve Smith, et al. on Pluralsight
    + pattern of enterprise architecture by Martin Fowler (book)
    + microsoft.net architecting application for the enterprise by dino esposito and andrea saltarello 
    
- assumptions
    + enterprise line-of-business application, both large and small
    
    + RDBMS database
    
    
# real-world architectural thinking 
- which should we choose 
    + first
    coded to interfaces
    90% test coverage
    rich domain model
    service oriented architecture 

    + second 
    no api
    no layers
    no tests
    tightly coupled 
    
- what if i said 
    + $ 250k over budget for the first choice 
    + customer hated it, or worse, ignored it 
    + project funding dried up
    
- metaphors for architecture selection 
    + time to set up ?
    + training
    + necessary tooling?
    + large enough to warrant "prep time"

- more effective, more flexible, most scalable?
    + such as hanmer compare to nailgun 
    
- astronaut assessment, don't make to higher abstraction
- consider complexity
    + coding to an interfaces
    + soa
    + automated testing 
    + domain driven design, custom tiler for specify action 
    + custom dal
    + layered architecture 
- complexity ~= lines of coded, complexity != bad, complexity must be justified
    
we are paid for solution, not code 

- parkinson's low, work expands to fill available time 
    
- simplicity, the art of maximizing the amount of work not done 

- consider simplicity 
    + do simplest thing that could possible work /KISS
    + agile principles
    + lean principles
    + lean principles
    + 80/20 rule
    + minimum viable product(MVP)
    
- do simplest thing that could possible work 
    + get done sooner 
    + eaiser to communicate
    + duplication is obvious, so needs for refactoring are clearer
    + tests are easier to write 
    + code is easier to performance tune
    http://xp.c2.com/doTheSimplestThingThatCouldPossibleWork.html
    
- 80/20 rule, get 80% of the benefit from 20% of the features
- get 80% of benefit of automated testing by testing the most important 20%?
- agile manifesto 
    + maximize the work not done 
    + welcome changing requirements, even late in development 
    
- lean principles 
    + eliminate waste, not adding value to the customer, it's likely waste
    + amplify learning
    + decide as late as possible, choice unclear? choose the simple option
    + deliver as fast as possible, ideaarchitecture varies by team 
    + empower the team 
    + build integrity in , automated testing 
    + see the whole 
    
- minimum viable product(MVP)
    + validated learning
    what was the response? 
    what did they like hate? 
    how much profit?
    is this worth scaling 
    bad assumptions?
    do we need to pivot?
    
    + what we don't care about 
    scalability
    maintenance costs
    and often
    beauty, code clieanliness, full feature set performance, security if it even actually works 
    
- time line 
    + agile architecture, flex one
            quality, technical debet 
           /       \
        date--------cost
    
    + assuming deadline manpower and scope are constan
    
    is debt bad, is the deadline hard 
    
    + hard vs soft deadlines
    trade show, published advertising, x-team dependencies, 1st to market or dead 
    network effects 
    
    + single loud customer, wild guess, salesman misspoke, ms project said so 
    
    
# business logic layer 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



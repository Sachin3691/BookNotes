Data Structure and Algorithms in Python=Michael T.Goodrich;Note=Erxin

# python Primer
- python overview
    + python interpreter
    + preview of a python program
- objects in python
    + identifier, objects and assignment statement 
    + creating and using objects
    + python's built-in classes
    
- expression, operators and precedence 
    + compound expressions and operator precedence
    
- control flow
    + conditional
    + loops
- functions
    + information passing
    + python's built-in function 

- simple input and output 
    + console
    + files
- exception handling 
    + raise an exception
    + catching an exception
    
- iterators and generators
- additional python conveniences
    + condition expression 
    + comprehension syntax
    + packing and unpacking of sequences
    
- scope and namespaces
- module and import statement
    

# Object oriented design goals
- goals, principle and patterns
- software development 
    + design
    + pesudo-code
    + coding style and documentation
- class definitions
    + operator
    + iterators, for a collection provides one key behavior, supports special method named __next__ that return the next value o fthe collection
    if a class define both __len__ and __getitem__, then python will automatic implement the __next__ method for this class
    the __iter__ method will return the iterator instance 
    + range class, implement the built-in range funciton 
    >>> class Range(object):
    ... 	def __init__(self, start, stop, step=1):
    ... 		self.__start = start
    ... 		self.__stop = stop
    ... 		self.__step = step
    ... 		self.__index = 0
    ... 	def __len__(self):
    ... 		return abs(self.__stop - self.__start) // abs(self.__step) + (0 if abs(self.__stop - self.__start) % abs(self.__step) == 0 else 1)
    ... 	def __getitem__(self,k):
    ... 		return self.__start + self.__step * k
    ... 	def __iter__(self):
    ... 		return self
    ... 	def next(self):
    ... 		if self.__step == 0 or (self.__stop > self.__start and self.__step < 0) or (self.__stop < self.__start and self.__step > 0):
    ... 			raise StopIteration()
    ... 		else:
    ... 			if self.__index < len(self):
    ... 				ret = self.__getitem__(self.__index)
    ... 				self.__index += 1
    ... 				return ret
    ... 			else:
    ... 				raise StopIteration()

- inheritance
    + extending the creditCard class
    + hierarchy of numeric progression
    + abstract base classes 











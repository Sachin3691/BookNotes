Design pattern; Note = Erxin

# Design pattern introduction and history
- Object-oriented DP typically show relationships and interactions between classes or objects
- Patterns originated as an architectural concept by Christopher Alexander (1977/79).
- Gained popularity in computer science after the book Design Patterns: Elements of Reusable
Object-Oriented Software was published in 1994 by the so-called "Gang of Four" 
- notable books in the design pattern genre include
    + Gamma, Erich; Richard Helm, Ralph Johnson, and John Vlissides (1995). Design Patterns: Elements of Reusable
    Object-Oriented Software. Addison-Wesley. ISBN 0-201-63361-2.
    + Buschmann, Frank; Regine Meunier, Hans Rohnert, Peter Sommerlad (1996). Pattern-Oriented Software
    Architecture, Volume 1: A System of Patterns. John Wiley & Sons. ISBN 0-471-95869-7.
    + Schmidt, Douglas C.; Michael Stal, Hans Rohnert, Frank Buschmann (2000). Pattern-Oriented Software
    Architecture, Volume 2: Patterns for Concurrent and Networked Objects. John Wiley & Sons.
    ISBN 0-471-60695-2.
    + Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley.
    ISBN 978-0321127426.
    + Hohpe, Gregor; Bobby Woolf (2003). Enterprise Integration Patterns: Designing, Building, and Deploying
    Messaging Solutions. Addison-Wesley. ISBN 0-321-20068-3.
    + Freeman, Eric T; Elisabeth Robson, Bert Bates, Kathy Sierra (2004). Head First Design Patterns. O'Reilly Media.
    ISBN 0-596-00712-4.
-  2009 over 30 contributors collaborated with Thomas Erl on his book, SOA Design Patterns, soapatterns.org
- structure
- domain-specific patterns
The annual Pattern Languages of Programming Conference proceedings
- classification
creational patterns, structural patterns, and behavioral patterns, and described using the concepts of delegation, aggregation, and consultation.

## categories
- common design pattern
    + Creational patterns
        * Abstract factory, Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
        * Builder,  Separate the construction of a complex object from its representation
        allowing the same construction process to create various representations.
        * Factory method, Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
        * Prototype, Specify the kinds of objects to create using a prototypical instance, and
        create new objects by copying this prototype.
        * Singleton, Ensure a class has only one instance, and provide a global point of access to it.
    + Structural patterns
        * Adapter or Wrapper, Convert the interface of a class into another interface clients expect. Adapter lets classes work together that could not otherwise because of incompatible interfaces.
        Bridge, Decouple an abstraction from its implementation allowing the two to vary
        independently.
        * Composite, Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.
        * Decorator, Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.
        * Facade, Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.
        * Front Controller, Provide a unified interface to a set of interfaces in a subsystem. Front Controller defines a higher-level interface that makes the subsystem easier to use.
        * Flyweight, Use sharing to support large numbers of fine-grained objects efficiently.
        * Proxy, Provide a surrogate or placeholder for another object to control access to it.
    + Behavioral patterns
        * Blackboard, Generalized observer, which allows multiple readers and writers. Communicates information system-wide.
        * Chain of responsibility, Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.
        * Command Encapsulate, a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.
        * Interpreter, Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.
        * Iterator, Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
        * Mediator, Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.
        * Memento, Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later.
        * Observer or Publish/subscribe, Define a one-to-many dependency between objects where a state change in one object results with all its dependents being notified and updated automatically.
        * State Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.
        * Strategy Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.
        * Template method Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
        * Visitor Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.
    + Concurrency patterns
        * Active Object Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.
        * Balking Only execute an action on an object when the object is in a particular state.
        * Double-checked locking, Reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner; only if that succeeds does the actual lock proceed. Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern.
        * Monitor object An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.
        * Reactor A reactor object provides an asynchronous interface to resources that must be handled synchronously.
        * Thread pool A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern.
        * Thread-specific storage Static or "global" memory local to a thread.
        
##Object orient program
- it's could be also called

# Create pattern
        
## Abstracty factory
- encapsulate a group of individual factories that have a common theme. 
- a  Factory is the location in the code at which objects are constructed. The intent in employing the pattern is to insulate the creation of objects from their usage. This allows for new derived types to be
introduced with no change to the code that uses the base class.
        
## Builder pattern 
- The intention is to abstract steps of construction of objects so that
different implementations of these steps can construct different representations of objects.
        
## Factory method pattern  
- The object's creation may lead to a significant duplication of code, may require information not accessible to the composing object, may not provide a sufficient level of abstraction, or may otherwise not be part of the composing object's  concerns.
- Factory objects are used in situations where getting hold of an object of a particular kind is a more complex processthan simply creating a new object.
- The "Abstract factory pattern" instead is a method to build
collections of factories.
- Factory methods are used in test-driven development to allow classes to be put under test.
- Many of which do not depend on subclassing. Therefore, it is common to define "factory methods" that are not polymorphic to create objects in order to gain these other benefits. Such methods are often static. When factory methods are used for disambiguation like this, the constructor is often made private to force clients to use the factory methods.
- limitations of the factory method
    + refactoring exsiting code to use factories breaks existing client
    + the class use private constructor means it couldn't be extened
    + if we extend the class with set the constructor to protected, we need to overwrite all the factory method in subclass. Because the constructor is not support polymorphic
    
## Lazy initialization
- The tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed
- In heavily imperative languages this pattern carries hidden
dangers, as does any programming habit that relies on shared state.
- lazy factory, lazy initialization is alway use with factory method
    + get instance of a class
    + storing instance in a map, get the same one with the same parameter
    + instantiate the object the first time it is requested

## Multition pattern
- The multiton pattern expands on the singleton concept to manage a map of named instances as key-value pairs. Rather than have a single instance per application 
the multiton pattern instead ensures a single instance per key.
- Multiton is no more than a simple hash table with synchronized access there are two
important distinctions. First, the multiton does not allow clients to add mappings. Secondly, the multiton never returns a null or empty reference; instead, it creates and stores a multiton instance on the first request with the associated key. Subsequent requests with the same key return the original instance.
- However, a multiton is limited to wide use by a single system rather than a myriad of distributed systems.
- Drawback, This pattern, like the Singleton pattern, makes unit testing far more difficult[1] , as it introduces global state into an application.

## Object pool pattern
- An object pool is a set of initialised objects that are kept ready to use, rather than allocated and destroyed on demand.
- In certain situations, simple object pooling (which hold no external resources, but only occupy memory) may not be efficient and could decrease performance
- external resource such as database connections, socket connections, threads and large graphic objects like fonts or bitmaps.
- handling of empty pools
    + fail to provide an object and return an error to client
    + allocate a new object, thus increasing the size of the pool, this kinds of pool should set a water mark to limited the number of the objects in the pool
    + in multithreaded environment, a pool may block the client until another thread returns an object.
- pitfalls, pool have the responsible for resetting the state of the objects
- Some publications do not recommend using object pooling with certain languages, such as Java(which have garbage collector), especially for objects that only use memory and hold no external resources
+ Ex. thread pool, If no more threads are allowed, the tasks can be placed in the queue.Finally, if this queue may get too long, it can be configured to suspend the requesting thread.
        
## Prototype pattern
- avoid subclasses of an object creator in the client application, like the abstract factory pattern does.
- avoid the inherent cost of creating a new object in the standard way (e.g., using the 'new' keyword) when it is prohibitively expensive for a given application.   
- implement the pattern by declare a abstract base class with a pure virtual clone() method
- Prototype doesn't require subclassing, but it does require an "initialize" operation. Factory Method requires
subclassing, but doesn't require initialization.     
- Designs that make heavy use of the Composite and Decorator patterns often can benefit from Prototype as well.
        
## Singleton pattern
- In C++ it also serves to isolate from the unpredictability of the order of dynamic initialization, returning control to the programmer.
- Use caseb
    + Singletons are often preferred to global variables
        * They don't pollute the global name space
        * They permit lazy allocation and initialization
    + The Abstract Factory, Builder, and Prototype patterns can be singleton
    + Facade objects are often Singletons
- have a member method getInstance()
-  So if the class has to realize a contract expressed by an interface, it really has to be a singleton.
- If the programming language has concurrent processing capabilities the method should be constructed to execute as a mutually exclusive operation.
- if set the private member with the static initialization, then the singleton is thread-save, but don't have lazy load property
- solution of Bill Pugh
public class Singleton
{
    private Singleton(){}
    private static class SingletonHolder(){
        public static final Singleton INSTANCE = new Singleton();
    }
    public static Singleton getInstance(){
        return SingletonHolder.INSTANCE;
    }
}
- best singleton type in java is enum
public enum Singleton{
    INSTANCE;
}
- this pattern reduces the potential for parallelism within a program

# Structural pattern
- a simple way to realize relationships between entities.
- structural patter includes
    + adapter pattern
    + aggregate pattern
    + bridge pattern
    + composite pattern
    + decorator pattern
    + extensibility pattern
    + facade pattern
    + flyweight pattern
    + proxy pattern
    + pipes and filters
    + private class data pattern
    
## Adapter pattern
-  adapter pattern (often referred to as the wrapper pattern or simply a wrapper)
- ex.
    + For instance, if multiple boolean values are stored as a single integer (i.e. flags) but your consumer requires a 'true'/'false'
    + The adapter is created inheriting from both the interface that is expected and the interface that is pre-existing.
- The adapter pattern is useful in situations where an already existing class provides some or all of the services you need but does not use the interface you need. 
    
## Bridge pattern
- "decouple an  abstraction  from its implementation  so that the two can vary independently"
- The class itself can be thought of as the implementation and what the class can do as the abstraction. The bridge pattern can also be thought of as two layers of abstraction.    
- The bridge pattern is often confused with the adapter pattern. In fact, the bridge pattern is often implemented using the class adapter pattern

## Composite pattern
- is a partitioning design pattern. The composite pattern describes that a group of objects are to be treated in the same way as a single instance of an object.
- The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies.
- Composite can be used when clients should ignore the difference between compositions of objects and individual objects.
- If programmers find that they are using multiple objects in the same way, and often have nearly identical code to handle each of them, then composite is a good choice

## Decorator pattern
- decorator pattern is a design pattern that allows new/additional behaviour to be added to an existing  object dynamically.
- This is achieved by designing a new decorator class that wraps the original class.
    + Subclass the original "Component" class into a "Decorator" class (see UML diagram);
    + In the Decorator class, add a Component pointer as a field;
    Pass a Component to the Decorator constructor to initialize the Component pointer;
    + In the Decorator class, redirect all "Component" methods to the "Component" pointer;
    + In the ConcreteDecorator class, override any Component method(s) whose behavior needs to be modified.
- The decorator pattern is an alternative to  subclassing. Subclassing adds behavior at compile time, and the change affects all instances of the original class; decorating can provide new behavior at runtime for individual objects.
- The I/O Streams implementations of both Java and the .NET Framework incorporate
the decorator pattern.

## Facade pattern
- A facade is an object that provides a simplified interface to a larger body of code
    + make a software library easier to use
    + reduce dependencies of outside code on the inner workings of a library
    + wrap a poorly-designed collection of APIs with a single well-designed API
- The facade class abstracts Packages from the rest of the application.
- The objects using the Facade Pattern to access resources from the Packages.

## Flyweight pattern
- A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.
- example. the data structures for graphical representation of characters in a
word processor. 

## Proxy pattern
- A proxy, in its most general form, is a class functioning as an interface to something else that is expensive or impossible to duplicate.
- can be adapted to incorporate the flyweight pattern in order to reduce the application's memory footprint.

## Chain-of-responsibility pattern
- consisting of a source of command objects and a series of processing objects. Each processing object contains a set of logic that describes the types of command objects that it can handle and how to pass off those that it cannot handle to the next processing object in the chain.
- An XML interpreter (parsed, but not yet executed) might be a fitting example.

## Command pattern
- an object is used to represent and encapsulate all the information needed to call a method at a later time.
-  includes the method name, the object that owns the method and values for the method parameters.
- client, invoker and receiver. The client instantiates the command object and provides the information required to call the method at a later time. The invoker decides when the method should be called. The receiver is an instance of the class that contains the method's code.
- useful for implementing:
    + Multi-level undo
    + Transactional behavior, a database engine or software installer may keep a list of operations that have been or will be performed. Should one of them fail, all others can be reverted or discarded
    + Progress bars
    + Wizards, The command object is created when the wizard is first displayed. Each wizard page stores its GUI changes in the command object, so the object is populated as the user progresses. "Finish" simply triggers a call to execute()
    + GUI buttons and menu items
    + Thread pools, the item in the queue are command object
    + Macro recording, use to record use input, if the program implement a script engine each command object could implement a toScript() method to record use input as script
    + Networking, send command object through network
    + Parallel Processing, command write as tasks to shared resource
    + Mobile Code
- invoker use to invoker the command object directly, the receiver own the method which will be called by the command's execute method
-  Note that using a separate object for each invocation of a command is also an example of the chain of responsibility pattern.

## Interpreter pattern
- is a pattern how to evaluate sentences in a language.
- define a language expression and interpreter for the sub types

## Iterator pattern
- is a design pattern in which iterators are used to access the elements of an aggregate object sequentially without exposing its underlying implementation.

## Mediator pattern
- provides a unified  interface  to a set of interfaces in a  subsystem
- With the mediator pattern communication between objects is encapsulated with a mediator object. Objects no longer communicate directly with each other, but instead communicate through the mediator.
- defines the interface for communication between Colleague objects
- implements the Mediator interface and coordinates communication between Colleague objects. It is aware of all the Colleagues and their purpose with regards to inter communication.

## Memento pattern
- provides the ability to restore an object to its previous state (undo via rollback).
-  is used by two objects: the originator(such as a finite state machine) and a caretaker. The originator is some object that has an internal state. The caretaker is going to do something to the originator, but wants to be able to undo the change.

## Null Object pattern
- is an object with defined neutral ("null") behavior, such as Java or C#, references may be null. These references need to be checked to ensure they are not null before invoking any methods

## Observer pattern
- is a software design pattern  in which an  object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.
- mainly used to implement distributed  event handling systems.












    
    
    







        








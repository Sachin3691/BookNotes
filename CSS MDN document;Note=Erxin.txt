CSS MDN document;Note=Erxin

# Reference 
- mdn url 
https://developer.mozilla.org/en-US/docs/Web/CSS

# Introduction 
- Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML

ou might have heard about CSS1, CSS2.1, CSS3. However, CSS4 has never become an official version

- last stable css 
https://www.w3.org/TR/css/

# Css basic 
- anatomy of a css ruleset 
Selector {
    rule_property:value_expression;
}

    + example 
p {
  color: red;
  width: 500px;
  border: 1px solid black;
}

- type of selectors 
    1. elementTagName

    2. #id 
    
    3. .className
    
    4. attribute with element, elementTagName[attribute]
    
    5. Pseudo-class selector
    
- fonts and text, find the output from google fonts

html {
  font-size: 10px; /* px means "pixels": the base font size is now 10 pixels high  */
  font-family: "Open Sans", sans-serif; /* this should be the rest of the output you got from Google fonts */
}

- css all about boxes 

padding, the space around the content 

border, the solid line that is outside the padding 

margin, the space around the outside of the border 

- position 

horizontal offset 

vertical offset 


# Get start with css 
- add css to dock 

<link rel="stylesheet" href="styles.css">

//file styles.css 
h1 {
    color: red
}

- change default behavior of element 

li {
  list-style-type: none;
}

- adding a class 
<li class="special">Item two</li>

- styling things based on their location in a document 

    + selector called the descendant combinator
li em {
  color: rebeccapurple;
}

    + +  (an adjacent sibling combinator) 
    
h1 + p {
  font-size: 200%;
}

    + base on state 
    
a:link {
  color: pink;
}

    + combine multiple selectors and combinators together. 
body h1 + p .special {
  color: yellow;
  background-color: black;
  padding: 5px;
}

# Applying css to html 
- external file 
<link rel="stylesheet" href="styles.css">

- internal element 

    <style>
      h1 {
        color: blue;
        background-color: yellow;
        border: 1px solid black;
      }

      p {
        color: red;
      }
    </style>
    
- inline attribute 

<h1 style="color: blue;background-color: yellow;border: 1px solid black;">Hello World!</h1>


# How css works 
- process 
    1. the browser load the HTML 
    2. convert the html to DOM 
    3. fetches resources and than handle JS
    4. parser the fetched css and sorts the different rules by their selector types into different buckets 
    5. render tree is laid out in the structure 
    6. visual display of the page is shown on the screeen 

- browser will ignore the rules it is not understand 


# Cascade and inheritance
- cascade, and the closely-related concept of specificity, are mechanisms that control which rule applies when there is such a conflict.

when two rules apply that have equal specificity the one that comes last in the CSS is the one that will be used.

h1 { 
    color: red; 
}
h1 { 
    color: blue; 
}
    
//blue win 
- Specificity is how the browser decides which rule applies if multiple rules have different selectors
    + An element selector is less specific 
    + A class selector is more specific 
<h1 class="main-heading">This is my heading.</h1>

.main-heading { 
    color: red; 
}
        
h1 { 
    color: blue; 
}
   
//red win 
    
- inheritance, which means that some CSS properties by default inherit values set on the current element's parent element

some CSS property values set on parent elements are inherited by their child elements, and some aren't.

color and font-family on an element, every element inside it will also be styled with that color and font
    + inherited properties 
    https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance#Inherited_properties
    
    the element gets the computed value of that property on its parent element.
    
    + non-inherited properties 
    https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance#Non-inherited_properties
    
    the element gets the initial value of that property 

- controlling inheritance, CSS provides four special universal property values for controlling inheritance. Every CSS property accepts these values

    + inherit, Sets the property value applied to a selected element to be the same as that of its parent element. 
    + initial, selected element to the initial value of that property.  default value, as listed in its definition table in the specification. 
    + Resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acts like initial.
    + Revert, some of the browser support this
    
body {
    color: green;
}
          
.my-class-1 a {
    color: inherit;
}
          
.my-class-2 a {
    color: initial;
}
          
.my-class-3 a {
    color: unset;
}

- resetting all property values 

blockquote {
    background-color: red;
    border: 2px solid green;
}
        
.fix-this {
    all: unset;
}


# Modules 















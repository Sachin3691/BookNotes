Excel addins documentation;Note=Erxin

# Office add-ins 
- reference 
https://docs.microsoft.com/en-us/office/dev/add-ins/

- overview, interact with Word, Excel, PowerPoint, OneNote, Project, and Outlook. Your solution can run in Office across multiple platforms

COM or VSTO add-ins are earlier Office integration solutions that run only on Office on Windows. VSTO Add-ins consist of an assembly that is associated with a Microsoft Office application.

referece VSTO:
https://docs.microsoft.com/en-us/visualstudio/vsto/office-and-sharepoint-development-in-visual-studio?view=vs-2019

office add-ins advantages 
    + cross-platform 
    + centralized deployment 
    + easy access via AppSource 
    + based on standard web 
    
- components of office addins 
    + manifest.xml 
    
    + web app 
    
    you can use any technologies, both client and server side, that your hosting provider supports (such as ASP.NET, PHP, or Node.js). To interact with Office clients and documents, you use the Office.js JavaScript APIs.
    
    https://docs.microsoft.com/en-us/office/dev/add-ins/reference/javascript-api-for-office
    
    + capabilities 
    extend functionality 
    create new objects 
    insertable task panes 
    custom ribbon buttons etc. 
    
- get start 
    + office addins paltform overview, check above 
    
    introduce latter 
    https://docs.microsoft.com/en-us/office/dev/add-ins/overview/office-add-ins-fundamentals
    + building office addins 
    + install tools 
    node.js and vscode 
    visual studio 
    
    + code 
    + understand JS library 
    https://docs.microsoft.com/learn/modules/understand-office-javascript-apis/index
    
    explore the Office JavaScript APIs with our the Script Lab tool -- a sandbox for running and exploring the APIs
    
    Script Lab is an add-in that enables you to explore the Office JavaScript API and run code snippets while you're working in an Office program such as Excel or Word
    
    https://appsource.microsoft.com/product/office/WA104380862
    
- transition from VSTO to office addins 
    + Office Web Add-ins (also referred to as Office Add-ins) are essentially web applications embedded in Office. 
    
    + You can reuse some of your VSTO add-in code in an Office web add-in by moving it to your web application's back end on the server 
    
- Building Office Add-ins

    + yeoman generator for office add-ins, https://github.com/officedev/generator-office
    
    $ npm install -g yo generator-office
    
    $ yo office [arguments] [options]
    $ yo office --projectType react --name "New Web AddIn" --host word --ts true
    $ yo office --projectType excel-functions --name "ExcelFunc" --host excel --js
    
    + develop office addins in office code, https://docs.microsoft.com/en-us/office/dev/add-ins/develop/develop-add-ins-vscode
    
    will list detail in the following contents 
    
    + Exploring API with script lab 
    
    + Extending the office UI 
    Addin commands 
    
    Html containers, task panes, content add-ins and dialog boxes 
    
    + Core development concepts 
    
    add-in manifest, an xml file that defines the settings and capabilities of the add-in 
    
    web application that defines the UI and functionality of add-in 
    
    + Office JS API CDN, (CDN) at: https://appsforoffice.microsoft.com/lib/1/hosted/Office.js
    
    This API model uses promises and allows you to specify multiple operations
    
    Common APIs can be used to access features such as UI, dialogs, and client settings that are common across multiple types of Office applications
    
    + defining add-in's settings and capabilities 
    add-in manifest, https://docs.microsoft.com/en-us/office/dev/add-ins/develop/add-in-manifests?tabs=tabid-1
    
    example:
    <?xml version="1.0" encoding="UTF-8"?>
    <OfficeApp xmlns="http://schemas.microsoft.com/office/appforoffice/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="TaskPaneApp">
      <!--IMPORTANT! Id must be unique for each add-in. If you copy this manifest ensure that you change this id to your own GUID. -->
      <Id>c6890c26-5bbb-40ed-a321-37f07909a2f0</Id>
      <Version>1.0</Version>
      <ProviderName>Contoso, Ltd</ProviderName>
      <DefaultLocale>en-US</DefaultLocale>
      <DisplayName DefaultValue="Northwind Traders Excel" />
      <Description DefaultValue="Search Northwind Traders data from Excel"/>
      <SupportUrl DefaultValue="[Insert the URL of a page that provides support information for the app]" />
      <AppDomains>
        <AppDomain>https://www.northwindtraders.com</AppDomain>
      </AppDomains>
      <DefaultSettings>
        <SourceLocation DefaultValue="https://www.contoso.com/search_app/Default.aspx" />
      </DefaultSettings>
      <Permissions>ReadWriteDocument</Permissions>
    </OfficeApp>

- Quick start 
    + Excel add-in 
    
    $ npm install -g yo generator-office
    
    //will provide wizard 
    $ yo office

    navigate to root folder of the projec 
    test add-in in excel 
    $ npm run dev-server
    
    test in browser 
    $ npm run build
    
    $ npm start 
    
    $ npm run start:web
    
    + project contents 
    manifest.xml 
    .ENV, constants
    ./src/taskpane/taskpanel.html
    ./src/taskpane/taskpane.css 
    ./src/taskpane/taskpane.js 
    
    ./src/helpers/documentHelper.js 
    ./src/taskpane/taskpane.ts 
    ./src/helpers/fallbackauthdialog.html 
    ./src/helpers/fallbackauthhelper.js 
    ./src/helpers/ssoauthhelper.js 
    
    configure sso 
    $ npm run configure-sso 
    
    + in excel choose home tab and then choose the show taskpane 
    
    + Excel custom functions example

    Yeoman generator contains some prebuilt custom functions, defined within the ./src/functions/functions.js file.
    
- exploring API with script lab 
    + samples 
    + import snippets from url 
    + https://appsforoffice.microsoft.com/lib/beta/hosted/office.js) and the preview type definitions @types/office-js-preview. 

- dev environment 
    + node 
    + vscode 
    + create add-ins 



# Core concepts 
- All Office Add-ins are built upon the Office Add-ins platform. They share a common framework 
- Office add-in host and platform 
    + on the web 
    + on windows 
    + office 2019 on windows 
    + office 2016 on windows 
    + office 2013 on windows 
    + office on pad 
    + office on mac 
    + office 2019 on mac 
    + office 2016 on mac 

- custom functions (excel only)
onffice on the web 
office on windows, connected to office 365 
offcie for mac 

- office JavaScript API 
    
<head>
    ...
    <script src="https://appsforoffice.microsoft.com/lib/1/hosted/Office.js" type="text/javascript"></script>
</head>

previous api 
https://appsforoffice.microsoft.com/lib/beta/hosted/office.js.


This API model uses promises and allows you to specify multiple operations in each request
Common APIs can be used to access features such as UI, dialogs, and client settings

- Office versions and requirements set 

office version 

such as the "1.1" in ExcelApi 1.1, is relative to the 

excel require set 
https://docs.microsoft.com/en-us/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets
- reference office api library 

enable intellisence 
$ npm install --save-dev @types/office-js

- loading the dom and runtime environment 
open office > read addin manifest > open office addin page > onload > initialize event > loaded and process user request 

Office.onReady(()=>{
    if (info.host === Office.HostType.Excel) {
        // Do Excel-specific initialization (for example, make add-in task pane's
        // appearance compatible with Excel "green").
    }
    if (info.platform === Office.PlatformType.PC) {
        // Make minor layout changes in the task pane.
    }
})
    .then(
        // Checks for the DOM to load.
        $(document).ready(function () {
            // After the DOM is loaded, add-in-specific code can run.
            var mailbox = Office.context.mailbox;
            _Item = mailbox.item;
            initDialer();
        });
        
        
        
);

An initialize event fires when the Office.js library is loaded and ready for user interaction.
Office.initialize = function () {
    // Checks for the DOM to load.
    $(document).ready(function () {
        // After the DOM is loaded, add-in-specific code can run.
        var mailbox = Office.context.mailbox;
        _Item = mailbox.item;
        initDialer();
    });
}

- coding guidance 

    + common api and otlook apis are not promise-based 

Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: chunkSize }, (asyncResult) => {
            if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                reject(asyncResult.error);
            } else {
                // `getAllSlices` is a Promise-wrapped implementation of File.getSliceAsync.
                self.getAllSlices(asyncResult.value).then(result => {
                    if (result.IsSuccess) {
                        resolve(result.Data);
                    } else {
                        reject(asyncResult.error);
                    }
                });
            }
        });
        
    + some propert cannot be set directly, These properties are part of a parent property that must be set as a single object. 
    
    // PageLayout.zoom.scale must be set by assigning PageLayout.zoom to a PageLayoutZoomOptions object.
    sheet.pageLayout.zoom = { scale: 200 };
    
    + If you attempt to set a read-only property, the write operation will fail silently, with no error thrown.
    
    + remove event handler will require save the context 
    
    Excel.run(async (context) => {
        [...]

        // To later remove an event handler, store the context somewhere accessible to the handler removal function.
        // You may find it helpful to also store the event handler object and associate it with the context.
        selectionChangedHandler = myWorksheet.onSelectionChanged.add(callback);
        savedContext = currentContext;
        return context.sync();
    }
    
    + support IE require compiled to es5
    
    + excel specific issue
        * Excel on the web has a payload size limit for requests and responses of 5MB. 
        * range limit to five million cells 
        
        * overcome limitation please reference 
        https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-multiple-ranges
        
        api limitations when the active workbook switches 

- common API, The Context object gives access to the runtime environment after initialization. The Document object gives the user control over an Excel, PowerPoint, or Word document. The Mailbox

    + document object 
    read, write to active selections 
    tabular data 
    
    https://docs.microsoft.com/en-us/javascript/api/office/office.document?view=word-js-preview
    
    + example for project, https://docs.microsoft.com/en-us/office/dev/add-ins/project/project-add-ins
    
    + document support four ways for developer 
    selection based access 
    binding based access 
    custom xml part-based access(word only )
    entire document based access (power point and word only )
    
    + common data types 
    text 
    
    matrix, pride data in the selection or binding as two dimentional array , [['a', 'b']], only in excel 2013 and word 2013
    
    table, provide data in the selection or binding as a TableData object 
    https://docs.microsoft.com/en-us/javascript/api/office/office.tabledata?view=word-js-preview
    
    + async programming, what's returned to AsyncResult.value property  
        * callback 
        
        * asynchronous programming patterns 
        using nested callbacks 
        
        
        using promises 
        The promises pattern for working with bindings takes this form:

        Office.select(selectorExpression, onError).BindingObjectAsyncMethod

    + content and task pane add-ins in offcie 2013 
    Office, Context, AsyncResult 
    https://docs.microsoft.com/en-us/javascript/api/office?view=word-js-preview
    
    context, runtime environment of the add-in 
    https://docs.microsoft.com/en-us/javascript/api/office/office.context?view=word-js-preview
    
    asyncResult, encapsulate the result of an asynchronous request, including status and error information if the request failed. 
    https://docs.microsoft.com/en-us/javascript/api/office/office.asyncresult?view=word-js-preview
    
    Document object 
    
    Bindigns, CustomXmlParts, CustomXmlPart, File and Slice, Settings 
    
    + support for content and task pane ad-ins persist state and settings 
    
    //read and write active selection 
    Office.context.document.getSelectedDataAsync(
    Office.CoercionType.Text, function (asyncResult) {
        if (asyncResult.status == Office.AsyncResultStatus.Failed) {
            write('Action failed. Error: ' + asyncResult.error.message);
        }
        else {
            write('Selected data: ' + asyncResult.value);
        }
    });
    
    //binding to a region, add binding addFromNamedItemAsync, addFromSelectionAsync, 
    Office.context.document.bindings.addFromSelectionAsync(
    Office.BindingType.Text, { id: 'myBinding' }, function (asyncResult) {
        if (asyncResult.status == Office.AsyncResultStatus.Failed) {
            write('Action failed. Error: ' + asyncResult.error.message);
        } else {
            write('Added new binding with type: ' +
                asyncResult.value.type + ' and id: ' + asyncResult.value.id);
        }
    });
    
    //get entire document 
    Document.getFileAsync, File.getSliceAsync, File.closeAsync, Slice objects 
    https://docs.microsoft.com/en-us/javascript/api/office/office.slice?view=word-js-preview
    
    //persisting add-in settings, Setting.saveAsync 
    Office.context.document.settings.set('themeColor', 'green');
    
    //reading properties of a project document 
    ProjectDocument 
    
    // permissions model and governance, request ReadDocument permission in manifest 
    
    <?xml version="1.0" encoding="utf-8"?>
    <OfficeApp xmlns="http://schemas.microsoft.com/office/appforoffice/1.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
     xsi:type="TaskPaneApp">
        <!-- Other manifest elements omitted. -->
        <Permissions>ReadDocument</Permissions>
    </OfficeApp>
    
    + persisting add-in state and settings, Settings, RoamingSettings, CustomProperties
    https://docs.microsoft.com/en-us/javascript/api/office/office.settings
    
    Office.context.document.settings.remove('themeColor');
    
    Office.context.document.settings.saveAsync(function (asyncResult) {
        if (asyncResult.status == Office.AsyncResultStatus.Failed) {
            write('Settings save failed. Error: ' + asyncResult.error.message);
        } else {
            write('Settings saved.');
        }
    });
    
    //save custom xml 
     Office.context.document.customXmlParts.addAsync()
- Office Add-ins XML manifest 
    $ npm run validate 
    to validate add-in manifest 
    + required elements 
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/add-in-manifests?tabs=tabid-2#required-elements
    
    Reference API manifest elements:
    https://docs.microsoft.com/en-us/office/dev/add-ins/reference/manifest/allowsnapshot

    + example 
    
<?xml version="1.0" encoding="utf-8"?>
<OfficeApp
  xmlns="http://schemas.microsoft.com/office/appforoffice/1.1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:type="ContentApp">
  <!--IMPORTANT! Id must be unique for each add-in. If you copy this manifest ensure that you change this id to your own GUID. -->
  <Id>01eac144-e55a-45a7-b6e3-f1cc60ab0126</Id>
  <AlternateId>en-US\WA123456789</AlternateId>
  <Version>1.0.0.0</Version>
  <ProviderName>Microsoft</ProviderName>
  <DefaultLocale>en-US</DefaultLocale>
  <DisplayName DefaultValue="Sample content add-in" />
  <Description DefaultValue="Describe the features of this app." />
  <IconUrl DefaultValue="https://contoso.com/assets/icon-32.png" />
  <HighResolutionIconUrl DefaultValue="https://contoso.com/assets/hi-res-icon.png" />
  <SupportUrl DefaultValue="[Insert the URL of a page that provides support information for the app]" />
  <Hosts>
    <Host Name="Workbook" />
    <Host Name="Database" />
  </Hosts>
  <Requirements>
    <Sets DefaultMinVersion="1.1">
      <Set Name="TableBindings" />
    </Sets>
  </Requirements>  
  <DefaultSettings>
    <SourceLocation DefaultValue="https://contoso.com/apps/content.html" />
    <RequestedWidth>400</RequestedWidth>
    <RequestedHeight>400</RequestedHeight>
  </DefaultSettings>
  <Permissions>Restricted</Permissions>
  <AllowSnapshot>true</AllowSnapshot>
</OfficeApp>
    
- authentication and authorization 
    + user's consent to access their Microsoft Graph data (such as their Office 365 profile, OneDrive files, and SharePoint data) 
    
    + choice of two ways to authentications 
    SSO, office single sign on 
    
    web application authentication and authorization with azure 
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/overview-authn-authz
    
    https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-overview
    
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/sso-in-office-add-ins
    
    https://github.com/OfficeDev/Office-Add-in-NodeJS-SSO
    
    + with office dialog API,  Secure Token Services (STS), prevent their login page from opening in an iframe. 
    
    nonmodal 
    
    a completely separate browser instance 
    
    first page opened in the dialog box must be hosted in the same domain 
    
    dialog box can send information back to the task pane 
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/dialog-api-in-office-add-ins#pass-information-to-the-dialog-box
    
    support multiple identify providers 
    
    authorization of the addin to an external resource 
    
        * samples 
        https://docs.microsoft.com/en-us/office/dev/add-ins/develop/auth-with-office-dialog-api#samples
        
        *  MSAL.NET v. 3.x.x has an API to construct a login URL, and another API that constructs an AuthResult object
        
        * https://github.com/OfficeDev/PnP-OfficeAddins/tree/master/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET
    
    + authorize external service 
    https://github.com/google
    
    General OAuth 2.0: A page of links to libraries for over a dozen languages is maintained by the IETF OAuth Working Group at: OAuth Code
    https://oauth.net/code/
    
    middleman servides, Your add-in can use a middleman service such as OAuth.io or Auth0 to perform authorization. 
    https://oauth.io/
    https://auth0.com/
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/dialog-api-in-office-add-ins#use-the-dialog-apis-in-an-authentication-flow
    
    + authorize to microsoft graph without SSO 
    + Enable single sign-on for office Add-ins 
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/sso-in-office-add-ins
    
- Concepts 
    + addin commands 
Extension points, Ribbon tabs, Context menus 
Control types, Simple buttons, Menus 
Actions, ShowTaskpane, ExecuteFunction 
    
    + UX principles 
Ensure that the look and feel and functionality of your add-in complements the Office experience. Use Office UI Fabric.

Favor content over chrome. Avoid superfluous UI elements that don't add value to the user experience.

Keep users in control. Ensure that users understand important decisions, and can easily reverse actions the add-in performs.

Use branding to inspire trust and orient users. Do not use branding to overwhelm or advertise to users.

Avoid scrolling. Optimize for 1366 x 768 resolution.

Do not include unlicensed images.

Use clear and simple language in your add-in.

Account for accessibility - make your add-in easy for all users to interact with, and accommodate assistive technologies such as screen readers.

Design for all platforms and input methods, including mouse/keyboard and touch. Ensure that your UI is responsive to different form factors.

    + enable and disable add-in commands, enable add-in function in certain contexts, by programmactically or custom add-in commands 
    https://support.office.com/en-us/article/use-the-simplified-ribbon-44bef9c3-295d-4092-b7f0-f471fa629a98?ui=en-US&rs=en-US&ad=US
    
        * Runtimes element in manifest 
        https://docs.microsoft.com/en-us/office/dev/add-ins/reference/manifest/runtimes
        
        <Runtime resid="Contoso.SharedRuntime.Url" lifetime="long" />
        
        * Resource.Urls, <bt:Url id="Contoso.SharedRuntime.Url" DefaultValue="https://{MyDomain}/{path-to-start-page}" />
        
        * Depending on whether your add-in contains a task pane, a function file, or an Excel custom function,
        https://docs.microsoft.com/en-us/office/dev/add-ins/reference/manifest/sourcelocation
        
        https://docs.microsoft.com/en-us/office/dev/add-ins/reference/manifest/functionfile
        
        <FunctionFile resid="Contoso.SharedRuntime.Url"/>.

        * set default state 
        
        <OfficeApp ...>
          ...
          <VersionOverrides ...>
            ...
            <Hosts>
              <Host ...>
                ...
                <DesktopFormFactor>
                  <ExtensionPoint ...>
                    <CustomTab ...>
                      ...
                      <Group ...>
                        ...
                        <Control ... id="MyButton">
                          ...
                          <Action ...>
                          <Enabled>false</Enabled>
        ...
        </OfficeApp>
        
        
        * change state programmatically 
        function enableButton() {
            Office.ribbon.requestUpdate({
                tabs: [
                    {
                        id: "OfficeAppTab1", 
                        controls: [
                        {
                            id: "MyButton", 
                            enabled: true
                        }
                    ]}
                ]});
        }
        
        * in some circumstances, ribbon does not repaint after requestUpdate is called. 
        Whenever requestUpdate is called, the code should record the intended state of the custom buttons and menu items
        
        When a custom control is clicked, the first code in the handler, should check to see if the button should have been clickable. If shouldn't have been, the code should report or log an error and try again to set the buttons to the intended state.
        
        * error handling, requestUpdate method will return the error HostRestartNeeded. The following is an example of how to handle this error. In this case, the reportError method displays the error to the user.
        try {
            var button = {id: "ChartFormatButton", enabled: false};
            var parentTab = {id: "CustomChartTab", controls: [button]};
            var ribbonUpdater = {tabs: [parentTab]};
            await Office.ribbon.requestUpdate(ribbonUpdater);

            chartFormatButtonEnabled = false;
        }
        catch(error) {
            if (error.code == "HostRestartNeeded"){
                reportError("Contoso Awesome Add-in has been upgraded. Please save your work, close the Office application, and restart it.");
            }
        } 

    + add-in development best practices 
    Clear
    Provide teaching UI to guide users and make your UI personal 
    Make singup simple 
    Avoid pop ups 
    
    Use add-in commands 
   
    Apply UX design principles
    
    Optimize for touch, Use the Context.touchEnabled property to detect whether the host application your add-in runs on is touch enabled.
    
    test in real device, Test your add-in on a real device by using sideloading.
    https://docs.microsoft.com/en-us/office/dev/add-ins/testing/sideload-an-office-add-in-on-ipad-and-mac
    
- how to 
    + reference 
    
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/addressing-same-origin-policy-limitations
    
    + addressing same origin policy limitations, 
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/addressing-same-origin-policy-limitations
    
    //JSONP
    // Dynamically create an HTML SCRIPT element that obtains the details for the specified video.
    function loadVideoDetails(videoIndex) {
        // Dynamically create a new HTML SCRIPT element in the webpage.
        var script = document.createElement("script");
        // Specify the URL to retrieve the indicated video from a feed of a current list of videos,
        // as the value of the src attribute of the SCRIPT element. 
        script.setAttribute("src", "https://gdata.youtube.com/feeds/api/videos/" + 
            videos[videoIndex].Id + "?alt=json-in-script&amp;callback=videoDetailsLoaded");
        // Insert the SCRIPT element at the end of the HEAD section.
        document.getElementsByTagName('head')[0].appendChild(script);
    }    
    
    server side code oauth2, enable one domain to get authorized access to resources hosted on another.
    https://oauth.net/2/
    
    CORS, cross origin resource sharing, XmlHttpRequest2
    https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html
    
    + automaticall open task pane 
    + create add-in commands 
    + develop add-ins for ipad 
    + develop add-ins with angular 
    + develop addin vs vscode 
    + develop add-ins vs vs 
    + find the proper order of manifest element 
    + localization 
    + dialog boxes 
    + performance 
    + privacy and security 
    + use in add-ins 
    + specify office host and api 
    + requirements 
    + update api and manifest version 
        
- UI and UX 
    + accessibility guidelines
    design for multiple input methods 
    
    easy to use 
    
    account for assistive technologies 
        * avoid using features taht interfere with assistive tech 
        * provide way to adjust or mute all audio sources 
        * provide a way for users to turn on captions or audio description 
        * provide alternatives to sound as a means 
        * avoid using features that interfere with assistive tech 
        
    + UX design pattern, https://docs.microsoft.com/en-us/office/dev/add-ins/design/data-visualization-guidelines
    
    + data visualization 
    + voice 
    + office add-in design language, https://developer.microsoft.com/zh-cn/fluentui
    
    icon fresh style 
    https://docs.microsoft.com/en-us/office/dev/add-ins/design/add-in-icons-fresh
    https://docs.microsoft.com/en-us/office/dev/add-ins/design/add-in-icons-monoline
    
    + motion, https://developer.microsoft.com/zh-cn/fluentui#/styles/web/motion
    https://developer.microsoft.com/fabric
    
    use motion aligns with fabric
    ensure that there is a consistent application of motion across like elements 
    create consistency with use of direction in animation 
    
    recommended motion durations 
    
    recommended easing curves 
    
    + interface elements 
        * add-in commands 
        * dialog boxes 
        * content add-ins 
        * task panes 
    
    + Once single sign-on is generally available for production add-ins, use it for the smoother end-user experience.
    
    + The brand bar is a space in the footer to include your brand name and logo.
    + Use this screen to display your branding while the add-in is loading or transitioning between UI states
    
    + A First-run Experience (FRE) is a user's introduction to your add-in.
        * The carousel takes users through a series of features or informational pages before they start using the add-in.
        * The value placement communicates your add-in's value proposition through logo placement
        * The video placemat shows users a video before they start using your add-in.
        
    + Navigation 
        * Command bar 
        * Tab bar 
        * Back button 
        
    + design toolkit 
    Reference, https://docs.microsoft.com/en-us/office/dev/add-ins/design/design-toolkits
    
    Fabric design sketch toolkit 
    Fabric Design Adobe XD toolkit 
    add-in sketch toolkit 
    addin adobe xd toolkit 
    segoe UI and fabric MDL2 icon font 
    
- test and debug 
    + Sideload office add-ins, it is used to load addins from native office application 
    create shared folder and sahred to yourself 
    specify the shared folder as a trusted catalog from Office App, File>Options>Trust Center>Trust Center Settings > Trusted Add-in Catalogs 
    
    Add catalog button 
    
    Select the Show in Menu checkbox 
    
        * configure the trust with a registry script 
        Windows Registry Editor Version 5.00

        [HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\WEF\TrustedCatalogs\{-random-GUID-here-}]
        "Id"="{-random-GUID-here-}"
        "Url"="\\\\-share-\\-folder-"
        "Flags"=dword:00000001
    

        * example 
        Windows Registry Editor Version 5.00

        [HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\WEF\TrustedCatalogs\{01234567-89ab-cedf-0123-456789abcedf}]
        "Id"="{01234567-89ab-cedf-0123-456789abcedf}"
        "Url"="\\\\TestServer\\OfficeAddinManifests"
        "Flags"=dword:00000001
    
    + attach a debugger from the task pane 
    choose top right corner of the task pane to activate the personality menu 
    
    attach debugger 
    
    launches the vs just-in-time debugger 
    
    in VS we can also Debug>Attach to Process and choose iexplore.exe or all the avaliable MicrosoftEdge*.exe 
    + debug with F12 developer tools 
    
    in Microsoft Edge, To enable debugging, you need to run the following Windows PowerShell commands.
    $ Get-AppxPackage Microsoft.Win32WebViewHost
    $ setx JS_DEBUG <PackageFullName>
    
        * edge 
    
    open edge devtools, poen local tab the add-in will be listed 
    
    choose folder icon above the script left pane 
    
    set a breakpoint select the line, in the call stack pane 
    
        * ie 
        on the inerst tab in the add-in group, chose store, select addin 
        launch f12 
        
        For the 32-bit version of Office, use C:\Windows\System32\F12\IEChooser.exe

        For the 64-bit version of Office, use C:\Windows\SysWOW64\F12\IEChooser.exe
        
    + test office add-in using ie11 
    node.js 
    vs code 
    be part of the office insider 
    
    + debug add-ins in office on the web 
    + debug on ipad and mac 
    
- web browser 
    + office on the web 
    https://docs.microsoft.com/en-us/office/dev/add-ins/testing/sideload-office-add-ins-for-testing
    + ipad and mac, https://docs.microsoft.com/en-us/office/dev/add-ins/testing/sideload-an-office-add-in-on-ipad-and-mac
    
- clear the offcie cache 
    + on window, delete 
    %LOCALAPPDATA%\Microsoft\Office\16.0\Wef\
    
    + edge devtools preview 
    https://www.microsoft.com/en-us/p/microsoft-edge-devtools-preview/9mzbfrmz0mnj?rtc=1&activetab=pivot:overviewtab
    
    + mac 
    Choose the personality menu. Then choose Clear Web Cache.
    
- debug with runtime logging 
    + enable logging 
    $ npx office-addin-dev-settings runtime-log --enable
    
    + enable only for a specific file 
    $ npx office-addin-dev-settings runtime-log --enable [filename.txt]
    
    + disable runtime logging 
    $ npx office-addin-dev-settings runtime-log --disable
    
    + display whether runtime logging is enabled 
    $ npx office-addin-dev-settings runtime-log
    
    + display help within the command line 
    $ npx office-addin-dev-settings runtime-log --help
    
    + office desktop 
    
    HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\16.0\WEF\Developer\
    
    example 
    https://github.com/OfficeDev/Office-Add-in-Commands-Samples/raw/master/Tools/RuntimeLogging/EnableRuntimeLogging.zip
    
    + on mac 
    defaults write <bundle id> CEFRuntimeLoggingFile -string <file_name>
    
- usability testing
    + sing up for a testing service 
    + develop your research questions 
    + ...
    
    https://docs.microsoft.com/en-us/office/dev/add-ins/develop/usability-testing

- validate an office add-in's manifest 
$ npm run validate

install tar and libxml 
$ xmllint --noout --schema XSD_FILE XML_FILE
replace XSD_FILE with the path to the manifest XSD 
replace XML_FILE to the manifest XML file 

- publish 
https://docs.microsoft.com/en-us/office/dev/add-ins/publish/publish

- reference 

- resources 
https://docs.microsoft.com/en-us/office/dev/add-ins/resources/resources-links-help
    
https://stackoverflow.com/questions/tagged/office-js
https://github.com/officedev/office-js/issues

https://officespdev.uservoice.com/ , feature request 
https://github.com/officedev/office-js-docs-pr/issues, doc issue 
https://docs.microsoft.com/en-us/office/dev/add-ins/overview/explore-with-script-lab, script lab 
https://www.pluralsight.com/courses/build-office-addins-js-api, office addin 
https://leanpub.com/buildingofficeaddins


# Excel 
- reference 
https://docs.microsoft.com/en-us/office/dev/add-ins/excel/

## Overview 
- addin capability 
    + interact with excel objects 
    + extend functionality using web based task pane or content pane 
    + add custom ribbon buttons or contextual menu items 
    + add custom functions 
    + provide richer interaction using dialog window 
    
- components of an excel addin 
manipulate workbook 
perform user authorization with an online service by using the standard OAuth 2.0 flow 
issue API requests to Microsoft Graph or any other API 

- task pane example, https://github.com/OfficeDev/Excel-Add-in-WoodGrove-Expense-Trends

- custom function, Users within Excel can access custom functions just as they would any native function in Excel

- dialog box surfaces that float about above the active excel application window, https://docs.microsoft.com/en-us/javascript/api/office/office.ui

- content add-ins, Content add-ins are surfaces that you can embed directly into Excel documents. You can use content add-ins to embed rich, web-based objects such as charts, data visualizations, or media into a worksheet or to give users access to interface controls

- javascript APIs to interact with workbook content 
    + Excel JS API 
    https://docs.microsoft.com/en-us/office/dev/add-ins/reference/overview/excel-add-ins-reference-overview
    + common API 
    Introduced with Office 2013, the Common API enables you to access features such as UI, dialogs, and client settings that are common across multiple types of Office applications

## Build your first Excel addin 
- Task pane
- Task pane (Angular)
$ yo office

$ npm run dev-server

- Task pane (React)
- Task pane (Vue)


## Excel addin tutorial 
- prerequest 
$ npm install -g yo generator-office
$ yo office 

- create a table 
    + Open the file ./src/taskpane/taskpane.html. This file contains the HTML markup for the task pane.

    + add the following markup immediately after the opening <main> tag 
    <button class="ms-Button" id="create-table">Create Table</button><br/><br/>
    
    + Open the file ./src/taskpane/taskpane.js. This file contains the Office JavaScript API code that facilitates interaction between the task pane
    
    + remove all references to the run button and run() function by doing the following 
    $ document.getElementById("run").onclick = run;
    
    $ Locate and delete the entire run() function
    
    
    // Determine if the user's version of Office supports all the Office.js APIs that are used in the tutorial.
    if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {
        console.log('Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.');
    }

    // Assign event handlers and other initialization logic.
    document.getElementById("create-table").onclick = createTable;
    
- add the following function to the end of the file 

Your Excel.js business logic will be added to the function that is passed to Excel.run

The context.sync method sends all queued commands to Excel for execution

function createTable() {
    Excel.run(function (context) {

        // TODO1: Queue table creation logic here.

        // TODO2: Queue commands to populate the table with data.

        // TODO3: Queue commands to format the table.

        return context.sync();
    })
    .catch(function (error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
}

var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
var expensesTable = currentWorksheet.tables.add("A1:D1", true /*hasHeaders*/);
expensesTable.name = "ExpensesTable";

test in desktop 
$ npm start

test in web 
$ npm run start:web

- filer and sort a table 

Open the file ./src/taskpane/taskpane.html.

<button class="ms-Button" id="filter-table">Filter Table</button><br/><br/>

within office.onReady method call 
document.getElementById("filter-table").onclick = filterTable;
var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
var categoryFilter = expensesTable.columns.getItem('Category').filter;
categoryFilter.applyValuesFilter(['Education', 'Groceries']);

- sort the table 
 ./src/taskpane/taskpane.html.

<button class="ms-Button" id="sort-table">Sort Table</button><br/><br/>

document.getElementById("sort-table").onclick = sortTable;

function sortTable() {
    Excel.run(function (context) {

        var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
        var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
        var sortFields = [
            {
                key: 1,            // Merchant column
                ascending: false,
            }
        ];

        expensesTable.sort.apply(sortFields);

        return context.sync();
    })
    .catch(function (error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
}
- create a chart 

var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
var dataRange = expensesTable.getDataBodyRange();
var chart = currentWorksheet.charts.add('ColumnClustered', dataRange, 'auto');

chart.setPosition("A15", "F30");
chart.title.text = "Expenses";
chart.legend.position = "right"
chart.legend.format.fill.setSolidColor("white");
chart.dataLabels.format.font.size = 15;
chart.dataLabels.format.font.color = "black";
chart.series.getItemAt(0).name = 'Value in &euro;';

- test addin 
    + show taskpane 
    + create chart 
    
    https://docs.microsoft.com/en-us/office/dev/add-ins/testing/sideload-office-add-ins-for-testing#sideload-an-office-add-in-in-office-on-the-web
    
    + close all office application 
    + clear cache 
For Windows: %LOCALAPPDATA%\Microsoft\Office\16.0\Wef\.

For Mac: ~/Library/Containers/com.Microsoft.OsfWebHost/Data/.

~/Library/Containers/com.microsoft.{host}/Data/Library/Caches/ where {host} is the Office host (e.g., Excel)
~/Library/Containers/com.microsoft.{host}/Data/Library/Application Support/Microsoft/Office/16.0/Wef/ where {host} is the Office host (e.g., Excel)
com.microsoft.Office365ServiceV2/Data/Caches/com.microsoft.Office365ServiceV2/

local web server is already running, stop it by closing the node command window.

$ npm start 
 
$ npm run start:web 
    
- freeze a table header 

var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
currentWorksheet.freezePanes.freezeRows(1);

- protect a worksheet 
    + configure the manifest to add a second ribbon button 
    <Control xsi:type="Button" id="<!--TODO1: Unique (in manifest) name for button -->">
        <Label resid="<!--TODO2: Button label -->" />
        <Supertip>            
            <Title resid="<!-- TODO3: Button tool tip title -->" />
            <Description resid="<!-- TODO4: Button tool tip description -->" />
        </Supertip>
        <Icon>
            <bt:Image size="16" resid="Icon.16x16"/>
            <bt:Image size="32" resid="Icon.32x32"/>
            <bt:Image size="80" resid="Icon.80x80"/>
        </Icon>
        <Action xsi:type="<!-- TODO5: Specify the type of action-->">
            <!-- TODO6: Identify the function.-->
            <Action xsi:type="ExecuteFunction">
            <FunctionName>toggleProtection</FunctionName>
        </Action>
    </Control>
    
    <bt:String id="ProtectionButtonLabel" DefaultValue="Toggle Worksheet Protection" />

- create the dialog page 
<!DOCTYPE html>
<html>
    <head lang="en">
        <title>Dialog for My Office Add-in</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- For more information on Office UI Fabric, visit https://developer.microsoft.com/fabric. -->
        <link rel="stylesheet" href="https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/9.6.1/css/fabric.min.css"/>

        <script type="text/javascript" src="https://appsforoffice.microsoft.com/lib/1/hosted/office.js"></script>
        <script type="text/javascript" src="popup.js"></script>

    </head>
    <body style="display:flex;flex-direction:column;align-items:center;justify-content:center">
        <p class="ms-font-xl">ENTER YOUR NAME</p>
        <input id="name-box" type="text"/><br/><br/>
        <button id="ok-button" class="ms-Button">OK</button>
    </body>
</html>

(function () {
"use strict";

    Office.onReady()
        .then(function() {

            document.getElementById("ok-button").onclick = sendStringToParentPage;

        });

    function sendStringToParentPage() {
        var userName = document.getElementById("name-box").value;
        Office.context.ui.messageParent(userName);
    }
}());

- update webpack config settings 
popup: "./src/dialogs/popup.js"

entry: {
  polyfill: "@babel/polyfill",
  taskpane: "./src/taskpane/taskpane.js",
  commands: "./src/commands/commands.js",
  popup: "./src/dialogs/popup.js"
},

plugins: [
  new CleanWebpackPlugin(),
  new HtmlWebpackPlugin({
    filename: "taskpane.html",
    template: "./src/taskpane/taskpane.html",
    chunks: ['polyfill', 'taskpane']
  }),
  new CopyWebpackPlugin([
  {
    to: "taskpane.css",
    from: "./src/taskpane/taskpane.css"
  }
  ]),
  new HtmlWebpackPlugin({
    filename: "commands.html",
    template: "./src/commands/commands.html",
    chunks: ["polyfill", "commands"]
  }),
  new HtmlWebpackPlugin({
    filename: "popup.html",
    template: "./src/dialogs/popup.html",
    chunks: ["polyfill", "popup"]
  })
],

Office.context.ui.displayDialogAsync(
    'https://localhost:3000/popup.html',
    {height: 45, width: 55},

    // TODO2: Add callback parameter.
);


## Excel JavaScript API
- programming concept 
events 
charts 
ranges 
tables 
worksheets
coauthoring in excel add-ins 
data validation 
error handling 
performance optimization 
 
- API requirement sets 
https://docs.microsoft.com/en-us/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets?view=excel-js-preview

Preview 
ExcelApi 1.11 

- ExcelApiOnline requirement set, The ExcelApiOnline requirement set is a special requirement set that includes features that are only available for Excel on the web

https://docs.microsoft.com/en-us/office/dev/add-ins/reference/requirement-sets/excel-api-online-requirement-set

ChartAxisTitle 
PivotTableScopedCollection 
Range
...


## Fundamental programming concepts with the Excel JavaScript API 
- the sync() API call in Office.js returns a promise that is resolved when the Excel application completes the requested read or write actions

 run them as a batch of commands with a single call to sync(), rather than sending a separate request for each action. 
 
- Excel.run, executes a function where you specify the actions to perform against the Excel object model

Excel.run({ delayForCellEdit: true }, function (context) { ... })

- Excel and your add-in run in two different processes. Since they use different runtime environments

Excel add-ins require a RequestContext object in order to connect your add-in to objects in Excel such as worksheets, ranges, charts, and tables.

- proxy objects

Any methods that you invoke or properties that you set or load on proxy objects are simply added to a queue of pending commands. When you call the sync() method on the request context (for example, context.sync()), the queued commands are dispatched to Excel and run


You can queue up as many changes as you wish on the request context, and then call the sync() method to run the batch of queued commands

var selectedRange = context.workbook.getSelectedRange();
selectedRange.format.fill.color = "#4472C4";
selectedRange.format.font.color = "white";
selectedRange.format.autofitColumns();

- sync() method on the request context synchronizes the state between proxy objects and objects in the Excel document. The sync() method runs any commands that are queued on the request context and retrieves values for any properties that should be loaded on the proxy objects

Excel.run(function (context) {
    var selectedRange = context.workbook.getSelectedRange();
    selectedRange.load('address');
    return context.sync()
      .then(function () {
        console.log('The selected range is: ' + selectedRange.address);
    });
}).catch(function (error) {
    console.log('error: ' + error);
    if (error instanceof OfficeExtension.Error) {
        console.log('Debug info: ' + JSON.stringify(error.debugInfo));
    }
});

- load(),  must explicitly load the properties to populate the proxy object with data from the Excel document

Excel.run(function (context) {
    var sheetName = 'Sheet1';
    var rangeAddress = 'A1:B2';
    var myRange = context.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);

    myRange.load(['address', 'format/*', 'format/fill', 'entireRow' ]);

    return context.sync()
      .then(function () {
        console.log (myRange.address);              // ok
        console.log (myRange.format.wrapText);      // ok
        console.log (myRange.format.fill.color);    // ok
        //console.log (myRange.format.font.color);  // not ok as it was not loaded
        });
    }).then(function () {
        console.log('done');
}).catch(function (error) {
    console.log('Error: ' + error);
    if (error instanceof OfficeExtension.Error) {
        console.log('Debug info: ' + JSON.stringify(error.debugInfo));
    }
});

- null or blank property values, In Excel, a range is represented by a 2-D array, where the first dimension is rows and the second dimension is columns

to update the number format for only one cell within a range, and retain the existing number format for all other cells in the range, specify the new number format for the cell to update, and specify null for all other cells

range.values = [['Eurasia', '29.96', '0.25', '15-Feb' ]];
range.numberFormat = [[null, null, null, 'm/d/yyyy;@']];

- null input for a property, null is not a valid input for single property. 

range.values = null;

range.format.fill.color =  null;

- null property values in the response 

if multiple cells have same value then the value will return otherwise the value will be null

- blank property values in the response, a blank property value in the response (i.e., two quotation marks with no space in-between '') indicates that cell contains no data or value. 

- read or write to an unbounded range, 

Range addresses comprised of entire column(s):
C:C
A:F
Range addresses comprised of entire row(s):
2:2
1:4

getRange('C:C')), the response will contain null values for cell-level properties such as values, text, numberFormat, and formula. Other properties of the range, such as address and cellCount, will contain valid values for the unbounded range.

var range = context.workbook.worksheets.getActiveWorksheet().getRange('A:B');
range.values = 'Due Date';

- read or write to a large range. 
Excel range transfer limitation 
https://docs.microsoft.com/en-us/office/dev/add-ins/develop/common-coding-issues#excel-data-transfer-limits

Excel on the web has a payload size limit for requests and responses of 5MB. RichAPI.Error will be thrown if that limit is exceeded.

A range is limited to five million cells for get operations.

- update all cells in a range. set the corresponding property on the range object to the desired (single) value.

Excel.run(function (context) {
    var sheetName = 'Sheet1';
    var rangeAddress = 'A1:A20';
    var worksheet = context.workbook.worksheets.getItem(sheetName);

    var range = worksheet.getRange(rangeAddress);
    range.numberFormat = 'm/d/yyyy';
    range.values = '3/11/2015';
    range.load('text');

    return context.sync()
      .then(function () {
        console.log(range.text);
    });
}).catch(function (error) {
    console.log('Error: ' + error);
    if (error instanceof OfficeExtension.Error) {
      console.log('Debug info: ' + JSON.stringify(error.debugInfo));
    }
});


## Advanced programming concepts with the excel JS api 
- Context: The Context object represents the runtime environment of the add-in and provides access to key objects of the API

- Document: The Document object provides the getFileAsync() method, which you can use to download the Excel file 

- API version detection 

if (Office.context.requirements.isSetSupported('ExcelApi', '1.3')) {
  /// perform actions
}
else {
  /// provide alternate flow/logic
}

- defining requirement set support in the manifest 
<Requirements>
   <Sets DefaultMinVersion="1.3">
      <Set Name="ExcelApi" MinVersion="1.3"/>
   </Sets>
</Requirements>

- Office.js common API, https://docs.microsoft.com/en-us/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets

- loading the properties of an object 

Calling the load() method on an Excel JavaScript object instructs the API to load the object into JavaScript memory when the sync() method runs

load(param: object), fills the proxy object created in javascript layer with proeprty and object values specified by parameters 

Excel.run(function (ctx) {
    var sheet = ctx.workbook.worksheets.getItem("Sample");
    var sourceRange = sheet.getRange("B2:E2");
    sourceRange.load("format/fill/color, format/font/name, format/font/color");

    return ctx.sync()
        .then(function () {
            var targetRange = sheet.getRange("B7:E7");
            targetRange.set(sourceRange);
            targetRange.format.autofitColumns();

            return ctx.sync();
        });
}).catch(function(error) {
    console.log("Error: " + error);
    if (error instanceof OfficeExtension.Error) {
        console.log("Debug info: " + JSON.stringify(error.debugInfo));
    }
});

param also can be an object 
myWorksheets.load({
    select: 'name, userRange/address',
    expand: 'tables',
    top: 5,
    skip: 0
});
select, a comma-delimited list 
expand, a comma delimited navigational property 
top, maximum number of collection items 
skip, number of items in the collection taht to be skipped 
- Scalar and navigation properties 

two categories of properties: 

scalar properties are assignable types such as strings, integers, and JSON structs. 
Navigation properties are readonly objects and collections of objects that have their fields assigned, instead of directly assigning the property.

For example, name and position members on the Worksheet object are scalar properties, whereas protection and tables are navigation properties.

    + object.load()

    object.load() method with no parameters specified will load all scalar properties of the object
    
    navigation properties of the object will not be loaded. load the font name for a range, you must specify the format and font navigation properties as the path to the name property:
    someRange.load("format/font/name")
    
    + Setting properties object.set() method that is available on all objects in the Excel JavaScript API. 
    
    set (properties: object, options: object)
    
    Excel.run(function (ctx) {
        var sheet = ctx.workbook.worksheets.getItem("Sample");
        var range = sheet.getRange("B2:E2");
        range.set({
            format: {
                fill: {
                    color: '#4472C4'
                },
                font: {
                    name: 'Verdana',
                    color: 'white'
                }
            }
        });
        range.format.autofitColumns();

        return ctx.sync();
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });
    
    + *OrNullObject,  use the *OrNullObject method variant that's available for several methods in the Excel JavaScript API. An *OrNullObject method will return a null object (not the JavaScript null) rather than throwing an exception
    
    var dataSheet = context.workbook.worksheets.getItemOrNullObject("Data");

    return context.sync()
      .then(function() {
        if (dataSheet.isNullObject) {
            // Create the sheet
        }

        dataSheet.position = 1;
        //...
      })    
    
- calling built-in functions, As this example shows, you must load the value property of the FunctionResult object before you can read it.  
    
var functionResult = context.workbook.functions.sampleFunction();
functionResult.load('value');
return context.sync()
    .then(function () {
        console.log('Result of the function: ' + functionResult.value);
    });
    
Excel.run(function (context) {
    var range = context.workbook.worksheets.getItem("Sheet1").getRange("A1:D4");
    var unitSoldInNov = context.workbook.functions.vlookup("Wrench", range, 2, false);
    unitSoldInNov.load('value');

    return context.sync()
        .then(function () {
            console.log(' Number of wrenches sold in November = ' + unitSoldInNov.value);
        });
}).catch(errorHandlerFunction);

    + nested function calls 
Excel.run(function (context) {
    var range = context.workbook.worksheets.getItem("Sheet1").getRange("A1:D4");
    var sumOfTwoLookups = context.workbook.functions.sum(
        context.workbook.functions.vlookup("Wrench", range, 2, false),
        context.workbook.functions.vlookup("Wrench", range, 3, false)
    );
    sumOfTwoLookups.load('value');

    return context.sync()
        .then(function () {
            console.log(' Number of wrenches sold in November and December = ' + sumOfTwoLookups.value);
        });
}).catch(errorHandlerFunction);

    + support worksheet functions, https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-worksheet-functions
ABS 
ACCRINT 
ACCRINTM 
ACOS 
ACOSH 
ACOT 
ACOTH 
AMORDEGRC
AMORLINK, returns the depreciation for each accounting eriod 
...
YEAR
YEARFRAC, year fraction representing the number of whole days 
YIELD
YIELDDISC, returns the annual yield for a discounted security 
YIELDMAT
Z.TEST, returns the one-tailed probability-value of a z-test 

- Charts, Chart Object, Chart Collection Object 

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var dataRange = sheet.getRange("A1:B13");
    var chart = sheet.charts.add("Line", dataRange, "auto");

    chart.title.text = "Sales Data";
    chart.legend.position = "right"
    chart.legend.format.fill.setSolidColor("white");
    chart.dataLabels.format.font.size = 15;
    chart.dataLabels.format.font.color = "black";

    return context.sync();
}).catch(errorHandlerFunction);

    + add data series 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var chart = sheet.charts.getItemAt(0);
    var dataRange = sheet.getRange("D2:D5");

    var newSeries = chart.series.add("2016");
    newSeries.setValues(dataRange);

    return context.sync();
}).catch(errorHandlerFunction);
      
    + set title 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var chart = sheet.charts.getItemAt(0);
    chart.title.text = "Sales Data by Year";

    return context.sync();
}).catch(errorHandlerFunction);

    + set properties of an axis in a chart 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var chart = sheet.charts.getItemAt(0);
    chart.axes.categoryAxis.title.text = "Product";

    return context.sync();
}).catch(errorHandlerFunction);

- set axis display unit

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var chart = sheet.charts.getItemAt(0);
    chart.axes.valueAxis.displayUnit = "Hundreds";

    return context.sync();
}).catch(errorHandlerFunction);

- set visibility of gridlines in a chart 

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var chart = sheet.charts.getItemAt(0);
    chart.axes.valueAxis.majorGridlines.visible = false;

    return context.sync();
}).catch(errorHandlerFunction);

- add trendlines 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var chart = sheet.charts.getItemAt(0);
    var seriesCollection = chart.series;
    seriesCollection.getItemAt(0).trendlines.add("MovingAverage").movingAveragePeriod = 5;

    return context.sync();
}).catch(errorHandlerFunction);

- export chart as image 
Excel.run(function (ctx) {
    var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");
    var imageAsString = chart.getImage();
    return context.sync().then(function () {
        console.log(imageAsString.value);
        // Instead of logging, your add-in may use the base64-encoded string to save the image as a file or insert it in HTML.
    });
}).catch(errorHandlerFunction);

- Coauthoring in Excel add-ins. The workbook must be stored in OneDrive or SharePoint online 

range.values = [['Contoso']];

a coauthor changes the value of the cell to 'Example', after synchronization all coauthors see 'Example' in the cell. However, the value of the JavaScript variable is still set to 'Contoso'. Furthermore, when multiple coauthors use the same add-in, each coauthor has their own copy of the variable, which is not synchronized.

be sure you check for updated values in the workbook before you use the variable.

    + use events to manage the in-memory state of your add-in 

    + add-in read data from excel and saved these data into data sturcture also need to be considered 
    
     use the BindingDataChanged event. This ensures that changes to workbook content made by coauthors is reflected in the state of your add-in.
    
    https://docs.microsoft.com/en-us/javascript/api/office/office.bindingdatachangedeventargs?view=word-js-preview
    
    be aware that in some scenarios this behavior can produce poor user experiences. when listening to the binding events

- Comments 
    + reference
    https://support.office.com/article/insert-comments-and-notes-in-excel-bdcc9f5d-38e2-45b4-9a92-0b2b5c7bf6f8
    
    + Workbook.comments property. This includes comments created by users and also comments created by your add-in
    
    Excel.run(function (context) {
        // Add a comment to A2 on the "MyWorksheet" worksheet.
        var comments = context.workbook.comments;

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `Comment.add`.
        comments.add("MyWorksheet!A2", "TODO: add data.");
    return context.sync();
    });

    Excel.run(function (context) {
        // Get the first comment added to the workbook.
        var comment = context.workbook.comments.getItemAt(0);
        comment.replies.add("Thanks for the reminder!");
        return context.sync();
    });
        
    Excel.run(function (context) {
        // Edit the first comment in the workbook.
        var comment = context.workbook.comments.getItemAt(0);
        comment.content = "PLEASE add headers here.";
        return context.sync();
    });

    Excel.run(function (context) {
        // Delete the comment thread at A2 on the "MyWorksheet" worksheet.
        context.workbook.comments.getItemByCell("MyWorksheet!A2").delete();
        return context.sync();
    });

    //A comment thread has a configurable boolean value, resolved, to indicate if it is resolved.
    Excel.run(function (context) {
        // Resolve the first comment thread in the workbook.
        context.workbook.comments.getItemAt(0).resolved = true;
        return context.sync();
    });

    Excel.run(function (context) {
        // Get the comment at cell A2 in the "MyWorksheet" worksheet.
        var comment = context.workbook.comments.getItemByCell("MyWorksheet!A2");

        // Load and print the following values.
        comment.load(["authorEmail", "authorName", "creationDate"]);
        return context.sync().then(function () {
            console.log(`${comment.creationDate.toDateString()}: ${comment.authorName} (${comment.authorEmail})`);
        });
    });

    var reply = comment.replies.getItemAt(replyCount.value - 1);
    reply.load(["authorEmail", "authorName", "creationDate"]);
        
        
    Mentions are used to tag colleagues in a comment. This sends them notifications with your comment's content
    
    Excel.run(function (context) {
        // Add an "@mention" for "Kate Kristensen" to cell A1 in the "MyWorksheet" worksheet.
        var mention = {
            email: "kakri@contoso.com",
            id: 0,
            name: "Kate Kristensen"
        };

        // This will tag the mention's name using the '@' syntax.
        // They will be notified via email.
        var commentBody = {
            mentions: [mention],
            richContent: '<at id="0">' + mention.name + "</at> -  Can you take a look?"
        };

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        context.workbook.comments.add("MyWorksheet!A1", commentBody, Excel.ContentType.mention);
        return context.sync();
    });    
      
- conditional formatting of ranges, ConditionalFormat, ConditionalFormatType,  ConditionalColorScaleCriterion

const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B21:E23");
const conditionalFormat = range.conditionalFormats.add(
    Excel.ConditionalFormatType.cellValue
);

// set the font of negative numbers to red
conditionalFormat.cellValue.format.font.color = "red";
conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

await context.sync();

    + color scale 
const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B2:M5");
const conditionalFormat = range.conditionalFormats.add(
      Excel.ConditionalFormatType.colorScale
);

// color the backgrounds of the cells from blue to yellow to red based on value
const criteria = {
      minimum: {
           formula: null,
           type: Excel.ConditionalFormatColorCriterionType.lowestValue,
           color: "blue"
      },
      midpoint: {
           formula: "50",
           type: Excel.ConditionalFormatColorCriterionType.percent,
           color: "yellow"
      },
      maximum: {
           formula: null,
           type: Excel.ConditionalFormatColorCriterionType.highestValue,
           color: "red"
      }
};
conditionalFormat.colorScale.criteria = criteria;

    + custom 
const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B8:E13");
const conditionalFormat = range.conditionalFormats.add(
     Excel.ConditionalFormatType.custom
);

// if a cell has a higher value than the one to its left, set that cell's font to green
conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
conditionalFormat.custom.format.font.color = "green";

await context.sync();

    + data bar, adds data bars to the cells 
const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B8:E13");
const conditionalFormat = range.conditionalFormats.add(
     Excel.ConditionalFormatType.dataBar
);

// give left-to-right, default-appearance data bars to all the cells
conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;
await context.sync();

    + icon set 
const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B8:E13");
const conditionalFormat = range.conditionalFormats.add(
     Excel.ConditionalFormatType.iconSet
);

const iconSetCF = conditionalFormat.iconSet;
iconSetCF.style = Excel.IconSet.threeTriangles;

/*
   With a "three*" icon set style, such as "threeTriangles", the third
    element in the criteria array (criteria[2]) defines the "top" icon;
    e.g., a green triangle. The second (criteria[1]) defines the "middle"
    icon, The first (criteria[0]) defines the "low" icon, but it can often 
    be left empty as this method does below, because every cell that
   does not match the other two criteria always gets the low icon.
*/
iconSetCF.criteria = [
    {} as any,
      {
        type: Excel.ConditionalFormatIconRuleType.number,
        operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
        formula: "=700"
      },
      {
        type: Excel.ConditionalFormatIconRuleType.number,
        operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
        formula: "=1000"
      }
];

await context.sync();

    + Preset criteria, Preset conditional formatting applies a user-defined format to the range based on a selected standard rule.

const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B2:M5");
const conditionalFormat = range.conditionalFormats.add(
     Excel.ConditionalFormatType.presetCriteria
);

// color every cell's font white that is one standard deviation above average relative to the range
conditionalFormat.preset.format.font.color = "white";
conditionalFormat.preset.rule = {
     criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage
};

await context.sync();

    + Text comparison, Text comparison conditional formatting uses string comparisons as the condition. The rule property is a ConditionalTextComparisonRule

const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B16:D18");
const conditionalFormat = range.conditionalFormats.add(
     Excel.ConditionalFormatType.containsText
);

// color the font of every cell containing "Delayed"
conditionalFormat.textComparison.format.font.color = "red";
conditionalFormat.textComparison.rule = {
     operator: Excel.ConditionalTextOperator.contains,
     text: "Delayed"
};

await context.sync();

    + Top/bottom conditional formatting applies a format to the highest or lowest values in a range. 
const sheet = context.workbook.worksheets.getItem("Sample");
const range = sheet.getRange("B21:E23");
const conditionalFormat = range.conditionalFormats.add(
     Excel.ConditionalFormatType.topBottom
);

// for the highest valued cell in the range, make the background green
conditionalFormat.topBottom.format.fill.color = "green"
conditionalFormat.topBottom.rule = { rank: 1, type: "TopItems"}

await context.sync();

    + mutiple formats and priority,  multiple conditional formats to a range. If the formats have conflicting elements, such as differing font colors, only one format applies that particular element. 
const sheet = context.workbook.worksheets.getItem("Sample");
const temperatureDataRange = sheet.tables.getItem("TemperatureTable").getDataBodyRange();


// Set low numbers to bold, dark red font and assign priority 1.
const presetFormat = temperatureDataRange.conditionalFormats
    .add(Excel.ConditionalFormatType.presetCriteria);
presetFormat.preset.format.font.color = "red";
presetFormat.preset.format.font.bold = true;
presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };
presetFormat.priority = 1;

// Set negative numbers to blue font with green background and set priority 0.
const cellValueFormat = temperatureDataRange.conditionalFormats
    .add(Excel.ConditionalFormatType.cellValue);
cellValueFormat.cellValue.format.font.color = "blue";
cellValueFormat.cellValue.format.fill.color = "lightgreen";
cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };
cellValueFormat.priority = 0;

await context.sync();

    + Mutually exclusive conditional formats. The stopIfTrue property of ConditionalFormat prevents lower priority conditional formats from being applied to the range

const sheet = context.workbook.worksheets.getItem("Sample");
const temperatureDataRange = sheet.tables.getItem("TemperatureTable").getDataBodyRange();

// Set low numbers to bold, dark red font and assign priority 1.
const presetFormat = temperatureDataRange.conditionalFormats
    .add(Excel.ConditionalFormatType.presetCriteria);
presetFormat.preset.format.font.color = "red";
presetFormat.preset.format.font.bold = true;
presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };
presetFormat.priority = 1;

// Set negative numbers to blue font with green background and 
// set priority 0, but set stopIfTrue to true, so none of the 
// formatting of the conditional format with the higher priority
// value will apply, not even the bolding of the font.
const cellValueFormat = temperatureDataRange.conditionalFormats
    .add(Excel.ConditionalFormatType.cellValue);
cellValueFormat.cellValue.format.font.color = "blue";
cellValueFormat.cellValue.format.fill.color = "lightgreen";
cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };
cellValueFormat.priority = 0;
cellValueFormat.stopIfTrue = true;

await context.sync();

- configure your excel add-in to use a shared JS runtime. To configure your add-in to use a shared runtime, follow the instructions in this article.

    + manifest.xml 
<VersionOverrides xmlns="http://schemas.microsoft.com/office/taskpaneappversionoverrides" xsi:type="VersionOverridesV1_0">
  <Hosts>
    <Host xsi:type="Workbook">
    <Runtimes>
      <Runtime resid="ContosoAddin.Url" lifetime="long" />
    </Runtimes>
    <AllFormFactors>
    
...
<Page>
<SourceLocation resid="ContosoAddin.Url"/>
</Page>
...
<DesktopFormFactor>
<GetStarted>
...
</GetStarted>
<FunctionFile resid="ContosoAddin.Url"/>
<Action xsi:type="ShowTaskpane">
<TaskpaneId>ButtonId1</TaskpaneId>
<SourceLocation resid="ContosoAddin.Url"/>
</Action>
<bt:Urls>
<bt:Url id="Functions.Script.Url" DefaultValue="https://localhost:3000/dist/functions.js"/>
...
<bt:Url id="ContosoAddin.Url" DefaultValue="https://localhost:3000/taskpane.html"/>
...
<Runtimes>
  <Runtime resid="ContosoAddin.Url" lifetime="long" />
</Runtimes>

- multiple task panes. A shared runtime only supports the use of one task pane. Note that any task pane without a <TaskpaneID> is considered a different task pane. 

- data validation to excel ranges 

    + programmatic control of data validation 
    
    The Range.dataValidation property, which takes a DataValidation object, is the entry point for programmatic control of data validation in Excel

    + creating validation rules. DataValidation object in Range.dataValidation. This takes a DataValidationRule object which has seven optional properties.
    
    + basic and datetime validation rule types 
    
    wholeNumber, requires a whole number 
    decimal, requires a decimal number 
    textLength, applies the validation details in teh BasicDataValidation object 
    
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:C5");

    range.dataValidation.rule = {
            wholeNumber: {
                formula1: 0,
                operator: "GreaterThan"
            }
        };

    return context.sync();
})

The DateTimeDataValidation object is structured similarly to the BasicDataValidation. https://www.iso.org/iso-8601-date-and-time-format.html

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:C5");

    range.dataValidation.rule = {
            date: {
                formula1: "2018-04-01",
                formula2: "2018-04-08",
                operator: "Between"
            }
        };

    return context.sync();
})

    + list validation 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:C5");   
    var nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

    range.dataValidation.rule = {
        list: {
            inCellDropDown: true,
            source: "=Names!$A$1:$A$3"
        }
    };

    return context.sync();
})

    + custom validation 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:C5");
    var commentsRange = sheet.tables.getItem("AthletesTable").columns.getItem("Comments").getDataBodyRange();

    commentsRange.dataValidation.rule = {
            custom: {
                formula: "=NOT(ISNUMBER(SEARCH(A2,B2)))"
            }
        };

    return context.sync();
})

    + create validation error alerts 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:C5");

    range.dataValidation.errorAlert = {
            message: "Sorry, only positive whole numbers are allowed",
            showAlert: true, // default is 'true'
            style: "Stop", // other possible values: Warning, Information
            title: "Negative or Decimal Number Entered"
        };

    // Set range.dataValidation.rule and optionally .prompt here.

    return context.sync();
})

    + create validation error prompt
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:C5");

    range.dataValidation.prompt = {
            message: "Please enter a positive whole number.",
            showPrompt: true, // default is 'false'
            title: "Positive Whole Numbers Only."
        };

    // Set range.dataValidation.rule and optionally .errorAlert here.

    return context.sync();
})

    + remove validation from a range 
myrange.dataValidation.clear()

- error handling. API errors 

every call to Excel.run is accompanied by a catch statement to catch any errors that occur within the Excel.run. We recommend that you use the same pattern

    + code: The code property of an error message contains a string that is part of the OfficeExtension.ErrorCodes or Excel.ErrorCodes list
    
    + message: The message property of an error message contains a summary of the error in the localized string.
    
    + debugInfo: When present, the debugInfo property of the error message provides additional information
    
Excel.run(function (context) {
  
  // Excel JavaScript API calls here

  // Await the completion of context.sync() before continuing.
  return context.sync()
    .then(function () {
      console.log("Finished!");
    })
}).catch(errorHandlerFunction);

informatin relative to error messages, https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-error-handling

- events, This article describes important concepts related to working with events in Excel and provides code samples. Events in Excel 

onActivated 
onAdded 
onAutoSaveSettingChanged 
onCalculated 
onChanged 
onColumnSort
onDataChanged
onDeactivated
onDeleted
onFormatChanged 
onRowSorted
onSelectionChanged
onRowHiddenChanged
onSettingsChanged
onSingleClicked

onSelectionChanged is currently unstable. There is a workaround to reliably use onSelectionChanged. 

    + register an event handler, n a source property that indicates whether the event was triggered locally by the current user (event.source = Local) or was triggered by the remote coauthor

Excel.run(function (context) {
    var worksheet = context.workbook.worksheets.getItem("Sample");
    worksheet.onChanged.add(handleChange);

    return context.sync()
        .then(function () {
            console.log("Event handler successfully registered for onChanged event in the worksheet.");
        });
}).catch(errorHandlerFunction);

    + remove an event handler. onSelectionChanged event in the worksheet named Sample and defines the handleSelectionChange function that will run when the event occurs

var eventResult;

Excel.run(function (context) {
    var worksheet = context.workbook.worksheets.getItem("Sample");
    eventResult = worksheet.onSelectionChanged.add(handleSelectionChange);

    return context.sync()
        .then(function () {
            console.log("Event handler successfully registered for onSelectionChanged event in the worksheet.");
        });
}).catch(errorHandlerFunction);

function handleSelectionChange(event)
{
    return Excel.run(function(context){
        return context.sync()
            .then(function() {
                console.log("Address of current selection: " + event.address);
            });
    }).catch(errorHandlerFunction);
}

function remove() {
    return Excel.run(eventResult.context, function (context) {
        eventResult.remove();

        return context.sync()
            .then(function() {
                eventResult = null;
                console.log("Event handler successfully removed.");
            });
    }).catch(errorHandlerFunction);
}

    + enable and disable events at the runtime level 
Excel.run(function (context) {
    context.runtime.load("enableEvents");
    return context.sync()
        .then(function () {
            var eventBoolean = !context.runtime.enableEvents;
            context.runtime.enableEvents = eventBoolean;
            if (eventBoolean) {
                console.log("Events are currently on.");
            } else {
                console.log("Events are currently off.");
            }
        }).then(context.sync);
}).catch(errorHandlerFunction);

- multiple ranges, his way of setting a property runs much faster than setting the same property individually for each of the ranges

    + RangeAreas, https://docs.microsoft.com/en-us/javascript/api/excel/excel.rangeareas

    similar to Rnage object with additional properties 
    
    RangeArea has an address property returns a comma-delimited string of range addresses 
    has a dataValidation property 
    cellCount property 
    calculate, recalculates the cell of all ranges in the RangeAreas 
    getEntireColumn(), getEntireRow() return another RangeAreas 
    copyFrom(), take either a range or a RangeAreas parameter 
    
    + details property list, https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-multiple-ranges#read-properties-of-rangeareas
    
    areas: A RangeCollection object that contains all of the ranges represented by the RangeAreas object. 
    
    getOffsetRangeAreas: Works just like Range.getOffsetRange, except that a RangeAreas is returned and it contains ranges that are each offset from one of the ranges in the original RangeAreas
    
    + create RangeAreas. Worksheet.getRanges() and pass it a string with comma-delimited range addresses. 
    
    Workbook.getSelectedRanges(). This method returns a RangeAreas representing all the ranges that are selected on the currently active worksheet
    
    Workbook.getSelectedRanges(). This method returns a RangeAreas representing all the ranges that are selected 
    
    + Do not attempt to directly add or delete members of the the RangeAreas.areas.items array. This will lead to undesirable behavior in your code
    
    + set properties on multiple ranges 
    
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var rangeAreas = sheet.getRanges("F3:F5, H3:H5");
    rangeAreas.format.fill.color = "pink";
    
    + get special cells from multiple ranges 
    
    calling the getSpecialCells or getSpecialCellsOrNullObject method on a RangeAreas object:
    
        * pass Excel.SpecialCellType.sameDataValidation as the first parameter, the method returns all cells with the same data validation rule as the upper-leftmost cell
        
        * pass Excel.SpecialCellType.sameConditionalFormat as the first parameter, the method returns all cells with the same conditional formatting as the upper-leftmost cell
        
    + read properties of RangeAreas. because a given property may have different values for different ranges within the RangeAreas. The general rule is that if a consistent value can be returned it will be returned. 
    
    var sheet = context.workbook.worksheets.getActiveWorksheet();

    // The ranges are the F column and the H column.
    var rangeAreas = sheet.getRanges("F:F, H:H");  
    rangeAreas.format.fill.color = "pink";

    rangeAreas.load("format/fill/color, isEntireColumn");
    
    
    boolean property will return false 
    non-boolean return null 
    the address property returns a comma-delimited string of the addresses 
    
- performance optimization 
    + minimize the number of sync() calls 
    
    + minimize the nubmer of proxy objects 
    
// BAD: repeated calls to .getRange() to create the same proxy object
worksheet.getRange("A1").format.fill.color = "red";
worksheet.getRange("A1").numberFormat = "0.00%";
worksheet.getRange("A1").values = [[1]];

// GOOD: create the range proxy object once and assign to a variable
var range = worksheet.getRange("A1")
range.format.fill.color = "red";
range.numberFormat = "0.00%";
range.values = [[1]];

// ALSO GOOD: use a "set" method to immediately set all the properties without even needing to create a variable!
worksheet.getRange("A1").set({
    numberFormat: [["0.00%"]],
    values: [[1]],
    format: {
        fill: {
            color: "red"
        }
    }
});

    + load necessary properties only 
object.load(string: properties);
// or
object.load(array: properties);
// or
object.load({ loadOption });

properties is the list of properties to load, specified as comma-delimited strings 
loadOption specifies an object that describes the selection, expansion, top, and skip options(https://docs.microsoft.com/en-us/javascript/api/office/officeextension.loadoption)

    + suspend excel processes temporarily
    
    suspend calculation until the next context.sync() is called.  Application Object reference documentation for information about how to use the suspendApiCalculationUntilNextSync()
    
    + suspend screen updating, Don't call suspendScreenUpdatingUntilNextSync repeatedly
    
    + Update all cells in a range 
Excel.run(function (context) {
    var sheetName = 'Sheet1';
    var rangeAddress = 'A1:A20';
    var worksheet = context.workbook.worksheets.getItem(sheetName);

    var range = worksheet.getRange(rangeAddress);
    range.numberFormat = 'm/d/yyyy';
    range.values = '3/11/2015';
    range.load('text');

    return context.sync()
      .then(function () {
        console.log(range.text);
    });
}).catch(function (error) {
    console.log('Error: ' + error);
    if (error instanceof OfficeExtension.Error) {
      console.log('Debug info: ' + JSON.stringify(error.debugInfo));
    }
});

    + importing data into tables, import a huge amount of data directly into a Table object directly

Excel.run(async (ctx) => {
    var sheet = ctx.workbook.worksheets.getItem("Sheet1");
    // Write the data into the range first 
    var range = sheet.getRange("A1:B3");
    range.values = [["Key", "Value"], ["A", 1], ["B", 2]];

    // Create the table over the range
    var table = sheet.tables.add('A1:B3', true);
    table.name = "Example";
    await ctx.sync();


    // Insert a new row to the table
    table.getDataBodyRange().getRowsBelow(1).values = [["C", 3]];
    // Change a existing row value
    table.getDataBodyRange().getRow(1).values = [["D", 4]];
    await ctx.sync();
})

    + untrack unneeded ranges 
    Range.untrack() method releases an excel range object from memory 
    
Excel.run(async (context) => {
    var largeRange = context.workbook.getSelectedRange();
    largeRange.load(["rowCount", "columnCount"]);
    await context.sync();

    for (var i = 0; i < largeRange.rowCount; i++) {
        for (var j = 0; j < largeRange.columnCount; j++) {
            var cell = largeRange.getCell(i, j);
            cell.values = [[i *j]];

            // call untrack() to release the range from memory
            cell.untrack();
        }
    }

    await context.sync();
});

- PivotTables 

Workbook.pivotTables are PivotTableCollections

These PivotHierarchies can be added to specific hierarchy collections

A PivotField contains a PivotItemCollection that has multiple PivotItems

PivotTables are organized based on four hierarchy categories: row, column, data, and filter

    + create a PivotTable
Excel.run(function (context) {
    // Create a PivotTable named "Farm Sales" on the current worksheet at cell
    // A22 with data from the range A1:E21.
    context.workbook.worksheets.getActiveWorksheet().pivotTables.add(
      "Farm Sales", "A1:E21", "A22");

    return context.sync();
});

    + Create PivotTable with range objects 
Excel.run(function (context) {
    // Create a PivotTable named "Farm Sales" on a worksheet called "PivotWorksheet" at cell A2
    // the data comes from the worksheet "DataWorksheet" across the range A1:E21.
    var rangeToAnalyze = context.workbook.worksheets.getItem("DataWorksheet").getRange("A1:E21");
    var rangeToPlacePivot = context.workbook.worksheets.getItem("PivotWorksheet").getRange("A2");
    context.workbook.worksheets.getItem("PivotWorksheet").pivotTables.add(
      "Farm Sales", rangeToAnalyze, rangeToPlacePivot);

    return context.sync();
});

    + create a PivotTable at the workbook level 
Excel.run(function (context) {
    // Create a PivotTable named "Farm Sales" on a worksheet called "PivotWorksheet" at cell A2
    // the data is from the worksheet "DataWorksheet" across the range A1:E21.
    context.workbook.pivotTables.add(
        "Farm Sales", "DataWorksheet!A1:E21", "PivotWorksheet!A2");

    return context.sync();
});

    + Use an existing PivotTable 
Excel.run(function (context) {
    var pivotTable = context.workbook.pivotTables.getItem("My Pivot");
    return context.sync();
});

    + add rows and columns to a PivotTable 
Excel.run(function (context) {
    var pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Type"));
    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Classification"));

    pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));

    return context.sync();
});

    + add data hierarchies to the PivotTable.  
    
Excel.run(function (context) {
    var pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

    // "Farm" and "Type" are the hierarchies on which the aggregation is based.
    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
    pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Type"));

    // "Crates Sold at Farm" and "Crates Sold Wholesale" are the hierarchies
    // that will have their data aggregated (summed in this case).
    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

    return context.sync();
});

    + PivotTable layouts and getting pivoted data 
    
    https://docs.microsoft.com/en-us/javascript/api/excel/excel.pivotlayout?view=excel-js-preview
    
    getFilterAxisRange()
    getColumnLabelRange()
    getDataBodyRange()
    getRowLabelRange()
    getRange(), wiil return pivot table range excelp the filter axis range 
    
Excel.run(function (context) {
    var pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

    // Get the totals for each data hierarchy from the layout.
    var range = pivotTable.layout.getDataBodyRange();
    var grandTotalRange = range.getLastRow();
    grandTotalRange.load("address");
    return context.sync().then(function () {
        // Sum the totals from the PivotTable data hierarchies and place them in a new range, outside of the PivotTable.
        var masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("E30");
        masterTotalRange.formulas = [["=SUM(" + grandTotalRange.address + ")"]];
    });
});
    + Layout types 
    Compact layout 
    Outline layout 
    Tabular Layout 
    
    + Delete 
    Excel.run(function (context) {
        context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();
        return context.sync();
    });
    
    + Slicers, https://docs.microsoft.com/en-us/javascript/api/excel/excel.slicer
    
    Slicers allow data to be filtered from an Excel PivotTable or table
    
        * Create slicer 
        Worksheet.slicers.add method, will add slicer to SlicerCollection(https://docs.microsoft.com/en-us/javascript/api/excel/excel.slicercollection)
        
        slicerSource, It can be a PivotTable, Table, or string representing the name or ID of a PivotTable or Table
        sourceField, The field in the data source by which to filter. It can be a PivotField, TableColumn, or string representing the name or ID 
        slicerDestination, The worksheet where the new slicer will be created

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Pivot");
    var slicer = sheet.slicers.add(
        "Farm Sales" /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */,
        "Type" /* The field in the data to filter by. For PivotTables, this can be a PivotField object reference or ID. */
    );
    slicer.name = "Fruit Slicer";
    return context.sync();
});

        * You add-in can adjust a slicer's display settings through Slicer properties. The slicer filters the PivotTable with items from the sourceField. The Slicer.selectItems method sets the items that remain in the slicer. 
        
        * Style and format a slicer 
Excel.run(function (context) {
    var slicer = context.workbook.slicers.getItem("Fruit Slicer");
    slicer.caption = "Fruit Types";
    slicer.left = 395;
    slicer.top = 15;
    slicer.height = 135;
    slicer.width = 150;
    slicer.style = "SlicerStyleLight6";
    return context.sync();
});

        * delete a slicer 
var sheet = context.workbook.worksheets.getActiveWorksheet();
sheet.slicers.getItemAt(0).delete();
return context.sync();

        * Change aggregation function, A ShowAsRule changes the data hierarchy to output values based on other items in the PivotTable.
        
    var pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
    pivotTable.dataHierarchies.load("no-properties-needed");
    return context.sync().then(function() {

        // Change the aggregation from the default sum to an average of all the values in the hierarchy.
        pivotTable.dataHierarchies.items[0].summarizeBy = Excel.AggregationFunction.average;
        pivotTable.dataHierarchies.items[1].summarizeBy = Excel.AggregationFunction.average;
        return context.sync();
    });

        * change hierarchy names 
    var dataHierarchies = context.workbook.worksheets.getActiveWorksheet()
        .pivotTables.getItem("Farm Sales").dataHierarchies;
    dataHierarchies.load("no-properties-needed");
    return context.sync().then(function () {
        // changing the displayed names of these entries
        dataHierarchies.items[0].name = "Farm Sales";
        dataHierarchies.items[1].name = "Wholesale";
    });

- Ranges, common tasks of range 
https://docs.microsoft.com/en-us/javascript/api/excel/excel.range

    + get a range by scope 

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("B2:C5");
    range.load("address");

    return context.sync()
        .then(function () {
            console.log(`The address of the range B2:C5 is "${range.address}"`);
        });
}).catch(errorHandlerFunction);

    + get range by name 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("MyRange");
    range.load("address");

    return context.sync()
        .then(function () {
            console.log(`The address of the range "MyRange" is "${range.address}"`);
        });
}).catch(errorHandlerFunction);

    + get used range, gets the used range from the worksheet named Sample, loads its address property, and writes a message to the console.
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getUsedRange();
    range.load("address");

    return context.sync()
        .then(function () {
            console.log(`The address of the used range in the worksheet is "${range.address}"`);
        });
}).catch(errorHandlerFunction);

    + get entire worksheet range 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange();
    range.load("address");

    return context.sync()
        .then(function () {
            console.log(`The address of the entire worksheet range is "${range.address}"`);
        });
}).catch(errorHandlerFunction);

    + insert a range of cells 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("B4:E4");

    range.insert(Excel.InsertShiftDirection.down);
    
    return context.sync();
}).catch(errorHandlerFunction);

    + clear a range of cell 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("E2:E5");

    range.clear();

    return context.sync();
}).catch(errorHandlerFunction);

    + delete a rnage of cell 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("B4:E4");

    range.delete(Excel.DeleteShiftDirection.up);

    return context.sync();
}).catch(errorHandlerFunction);

    + set the selected range. selects the range B2:E6

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("B2:E6");

    range.select();

    return context.sync();
}).catch(errorHandlerFunction);
    
    + get the selected range 
Excel.run(function (context) {
    var range = context.workbook.getSelectedRange();
    range.load("address");

    return context.sync()
        .then(function () {
            console.log(`The address of the selected range is "${range.address}"`);
        });
}).catch(errorHandlerFunction);    
    
    + set values for formulas 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var range = sheet.getRange("C3");
    range.values = [[ 5 ]]; // for single cell 
    range.format.autofitColumns();

    return context.sync();
}).catch(errorHandlerFunction);

    + set values for a range of cells 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var data = [
        ["Potato Chips", 10, 1.80],
    ];
    
    var range = sheet.getRange("B5:D5");
    range.values = data;
    range.format.autofitColumns();

    return context.sync();
}).catch(errorHandlerFunction);

    + set formula for a single cell 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var range = sheet.getRange("E3");
    range.formulas = [[ "=C3 * D3" ]];
    range.format.autofitColumns();

    return context.sync();
}).catch(errorHandlerFunction);

    + set formulat for a range of cell 
    var sheet = context.workbook.worksheets.getItem("Sample");

    var data = [
        ["=C3 * D3"],
        ["=C4 * D4"],
        ["=C5 * D5"],
        ["=SUM(E3:E5)"]
    ];
    
    var range = sheet.getRange("E3:E6");
    range.formulas = data;
    range.format.autofitColumns();

    return context.sync();
    
    + get values text or formulas 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("B2:E6");
    range.load("values");

    return context.sync()
        .then(function () {
            console.log(JSON.stringify(range.values, null, 4));
        });
}).catch(errorHandlerFunction);

//console output 
[
    [
        "Product",
        "Qty",
        "Unit Price",
        "Total Price"
    ],
    [
        "Almonds",
        2,
        7.5,
        15
    ],
    [
        "Coffee",
        1,
        34.5,
        34.5
    ],
    [
        "Chocolate",
        5,
        9.56,
        47.8
    ],
    [
        "",
        "",
        "",
        97.3
    ]
]

    + get text property from a range of cells instead of values 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("B2:E6");
    range.load("text");

    return context.sync()
        .then(function () {
            console.log(JSON.stringify(range.text, null, 4));
        });
}).catch(errorHandlerFunction);

    + get formulas from a range of cells 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var range = sheet.getRange("B2:E6");
    range.load("formulas");

    return context.sync()
        .then(function () {
            console.log(JSON.stringify(range.formulas, null, 4));
        });
}).catch(errorHandlerFunction);

    + set font color and fill color and number format 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var range = sheet.getRange("B2:E2");
    range.format.fill.color = "#4472C4";
    range.format.font.color = "white";
    
    var formats = [
        ["0.00", "0.00"],
        ["0.00", "0.00"],
        ["0.00", "0.00"]
    ];

    var range = sheet.getRange("D3:E5");
    range.numberFormat = formats;

    return context.sync();
}).catch(errorHandlerFunction);    

    + find a cell using string matching 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var table = sheet.tables.getItem("ExpensesTable");
    var searchRange = table.getRange();
    var foundRange = searchRange.find("Food", {
        completeMatch: true, // find will match the whole cell value
        matchCase: false, // find will not match case
        searchDirection: Excel.SearchDirection.forward // find will start searching at the beginning of the range
    });

    foundRange.load("address");
    return context.sync()
        .then(function() {
            console.log(foundRange.address);
    });
}).catch(errorHandlerFunction);

    + work with dates using the moment - MSDate plug-in 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var now = Date.now();
    var nowMoment = moment(now);
    var nowMS = nowMoment.toOADate();

    var dateRange = sheet.getRange("B4");
    dateRange.values = [[nowMS]];

    dateRange.numberFormat = [["[$-409]m/d/yy h:mm AM/PM;@"]];

    return context.sync();
}).catch(errorHandlerFunction);

    + get the date back out of the cell and convert it to a moment or other format 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var dateRange = sheet.getRange("B4");
    dateRange.load("values");

    return context.sync().then(function () {
        var nowMS = dateRange.values[0][0];

        // log the date as a moment
        var nowMoment = moment.fromOADate(nowMS);
        console.log(`get (moment): ${JSON.stringify(nowMoment)}`);

        // log the date as a UNIX-style timestamp
        var now = nowMoment.unix();
        console.log(`get (timestamp): ${now}`);
    });
}).catch(errorHandlerFunction);

    + get special cells within a range 
getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;

    + cut, copy and paste 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    // copy everything from "A1:E1" into "G1" and the cells afterwards ("G1:K1")
    sheet.getRange("G1").copyFrom("A1:E1");
    return context.sync();
}).catch(errorHandlerFunction);

copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;

//The Range.moveTo method moves cells to a new location in the workbook.

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    sheet.getRange("F1").values = [["Moved Range"]];

    // Move the cells "A1:E1" to "G1" (which fills the range "G1:K1").
    sheet.getRange("A1:E1").moveTo("G1");
    return context.sync();
});

The Range.removeDuplicates method removes rows with duplicate entries in the specified columns.

    + Group data for an outline. Use Range.group to make these outline groups.
    // Group the larger, main level. Note that the outline controls
    // will be on row 10, meaning 4-9 will collapse and expand.
    sheet.getRange("4:9").group(Excel.GroupOption.byRows);

    // Group the smaller, sublevels. Note that the outline controls
    // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
    sheet.getRange("4:5").group(Excel.GroupOption.byRows);
    sheet.getRange("7:8").group(Excel.GroupOption.byRows);


- Run code on document open 

Office.addin.setStartupBehavior(Office.StartupBehavior.load);

//get current load behavior of the office app
let behavior = await Office.addin.getStartupBehavior();

//This is called as soon as the document opens.
//Put your startup code here.
Office.initialize = () => {
  // Add the event handler
  Excel.run(async context => {
    let sheet = context.workbook.worksheets.getActiveWorksheet();
    sheet.onChanged.add(onChange);

    await context.sync();
    console.log("A handler has been registered for the onChanged event.");
  });
};

/**
 * Handle the changed event from the worksheet.
 *
 * @param event The event information from Excel
 */
async function onChange(event) {
  return Excel.run(function(context) {
    return context.sync().then(function() {
      console.log("Change type of event: " + event.changeType);
      console.log("Address of event: " + event.address);
      console.log("Source of event: " + event.source);
    });
  });
}

- Shapes,  images in conjunction with the Shape and ShapeCollection APIs. Charts are covered in their own article

https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-shapes

    + type of shapes 
    Geometric Shape 
    Image 
    Line 
    SVG 
    Text box 
    
    + example 
Excel.run(function (context) {
    var shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
    var rectangle = shapes.addGeometricShape(Excel.GeometricShapeType.rectangle);
    rectangle.left = 100;
    rectangle.top = 100;
    rectangle.height = 150;
    rectangle.width = 150;
    rectangle.name = "Square";
    return context.sync();
}).catch(errorHandlerFunction);

- Charts, reference 
https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-charts

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var dataRange = sheet.getRange("A1:B13");
    var chart = sheet.charts.add("Line", dataRange, "auto");

    chart.title.text = "Sales Data";
    chart.legend.position = "right"
    chart.legend.format.fill.setSolidColor("white");
    chart.dataLabels.format.font.size = 15;
    chart.dataLabels.format.font.color = "black";

    return context.sync();
}).catch(errorHandlerFunction);

- Show or hide an Office add-in 
    + office addin include parts 
    task pane 
    UI-less function file 
    an excel custom function 
    
    + configure an add-in to use a shared runtime 
    https://docs.microsoft.com/en-us/office/dev/add-ins/excel/configure-your-add-in-to-use-a-shared-runtime
    
When you add the Runtime element, you also specify a lifetime with a value of long or short. Set this value to long to take advantage of features such as starting your add-in when the document opens, continuing to run code after the task pane is closed, or using CORS and DOM from custom functions

    + preservation of state. The hide() and showAsTaskpane() methods only change the visibility of the task pane. They do not unload or reload it (or reinitialize its state).

    + handle visibility changed event 
Office.addin.onVisibilityModeChanged(function(args) {
    if (args.visibilityMode = "Taskpane"); {
        // Code that runs whenever the task pane is made visible.
        // For example, an Excel.run() that loads the names of
        // all worksheets and passes them to the task pane UI.
    }
});

var removeVisibilityModeHandler =
    Office.addin.onVisibilityModeChanged(function(args) {
        if (args.visibilityMode = "Taskpane"); {
            // Code that runs whenever the task pane is made visible.
        }
    });


// In some later code path, deregister with:
removeVisibilityModeHandler();

var removeVisibilityModeHandler =
    await Office.addin.onVisibilityModeChanged(function(args) {
        if (args.visibilityMode = "Taskpane"); {
            // Code that runs whenever the task pane is made visible.
        }
    });

- Tables 
https://docs.microsoft.com/en-us/javascript/api/excel/excel.table
https://docs.microsoft.com/en-us/javascript/api/excel/excel.tablecollection
    + create a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.add("A1:D1", true /*hasHeaders*/);
    expensesTable.name = "ExpensesTable";

    expensesTable.getHeaderRowRange().values = [["Date", "Merchant", "Category", "Amount"]];

    expensesTable.rows.add(null /*add rows to the end of the table*/, [
        ["1/1/2017", "The Phone Company", "Communications", "$120"],
        ["1/2/2017", "Northwind Electric Cars", "Transportation", "$142"],
        ["1/5/2017", "Best For You Organics Company", "Groceries", "$27"],
        ["1/10/2017", "Coho Vineyard", "Restaurant", "$33"],
        ["1/11/2017", "Bellows College", "Education", "$350"],
        ["1/15/2017", "Trey Research", "Other", "$135"],
        ["1/15/2017", "Best For You Organics Company", "Groceries", "$97"]
    ]);

    if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();
    }

    sheet.activate();

    return context.sync();
}).catch(errorHandlerFunction);

    + add rows to a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    expensesTable.rows.add(null /*add rows to the end of the table*/, [
        ["1/16/2017", "THE PHONE COMPANY", "Communications", "$120"],
        ["1/20/2017", "NORTHWIND ELECTRIC CARS", "Transportation", "$142"],
        ["1/20/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries", "$27"],
        ["1/21/2017", "COHO VINEYARD", "Restaurant", "$33"],
        ["1/25/2017", "BELLOWS COLLEGE", "Education", "$350"],
        ["1/28/2017", "TREY RESEARCH", "Other", "$135"],
        ["1/31/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries", "$97"]
    ]);

    if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();
    }

    return context.sync();
}).catch(errorHandlerFunction);

    + add columns to a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    expensesTable.columns.add(null /*add columns to the end of the table*/, [
        ["Day of the Week"],
        ["Saturday"],
        ["Friday"],
        ["Monday"],
        ["Thursday"],
        ["Sunday"],
        ["Saturday"],
        ["Monday"]
    ]);

    if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();
    }

    return context.sync();
}).catch(errorHandlerFunction);

    + add conlumns that contains formulas 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    expensesTable.columns.add(null /*add columns to the end of the table*/, [
        ["Type of the Day"],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")'],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")'],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")'],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")'],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")'],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")'],
        ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd") = "Sunday")), "Weekend", "Weekday")']
    ]);

    if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();
    }

    return context.sync();
}).catch(errorHandlerFunction);

    + update column name 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var expensesTable = sheet.tables.getItem("ExpensesTable");
    expensesTable.columns.load("items");

    return context.sync()
        .then(function () {
            expensesTable.columns.items[0].name = "Purchase date";

            if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
                sheet.getUsedRange().format.autofitColumns();
                sheet.getUsedRange().format.autofitRows();
            }

            return context.sync();
        });
}).catch(errorHandlerFunction);

    + get data from a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    // Get data from the header row
    var headerRange = expensesTable.getHeaderRowRange().load("values");

    // Get data from the table
    var bodyRange = expensesTable.getDataBodyRange().load("values");

    // Get data from a single column
    var columnRange = expensesTable.columns.getItem("Merchant").getDataBodyRange().load("values");

    // Get data from a single row
    var rowRange = expensesTable.rows.getItemAt(1).load("values");

    // Sync to populate proxy objects with data from Excel
    return context.sync()
        .then(function () {
            var headerValues = headerRange.values;
            var bodyValues = bodyRange.values;
            var merchantColumnValues = columnRange.values;
            var secondRowValues = rowRange.values;

            // Write data from table back to the sheet
            sheet.getRange("A11:A11").values = [["Results"]];
            sheet.getRange("A13:D13").values = headerValues;
            sheet.getRange("A14:D20").values = bodyValues;
            sheet.getRange("B23:B29").values = merchantColumnValues;
            sheet.getRange("A32:D32").values = secondRowValues;

            // Sync to update the sheet in Excel
            return context.sync();
        });
}).catch(errorHandlerFunction);

    + detected table changed 
    https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-events#register-an-event-handler
    
Excel.run(function (context) {
    var worksheet = context.workbook.worksheets.getItem("Sample");
    worksheet.onChanged.add(handleChange);

    return context.sync()
        .then(function () {
            console.log("Event handler successfully registered for onChanged event in the worksheet.");
        });
}).catch(errorHandlerFunction);
    
// This function would be used as an event handler for the Table.onChanged event.
function onTableChanged(eventArgs) {
    Excel.run(function (context) {
        var details = eventArgs.details;
        var address = eventArgs.address;

        // Print the before and after types and values to the console.
        console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
            + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
        return context.sync();
    });
}

//eanble and disable events 
Excel.run(function (context) {
    context.runtime.load("enableEvents");
    return context.sync()
        .then(function () {
            var eventBoolean = !context.runtime.enableEvents;
            context.runtime.enableEvents = eventBoolean;
            if (eventBoolean) {
                console.log("Events are currently on.");
            } else {
                console.log("Events are currently off.");
            }
        }).then(context.sync);
}).catch(errorHandlerFunction);

    + sort data in a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    // Queue a command to sort data by the fourth column of the table (descending)
    var sortRange = expensesTable.getDataBodyRange();
    sortRange.sort.apply([
        {
            key: 3,
            ascending: false,
        },
    ]);

    // Sync to run the queued command in Excel
    return context.sync();
}).catch(errorHandlerFunction);

    + apply filters to a table 

Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    // Queue a command to apply a filter on the Category column
    filter = expensesTable.columns.getItem("Category").filter;
    filter.apply({
        filterOn: Excel.FilterOn.values,
        values: ["Restaurant", "Groceries"]
    });

    // Queue a command to apply a filter on the Amount column
    var filter = expensesTable.columns.getItem("Amount").filter;
    filter.apply({
        filterOn: Excel.FilterOn.dynamic,
        dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage
    });

    // Sync to run the queued commands in Excel
    return context.sync();
}).catch(errorHandlerFunction);

    + clear filter 
expensesTable.clearFilters();

    + get visible range of a table 
    
    var visibleRange = expensesTable.getDataBodyRange().getVisibleView();
    visibleRange.load("values");
    
    + apply auto filter 
//https://docs.microsoft.com/en-us/javascript/api/excel/excel.autofilter
    
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    expensesTable.autoFilter.apply(expensesTable.getRange(), 2, {
        filterOn: Excel.FilterOn.values,
        values: ["Restaurant", "Groceries"]
    });
    expensesTable.autoFilter.apply(expensesTable.getRange(), 3, {
        filterOn: Excel.FilterOn.dynamic,
        dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage
    });

    return context.sync();
}).catch(errorHandlerFunction);
    
    + format a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var expensesTable = sheet.tables.getItem("ExpensesTable");

    expensesTable.getHeaderRowRange().format.fill.color = "#C70039";
    expensesTable.getDataBodyRange().format.fill.color = "#DAF7A6";
    expensesTable.rows.getItemAt(1).getRange().format.fill.color = "#FFC300";
    expensesTable.columns.getItemAt(0).getDataBodyRange().format.fill.color = "#FFA07A";

    return context.sync();
}).catch(errorHandlerFunction);
    
    + Convert a range to a table 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    // Define values for the range
    var values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"],
    ["Frames", 5000, 7000, 6544, 4377],
    ["Saddles", 400, 323, 276, 651],
    ["Brake levers", 12000, 8766, 8456, 9812],
    ["Chains", 1550, 1088, 692, 853],
    ["Mirrors", 225, 600, 923, 544],
    ["Spokes", 6005, 7634, 4589, 8765]];

    // Create the range
    var range = sheet.getRange("A1:E7");
    range.values = values;

    if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();
    }

    sheet.activate();

    // Convert the range to a table
    var expensesTable = sheet.tables.add('A1:E7', true);
    expensesTable.name = "ExpensesTable";

    return context.sync();
}).catch(errorHandlerFunction);
    
    + import JSON data 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");

    var expensesTable = sheet.tables.add("A1:D1", true /*hasHeaders*/);
    expensesTable.name = "ExpensesTable";
    expensesTable.getHeaderRowRange().values = [["Date", "Merchant", "Category", "Amount"]];

    var transactions = [
      {
        "DATE": "1/1/2017",
        "MERCHANT": "The Phone Company",
        "CATEGORY": "Communications",
        "AMOUNT": "$120"
      },
      {
        "DATE": "1/1/2017",
        "MERCHANT": "Southridge Video",
        "CATEGORY": "Entertainment",
        "AMOUNT": "$40"
      }
    ];

    var newData = transactions.map(item =>
        [item.DATE, item.MERCHANT, item.CATEGORY, item.AMOUNT]);

    expensesTable.rows.add(null, newData);

    if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();
    }

    sheet.activate();

    return context.sync();
}).catch(errorHandlerFunction);

- Workbooks 
https://docs.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-workbooks
    + get active cell or selected rnage 
Excel.run(function (context) {
    var activeCell = context.workbook.getActiveCell();
    activeCell.load("address");

    return context.sync().then(function () {
        console.log("The active cell is " + activeCell.address);
    });
}).catch(errorHandlerFunction);

Excel.run(function(context) {
    var range = context.workbook.getSelectedRange();
    range.format.fill.color = "yellow";
    return context.sync();
}).catch(errorHandlerFunction);

    + create a workbook 
    
Excel.createWorkbook();

var myFile = document.getElementById("file");
var reader = new FileReader();

reader.onload = (function (event) {
    Excel.run(function (context) {
        // strip off the metadata before the base64-encoded string
        var startIndex = reader.result.toString().indexOf("base64,");
        var workbookContents = reader.result.toString().substr(startIndex + 7);

        Excel.createWorkbook(workbookContents);
        return context.sync();
    }).catch(errorHandlerFunction);
});

// read in the file as a data URL so we can parse the base64-encoded string
reader.readAsDataURL(myFile.files[0]);

    + protected workbook's structure 
Excel.run(function (context) {
    var workbook = context.workbook;
    workbook.load("protection/protected");

    return context.sync().then(function() {
        if (!workbook.protection.protected) {
            workbook.protection.protect();
        }
    });
}).catch(errorHandlerFunction);

    + access document properties 
Excel.run(function (context) {
    var docProperties = context.workbook.properties;
    docProperties.author = "Alex";
    return context.sync();
}).catch(errorHandlerFunction);

Excel.run(function (context) {
    var customDocProperties = context.workbook.properties.custom;
    customDocProperties.add("Introduction", "Hello");
    return context.sync();
}).catch(errorHandlerFunction);

[...]

Excel.run(function (context) {
    var customDocProperties = context.workbook.properties.custom;
    var customProperty = customDocProperties.getItem("Introduction");
    customProperty.load("key, value");

    return context.sync().then(function() {
        console.log("Custom key  : " + customProperty.key); // "Introduction"
        console.log("Custom value : " + customProperty.value); // "Hello"
    });
}).catch(errorHandlerFunction);

    + access document settings 
Excel.run(function (context) {
    var settings = context.workbook.settings;
    settings.add("NeedsReview", true);
    var needsReview = settings.getItem("NeedsReview");
    needsReview.load("value");

    return context.sync().then(function() {
        console.log("Workbook needs review : " + needsReview.value);
    });
}).catch(errorHandlerFunction);

    + access application culture settings 
    https://docs.microsoft.com/en-us/javascript/api/excel/excel.cultureinfo

    + add custom xml data to the workbook 
Excel.run(async (context) => {
    // Add reviewer data to the document as XML
    var originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
    var customXmlPart = context.workbook.customXmlParts.add(originalXml);
    customXmlPart.load("id");

    return context.sync().then(function() {
        // Store the XML part's ID in a setting
        var settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);
    });
}).catch(errorHandlerFunction);

    + save workbook 
    context.workbook.save(Excel.SaveBehavior.prompt);
    
    + close workbook 
    context.workbook.close(Excel.CloseBehavior.save);

- Worksheets 
https://docs.microsoft.com/en-us/javascript/api/excel/excel.worksheet
https://docs.microsoft.com/en-us/javascript/api/excel/excel.worksheetcollection
    + get worksheet 
    
Excel.run(function (context) {
    var sheets = context.workbook.worksheets;
    sheets.load("items/name");

    return context.sync()
        .then(function () {
            if (sheets.items.length > 1) {
                console.log(`There are ${sheets.items.length} worksheets in the workbook:`);
            } else {
                console.log(`There is one worksheet in the workbook:`);
            }
            sheets.items.forEach(function (sheet) {
              console.log(sheet.name);
            });
        });
}).catch(errorHandlerFunction);

    + get the active worksheet 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    sheet.load("name");

    return context.sync()
        .then(function () {
            console.log(`The active worksheet is "${sheet.name}"`);
        });
}).catch(errorHandlerFunction);

    + set the active worksheet 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    sheet.activate();
    sheet.load("name");

    return context.sync()
        .then(function () {
            console.log(`The active worksheet is "${sheet.name}"`);
        });
}).catch(errorHandlerFunction);

    + reference worksheets by relative position 
Excel.run(function (context) {
    var firstSheet = context.workbook.worksheets.getFirst();
    firstSheet.load("name");

    return context.sync()
        .then(function () {
            console.log(`The name of the first worksheet is "${firstSheet.name}"`);
        });
}).catch(errorHandlerFunction);

    + get last worksheet 
Excel.run(function (context) {
    var lastSheet = context.workbook.worksheets.getLast();
    lastSheet.load("name");

    return context.sync()
        .then(function () {
            console.log(`The name of the last worksheet is "${lastSheet.name}"`);
        });
}).catch(errorHandlerFunction);

    + get next and previous 
Excel.run(function (context) {
    var currentSheet = context.workbook.worksheets.getActiveWorksheet();
    var nextSheet = currentSheet.getNext();
    var previousSheet = currentSheet.getPrevious();
    nextSheet.load("name");

    return context.sync()
        .then(function () {
            console.log(`The name of the sheet that follows the active worksheet is "${nextSheet.name}"`);
        });
}).catch(errorHandlerFunction);

    + add new 
Excel.run(function (context) {
    var sheets = context.workbook.worksheets;

    var sheet = sheets.add("Sample");
    sheet.load("name, position");

    return context.sync()
        .then(function () {
            console.log(`Added worksheet named "${sheet.name}" in position ${sheet.position}`);
        });
}).catch(errorHandlerFunction);

    + copy and delete 
Excel.run(function (context) {
    var myWorkbook = context.workbook;
    var sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
    var copiedSheet = sampleSheet.copy(Excel.WorksheetPositionType.after, sampleSheet);
    sampleSheet.delete();
    return context.sync();
});
    + work visibility 
    sheet.visibility = Excel.SheetVisibility.visible;

    + get a single cell within a worksheet 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var cell = sheet.getCell(1, 4);
    cell.load("address, values");

    return context.sync()
        .then(function() {
            console.log(`The value of the cell in row 2, column 5 is "${cell.values[0][0]}" and the address of that cell is "${cell.address}"`);
        })
}).catch(errorHandlerFunction);

    + detect data changes 
// This function would be used as an event handler for the Worksheet.onChanged event.
function onWorksheetChanged(eventArgs) {
    Excel.run(function (context) {
        var details = eventArgs.details;
        var address = eventArgs.address;

        // Print the before and after types and values to the console.
        console.log(`Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),`
            + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
        return context.sync();
    });
}

    + handle sorting events, onColumnSorted, onRowSorted
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();

    // This will fire whenever a row has been moved as the result of a sort action.
    sheet.onRowSorted.add(function (event) {
        return Excel.run(function (context) {
            console.log("Row sorted: " + event.address);
            var sheet = context.workbook.worksheets.getActiveWorksheet();

            // Clear formatting for section, then highlight the sorted area.
            sheet.getRange("A1:E5").format.fill.clear();
            if (event.address !== "") {
                sheet.getRanges(event.address).format.fill.color = "yellow";
            }

            return context.sync();
        });
    });

    return context.sync();
}).catch(errorHandlerFunction);

    + find all cells with matching text 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getItem("Sample");
    var foundRanges = sheet.findAll("Complete", {
        completeMatch: true, // findAll will match the whole cell value
        matchCase: false // findAll will not match case
    });

    return context.sync()
        .then(function() {
            foundRanges.format.fill.color = "green"
    });
}).catch(errorHandlerFunction);

    + filer data 
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    var farmData = sheet.getUsedRange();

    // This filter will only show the rows with the top 25% of values in column 3.
    sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
    return context.sync();
}).catch(errorHandlerFunction);

    + data protection, https://docs.microsoft.com/en-us/javascript/api/excel/excel.worksheetprotection
Excel.run(function (context) {
    var activeSheet = context.workbook.worksheets.getActiveWorksheet();
    activeSheet.load("protection/protected");

    return context.sync().then(function() {
        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect();
        }
    })
}).catch(errorHandlerFunction);

    + layout and print
Excel.run(function (context) {
    var sheet = context.workbook.worksheets.getActiveWorksheet();
    sheet.horizontalPageBreaks.add("A21:E21"); // The page break is added above this range.
    return context.sync();
}).catch(errorHandlerFunction);


## Custom functions 
- Overview 
- Get start with excel 
...


## Excel addin samples 
- github 
https://github.com/OfficeDev/Office-Add-in-Commands-Samples
https://github.com/OfficeDev/Office-Add-in-Fabric-UI-Sample
https://github.com/OfficeDev/Office-Add-in-NodeJS-SSO
https://github.com/OfficeDev/Office-Addin-Scripts
https://github.com/OfficeDev/OData-Excel-Integration-Add-In-Sample
https://github.com/OfficeDev/office-addin-validator
https://github.com/OfficeDev/Office-Add-in-Dialog-API-Simple-Example
https://github.com/OfficeDev/Office-Add-in-JavaScript-FileDownload
https://github.com/OfficeDev/Office-Addin-TaskPane-Angular
https://github.com/OfficeDev/Word-Add-in-AngularJS-Client-OAuth
https://github.com/OfficeDev/Outlook-Add-in-JavaScript-ValidateIdentityToken
https://github.com/OfficeDev/script-lab


# OneNote 
# Outlook 
# PowerPoint 
# Project 
# Visio 
# Word 

# Patterns and practices 


# API Reference 
- Overview 

https://docs.microsoft.com/en-us/javascript/api/overview?view=word-js-preview

- Word 
- Common API 
    + Office 
    https://docs.microsoft.com/en-us/javascript/api/office?view=excel-js-preview
    + Office Extension, an abstract proxy object that represents an object in an office document. you create proxy objects from the context 
    
    + Office Runtime 
    
    contains functions for checking API requirement-set 
    
    OfficeRuntime.ApiInformation 
    ...


- Excel 
 https://docs.microsoft.com/en-us/javascript/api/excel?view=excel-js-preview

- Common API 









    
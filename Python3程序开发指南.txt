Python 文档查找地址 http://docs.python.org处查找
Python 文件以 *.py命名
编译方法， Python.exe *.py

Python 的GUI库，PyGtk, PyQt, wxPython

数据类型
整形，int; 字符串，str(unicode)；实际编程时无需指定

Python使用unicode编码，编程中可以使用任何特殊符号作为标识符。

对象索引，所有的变量等都是引用的，建立时会首先查找内存存在则指向，否则建立

type()返回给数据项的数据类型
print()函数用于打印输出

组合数据类型
其中两种是，可以存储任何类型的内容；
元数组，长度固定；使用逗号创建
"1","2","3"
('1','2','3') //建立元数组
列表，需要时可改变大小；
[1,3,"3"]  //创建列表
添加元素 list.append(parameter)
使用len()函数直接可以得到长度

逻辑操作
is 操作，检测两个引用是否引用同一个内存地址
内存中的空对象使用关键字none表示
加 not 进行非检测

二进制比较操作符，比较引用的值是否相等
<, <=, ==, != , >=, > 

流程控制语句
If expression:
  code
elif expresion:
  code
else:
  code
  
while expression:
  code
code中含有continue, break语句来控制循环的执行方向。通过缩进来表示循环的while的作用范围

for variable in variable
  code
  
异常处理
try
  code
except exception1 as variable1:
  code
except exceptionN as variableN:
...
[else:]
  code
[finally:]
  code
没有异常发生的时候，else块将被执行，无论任何时候finally块被执行
异常结构
object
|
baseException
|
exception
|
arithmeticError; environmentError; eofError; lookupError; valueError
|                       |                           |            |     
IoError              OsError                    IndexError   KeyError
产生异常
raise Exception(args)
自定义异常
class exceptionName( baseException ): pass
捕获异常后可以使用isInstance()函数来捕获异常

算数运算
+, -, *, /, +=, -=, 推荐使用二元操作数
重载操作符的效率一般没有直接调用函数的效率高

输入输出函数
input(), print()

导入模块
import systemBlock

关键字
and, continue, except, global, lambda, pass, while, as, def, False, if, None, raise, with, assert, del, finally, import, nonlocal, return, yield, break, elif, for, in, not, True, class, else, from , is, or, try

下划线的使用，python内置变量的开头结尾都使用了_，编程时避免使用类似的方法
单个下划线代表最后一个表达式的执行结果，如计算的结果 _

数字类型
fractions.fraction，标准库中精度不受限制的数据类型，用于科学与数学计算中

输出重定向到文件
*.py > FileName

定义函数
def functionName(parameters):
  code
一般函数的调用格式是，模块名.函数名；使用某个模块内的函数时要首先引入模块

整数操作
x // y  整数操作，对结果四舍五入，等于round()方法
x ** y  x的y次幂
divmod(x,y)  返回x,y相除的商和余数
pow(x, y, z) 执行 pow(x, y) % z
整数类型转换
bin(i)  返回i的二进制数；hex(i); int(i) 不进位; oct(i) 八进制
整数位逻辑操作
i|j  或； i^j 异或; i & j; i << j 不检查溢出; i >> j；～i取反

布尔
True, False

浮点
floatS提供17个数字的精度

Math数学模块，内部有多种数学处理函数

复数，构造使用i, j来表示虚步，与matlab中相同；可以使用cmath模块来进行复数的数学运算

十进制数字 Decimal

字符串转义字符
\newline 忽略换行; \N{name} 给定名称的unicode字符；
其他于C相同
字符串比较，要注意unicode使用两种或更多种字节序列表示，解决的方法是比较时导入 unicodedata模块并以NFKD为第一个参数来调用unicodedata.normalize()
另一问题的相同的字符在不同的国家排序顺序可能不同，但python并不推测，只是按照字母顺序进行排序
字符串具有两种索引，一种同C；一种是负索引字符串的最后一个是-1,向前逐渐减小
字节调用部分字符串的方法类似于matlab，  aryName[start : end ：[step]],若果步长为负则默认起始位置为-1, 否则默认是0
字符串类具有各种操作方法，使用string.format()方法进行字符串格式化，对列表等集合类参数引用的时候类似于C#
str.encode()方法来改变编码方式

组合数据类型
python提供了5种数据类型，byteArray,bytes, list, str, tuple
支持的操作in, len(), 分片[]，并且是可以迭代的
元组，是一个有序表，包含0个到多个对象，可以使用list()将其转换为列表
列表，是动态的数据集合，在取消引用后无法确定是否被垃圾回收期回收的情况下可以使用try...finally或者使用with语句
集合类型set也是一种集合类型，只有可哈希运算的对象可以添加到集合中
{32,"awe",1,0,-29}
也可以使用set()函数来进行建立集合，元素个数可以为0
固定集合，frozenset()方法创建的集合不能修改，具有固定长度
映射类型，是键-值组合的，无序的映射类型dict与以标准库中的collections.OrderedDict，构造函数dict()
objDict = dic({"id":1948, "name":"Washer", "size":3})
有序字典collection.order()，使用方法与无序字典一样，只不过字典内容的顺序与插入的元素的值相关
iterable数据类型每次返回其中的一个数据项，没有数据项时产生stopIteration异常
对象的深度复制，引入块 copy.deepcopy()

自定义函数
可以创建四种函数，全局，局部，lambda，方法；函数是在执行def语句的时候创建的
局部函数，是创建在其他函数内的，例如在一个函数内创建一个其他函数无法看到的小的helper 函数
方法，是与特定数据类型关联的函数
帮助器可以通过输入q或quit()来退出帮助
对于函数的参数可以传递一个集合对象来完成，并在集合(包含元组，列表等)对象前加 **来将集合对象中的每个元素值分配给函数的各个参数
functionName(parameter0, parameter1, ... )  //定义
functionName( **objCollection )   //调用
lambda表达式，创建使用如下格式
lambda [parameters]:[(]expression[)]
其中expression不能含有return, yield语句；建立后返回匿名函数；对于为expression为元组或为lambda函数为其他函数参数的时候expression的要加括号

全局变量，引用的时候使用global语句

断言，前提与后果使用assert语句指定
assert booleanExpression, optionnalExpresion
如果booleanExpression为false则产生assertionError异常，并将optionalExpression作为异常的参数进行传递

模块，简单的说就是一个*.py文件；导入方法
import moldName
import moldName0, moldName1, ...
import moldName as preferedName  //用于两个模块中有相同函数名得情况
from moldPlace import moldName as preferedName
文件存储的目录名与模块名不要冲突
自定义模块，

编译器直接执行代码 python -c "command string"

包，就是一个目录

标准库，涵盖了大概200个左右的包与模块，并且有丰富的第三方模块
io.string  类
fileinput  模块
calendar  模块
bisect  模块提供的函数可以搜索有序序列
collection 包
array 模块
weakref 弱引用
提供了对各种文件编码的支持，如base64模块提供对读写rfc3548指定的base16,base32,base64等文件的读取；处理压缩文件等
shutil 模块提供了用于文件与目录处理的高层函数
filecmp 模块用于处理文件比较
os 模块提供了对操作系统的访问接口
针对网络
socket模块提供了大多数基本的网络功能；加密与认证可以使用ss1模块建立；socketserver模块提供了tcp与udp服务器，通过forking()可以创建单独的进程
定义了wsgi，为web服务器与python的应用程序之间提供了一个标准的接口
http.cookies模块与http.cookiejar模块提供了用于管理cookies的函数
cgi脚本支持则是由cgi模块与cgitb模块提供的
http.client模块提供处理http请求；html与xml可以使用http.parser模块进行分析；urllib.parse模块可以创建于分析url；ftplib, smtpd, xml.dom, xml.dom.minidom

面向对象程序设计
自定义类
class className([baseClass]):
  code

函数方法修饰器
@positive_result
def funName():
  code
同类的修饰器还有，@functiools.wraps

上下文管理器，with语句
with expression as variable:
  code
  
@delegate类修饰器
抽象基类，abc.className
抽象函数
@abc.abstractmethod
def functionName()
  code
  
多重继承，python支持多重继承
class className( baseClass0, baseClass1 )
  code
  
元类，元类用于创建类
使用isinstance()来判断某个实例是否属于某个类
issubclass()来判断某个类对象
元类用途之一是让自定义类适合Python标准的ABC体系，可以将自定义类注册为某个Python类得之类，等同于从其继承
collection.Sequence.register( className )

函数型设计，函数或者不修改自己的参数，或者不引用或者改变程序的状态，或者将结果作为返回值。也就是实现完全的解耦合
三个概念，映射，过滤，降低
operator模块实现了所有用于函数型程序设计的操作函数
还包括一些降低处理函数，all()该函数接受一个iterable，如果每个数据项bool()检测都为真则返回true,any()一个为true返回true,max()返回最大的项，min()返回最小的
map(), filte(), functools,reduce()通常可以消除循环

偏函数，是使用现存的某些函数来创建新函数，创建函数与原函数指定的功能相同,但是某些参数是固定的
使用functools类来建立偏函数,例子
funNewName = functools( funName, parameter )
常用在处理GUI函数中，例如
loadButton = obj.Button(frame, text = "Load", command = functools.partial(doAction, "Load"))

协程，也是一种函数，特点是处理过程可以在特定点挂起与恢复，典型应用是执行到某个特定语句后挂起等待某项数据；可以作为线程的替代品，代价更少；Python是一个从yield表达式提取输入的函数，也可以将处理结果发送给指定接受者
Python Package Index( pypi.python.org/pypi )提供了一些基于协程的包，提供了轻量级的线程功能
创建协程就是在函数中创建一个带有yield表达式即可，用yield表达式挂起与恢复函数
@coroutine为协程调用内置的next()函数

构成流水线，就是一个函数，或者多个函数的组合；类似于C#中的托管函数；经常组合使用协程与流水函数来完成某一特定的任务或者数据处理

调试、测试与profiling
TDD，由开发驱动的测试，分块开发
测试模块，unittest.TestCase类，提供了多种测试方法
profiling, 程序的品质与效率，注意程序的数据结构与算法；原则，只读数据使用元组；使用生成器，而不是创建大的元表或列表，并在其上做迭代处理，尽量使用python的内置数据结构，如字典，列表,tuples等
代码时间测试模块，timeit,用于对一掉段python代码进行计时；另一个是cProfile模块，可以用于profile程序的性能
timeit.Timer(code)
minsec = t.timerit(repeatTime) //得到的是毫秒

进程与线程
多进程，多线程，Unix上可以使用exec与fork完成




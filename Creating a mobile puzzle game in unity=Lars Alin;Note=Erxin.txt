Creating a mobile puzzle game in unity=Lars Alin;Note=Erxin

# Introduction 
- turn off light is the famous puzzle game 
- add a cube, add direction light 

public class lightSwitch: MonoBehavior {

    public bool isOn = false;
    
    void Start(){
    
    }
    
    void Update() {
    
    }
    
    public void Change(){
        if(isOn){
            isOn = false;
            this.transform.localEulerAngles = new Vector(0, 45,0);
        }
        else 
        {
            isOn = true;
            this.transform.localEulerAngles = Vector3.zero;
        }
    }
}

drage the source script to the cube 

- drage the cube with script to resource to create a prefab and we could delete the cube. name the prefab of the cube as Cube 

- lets create the turnManager script to manage and create grid of lights 

public class turnManager: MonoBehavior {
    void Start(){
        int count = 1;
        
        for(int i = 0; i < 5; i ++){
            for(int j = 0; j < 5; j ++){
                GameObject tmpGb = Instantiate(Resource.Load("Cube", typeof(GameObject))) as GameObject;
                
                tmpGb.transform.position = new Vector3(j * 1.5f - 3, i * 1.5+3, 0);
                
                tmpGb.name = count.ToString();
                count ++;
            }
        }
    }
    
    void Update(){
        if(Input.GetMouseButtonUp()){
            RaycastHit hit = new RaycastHit();
            Ray ray = Camera.main.ScreenPOintToRay(Input.mousePosition);
            if(Physics.Raycast(ray, out hit, 200)){
                makeMove(int.Parse(hit.collider.gameObject.name));
            }
        }
    }
    
    void makeMove(int name){
    
        turn(name);
        turn(name + 5);
        turn(name - 5);
        if(name != 0){
            turn(name + 1);
        }
    }
    
    void turn(int name){
        if(name < 1 || name > 25){
            return ;
        }
        
        GameObject turnObj= GameObject.Find(name.ToString()).gameObject;
        turnObj.GetComponent<lightSwitch>().change();
    }
}

drag and drop the turnManager script into the main camera and click play to test the scripts 

- loading level data from an external xml file 
    + create levelHandler script and attach it to the main camera 
using System.Collections.Generic;
    
public class LevelHandler:MonoBehavior{
    XmlDocument levelDoc;
    XmlNodeList levelList;
    List<string> levelArray;
    
    void Start(){
        levelArray = new List<string>();
        levelDoc = new XulDocument();
        
        TestAsset xmlfile = Resource.Load("levels", typeof(TextAsset)) as TextAsset;
        levelDoc.LoadXml(xmlfile.text);
        levelList = levelDoc.GetElementByTagName("level");
        foreach(xmlNode leveldata in levelist){
            XmlNodeList levelinfo = leveldata.ChildNodes;
            foreach(XmlNode datain levelinfo){
                ,,,
            }
        }
    }
}

- save xml file and create a level editor 
...
- creating levels and updating the visuals 

- setting the overall game flow 

- creating a modern GUI 

- addressing overal game functionsand content 

- finalizing the game and deploy it as iphone application 
    + project setting | player | swtch from SDK to the simulator version 


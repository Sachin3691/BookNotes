Creating Collectible Items for 2d Games in Unity=Joshua Kinney;Note=Erxin

# Creating Collectible Items for 2d Games in Unity 
- add coin animation by the Window|Animation Window
    + open animation window 
    + create a new animation clip 
    + drag the coin sprint in to the animation window and adjust the key frame. the Sample property means frame per second. the lesser the slower 
    
    + create a empty game object to contain the coin sprite for create circle collider. if not set the trigger the collider will block the character to move 
    
    + make sure check the is trigger property 
    
- scripting the coin behavior 
    + create new c# script 
    + add script content 
public class Coin:MonoBehavior 
{
    void OnTriggerEnter2D(Collider2D other)
    {
        if(other.gameObject.tag == "Player")
        {
            print("You pick up a coin!");
            gameObject.SetActive(false);
        }
    }
}

    + add the coin script to the coin game object as a component 

- Setting up the coin UI 
    + create an empty gameObject named UI 
    + create another gameObject called coinUI
    + use AutoScaleTexture to drag and drop to the coinUI 
    
    + create GUI text gameObject from the Hierarchy panel at the left of the screen 
    
    + make sure use the free fonts 
    
    + create a script to control the GUI text 
    
[ExecuteInEditMode]
public class CoinCounter: MonoBehavior
{
    public int coinCount = 0;
    void Update()
    {
        //set the coin count here 
        guiText.text = "x" + coinCount;
    }
}
    
    + add the script to the coinCount GUI text object 
    
    
- modify the coin script to update the UI 
    + access another script from current script
    + modify the coin script 
public class Coin:MonoBehavior 
{
    private CoinCounter coinCounter;
    void Awake()
    {
        coinCounter = GameObject.Find("CoinText").GetComponent<CoinCounter>();
    }
    
    void OnTriggerEnter2D(Collider2D other)
    {
        if(other.gameObject.tag == "Player")
        {
            print("You pick up a coin!");
            coinCounter.coinCount ++;
            gameObject.SetActive(false);
        }
    }
}

- creating the game state 
- setting up the UI for lives 
- rewarding the player with an extra life 


# Creating UI elements for games in unity 
- max view the game point and get a snapshot and draw buttons on it and to create a mocking game view 

    + right click on your scene 
    + select maximize use Alt + Print Screen to copy screenshot into clipboard then you could use the data in photoshop
    
    + add blood slot and score record 
    
    + create the UI element in sepereate photoshop documents. create each element into different layers 
    
    + set all the element color to white, because we could adjust the element color inside unity 

    use native color of white for the sprites will make it change easily in unity 
    
    use the main color of the game background for the photoshop image background would give a previews for the sprites items in game 
    
    before save the picture don't forget to turn off the background color to make a transparent background 
    
    + save the photoshop *.psd file to unity asset folder. save the UI *.psd to the UI folder in the asset 
    
- splitting the sprites 
    + select the added photoshop asset 
    + make sure the Texture Type is set to Sprite(2D and UI)
    + change the Sprite Mode to Multiple 
    + click the Sprite Editor button 
    + use the sprite editor to split the Sprites
    use left mouse and drag and draw rectangle to seperate sprite and trim the range 
    
    or use the auotmaic split 
    
    + give each element a resonable name 
    
    + for the element which may be stretch in unity such as panel background or button background
    
    we could set the sprite border for it which means the range in the border will not be effected by the stretch
    
    we could also set the border with the panel under the sprite editor 
    
- creating the main menu canvas 
    + go to hierarchy or right click the asset tree select UI|Canvas or use the hierarchy panel, click create button UI|Canvas      
    
    + we don't required to set the canvas size. it set to screen space overlay by default 
    
    + right click on the canvas select UI|Image will be create a image element under the canvas 
    
    whenever add a canvas into a game, there will be a Events System object created in the hierarchy too 
    
    + choose the image source from the inspector panel we could choose any imported asset 
    
    if we click the button set native size will resize the image
    
    + move the image up by select move tool on the up left panel 
    
    + change image color select the image and change the color by the unity inspector panel 
    
    + add text object for the canvas object 
    + change the text and the font from the inspector 
- Setting up the buttons 
   + right click canvas select UI|Button
   + select the source imagefor the button from the asset in the inspector panel 
   + select Fill Center from the inspector panel 
   + change the Image Type to splite will scale the image with the predefined border 
   + hold shift+drag with mouse will scale the image 
   + give the text of the button the start 
   + change the color of the image of the button 
   + change the button component from the inspector panel 
   the Transition property of the button will define the transition style, such as color tint, change the button color when click or disable 
   
   there is also a sprite swap, support define pressed disabled sprite for the button 
   
   there is a animation transition style 
   
   + duplicate the start button and name it as exit whenever duplicate a button be aware of the anchor position for the button 
   
- creating the hud
   + name the previous canvas as main menu 
   + create a hud canvas change the canvas render mode to screen space overlay or screen space camera 
   + add image and add the header of the character to indicate the lifes of the player 
   + add text for the number under the image hierarchy
   + add coin image 
   
- setting up time bar ui 
   + in the hierarchy window we could rearange our ui 
   + add timebar image and the timer icon image 
   + change pivot point will make the scale operation more easy to do 

   the parent of the hierarchy will be draw first 
   
    + change the Image Type to fill, fill method to horizontal, fill origin to left and the Fill mount from 0 to 1 will change it from 0 time to 100 

    + create a group object for the three time object 
    create a empty game object 
    
    move the previous create time images under the empty game object 
    
    move the empty game object under the hierarchy of the HudCanvas object 
    
    + to make the screen objects rescale we need to use anchor to help us set the position of our UI 
    

- setting up anchors for our ui 

    + change the screen scale from the top of the scene tool window at the game view

    + when you use the game view we could see the anchor point is at the center 
    
    + the anchor point could be use to drag the anchor point 
    
    + select the game object and use the Rect Transform tool from the inspector panel 
   
    + if we want to make some of the game object stretch with the game view port we could set the Rect Transform to stretch center from the inspector panel 
   
- adding button interactivity 
    + select the start button 
    + add event handler for the start button from the inspector panel 
    + we could add which object we want to effect 
    + set the function will be used such as 
    GameObject
    RectTransform 
    Canvas 
    CanvasScaler 
    GraphicRaycaster 
    
    we choose to use the GameObject.SetActive function, we could turn it on or off  

    + use canvas group to control canvas hide and show will give us more control. such as change the alpha of the image. it could give us more animation 
    
    + create empty game object to contain all the menu game object and add canvas group component to the main menu game object. then we don't have to turn off the canvas which could let us display the hud canvas 
    
    create empty game object to contain all the hud relative canvas group 
    
    now we could manipulate the display by change the alpha of the main menu canvas group and the hud canvas group 
    
    change the anchor mode to strech from the inspector panel for both of the main menu game object and hud game object 

    change the start button event handler function from target to the main canvas to the menu group object. use the function CanvasGroup.CanvasGroup.alpha and set the float to 0 to hide the group 
    
    add another function and show the hud canvas group 


    + if your button is not work, check the hierarchy tree from the left panel the upper object will block the mouse click event. We could use uncheck the Block Raycast checkbox from the inpsector panel under the Canvas group which is belong to the upper game object 

- animating UI element 

    + add animator control component for the main menu game object Create|Animator Controller. or add it from the component panel in the inspector 

    select the main menu and open the animation window Window|Animation window. let's create a new animation 
    
    all the subitem will be listed by click the Add Property button 

    + go to the animator window and create a empty state as default state for the main menu 
    
    then we make a transition to FadeOut state(by change the main menu alpha and add keyframe for it). create a parameter for control the transition name as isFadeOut which type is bool 
    
    select the FadeOut state make sure uncheck the time loop to make it only play once 
    
    + create a c# script and open the mono develop and set configuration for the variable 
    
public class MainMenuManager:MonoBehavior
{
    private Animator menuAnim;
    
    void Awake()
    {
        //will get the animator object from the game object which is added the script 
        menuAnim = GetComponent<Animator>(); 
    }
    
    public void MenuFade()
    {
        menuAnim.SetTrigger("isFadeOut");
    }
}

    + let's remove the previous main menu click handler and add the new create MenuFade as the event handler. The animator of the main menu will be displayed when we choose the main menu object as the target object from the inpsector panel 

- fading in the hud 
    + create the hud fade animator as the same process of the main menu 

- updating the coin count and lives count 
to access the UI game object from the script we need to add namespace 
using Unity.Engine.UI; 

then we could access the text game object 

public class LivesCounter:MonoBehavior
{
    public int initialLives = 3;
    public int extraLives = 0;
    public int totalLives 
    
    void Start()
    {
        GetLives();
    }
    
    void Update()
    {
        totalLives = initialLives + extra.Lives;
        
        GetComponent<Text>().text = totalLives.ToString();
    }
    
    void GetLives()
    {
        totalLives = initiaLives + extraLives;
    }
}   
- scripting the time bar 
we need to make sure the timer bar image's properties are set to 
File method Horizontal, Fill Origin Left and Fill Amount to 0 we need to control the fill amount to effect the display 
public class Timer: MonoBehavior
{
    public float currentTimer;
    public float startTimer = 10f;
    public float timerPercent;
    private Image image;
    
    private GameState gameState; //which is a script created previous for control the game state 
    
    void Awak()
    {
        currentTimer = startTimer;
        image = GetComponent<Image>();
        
        gameState = GameObject.Find<"GameState">.GetComponent<GameState>();
    }
    
    void Update()
    {
        if(gameState.gameRunning)
        {
            currentTimer -= Time.deltaTime;
            
            timerPercent = currentTImer/startTimer;
            image.fillAmount = timerPercent;
        }
    }
}

    + add start button game object and change the game state property gameRunning
- cleaning up and testing the ui 
   
   + make sure our UI could rescale whenever the screen resolution changes
   
   to achieve this we need to make all the UI have a right hierarchy 
   
   the canvas Screen Space Overlays for the render mode 
   
   unity will first the check the parent object then the child object 
   
   change the boundery for the UI menu to the same size as the menu canvas 
   
   take the anchor control point to the bounding box will stretch the element 
   
   
    
设计模式，可服用面向对象软件设计的基础=Erich Gamma;Note=eshang

:模式有四个要素
名称，问题，方案，效果

:描述模式的方式
>名称与分类
>意图
>别名
>动机，用以说明一个设计问题以及如何用模式中的类，对象来解决该问题的特定情形
>适用性
>结构
>参与者，类或对象
>协作，模式的参与者怎样协作实现他们的职责
>效果
>实现
>代码示例
>已知应用
>相关模式

:设计模式的编目，共23个
>Abstract Factory, 提供一个创建一系列相关或者相互依赖对象的接口
>Adapter, 将一个类的接口转换成客户希望的另一个接口
>Bridge, 将抽象部分与实现部分分离
>Chain of Responsibility, 为解除请求的发送者和接收者之间的耦合，使得多个对象都有机会处理请求，直到有一个对象处理请求为止
>Builder, 将一个复杂对象的构建与它的表示分离，同样的构建过程可以创建不同的表示
>Command, 将一个请求封装成一个对象，可用不同的请求对客户进行参数化，记录日志或请求排队，支持取消
>Composite, 将对象组合成树形结构以表示"部分-整体"的层次结构, 是单个对象与复合对象使用具有一致性
>Decorator, 动态地给一个对象添加一些额外的职责，比生成子类的方式更为灵活
>Facade, 为子系统的一组接口提供一个一致的界面
>Facotry Method, 定义一个用于创建对象的接口, 让子类决定哪个类实例化，将实例化延迟到子类
>Flyweight, 运用共享技术有效地支持大量细粒度的对象
>Interpreter, 给定一个语义，定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子
>Iterator, 提供一种方法顺序访问某一个聚合对象中的各个元素
>Mediator, 用一个中介对象来封装一系列的对象交互，中介者使得个对象不需要显示的交互引用
>Memento, 在不破坏封装的前提下，不活一个对象的内部状态，并在该对象之外保存这个状态
>Observer, 定义对象间的一种一对多依赖关系，一遍当一个对象发生改变的时候所有依赖它的对象都得到通知并自动刷新
>Proxy, 为其他对象提供代理，以控制这个对象的访问
>Prototype, 用原型实例指定创建对象的种类，并通过拷贝这个原型来创建新的实例
>Singleton, 保证一个类仅有一个实例，并提供一个访问它的全局访问点
>State, 允许一个对象在其内部状态改变的时候改变它的行为
>Strategy, 定义一系列算法，把它们一个个封装起来，并且使它们可以互换，使得算法的变化可以独立于使用的它的客户
>Template Method, 定义一个操作中的算法骨架，将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义算法的某些特定步骤
>Visitor, 表示一个作用于某对象结构中的各元素操作，在不改变元素类的时候，定义作用于元素的新的操作

:设计模式空间，一些分类结构
类		目的
		创建型				结构型			行为型
		Facotry Method		Adapter			Interpreter, Template Method
对象	Abastract Factory	Adapter			Chain of Responsibility
		Builder				Bridge			Command
		Prototype			Composite		Iterator
		Singleton			Decorator		Mediator
							Facade			Memento
							Flyweight		Observer
							Proxy			State
											Strategy
											Visitor

:设计模式怎样解决设计问题
>寻找合适的对象
>决定对象的粒度
>定义对象接口
	型构, signature
	类型，type，指接口的名字，子类型subtype，超类型supertype
>运用复用机制
继承与组合的比较
继承，白箱复用，父类的内部对子类可见。
	优点，编译时刻静态定义
	缺点，不能再运行时动态改变父类实现，父类对子类的可见破坏了封装性
	只继承抽象类
；
组合，要求组合对象间遵守彼此的接口约定，黑箱复用
；
委托，是一种组合方法。一个对象委托另一个对象处理某事
	window->rectangle->area(), window委托rectangle处理面积
；
参数化类型，parameterized type，也就是类属性或者模板
>关联运行时刻和编译时刻的结构
聚合，aggregation，对象的所有者与对象具有相同的生命周期
相识，acquaintance，一个对象仅仅知道，一般称为关联或者引用关系
	
:名词
动态绑定，dynamic binding，发送的请求和它相应的操作在运行时的链接
多态性，polymorphism，动态绑定允许替换有相同接口的对象
OMT，Object Modeling Technique,表示法，将类表示为矩形类名，方法，属性的方块
抽象类，abstract class，为了子类定义公共接口
抽象操作，abstract operation
具体类，concret class，非抽象类
混入类，mixin class

:接口继承的好处
客户无须知道适用对象的特定类型，只需要有客户需要的接口
无须知道使用的对象是什么类实现的，只需知道定义的接口抽象类
是针对接口编程，不是针对实现编程
当不得不创建某个类的实例化时，可以使用创建式模型，Abstract Factory, Builder, Fatory Method, Prototype, Singleton
 








精通JavaScript=John resig;Note = eshang

HTML的元素包含的实现方式就是面向对象的继承关系，所以顶级DOM拥有的属性，底层元素全部都可以使用

为form.onsubmit添加提交事件响应，可以控制表单的提交。事件响应函数返回true提交表单，返回false不能提交表单

DHTML，就是DOM和事件的交互的基础上产生的。实质就是javascript与DOM元素上得CSS属性之间的交互

Ajax, JavaScript与Xml, asynchronous javascript and xml
xmlHttpRequest, 从服务器发送XML数据的主要手段

实际中逆偏二极管这样的物理装置来产生随机数，是基于量子力学的理论
数学专家相信，构造一个有效的随机序列不应通过随机程序而要利用适当的确定性程式来实现
通过装置产生的随机数被称为伪随机数，通常可以达到使用目的
参考：Hull 与Debell的方法

蒙特卡洛法
利用随机数来解决那些过于复杂而又难于求得精确答案的概率统计学问题
；
例如，已知p个变量，x1, x2,..., xp的联合分布，如何求出给定函数f(x1, x2, ..., xp)的分布
；
俄罗斯概率论专家，科尔莫格洛夫，建立的大数率理论。用于测试不规则图形的面积与正方形的面积
当n趋于无穷大的时候am/m 趋向于真实值
结果的精确性取决于生成随机数的装置的随机性

Ajax, 异步javascript与XML, Asynchronous Javascript and XML
XMLHTTPRequest

面向对象的Javascript
object是javascript的基本单元
；
；
几个基本部分
引用, reference
作用域, scope
闭包, closure
上下文, context
;
；
new object();
;
new Array(,,,);
;
基于引用的对象在修改时同时修改
；
常量赋值会创建新对象
；
；
function overload, 函数重载
；
作用域只有两个，一个是函数，一个是全局
函数作用域变量
每个函数都有一个参数数组变量，argument，只读不能修改
全局作用域指window对象，函数作用域使用变量时没有直接定义，那么也属于全局作用域变量
；
没有定义，undefine
定义未赋值，null
;
类型判断, typeof
;
；
闭包，就是匿名函数
function(){....}
;
闭包简化函数参数
function addGenerator(num)
{
	return function(toAdd)
	{
		return num + toAdd;
	}
}
var addFive = addGenerator(5)
addFive(4);		// return 9
;
定义匿名函数直接调用
(function(){})()
;
;
上下文对象,context
this, 永远指向当前代码所处的对象中
；
每个对象都有一个, call 属性，如果这个对象时函数那么call这可以实现函数调用
object.call(arguments)

对象
javascript中没有class的概念，全部都是对象
javascript的对象本身可以用来创建新对象，也可以继承自其它对象。这时称为原形化继承，prototypal inheritance
function User(name)
{
	this.name = name;
}
var me = new User("My name");
在new 的时候更像是将对象的作用域付给了新的引用
可以理解为javascript的作用域只有对象作用域，因为全局作用域就是window对象作用域
object中有 constructor() 方法来调用对象的创建方法，可以用于使用对象创建对象
var you = me.constructor();
;
公共方法，public method
原型属性, prototype, 这个属性包含了一个对象，这个对象可以作为所有新副本的基引用(base, reference), 每个对象中都会有原型的所有属性
从原型对象中定义的属性在该类对象创建的所有对象中都可以访问
User.prototype.NewProperty = ...;
;
私有方法，private method
在函数内部定义的方法都是私有方法，因为在该函数对象的作用域内
function User(name)
{
	this.name = name;
	function DisplayName()
	{
		...;
	}
}
；
特权方法, privileged method
是指可以让对象的私有变量以公有方法的形式进行访问, 实际就是以this开头来定义属性对象
function User(name)
{
	this.name = name;
	this.GetName = function()
	{
		return name;
	};
}
由于特权方法是运行时编译的，所以这种比在prototype上直接一次性添加方法开销更大
例如使用特权方法来模拟get, set方法
function User(properties)	//properties是一个字典对象
{
	for( var i in properties)
	{
		(function(which)
		{
			var p = i;
			which["get"+p] = function()
			{
				return properties[p];
			};
			which["set"+p] = function(val)
			{
				properties[p] = val;
			};
		})(this);
	}
}
;	//使用
var user = new User({name: "Bob", age: 44});
user.name == null; // true
user.getname() == "Bob";	//true
从而实现动态生成代码，动态生成属性函数等
；
；
静态方法，类似于一般函数。区别，它是以静态属性存在于对象中的，不能再对象的上下文中访问，只能属于主对象本身的上下文
User.cloneUser = function(user)
{
	return new User
	(
		user.getname();
		user.getAge();
	);
}
是一种仅为组织代码而是用的方法

创建可重用代码
；
；
原型继承，prototype inheritance, 适用于单继承，是对象的构造函数可以从其他对象中继承方法
function Person(name)
{
	this.name = name;
}
;
Person.prototype.getName = function()
{
	return this.name;
};
;
function User(name, password)
{
	this.name = name;
	this.password = password;
}
;
User.prototype = new Person();
User.prototype.getPassword = function()
{
	return this.password;
};
得到的User对象会有Person对象的所有方法
;
;
Javascript 的一系列包装函数，基于prototype继承的, 模拟类继承的方法
Function.prototype.method = function(name, func)
{
	this.prototype[name]=func;
	return this;
};
;
//uber特权函数会执行所有在继承时重写的函数
Function.method('inherites', function(parent)
{
	var depth = 0;
	var proto = this.prototype = new parent();
	this.method('uber', function uber(name)
	{
		var func;
		var ret;
		var v = parent.prototype;
		if(depth)
		{
			for(var i = d; i > 0; i += 1)
			{
				v = v.constructor.prototype;
			}
		}
		else
		{
			func = v[name];
			if(func == this[name])
			{
				func = v[name];
			}
		}
		depth += 1;
		ret = func.apply(this, Array.prototype.slice.apply(arguments, [1]));
		depth -= 1;
		return ret;
	});
	return this;
});
;
Function.method('swiss', function(parent)
{
	for( var i = 1; i < arguments.length; i += 1)
	{
		var name = arguments[i];
		this.prototype[name] = parent.prototype[name];
	}
});
使用继承模式来重新实现Person与User的继承
function Person(name)
{
	this.name = name;
}
;
Person.method('getName', function()
{
	return name;
});
;
function User(name, password)
{
	this.name = name;
	this.password = password;
}
User.inherits(Person);
User.method('getPassword', function()
{
	return this.password;
});
User.method('getName', function()
{
	return "My name is" + this.uber('getName'); //使用this.uber()来调用父类同名方法
});
:reference:
http://javascript.crockford.com
；
Base库，面向对象继承的实现
:reference:
http://dean.edwards.name/weblog/2006/03/base
http://apress.com
;
prototype库, ruby on rails web开发库
http://prototype.conio.net
var class = 
{
	create: function()
	{
		return function()
		{
			this.initialize.apply(this, arguments);
		};
	}
};
;

打包，代码发布之前包装自己的代码便于与其他库整合
;
命名空间，namespace
var YAHOO = {}; //默认的全局命名空间
YAHOO.util = {};
创建最终命名空间，它只包含一个值为函数的属性
YAHOO.util.Event = 
{
	addEventListener: function()
	{
		...
	}
};
;
Javascript库使用命名空间的例子
Dojo, http://dojotoolkit.org
使用js的命名空间构建了整个程序包系统，可以动态的单独导入新的程序包，自动执行它
html中
<script type="text/javascript" src="dojo.js"></script>
<script type="text/javascript">
	dojo.require("dojo.widget.AccordianContainer");
	dojo.require("dojo.widget.ContentPane");
</script>
<div dojoType="AccordionContainer" labelNodeClass="label"/>
;
YUI, Yahoo UI(http://developer-yahoo.com/yui/)为许多常见的web场景提供解决方案，所有的UI元素都被分布在它的层级结构中
<script type="text/javascript" src="YAHOO.js"></script>
;
;
清理代码
JSLint, 提供了完整的分析工具,http://www.jslint.com
;
注意 !=, ==, !==, ===的使用
常见的开发者犯的错误，javascript中, null, 0, false, undefine都是相等的，例如
test == false // 在test equal to null, undefine的时候测试结果是true
;
为了压缩方便，一定要在每行语句结束时加入分号
；
压缩工具, 三类
1. 只出去多余的空白与注释，
JSMin, http://www.crockfrog.com/javascript/jsmin.html
Packer,http://dean.edwards.name/packer/ 将javascript脚本变为自解压功能的zip
2. 1的基础上修改变量名压缩代码长度
3. 2的基础上最小化代码中所有单词的长度，不仅是变量名
；
分发，将代码复制给别的开发者或者上传到网站上
JSAN, JavaScript Archive Network, 是由Perl开发者发起的，他们喜欢CPAN功能Comprehensive Perl Archive Network, http://openjsan.org
JSAN要求所提交的模块都使用一种格式良好的面向对象风格来编写，符合特定的模块化结构，除了集中储藏外，JSAN支持在代码中导入外部JSAN模块
http://openjsan.org/doc/r/rk/rkinyon/DOM/Insert/0.02/lib/DOM/Insert.html
try
{
	JSAN.use('Class');
	JSAN.use('DOM.Utils');
}
catch(e)
{
	throw "DOM.Insert requires JSAN to be loaded";
}
if(typeof DOM == 'undefined')
	DOM = {};
...

调试与测试工具
Firebug
;
JSUnit, javascript单元测试的唯一标准， http://www.jsunit.net
J3Unit, javascript单元测试中的新成员,  http://j3unit.sourceforge.net
;
Test.Simple, 曾经由JSAN引入，http://openjsan.org/doc/t/th/theory/test/simple
Test.More, http://openjsan.org/doc/t/th/theory/test/simple/0.21/lib/test/more.html
new JSAN('../lib').use('Test.More');
plan({tests: 6});
ok(2==2, 'two equal to two');
is('foo', 'foo', 'foo is foo');
...

分离式Javascript
;
;
DOM, Document Object Model, 是一个表达XML的标准，由W3C制定，是应用最广泛的，大部分开发语言都提供了实现
;
Node, parentNode, firstChild, lastChild, nextSibling, previousSibling, firstChild, lastChild
;
根元素师html元素，访问方法，document.documentElement
；
节点类型
元素, nodeType=1, <head>, <body>,...
文本, nodeType=3, 元素内与元素间的文本块
文档, nodeType=9, <html>
;
Fireforx, opera中存在一个原型, object prototype, HTMLElement, 是所有HTML元素的原型对象
//允许每个HTML DOM元素绑定函数和数据
HTMLElement.prototype.next = function()
{
	var elem = this;
	do
	{
		elem = elem.nextsibling;
	}while(elem && elem.nodetype != 1);
	return elem;
};
；
jQuery中提供了DOM遍历的方法
；
标准DOM方法
getElementById("everyWhere");
getElementByTagName("li"); //返回为NodeList, 但不支持push(), pop(), shift()方法
;
等待整个页面加载全部完成后再进行DOM操作
addEvent(window, "load", function()
{
	...;
});
;
等待大部分DOM的加载, 在页面最后元素之前嵌入脚本，你就可以在DOM中访问这个元素之前全部的元素
<body>
	...
	<script type="text/javascript">init();</script>
</body>
这种方法是不合理的，而且必须使用行内代码，才能加载后立即执行初始化
























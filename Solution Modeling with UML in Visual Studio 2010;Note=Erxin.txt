Solution Modeling with UML in Visual Studio 2010=Richard Seroter;Note=Erxin

# Building Behavioral UML Models in Visual Studio 2010
- UML in a nutshell
Unified Modeling Language(UML), is a standardized general-purpose, modeling language in the field of object-oriented software engineering
    + wikie http://en.wikipedia.org/wiki/unified_modeling_language
    + behavior diagrams
    use case, activity, state machine, sequence, timing
    + structural diagrams
    component, class, composite structure, package, deployment
    + UML modeling is now included as part of visual studio 2010 ultimate
    use case diagrams
    activity diagrams
    sequence diagrams
    component diagrams
    class diagrams
    + feature pack 2 support extend UML model
    + architecture modeling tool, visualization and modeling feature pack in the help dialog list
    + create a modeling project
        * add different diagram to the project
        there will be tool box items display for select model
    + training course scenario review
        * watson's pet store
        they are a growing local store 
        * their customer want to ordering
    + building a use case diagram
    visually show the relationship between users and their goals when using a system
    + the core components of a use case diagram are
        * actors, could human or none human, tied to roles, not specific users. could be a application or organization or hardware, may represent "time"
        don't have actors interact with each other
        put passive actors on the right side of the diagram with arrow pointing towards the actor
        * naming is critical in use case, strong verb to start the name
        use business language related to the actor's point of view
        represent single behavior
        * use "include" when you want to model common interactions
        * use "extend" to show significant alternate flows
        * there are generally accepted style guidelines
        stack use case to imply timing
        passive actors have arrow towards them
        put included use case to the right of the base use case and have arrow point to the include use case
        put extended use case blow the base use case and have arrow point to the base use case
    + example to add use case
        * add actor from tool box
        * add subsystem
        * add use case
        * add association between actor and use case
        * add include between use case
        * add extend use case to specify use case
        * add comment
    + artifact is used to add out side document
    + Building an activity diagram
    an activity diagram visually shows business processes or system algorithms
    + core components of an activity diagram are
    actions, control flow/connector, object nodes, control nodes, send signal, accept event, call behavior, call operation, input/output pins, activity parameters
        * initial nodes starts an activity diagram and the final node completes it
        * decision nodes splits a single incoming flow into multiple alternative flows
        * merge node unifies incoming alternate flows into single output flow
        * parallel activities can be modelded using the "fork" and "join" nodes
        * data flow can be model using object nodes
        can define the types of the object being passed from action to action
        * input and output pins can also be used to model data flow
    + activity diagram is more like the flow diagram
    + example to add activity diagram
        * add init 
        * add active
        * add decision node
        * add join 
        * add split
        * add init finish
        * the action mode support add behavor at the property to reference another anction
        * to add event
    + building a sequence diagram, it is a low level to show components interact over time within a scenario
    + the core components of a sequence diagram are
    life lines, top down to indicate time
    messages 
    interaction occurrence 
    fragments
    + messages
        * use synchronouse messages when the object needs something back
        return message may include requested data or other information
        it is optional to show return messages but visual studio requires it
        can be a "self message"
        * asynchronous message
        * create messages are used when the sender creates an instance of the receiver
    + fragments
        * an interaction occurence or "interaction use" in visual studio 2010 is used to reference an existing diagram
        * fragments encapsulate conditional processing or variations in a sequence diagram, guards describe when the fragment executes
        optional(opt), alternatives(alt), looping(loop), break(break), parallel(par), sequential(seq), critical(critical), strict(strict)
    + example to build sequence diagram
        * add life line, the already included items will be automatic referenced from the other diagram if they have the same name
        * add synchronous message, double click the same element to great self messages
        * click a message and right click to select surround with to add a fragment, such as (alt)
        * click a message and select great to diagram to create the interaction into a new diagram will automatic create a reference diagram in the current diagram
        
        
# Building structural uml models in visual studio 2010
- introduction, introduce structure models
    + training course scenario review
    Watson's Pet Store
    + building a component diagram
    + building an class diagram
- Building a component diagram
    + component diagram show physical structure of the system architecture
        * system dependencies
        * functional decomposition
    + the core elements of a component diagram are 
    components, it's a black box represent some function, with some interface 
    + interface
    + relationships, define how components communicate with each other
    + component interfaces are used to show how "block boxes" describe what they share with the outside world and what they need from it
    + provided interfaces show what component capabilities can be used by other components
    + required interfaces describe the capabilities that a component sends to other components
    + there are generally accepted style guilelines
        * name interface after the protocol used or
        * name the interface after the collection of capabilities, (WSDL name)
        * name the interface after the relevant operation
    + Dependency relationships demonstrate that one component (or interface of a component) relies on another
    the arrow means the dependency not mean the data flow direction
    + generalization is used to indicate that one component inherits from another
    + delegation is applied when a component's port is linked to an internal component
    + part assembly is used within a component to connect the required and provided ports of sub-components
    + you don't need to show all the interface but the main point will impact the design
















Nginx http server second edition=Nedelcu;Note=Erxin

# downloading and installing nginx
- install on ubuntu or red hat
apt-get install nginx
yum install nginx

- gcc, gnu compiler collection
gnu compiler collection(gcc)

contain compiler for, c, c++, java, ada, fortran so on

make sure it install by 
$ gcc

yum groupinstall "Develop Tools"

apt-get install build-essentials

- the PCRE library, perl compatible regular expression(PCRE), required two package
pcre, compiled version of the library
pcre-devel, provides development headers and source for compiling projects

$ yum install pcre pcre-devel
or
$ yum install pcre*

$ apt-get install libpcre3 libpcre3-dev

- the zlib library, provides developers with compression algorithms

$ yum install zlib zlib-devel
or
$ apt-get install zlib1g zilib1g-dev

- openSSL, it impolementing the secure sockets layer(SSL v2/v3) and transport layer security(TLS v1) protocols as well as full-strength
http://www.openssl.org

$ yum isntall openssl openssl-devel
or
$ apt-get install openssl openssl-dev

- downloading and extracting nginx
$ wget http://nginx.org/download/ngix-1.2.9.tar.gz

$ tar zxf nginx-1.2.9.tar.gz

- configure options, for testing purpose use configure command wit no switches
$ ./configure
$ make
$ make install

- path options
$ configure --help 
to list the available switches

there are several without and within module for nginx

the prefix can't be changed after the binary been changed
$ ./configure --prefix=/usr/local/nginx-1.2.9

- regular http and https ervers
$ ./configure --user=www-data --group=www-data --with-http_ssl_module --with-http_realip_module

- all modules enable
$ ./configure --user=www-data --group=www-data --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module --with-http_image_filter_module --with-http_geoip_module --withhttp_sub_module --with-http_dav_module --with-http_flv_module --withhttp_mp4_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_perl_module --with-http_degradation_module

the libxml2 and libxslt are the prerequest module fo XSLT module of nginx
$ yum install libxml2
or 
$ apt-get install libxml2

- mail server proxy
$ ./configure --user=www-data --group=www-data --with-mail --with-mail_ssl_module 

- build configuration issues
if encounter any error, the objs/autoconf.err contain more detail about the compilation problem

- make sure installed the prerequisites
GCC, PCRE, zlib, and OpenSSL, last three must be installed in two packages, the library and development sources

LibXML2 or LibXSLT might be required for enabling extra modules(http xslt module)

specify the location 
./configure [...] --with-openssl=/usr/lib64

- directories exist and are writeable
make sure the directory you placed the ngix files in has read and write permissions for the user running the configuration and compilation scripts

- compiling and installing
$ make
a successful build should result in a final message appearing: make[1] leaving directory followed by the project source path

$ make install
this command executes the install section of the makefile

- controlling the nginx service, default output files is /usr/local/nginx

- daemons and services
    + obviously to execute nginx
    when starting nginx will not see any text appear on screen which means it start successfully
    
- user and group
    + nginx is invalid file access permissions due to a user or group misconfiguration, end up getting 403 forbidden, there are two levels of processes with possibly different permission sets
        * nginx master process, should be start as root
        * nginx worker process, automatically spawned by the master process under the account you specified in the configuration file the configuration setting takes precedence over the configuration switch you may have entered at compile time, if you did not specify any of those the worker process will be started as user nobody and group nobody|nogroup
        
- nginx command-line switches
$ cd /usr/local/nginx/sbin
$ nginx -h
display the help information

- starting and stopping the daemon
    + start nginx by running the nginx binary without any switches
    + stop nginx by 
    $ nginx -s, stop the daemon immediately using the TERM signal
    $ nginx -s quit, stops the daemon gracefully, using the QUIT signal
    nginx -s reopen, reopen the log file
    nginx -s reload, reload the configuration
    
    + desperate case to kill nginx
    $ killall nginx
    
- testing the configuration
$ nginx -t
test configuration

$ nginx -t -c configuration_file_path.conf

replace the configure and reload it

$ nginx -s reload

- other switches
$ nginx -V
command switches that you passed to the configure script before compilation

additionally the -g option lets you specify additional configuration directives in case
$ nginx -g "timer_resolution 200ms"

- adding nginx as a system service
most linux-based os use system-v style init daemon, the process startup is managed by a daemon called init which inherited from the old system V unix-based os

runlevel    state
0           system is halted
1           single-user mode
2           multiuser mode, without nfs support
3           full multiuser model
4           not used
5           graphical interface mode    
6           system reboot    

manuall initiate a runlevel transition use the telinit 0 command to shutdown, telinit 6 to reboot

init script, service startup script or even sysv script
$ service httpd start
or, without service command 
$ /etc/init.d/httpd start
the other command such as start, stop, reload

    + first for debian-based distribution such as ebian, Ubuntu, Knoppix
        * create a file called nginx with the text editor save it in /etc/init.d/, which is a symbolic link to etc/rc.d/init.d/
        
        * enable the init script for system runlevel
        $ update-rc.d -f ngnix defaults
        will create a link in the default system runlevel folder

    + for red hat-based distributions, such as CentOS, Fedora
        * create the nginx script
        * make the script executatble
        $ chmod +x /etc/init.d/nginx

        * red hat-based distributions
        $ chkconfig nginx on
        $ chkconfig --list nginx

        another tool will be useful to you for managing system services, namely, ntsysv, which required root privileges
        $ chkconfig nginx on
  
  
# basic nginx configuration
- php works link window ini
- nginx have his own configuration syntax
- configuration directives of nginx 
    + by default nginx make use of one main configuration file
    /usr/local/nginx/conf/nginx.conf
    
    + directives always end with semicolon(;)
    
    # user nobody;
    worker_processes 1;
    
    the 1 means nginx should function with a single worker process

    + nginx works in a modular way and such as each module comes with a specific set of directives

    + example
    nginx.conf:
        usernginx nginx;
        worker_processes4;
        includeother_settings.conf;
    other_settings.conf:
        error_log logs/error.log;
        pid logs/nginx.pid;

    in the initial configuration, there are two files, nginx.conf, mine.types
    
    + more advance configuration file lists
    nginx.conf, base configuration
    mime.types, list of file types and their associate MIME types
    fastcgi.conf, proxy relative
    proxy.conf, proxy-relative config
    sites.conf, configuration the website served by nginx
    
    include directive supports filename globbing, this will include all the *.conf in the sites folder
    include sites/*.conf

    if configuration check is failed, nginx will not start

- directive blocks, directives are brought in by modules, module may also enable directive blocks
events{
    worker_connections 1024;
}

the root of configuration is main block which will effect all the nginx setting

some cases, block can be nested into each other
http {
    server {
        listen 80;
        server_name example.com;
        access_log /var/log/nginx/example.com.log;
        location ^~ /admin/ {
            index index.php;
        }
    }
}
this example shows how to configure nginx to server a website

a server block allow you to create a virtual host, with in server block you may insert one or more location blocks, enable setting only when the request uri matches the specify patch

configure is inherit with in children block

[…]
    location ^~ /admin/ {
    index index.php;
    access_log off;
    }
[…]

advanced language rule

- directives accept specific syntaxes
rewrite ^/(.*)\.(png|jpg|gif)$ /image.php? file=$1&format=$2 last; 

- diminutives in directive values
    + k or K, kilobytes
    + m or M, megabytes
    
    example
    client_max_body_size 2M;
    client_max_body_size 2048k;

    ms: Milliseconds
    s: Seconds
    m: Minutes
    h: Hours
    d: Days
    w: Weeks
    M: Months (30 days)
    y: Years (365 days)
    
- variables, the nginx http core module defines the $nginx_version variable, always start with "$"

example to set up log format string
[…]
    location ^~ /admin/ {
    access_log logs/main.log;
    log_format main '$pid - $nginx_version - $remote_addr';
    }
[…]

error_log logs/error-$nginx_version.log;

- string values
    + enter the value without quotes
    root /home/example.com/www;
    
    + use a particular character
    prefix with backslash or enclose the entire value in single or double quotes
    root '/home/example'
    
- base module directives, define parameters of the basic functionality of nginx
    + core module, essential features and directives such as process management and security
    + events module, configure the inner mechanisms of networking capability
    + configuration module, enables the inclusion mechanism

    + nginx process architecture
        * one the begining there is a master process when nginx started
        * master process will spawn process do the job
        * configuration file can define maximum connections per worker 
        
    + core module directives, the following list of directives must be placed at root of the configuration file
    
    daemon, accepted value on or of
    debug_points, stop or abort
    env,env MY_VARIABLE;
    error_log, error_log /file/path
    http, server and location, default value logs/error.log
    lock_file, syntax lock_file logs/nginx.lock
    context, main
    http, server, and location, default value on
    location, enables or disables logging 404
    master_process, on or off, if on nginx will works on multiple processes 
    pcre_jit, on or off, enables or disables just in time compilatoin for regular expression 
    pid, syntax, file path
    ssl_engine, character string 
    thread_stack_size, syntax numeric 
    timer_resolution, syntax, numeric timer_resolution 100ms
    user, syntax, user user name groupname
    worker_thread, numeric
    worker_cpu_affinity, worker_cpu_affinity 100 0100 0010.. use to control which worker thread run on which core of cpu
    worker_priority, numeric, defines the priority of the worker processes from -20
    ...
- events module, all of the directives lists in the following table must be placed in the events block, located at the root of the configuration file 
user nginx nginx;
master_process on;
worker_process 4;
events{
    worker_connections 1024;
    user epoll;
}

- configuration module, a single parameter the file's path
include /file/path.conf;

- a configuration for your profile
    + necessary adjustments
    user root root; will make worker thread run as root dangerous 
    worker_processes 1;
    worker_priority 0;  by default the worker processes are started with a regular priority the higher -20 to the lowest 19, the priority under -5 is default priority for kernel processes
    log_not_found on;
    worker_connections 1024; the default simultaneously connection

- adapting to your hardware
low-traffic setup       standard setup      high-traffic setup
dual-core               quad-core           8 core
ram 2gb                 4gb                 12gb
request 1/s             50/s                1000/s
recommanded values:
worker_processes 2;     4;                   8;
worker_rlimit_nofile 1024; 8192             16384;
worker_priority -5;     0;                  0;
worker_cpu_affinity 01 10;    0001 0010 01000 1000;
events{
    multi_accepts on;       off;            off;
    er_connections 128;     1024;           8192;
}

- create a test server, connect to server with a web browser, a test page is create and place at /usr/local/nginx/html/index.html
http 
{
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    server {
        listen 80;
        server_name localhost;
        location / {
            root html;
            index index.html index.htm;
        }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}   

- performance tests
    + the first development test of performance is check the raw performance of the server without additional components(make sure fully use of all cpus)
    http://www.hpl.hp.com/research/linux/httperf/
    
    execute the following command
    $ httperf --server 192.168.1.10 --port 80 --uri /index html --rate 300 --num-conn 30000 --num-call 1 --timeout 5
    
    num-call, how many request should be sent per connection
    num-conn, the total amount of connections
    
    + httperf, a relative well-known open source utility developed by HP, for linux only
    
    + autobench, perl wrapper for httperf
    + OpenWebLoad, small scale open source load testing application support both window and linux

- Autobench, is a perl script make use of httperf more efficiently, it will generates a .tsv report that you can open with various applications to generate graphs 
http://www.xenoclast.org/autobench/

example to execute the httperf command
The command we will execute resembles the 
httperfone:
[alex@example ~]$ autobench --single_host --host1 192.168.1.10 --uri1 /
index.html --quiet --low_rate 20 --high_rate 200 --rate_step 20 --num_
call 10 --num_conn 5000 --timeout 5 --file results.tsv

host1, the website host name
uril, the path of the file that will be downloaded
quiet, does not display information 
low_rate, connections per second 
high_rate, connection per second at the end of the test
rate_step, the number of connections to increase the rate by after each test
num_call, home many request should be sent per connection 
file, export result as specified .tsv file

- OpenWebLoad, is a free open source application. available for linux and windows
http://openwebload.sourceforge.networking

use it in linux, first is the website, second is the number of connections 
$ openload example.com/index.html 10

- upgrading nginx gracefully, nginx supply a way to upgrade without request lost
    + replace the old nginx binary
    + find the pid of nginx master 
    + send a user2 signal to the master process -kill user 2 *** replacing *** with the pid found in step2
    + send a winch(28) signal to the old master process -kill -WINCH **replace***
    + make sure that all of the old worker process are terminated and then send a quit signal to the old master process
    -kill -QUIT ***,replacing ** with the pid found in step 2
    
    
# http configuration
- http core module
http, server and location 
- structure blocks, http module introduces three new logical blocks
    + http, inserted at the root of the configuration file 
    + server, allows you to declare a website
    + location, define a group of settings to be applied to a particular location on a website 
    
- nginx http structure
nginx 
http section     http{}      mail server proxy imap{...}

the principle of setting inheritance

http{
    # enable gzip compression at the http block levels
    gzip on;
    
    server {
        server_name localhost;
        listen 80;
        
        # at this stage, gzip still set to on 
        location /downloads/ {
            gzip off;
            # this directive only applies to documents found in /downloads/
        }
    }
}
    
- module directives , directives can be inserted in order to affect the behavior of the web server
    
- socket and host configuration
    listen [address][:port] [additional options]
    + listen, context, server 
    default_server, sepcifies that shi server block is to be used as the deafult website for any request received at the specified ip address andport 
    + ssl, specifies that the website should be served using ssl_engine
    + other options, related to bind and listen system calls, backlog=nu, setfib=number and bind

listen 192.168.1.1:80;
listen 127.0.0.1;
listen 80 default;
listen [:::a8c9:1234]:80; # IPv6 addresses must be put between square 
brackets
listen 443 ssl;

- server_name, there are two ways to use the server block 
context: server 
    +  assigns one or more hostnames to server block, nginx receives an http request, it matches the host header of the request against all of the server blocks, the first server block to match this hostname is selected

    + if no server block matches, nginx selects the first server block that matches the parameters of the listen directive
        
    this block accepts wildcards as well as regular expressions 
    
    server_name www.website.com;
    server_name www.website.com website.com;
    server_name *.website.com;
    server_name .website.com; # combines both *.website.com and website.
    com
    server_name *.website.*;
    server_name ~^\.example\.com$;

    you may use an empty string as the directive value in order to catch all of the request that do not come with a host header
    server_name website.com;
    server_name _ "";
    
- server_name_in_redirect
context: http, server, location
applies the case of internal redirects. if set to on, nginx will use the first hostname specified in the server_name, if off, nginx will use the value of host header from the http request
    
- server_names_hash_max_size, nginx use hash tables for various data collections to speed up processing of requests
    
- server_names_hash_bucket_size, on/off
- port_in_redirect, on/off
- tcp_nodelay, on/off, is for a specific purpose to disable the Nagle buffering algorithm, it should only be set for applications that send frequent small bursts of information without getting an immediate response 
- tcp_nopush, only applies if the sendfile directive is enabled 
- sendfile, nginx will use the sendfile kernel call to handle file transimission 
- sendfile_max_chunk
- send_lowat, http, server, allowing you to make use of SO_SNDLOWAT flag for tcp sockets under freeBsd only
- reset_timedout_connection, when a client connection times out, its associated information may remain in memory depending on the state it was on
- paths and documents
- root, defines the document root , contain the files you wish to serve to your visitors
root /home/website.com/public_html;
    
- alias
context:location, variables are accepted
alias is a directive that you place in a location block only
http{
    server {
        server_name localhost;
        root /var/www/website.com/html;
        location /admin/ {
            alias /var/www/locked/;
        }
    }
}
    
- error_page
Syntax: error_page code1 [code2…] [=replacement code] [=@block | URI]
Examples :
error_page 404 /not_found.html;
error_page 500 501 502 503 504 /server_error.html;
error_page 403 http://website.com/;
error_page 404 @notfound; # jump to a named location block
error_page 404 =200 /index.html; # in case of 404 error, redirect to 
index.html with a 200 OK response code
    
- if_modified_since
context, http, server, location
defines how nginx handles the if-modified-since http header, mostly used by search engine spiders
if_modified_since off | exact | before

- index
context, http, server location 
defines the default page that nginx will server if no fielname is psecified 
    
index index.php index.html /index.htm;
    
- recursive_error_pages, on/off
- try_files, attempts to server the specified files
Syntax: Multiple file paths, followed by a named location block or a URI
try the specify files if failed then jump to the named location block 
Example:
location / {
    try_files $uri $uri.html $uri.php $uri.xml @proxy;
}
# the following is a "named location block"
location @proxy {
    proxy_pass 127.0.0.1:8080;
}
    
- client requests, keep-alive mechanism behavior and possibly logging client request 
    + keepalive_requests [time]
    + keepalive_disable browser 
    + send_timeout, a connection becomes inactive the moment a client stops transmitting data 
    + client_body_in_file_only, the body of incoming http request will be stored into actual files on the disk 
    + large_client_header_buffers, defines the amount and size of larger  buffer_size was insufficient. 
    + lingering_timeout, defines the amount of time that nginx should wait between two read operations 
    + chunked_transfer_encoding
    + max_ranges
- MIME types, nginx offers two particular directives that will help you configure MIME types
    * types 
    types {
        mimetype1 extension1;
        mimetype2 extension2 [extension3...];
    }
    * default_types
    when nginx serves a file, will check the extension in order to determine the MIME type, browser will try to render the file using a plugin associated to that MIME instead of merely download it, nginx will includes a basic set of MIME types 
    include mime.types 
    
    some browser will ignore MIME types and may still display files if their name ends with a known extension such as .html or .txt 
    
    default mime 
    types {
        text/html html;
        image/gif gif;
        image/jpeg jpg;
    }
    
- limit_rate, allows you to limit the transer rate of individual client ocnnections, the rate is expressed in bytes per second, if a client open 2 connection, the client will be allowed 2*500 kilobytes

- limit_rate_after
    
- satisfy directive defines whether clients require all access conditions to be valid
location /admin/ {
    allow 192.168.1.0/24;
    deny all;
    auth_basic "Authentication required";
    auth_basic_user_file conf/htpasswd;
}
    
- internal, this directive specifies that the location block is internal
server {
    […]
    server_name .website.com;
    location /admin/ {
    internal;
    }
}

- file processing and caching
    + disable_symlinks, this directive allows you to control the way nginx handles symbolic links when they are to be served 
    
    + directio， this directive enable files with a size grreater than the specified value will be read with the direct i/o with no cache 
    
    + open_file_cache_valid, cached information quickly obsolete especially in the case of a fast-moving filesystem 
    
    + read_ahead, defines the amount of bytes to pre-read from files 
    
- other directives , 
    +  log_not_found, if your logs get filled with 404 errors due to missing favicon.ico or robots.txt files you might want to turn this off 
    
    + merge_shalshes, merging multiple consecutive slashes in a URI 
    + resolver, specify the name servers that should be employed by nginx to resolve hostanmes to ip addresses 
    
    + server_tokens, define whether or not nginx should inform the clients of the running version number 
    + underscores_in_headers, allows or disallows underscores in custom http header names 
    + this directive defines the maximum size of the variable hash table 
    + post_action, defines a post-complietion action, a URI that will be caled by nginx after the request has been completed 
    
- module variables 
    + request headers, nginx lets you access the client request headers under the form of variables that you will be able to employ later on in the configuraton
   
    $http_host, value of the host http , indicating the hostname the client trying to reach
    $ http_user_agent, User-Agent http header, indicate the web browser 
    $ http_referer, previous page 
    $ http_via, possible proxies used by the client
    $ http_x_forwarded_for, shows the actual ip address of the lcient if the client is behind a proxy
    $ http_..., additional headers with dashes replaced by underscores 
    
- response headers, allows access the header of response 
    $sent_http_context_type, context-type indicating the MIME type of the resource being transmitted 
    $sent_http_content_length, reponse body length 
    $sent_http_location, location http_header, which indicates the location of the desired resource is different than the one specified in the original request
    $sent_http_last_modified, modification date fo the request resource 
    $sent_http_keep_alive
    $sent_http_transfer_encoding
    $sent_http_cache_contro, whether the client browser should cache the resource or not 
    $sent_http_..., additional headers 
    
- nginx generated 
- the location block 
    + location modifier, define location blocks by specifiying a pattern that will be matched against the request document uri 
    server {
    server_name website.com;
        location /admin/ {
            # The configuration you place here only applies to 
            # http://website.com/admin/
        }
    }
    
    the syntax of a location block is 
    location [=|~|~*|^~|@] pattern {...}
    
    + the = modifier, request mast match exactly 
    location = /abcd
    
    + no modifier, the request must begin with 
    + the ~ modifier, the request URI must be a case-sensitive match  to the specified regular expressoin
    
    server {
        server_name website.com;
        location ~^/abcd$ {
            [...]
        }
    }
    
    + the ~* modifier, requested uri must be case-insensitive match to the specified regular expression
    
    + ^~ modifier, no-symbol behavior, must begin with the specify pattern 
    + @ modifier, these block cannot be accessed by the client but only by internal requests generate by other directives such as try_files or error_page
- search order and priority, nginx will search for the best match requested uri from all the location blocks 
    + location blocks with =
    + location blocks with no modifier 
    + location blocks with ^~ modifer
    + location blocks with ~ or ~* modifier 
    + location blocks with no modifier 
    
    
# module configuratoin 
- rewrite module, which does more than just rewrite URIs
    + is a key element to search engine optimiazation 
    + reminder on regular expressions 
    regular expression is used to define extremely complex and accurate rules 
    
- PCRE syntax, perl compatible regular expression
{x}, entity preceding must be found x times
|, alternation, hello|welcom, matching hello, welcome 
(), grouping, groups a set of entities often to be used in conjunction with |
{x,}, must be found at least x times
{x, y}, must be found between x and y times 

^/(?<folder>[^/]*/(?<file>.*)$, named capture, $folder, $file
- internal requests, external requests directly originate from the client; the URI is then matched against possible location blocks 

several directives capable of producing internal requests: error_page, index, rewrite, try_fiels, add_before_body, add_after_body(from the addition module, the include ssi command 

    + internal redirects, redirect the client request internally
    + sub-requests, additional requests that are triggered internally 

    server {
        server_name website.com;
        error_page 403 /errors/forbidden.html;
        error_page 404 /errors/not_found.html;
    }
    
    server {
        server_name website.com;
        root /var/www/vhosts/website.com/httpdocs/;
        error_page 404 /errors/404.html;
        location /errors/ {
            alias /var/www/common/errors/;
            internal;
        }
    }
    redirect to /errors/404.html. As a result, a new request is generated by Nginx with the URI /errors/404.html. This URI falls under the location /errors/block so the configuration applies
    
- the SSI module, a server-side scripting language 
- additional modules enabled in the default nginx build
- optional module that must bre enabled at compile time 
- a quick note on the third-party module 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
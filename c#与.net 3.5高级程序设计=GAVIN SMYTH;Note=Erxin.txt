c#与.net 3.5高级程序设计=GAVIN SMYTH;Note=Erxin

:The default response file, *.rsp
csc.rsp), which is located in the same directoryas csc.exeitself. This file will be automatic referenced when you build *.cs file.

:Unique features of visual studio 2008
>visual xml editor
>support mobile device
>support office development
>support workflow
>support code refactoring
>visual class design utilites
>object test bench window

:visual studio tools
>object viewer
>visual class designer, select one class file and click the view class diagram button on the top of the solution explorer

:helpful third party development tools
>fxCod; coding guidlines, http://www.gotdotnet.com/team/fxcop
>reflector; ilspy
>nant; equal as java ant, it let developer define and excute detail build scripts
>ndoc, generate code documents file for c# of popular format(*.chm, xml, html...)
>nunit, like junit testing tool

:Anatomy of a simple c# program
>main's return value
an application’s return value is stored within a system envi-ronment variable named  %ERRORLEVEL%.
>get command line args
	- main(string[] args)
	- access command-line arguments using the static GetCommandLineArgs()method of the System.Environmenttype.
>we could mork debug command line by setting it in the project property window
>memeber of numerical data type
	- doulbe.epsilon, E in mathematic
	- min, max, infinite for each type
>verbatim
// White space is preserved with verbatim strings.
string myLongString = @"This is a very
						very
						very
						long string";
						Console.WriteLine(myLongString);
>use check keyword to check overflow exception
>c3 project support project wide overflow check by setting project property in the addvanced tab, check the checkbox 'check for arthmetic overflow/underflow'						
>system.convert class is language neutral, c# also provide explicit conversion operator
	
:Programming Constructs	
>parameters
out; ref; params, could let the function pass variable paramters
>enum value don't need to have order and even could have same value, it's saved as int by default.
 System.enum calss have serveral static methods to deal with enum type value
>passing function parameters
	- passing value by value type
	public functionName(some_class_type p){}
	- passing value by reference type
	public functionName(ref some_class_type p){}
	- difference
	If a reference type is passed by reference, the callee may change the values of the object’s
	state data as well as the object it is referencing.
	If a reference type is passed by value, the callee may change the values of the object’s state
	data but not the object it is refer encing.
>nullable value
the symbol ? is a shortcut to creat Nullable<T> structure type.

:defining encapsulated class types
>use this keyword to call the same level contructor
class className
{
	public className():this(0,2){}
	public className(p0, p1)
}
>static constructor
a single static constructor.
no modifier and cannot parameters.
exactly only one time
when creates an instance of the class or beforeaccessing the first static member invoked by the caller.
executes before any instance-level constructors.
>comment the code and generate the doc by /doc, doc element
<c>, <code>, <example>, <exception>, <list>, <param>, <permission>, <remarks>, <returns>, <see> cross-references related item, <seealso>, <summary>, <value>
these fields also could be enter by class details window
the xml document file could be generate by setting the build property, then *.doc file could be generate by ndoc
>nested type class
Nested types allow you to gain complete control over the access level of the inner type, as
they may be declar ed priv ately (recall that nonnested classes cannot be declared using the
private keyword).
Because a nested type is a member of the containing class, it can access pr ivate members of the containing class.
Often times, a nested type is only useful as a helper for the outer class, and is not intended for use by the outside world.
>shadow the parent members
in sub class define use keyword 'new'; There is a way to cal the parent member by (parent)childObj.member
>object->equals(), is to test whether two var point to the same obj in memory
>override getHashCode, could use custom define toString() method and call the string.GetHashCode() method to simplify the implementation
>run c# at start up, reference windows script host object model
>exception properties
	- targetSite
	- stackTrace
	- HelpLink
	- Data, a object implement IDictionary
>system level exception
>custom excetion's members should be define as public. VS have a code snippet of exception to build a custom exception class derived from exception
	- derives from exception/applicationException
	- marked with [System.Serializable] attribute
	- define a default constructor
	- define a constructor set the inherited message property
	- define a constructor to handle "inner exceptions"
	- define a constructor to handle the serialization of your type
>support catch all exception by generic catch
try{}catch{}

:Object lifetime
>use system.gc to interact with garbage collector
>setting ojbect reference to null is not free the memeroy immediately
>role of application roots, a  root is a storage location containing a reference to an object on the heap, root can be
    * reference to global objects
    * reference to static objects
    ...
    * have three generation degree, 0, 1, 2
>system.gc type
    * force to garbage collection
GC.Collect();
GC.WaitForPendingFinalizers();
    * only if create a managed class to mange unmanged resource then it's need to interact with GC
    * unmanaged resources are obtained by directly calling into the API of the operating system using Platform Invocation Services (PInvoke) or due to some very elaborate COM interoperability
    * Finalize(), can clean up unmanaged resources when garbage collected
    * IDisposable, it manually calls Dispose() before allowing the object reference to drop out of scope.
    the garbage collector has no clue about the IDisposable interface and will never call Dispose()
>





	
	
	
	
	




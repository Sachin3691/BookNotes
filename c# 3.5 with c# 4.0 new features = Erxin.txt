c# 3.5 with c# 4.0 new features = Erxin

C# 2.0新特性与C# 3.5新特性、细数C# 4.0四大新特性（代码示例）  
2010-08-25 15:03:42|  分类： c#.NET |字号 订阅
C# 2.0新特性与C# 3.5新特性

一、C# 2.0 新特性：

1、泛型
List<MyObject> obj_list=new List();
obj_list.Add(new MyObject());

2、部分类(partial)
namespace xxx
{
public partial class Class1
{
private string _s1;
public string S1
{
get { return _s1; }
set { _s1 = value; }
}
}

//或在另一个文件中
public partial class Class1
{
public string GetString()
{
string s = this.S1 + "aaa";
return s;
}
}
}


3、静态类
public static class MyStaticObject
{
private static string _s;
static MyStaticObject()
{
_s = "Hello";
}
public static string Mothed1()
{
return _s + ",world.";
}
}

4、属性访问器可访问性
public class Class2
{
private string _str;
public string Str
{
get { return _str; }
protected set { _str = value; }
}
}

5、可空类型
int? aa = null;
aa = 23;
if (aa.HasValue)
{
int bb = aa.Value;
}


6、匿名方法
class SomeClass //在C#1.0中
{
delegate void SomeDelegate();
public void InvokeMethod()
{
SomeDelegate del = new SomeDelegate(SomeMethod);
del();
}
void SomeMethod()
{
MessageBox.Show("Hello");
}
}

class SomeClass2
{
public delegate void SomeDelegate();
public void InvokeMothed()
{
SomeDelegate del = delegate {
MessageBox.Show("Hello");
};
del();
}
}


7、名称空间别名限定符
global::

二、C# 3.0/3.5 新特性：
1、LinQ(语言集成查询)
以前,查询XML文件使用XPath,数据库刚用SQL,LinQ搜索任何IEnumerable数据源.
在ORM解决方案中,LINQ对象用途很大.
示例:
List customers = new List();
IEnumerable query_result = from c in customers
where c.Money > 100
orderby c.Name
select c;
Linq 包括 Linq to SQL, Linq to Objects, Linq to XML 和 ADO.NET Entity Framework 等几个部分

2、Lambda表达式。更激动人心的,是一种匿名函数结构,它可以方便的实现委托、查询综合和扩展方法的 delegate 类型参数的初始化定义.
示例:原来的:
delegate void Func(int x);
void Add(int x){x++;}
Func f=new Func(Add);
f(1);
可简化为:
Func f=(x)=>{x++;};
或:
Func f=(int x )=>{x++;};


3、隐式类型本地变量。var关键字(类型脚本语言中的隐式声明变量,主要针对LinQ设计)
var num=0;
var nums[]={1,2,3,4,5};
var num='a';
var list=new List();
foreach(var i in nums){
num+=i;
}

4、扩展方法。extension(允许您扩充任何类,甚至是标记为封装的类,对于扩展的方法必须在静态类里来扩展)
示例,在string上实现Count()方法:
using System.Runtime.CompilerService;
public class Extensions{
[Extension()]
public int Count(this string source){
int count = 0;
foreach (var item in source){
count++;
}
return count;
}
}
//使用:
string s="Hello,world!";
int i=s.Count();


5、对象和集合初始值设定项。初始化的简化,写实体类方便了
public class Person{
public string Name{get;set;} //自动实现属性
public int Age{get;set;}
}
var person1=new Person{Name="tang",Age=21}; //...
var persons=new List{ //集合初始化器
new Person{Name="TEW",Age=21},
new Person{Name="RSA",Age=18}
};

6、宽松委托。宽松委托使得 C# 在判断委托实例化赋值时，对于签名不同的函数可以接受。例如 EventArgs 和 MouseEventArgs 是具备继承关系的类，当它们出现在同一个接受 EventArgs 类型参数的委托定义中时，编译器对于这两种委托都能接受。例如：

delegate void A (object sender, MouseEventArgs e);
delegate void B (int a, int b);

EventHandler e1, e2;
e1 = new A(...);    // OK
e2 = new EventHandler(...);   // OK
e1 = e2;    // OK

B b = (long a, int b) +> ...{ };   // OK

7、自动实现属性。

在定义类的属性时，常常需要像下面的代码一样封装一个域。

private string name;

public string Name ...{ get ...{ return name; } set ...{ name = value; } }
C# 3.0 提供了一种简化的属性定义方法，可以实现上述代码的作用。

public string Name ...{ get; set; }
这就是自动实现属性。编译器自动实现类似域封装的代码。不过自动实现属性不能定义只读和只有 get 过程的属性；set 也不能具备访问性描述。

8、匿名类型

匿名类型常常用在查询表达式的结果中，因为这种类型的返回值往往是一个包含一种特定类型的 IEnumerable<T>。例如，要从上面的例子中选出年龄大于 21 岁，身高大于 160 厘米的 Person 集合，可以采用如下形式。

var result = from person in persons where person.Age >= 21 && person.Height >= 160
    select new ...{ Name = person.Name, Age = person.Age, Height = person.Height / 100 };

new { Name = person.Name, Age = person.Age, Height = person.Height / 100 } 是一个匿名类型，编译器将对它做如下声明。

public class _Anonymous_Name_Age_Height ...{
    public string Name;
    public string Age;
    public decimal Height;
}

9、分部方法(partial分部类的分部方法,必须是void返回类型)
// 文件 1.cs
public partial class A{
void B(); //声明
}

// 文件 2.cs
public partial class A{
void B { Console.WriteLine("B invoked."); } //实现
}

这种语法可以把函数的定义和声明分开编写。使用分部方法需要注意：

1、分部方法的类实体必须为 partial。
2、分部方法的返回值必须为 void。
3、如果没有实现分部方法，但却定义了此方法的声明，在使用这个包含分部方法的类时，编译器自动将没有实现的方法签名移除。


if ($ != jQuery) { $ = jQuery.noConflict(); }
细数C# 4.0四大新特性（代码示例）

在之前的文章中，我们曾介绍过C#的历史及C# 4.0新增特性，包括：dynamic、命名和可选参数、动态导入以及协变和逆变等。今天我们结合代码实例来具体看一下C# 4.0中的四个比较重要的特性。

　　1.dynamic ExpandoObject

　　熟悉js的朋友都知道js可以这么写 ：


var t = new Object();  t.Abc = ‘something’;  t.Value = 243;

　　现在这个js动态语言的特性，我们也可以在c#中使用了，前提是将一个变量声明为ExpandoObject类型。如下例：


static void Main(string[] args) { dynamic t = new ExpandoObject(); t.Abc = "abc"; t.Value = 10000; Console.WriteLine("t's abc = {0},t's value = {1}", t.Abc, t.Value); Console.ReadLine(); }

C#4.0中新增了一个命名空间System.Dynamic来实现对此应用的支持，这种用法的意义何在，现在我还不太清楚，也是是C#向动态语言过渡的一种试探吧。关于动态语言请参考《5月编程语言排行榜：动态语言的前世今生》。

　　2.泛型自动转换

　　在C# 4.0之前下面的代码是不可以编译通过的


IEnumerable<object> objs = new List<string> {          "I'm 0","I'am 1","I'am 2"     };  

　　是在C# 4.0中这种声明是允许的，不过也仅限于泛型接口，泛型类型的类似做法是不允许的，如下代码是有编译错误的


List<object> objList = new List<string> {           "I'am 0","I'am 1","I'am 2"     };  
3.方法参数之可选参数

　　如下方法声明的语法


static void DoSomething(int notOptionalArg,string arg1 = "default Arg1", string arg2 = "default arg2") { Console.WriteLine("arg1 = {0},arg2 = {1}",arg1,arg2); }

这个方法有三个参数第一个是必选参数，第二个和第三个是可选参数，他们都有一个默认值。这种形式对固定参数的几个方法重载很有用。如下调用：


static void Main(string[] args) { DoSomething(1); DoSomething(1, "葫芦"); DoSomething(1, "葫芦", "黄瓜"); Console.ReadLine(); }

也许你会想到，假如我有一个和可选参数方法不选某个参数相同的方法签名的方法时，C#会怎么处理呢，我们看下下面的代码


static void DoSomething(int notOpArg, string arg) { Console.WriteLine("arg1 = {0}", arg); } 这里又重载了一个DoSomething

这个方法有两个参数，但是没有可选参数，实验证明调用DoSomething(1,”arg”)时会优先执行没有可选参数的方法。

　　4.方法参数之命名参数


static void DoSomething(int height, int width, string openerName, string scroll) { Console.WriteLine("height = {0},width = {1},openerName = {2}, scroll = {3}",height,width,openerName,scroll); }

命名参数让我们可以在调用方法时指定参数名字来给参数赋值，这种情况下可以忽略参数的顺序。如下方法声明：

　　我们可以这样来调用上面声明的方法


static void Main(string[] args) { DoSomething( scroll : "no",height : 10, width : 5, openerName : "windowname"); Console.ReadLine(); }

很显然的这是一个语法糖，但是在方法参数很多的情况下很有意义，可以增加代码的可读性。
Cross platform development with mono game=John Sonmez;Note=Erxin

# introduction to monoGame
- what this course covers
	+ simple 2D game development
	+ XNA framework
	+ cross platform development
	+ mono game is a open source XNA framework implementation
- view of game development
	+ game programming
	2d, 3d, game design, physics, animation
	+ framework for graphic
	xna, physics engines, control, audio, graphics
	+ platform specifics
	window, ios, android, macOs, linux
- course goals
	+ build a simple pong clone
	+ get it working on multiple platform
	+ learn xna
- what is xna, is a development framework for xbox 360 and window phone 7
- what is mono game, it is a open source xna implementation
	+ current release 2.5.1
	+ supports
		* windows, macos, ios, android, linux
		* 2d graphics
		* xna content files
		* local networking, internet networking
		* sound (mostly)
		* native asset loading(png, jpg, gif, tiff, pdf, wav, mpeg)
		* gamepads, gestures, accelormeter
	+ mono game, 3.0
		* 3d graphics
		* internet working
		* window 8
		* playstation
		* other bits and pieces
	+ check out infinite flight
	http://itunes.apple.com/us/app/infinite-flight/id471341991?Is=1&mt=8
- so why mono game
xbox, window7, wp7, free, already familiar xna, open source, same code multiple platforms easy to get start
- how mono game works
your game
xna api, platform specific wrapper code
mono touch, mono mac, mono for android, linux mono
native platform
- installing
	+ website, download mono develop which is a ide for multiple platform to write c# and other languages
	monodevelop.com
		* install monodevelop
		* install gtk for .net 2.0
	+ download mono game
	http://monogame.codeplex.com
	+ install open tk, prevent throw exception when run game on window
	http://www.opentk.com
- the monogame project, in visual studio support
	+ linux project
	+ window project
	+ there is a content folder for the game project which is different in xna project
	
# building a pong clone with monoGame
- basics of pong
two paddle and one ball
- breaking apart the game
	+ build player paddle
	+ make paddle movable
	+ make paddle stay in bounds
	+ build ball which starts attached to paddle
	+ make ball the "fired" from paddle
	let the player press the space bar to let the ball fire
+ building the paddle
	+ create the graphic
	+ load the graphic
	+ draw the graphic at the correct position
- sprites
	+ basic container for our graphic
	+ stores
	textures, position, velocity, more
- drawing the paddle
	+ free graphic tool
	paint.net
	+ building the paddle
	create mono window project and add the paddle image into the content folder
	+ the the paddle property to copy in newer  with the Copy to Output Directory property
	+ graphic device manager, is the low level graphic engine
	+ sprite batch to control the draw sprite sequence
	+ load the paddle image from the content folder
	Texture2D paddle = Content.Load<Texture2D>("paddle"); // the name of the content 
	+ draw the texture
	spriteBatch.Begin();
	spriteBatch.Draw(paddle, Vector2.Zero, Color.White);
	spriteBatch.End();
	+ show the mouse to visible, set it in the Initialize method
	IsMouseVisible = True
- refactoring to use sprite, make the game object draw themself and update themself
- tracking movement
get user input->adjust velocity->update location
- XNA contain several math helper functions such as 
x = MathHelper.Clamp(x, min, max);
- reflecting the ball
- implementing the computer paddle
- add gameObject class to reference all the objects in the current game, such as computer paddle, player paddle and the ball
- moving the paddle and make the ball move a little bit slow than the computer paddle
- add collision detection logic into the update logic into the ball
- scoring, check the left right side of the boundaries
	+ monogame currently don't have the licensing
	+ need to use XNA studio to create XNB file for the fonts and loaded from monogame
	+ add the required font into the content project of the XNA project and build solution
	+ set the added font's property to Content and set the principle to Copy if Newer
	+ load the game font in the monoGame
	SpriteFont gameFont = Content.Load<SpriteFont>("GameFont");
	+ create a score class to draw and update the scrows
	+ SpriteFont have method to calculate the length of the input text
	font.MessureString(inputString)
- update the AI to make the computer is beatable
	+ add threshold to make the computer paddle have a fake size of the computer paddle then the computer may miss the ball due to lack move with the ball

# running on android
- mono for android
http://xamarin.com/monoforandroid, trail supports emulator only
mono for android course on pluralsight, http://bit.ly/MjVK5
- add the relative files as linked, exclude the Program file of mono for window it is a shell of the game, in android there will be a new one
- add reference for mono game, currently it's just a mono for android project
browser to the mono game installed, %windir%\program files\mono game\
	+ Lidgren.Network.Android.dll
	+ MonoGame.Framework.Android.dll
	+ OpenTK.dll
- update the content file's build action property to AndroidAsset 
- update the Activity file of the mono project to inherite from monoGame Activity
public class Activity1:AndroidGameActivity
{
	protected override void OnCreate(Bundle bundle)
	{
		Game1.Activity = this;
		var game = new Game1();
		SetContentView(game.Window);
		game.Run();
	}
}
- touch control and tab to fire the ball
	+ initialize the touch input, use the XNA touch framework
	TouchPanel.EnabledGestrues = GestrueType.VerticalDrag | GestrureType.Flick | GestrueType.Tap;
	+ add TouchInput class and TouchInput property for gameObject class as property
	public class TouchInput
	{
		public bool Up{get;set;}
		public bool Down{get;set;}
	}
	+ initialize the touch input in the Update method
	gameObject.TouchInput = new TouchInput();
	+ add read touch input method into the game logic
	private void GetTouchInput()
	{
		while(TouchPanel.IsGestureAvaliable)
		{
			var gesture = TouchPanel.ReadGesture();
			if(gesture.Detal.Y > 0)
				gameObject.TouchInput.Down = true;
			if(gesture.Detal.Y < 0)
				gameObject.TouchInput.Up = true;
		}
	}
	+ add gesture control intpu the paddle update logic
	gameObject.TouchInput.Up
	+ the paddle may move slow in the real android device
		* add conditional compilation symbols
		Project Property| Build, add conditional compilation symbols such as ANDROID
		#if ANDROID
			private const float PADDLE_SPEED = 2f;
		#else
			private const float PADDLE_SPEED = 0.2f;
		#endif
	+ add tab event
	if(gesture.GestureType = GestureType.Tap)
		gameObject.TouchInput.Tap = true;
- steps to port game to android
	+ install mono for android
	+ create mono for android project
	+ links files from original project
	+ add references
	+ change android activity to launch the game
	+ update any controls

# Running on ios
- need a mac
	+ os x, moutain lion
	+ basic prerequisites
	mac, install xcode, install monoTouch
- basic plan
	+ window 7 project -> linked files -> MonoTouch Project -> MonoGame IOS
- MonoTouch, pluralsight course
http://bit.ly/RSZptd
http://xamarin.com/monotouch/, trial support simulator only, paid version for real device
support program c# on your ios device
- shift to ios
	+ open the solution
	+ create a project for ios 
	+ get monoGame, monogame.codeplex.com
	+ add mono game for ios project from the monoGame download directory
	+ add lidGren for ios project 
	+ add reference to the pre two projects into monoGame for ios
	+ add content as linked files
	+ add source code file as linked files
	+ changing the code file AppDelegate.cs file, add
	using PongCloneDemo;
	
	//add create game instance for the appDelegate class
	[Register("AppDelegate")]
	{
		Game1 game;
		public override bool FinishingLaunching(UIApplication app, NSDictionary options)
		{
			game = new Game1();
			game.Run();
			return True;
		}
	}
	+ set all the content file's properties to build action to Content and Copy If Newer 
- fix the velocity problem, update the game object velocity to depend on the game passed seconds
location += (Velocity * (float) gameTime.ElapsedGameTime.TotalSeconds);
update the velocity to change with unit
- no keyboard, move the keyboard checking into this compile macro
#if HAS_KEYBOARD
#else
#endif
- fixing the ball for ios
the ios is negative direction to move right difference with other platform

# running on window phone7
- difference changes
	+ need to set the graphic to fullscreen
	graphic.IsFullScreen = true;
	+ need to change the gameBoundaries to get the exact screen size from GameDevice.Viewport.Width GameDevice.Viewport.Height instead of window.width, window.height
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Node.js WebDevelopment - Fourth Edition=David Herron;Note=Erxin

# The capabilities of node.js 
- io 
The Node.js I/O library is general enough to implement any sort of server executing any TCP or UDP protocol, whether it's domain name system (DNS ), HTTP,  internet relay chat (IRC), or FTP.

- JavaScript engine provider. Visit https://github.com/nodejs/node-chakracore to take a look at the project.

- capabilities of node.js 
build tools 
web UI testing 
desktop applications, node-webkit(NW.js)
mobile applications 
internet of things, general purpose I/O 

- reference 
https://www.paypal-engineering.com/

- Node.js asks us to think differently about concurrency. Callbacks fired asynchronously from an event loop are a much simpler concurrency model—simpler to understand, simpler to implement, simpler to reason about, and simpler to debug and maintain. 

- Intel's paper, Increasing Data Center Efficiency with Server Power Measurements https://www.intel.com/content/dam/doc/white-paper/intel-it-data-center-efficiency-server-power-paper.pdf

https://software.intel.com/en-us

- Some have popularized the microservice concept as a way to describe this kind of system. According to the microservices.io 

- microservice just like components 
    + managed by a small team 
    + deployed independently 
    + easier to switch 

- application deployment guide lines, This model is published on http://12factor.net and is a set of guidelines for application deployment in the modern cloud computing era.

    + codebase traced in version control 
    + dependencies explicitly declare and isolated 
    + config store in the environment 
    + backing services as attached resources 
    + build, release, run strictly separate 
    + processes execute the app as stateless processes 
    + export services via port binding 
    + scale out via the process model 
    + disposability, fast startup and graceful shutdown 
    + dev/prod parity, keep development staging and production as similar as possible 
    + treat logs as event streams 
    + admin processes, run admin/management tasks as one-off processes 


# Setting up node.js 
- Because many Node.js packages are written in C or C++, you must have a C compiler (such as GCC), Python 2.7 (or later), and the node-gyp package. If you plan to use encryption in your networking code, you will also need the OpenSSL cryptographic library. 

http://python.org 
gcc 
http://openssl.org 

- node.js source, https://github.com/nodejs/node/blob/master/README.md.

Visual Studio 2017: https://www.visualstudio.com/downloads/Build tools: https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017


- simplify managing multiple Node.js/NPM releases and providing commands to change your PATH the smart way:
Node version manager: https://github.com/tj/n
Node version manager: https://github.com/creationix/nvm


$ nvm ls 
to list all the installed node versions 

$ nvm use <version> 
to switch between different node version 

    + for window 
https://github.com/coreybutler/nvm-windows
https://github.com/marcelklehr/nodist

- native code modules and node-gyp. Some modules in the NPM repository are native code, and they must be compiled with a C or C++ compiler to build the corresponding .node files  (the .node extension is used for binary native-code modules).

For example, the libxslt and libxmljs modules are wrappers around the C/C++ libraries of the same name. The module includes the C/C++ source code, and when installed, a script is automatically run to do the compilation with node-gyp.

$ mkdir temp$ cd temp$ npm install libxmljs libxslt  

Its GitHub repository contains documentation at https://github.com/nodejs/node-gyp.

- editors and debuggers For a full list of debugging options and tools, see https://nodejs.org/en/docs/guides/debugging-getting-started/.

- node.js's command-line tools 

$ node --help

- ECMAScript 

The ES2017 language spec is published at: https://www.ecma-international.org/publications/standards/Ecma-262.htm.

The Node green website (http://node.green/) has a table listing the status of a long list of features in Node.js versions.

- using babel to use experimental JavaScript features 

    + setup babel 
http://babeljs.io/docs/setup/

    + create .babelrc contains the configurations 
    
    
# Node.js modules 
- define node module 

//simple.js 
var count = 0;

exports.next = function() { return ++count; };
exports.hello = function() {  return "Hello, world!";};

//reference simple.js 
$ node> const s = require('./simple');

- commonjs and ES2015 module 
exports.funcName = function(arg, arg1) { ... };module.exports.funcName = function(arg, arg2) { .. }; 

- ES6 module format 
var count = 0;

export function next() { return ++count; }

function squared() { return Math.pow(count, 2); }

export function hello() {    return "Hello, world!";}
export default function() { return count; }
export const meaning = 42;
export let nocount = -1;export { squared };

- JSON modules 

Node.js supports using require('/path/to/file-name.json') to import a JSON file. 

It is equivalent to this code:

const fs = require('fs');

module.exports = JSON.parse(fs.readFileSync('/path/to/file-name.json', 'utf8'));

- supporting ES6 modules with babel 
- module identifiers and pathnames 
    + relative module identifiers 
    + absolute module identifiers 
    + top-level module identifiers 
    
- commonjs load with require, ES6 load with import 
- Support for dynamic imports landed in Node.js 9.7. See the documentation at: https://github.com/tc39/proposal-dynamic-import.


- ES6 module providing some metadata about the module. See https://github.com/tc39/proposal-import-meta.

- npm  Conceptually, it's similar to tools such as apt-get (Debian), rpm/yum (Red Hat/Fedora), MacPorts (macOS), CPAN (Perl), or PEAR (PHP). 

- configure the PATH for npm 
$ export PATH=./node_modules/.bin:${PATH}     # bash

add  enter .\node_modules\.bin  into PATH in window 

- update packages 
$ npm outdated 
$ npm update [package]

- install from outside the npm repo 
    + url point to .tar or .gz file 
    + git 
    $ npm install git+ssh://user@hostname:project.git#tag --save  
    
    + local file system 
    
- other package management system 

Yarn (see https://yarnpkg.com/en/) is a collaboration between engineers at Facebook, Google, and several other companies.


# HTTP Servers and Clients 
- Sending and receiving events with EventEmitters 
- EventEmitter class, By convention, the event name error indicates errors. The emitter and event handler can send any number of parameters 

var emitter = new Emitter();
emitter.emit('eventName', arg0, arg1, ...);

emitter.on('eventName', (arg0, arg1, ...) =>{
});
- HTTP server applications 
const http = require('http'); 
const server = http.createServer(); 

server.on('request',  (req, res) => {   
    res.writeHead(200, {'Content-Type': 'text/plain'});   
    res.end('Hello, World!\n'); 
}); 
server.listen(8124, '127.0.0.1'); 
console.log('Server running at http://127.0.0.1:8124'); 

The request event takes a function, which receives request and response objects. The request object has data from the web browser, while the response object is used to gather the data to be sent in the response. The listen function causes the server to start listening and arranging to dispatch an event for every request arriving from a web browser.

- ES2015 multiline and template strings 
- HTTP sniffer - listening to the HTTP conversation, boot the events for the server object such as 'close', 'checkContinue', 'upgrade' etc. 

- web application frameworks 

Express is the most popular, and Koa (http://koajs.com/) should be considered because it was developed by the same team and has fully integrated support for async functions.

The ExpressJS Wiki is located at https://github.com/expressjs/express/wiki.
 
- The usual best practices include the following:

    + Providing a page for bad URLs (the 404 page)
    + Screening URLs and forms for any injected scripting attacks
    + Supporting the use of cookies to maintain sessions
    + Logging requests for both usage tracking and debugging
    + Authentication
    + Handling static files, such as images, CSS, JavaScript, or HTML
    + Providing cache control headers to caching proxies
    + Limiting things such as page size or execution time
    
- getting started with Express 
    + http://expressjs.com/ 
    
- setting environment variables in windows cmd.exe command line. The best solution appears to be the cross-env package in the npm repository, see: https://www.npmjs.com/package/cross-env  With this package installed, commands in the scripts section in package.json

- Handlebars.js template engine. Handlebars was built on top of Mustache, and was originally designed for use in the browser; for more information see its homepage at http://handlebarsjs.com/. 

The ExpressJS Wiki has a list of template engines for Express https://github.com/expressjs/express/wiki#template-engines.

The app.set function is used for setting application properties. It'll be useful to browse the API documentation as we go through (http://expressjs.com/en/4x/api.html).

Logging is enabled using the Morgan request logger. Visit https://www.npmjs.com/package/morgan for its documentation.
The body-parser module handles parsing HTTP request bodies. Visit https://www.npmjs.com/package/body-parser for its documentation.
The cookie-parser module is used to parse HTTP cookies. 
Visit https://www.npmjs.com/package/cookie-parser for its documentation.
A static file web server is configured to serve the asset files in the public directory.
Two router modules, routes and users, to set up which functions handle which URLs.

app.use(logger('dev')); 
app.use(bodyParser.json()); 
app.use(bodyParser.urlencoded({ extended: false })); 
app.use(cookieParser()); 
app.use(express.static(path.join(__dirname, 'public')));  
app.use('/', routes); 
app.use('/users', users); 

- the express middleware 

We do have a middleware function right in front of us. Refer to its documentation at http://expressjs.com/en/guide/writing-middleware.html.

- implement service in express 
in package.json add scripts section 

"server": "SERVERPORT=3002 node ./fiboserver" 


const math = require('./math');
const express = require('express');
const logger = require('morgan');
const app = express();
app.use(logger('dev'));
app.get('/fibonacci/:n', (req, res, next) => {
    math.fibonacciAsync(Math.floor(req.params.n), (err, val) => {
        if (err)
            next('FIBO SERVER ERROR ' + err);
        else
            res.send({
                n: req.params.n,
                result: val
            });
    });
});
app.listen(process.env.SERVERPORT);

- restful modules and frameworks 

Restify (>http://restify.com/): This offers both client-side and server-side frameworks for both ends of REST transactions. The server-side API is similar to Express.

Loopback (http://loopback.io/): This is an offering from StrongLoop, the current sponsor of the Express project. It offers a lot of features and is, of course, built on top of Express.


# First express application 
- promise, async/await
- express and the MVC paradigm 
- theming your express application 


# Implement mobile first paradigm 
- For Google's take, including technical tips on the markup to use, see http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html.

- The Twenty Twelve theme for Wordpress has a straightforward responsive design implementation. It's not built with any framework

wordpress repository at https://themes.svn.wordpress.org/twentytwelve/1.9/style.css.

specific media queries for every known device, which is available at https://css-tricks.com/snippets/css/media-queries-for-standard-devices/.

    + devices 
    small 
    medium 
    large 
    extra-large 
    landscape/portrait 

- twitter bootstrap, http://getbootstrap.com for more details.

The most straightforward choice is using Bootstrap (https://www.npmjs.com/package/bootstrap), 
popper.js (https://www.npmjs.com/package/popper.js), 
Query (https://www.npmjs.com/package/jquery) packages in the npm repository.

- Alternative layout framework 
ure.css ( https://purecss.io/): A responsive CSS framework with an emphasis on a small code footprint.
Picnic CSS (https://picnicss.com/): A responsive CSS framework emphasizing small size and beauty.
Shoelace (https://shoelace.style/): A CSS framework emphasizing using future CSS, meaning it uses CSS constructs at the leading edge of CSS standardization. Since most browsers don't support those features, cssnext (http://cssnext.io/) is used to retrofit that support. Shoelace uses a grid layout system based on Bootstrap's grid.
PaperCSS (https://www.getpapercss.com/): An informal CSS framework which looks like it was hand drawn.
Foundation (https://foundation.zurb.com/): Self-described as the most advanced responsive frontend framework in the world.
Base (http://getbase.org/): A lightweight modern CSS framework.

- flexbox and css grids 
The two new CSS layout methodologies, Flexbox (https://en.wikipedia.org/wiki/CSS_flex-box_layout) and CSS Grids (https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout), are a significant improvement

- icon libraries. There are several icon libraries that can be used in a website. The Bootstrap team has a curated list at http://getbootstrap.com/docs/4.1/extend/icons/. For this project, we'll use Feather Icons (https://feathericons.com/) and its conveniently available npm package, https://www.npmjs.com/package/feather-icons.

- customized bootstrap, The official documentation on the Bootstrap website (http://getbootstrap.com/docs/4.1/getting-started/build-tools/) is useful for reference on the build process.


# Data storage and retrieval 
- logging 
This is what prints the requests on the Terminal window. Visit https://github.com/expressjs/morgan for more information.

- Express uses the debug package for debugging traces. https://www.npmjs.com/package/debug 

By using rotating-file-stream (https://www.npmjs.com/package/rotating-file-stream), we're guaranteed to have log file rotation with no extra systems required.The fs-extra module is being used because it adds Promise-based functions to the fs module (https://www.npmjs.com/package/fs-extra).

- The logbook module (https://github.com/jpillora/node-logbook) offers some useful capabilities in term of not only capturing process.stdout and process.stderr, but sending that output to useful places.

- dynamic import, Dynamic import is an import() function that returns a Promise that will resolve to the imported module. 

- storing notes with the LevelUp data store. small-footprint database engine: LevelUP. This is a Node.js-friendly wrapper around the LevelDB engine

Visit https://www.npmjs.com/package/level for information on the module. 

- sqlite3 
To learn about that database engine, visit http://www.sqlite.org/.To learn about the Node.js module, visit https://github.com/mapbox/node-sqlite3/wiki/API or https://www.npmjs.com/package/sqlite3.

- store with ORM(object-relational mapping) with sequelize 

There are several popular SQL database engines, such as PostgreSQL, MySQL (https://www.npmjs.com/package/mysql), and MariaDB (https://www.npmjs.com/package/mariasql). 

The Sequelize module (http://www.sequelizejs.com/) is Promise-based, offers strong, well-developed ORM features, and can connect with SQLite3, MySQL, PostgreSQL, MariaDB, and MSSQL.

configure connection with YAML

- mongodb. MongoDB is widely used with Node.js applications, a sign of which is the popular MEAN acronym: MongoDB (or MySQL), Express, Angular, and Node.js. 

mongodb providers, You will need a running MongoDB instance. The compose.io (https://www.compose.io/) and ScaleGrid.io (https://scalegrid.io/) hosted service providers offer hosted MongoDB services. 


# Multiuser Authentication the Microservice Way
- With Express, the best way to do this is with the express-session middleware. It stores data as a cookie and looks for that data on every browser request

- Passport (http://passportjs.org/). It supports a long list of services against which to authenticate, making it easy to develop a website that lets users sign up with credentials from another website

express-authentication (https://www.npmjs.com/package/express-authentication), bills itself as the opinionated alternative to Passport.

- REST services, and we'll use one of them – Restify (http://restify.com/).

Because we added check with the initial set of server.use handlers, it is called on every request. Therefore, every request to this server must provide the HTTP basic auth credentials required by this check.

import restify from 'restify';
import util from 'util';
import DBG from 'debug';
const log = DBG('users:service');
const error = DBG('users:error');
import * as usersModel from './users-sequelize';
var server = restify.createServer({
        name: "User-Auth-Service",
        version: "0.0.1"
    });
server.use(restify.plugins.authorizationParser());
server.use(check);
server.use(restify.plugins.queryParser());
server.use(restify.plugins.bodyParser({
        mapParams: true
    }));

- scripts to test and administer the user authentication server 

rest client. we're using a companion library, restify-clients, which has been spun out of Restify

- accessing the user authentication REST API 
    + libraries 
restify-clients 
superagent 
https://www.npmjs.com/package/superagent

    +  The user is expected to provide a base URL, such as http://localhost:3333/, in the USER_SERVICE_URL environment variable
    
- express session support. Express Session support, including all the various Session Store implementations, is documented on its GitHub project page at https://github.com/expressjs/session. 

- Supporting Twitter requires installing TwitterStrategy, registering a new application with Twitter, and adding a couple of routes into routes/user.mjs 

To register a new application with Twitter, go to https://apps.twitter.com/. 

-  In the Slack API documentation (https://api.slack.com/docs/oauth-safety), we're warned Do not distribute client secrets in email, distributed native applications, client-side JavaScript, or public code repositories.


# Dynamic Client/Server Interaction with Socket.IO 
- This is one possible role of the real-time web; pages that update themselves as page content changes. All kinds of systems support real-time interactivity between folks on the same website. 

The Comet application architecture (Comet is related to AJAX, and both happen to be names of household cleaning products) involves holding the HTTP connection open for a long time, with data flowing back and forth between browser and server over that channel.

Socket.IO library (http://socket.io/). This library simplifies two-way communication between the browser and server, and can support a variety of protocols with fallback to old-school web browsers

Because Socket.IO falls back on so many alternate protocols (WebSockets, Flash, XHR, and JSONP), it supports a wide range of web browsers, including some old crufty browsers. 


# Deploying node.js applications 
- web services 
reliable 
manageable 
observable 

- traditional Linux node.js service deployment 

    + The other ports, the two for MySQL servers and the user authentication service port, should be hidden.

    + We'll use PM2 (http://pm2.keymetrics.io/) because it's optimized for Node.js processes.
    
    + The pm2 monit command gives you a pseudo-graphical monitor of system activity. For documentation, see http://pm2.keymetrics.io/docs/usage/monitoring/.

- Docker (http://docker.com) is the new attraction in the software industry.
- docker file builder, Dockerfiles describe the installation of an application on a server. See https://docs.docker.com/engine/reference/builder/ for documentation
- Docker compose (https://docs.docker.com/compose/overview/) will solve the other problems we've identified.
- Docker machine (https://docs.docker.com/machine/overview/) is a tool for installing Docker Engine on virtual hosts
- deploying to cloud hosting, The Docker website has a tutorial at https://docs.docker.com/machine/examples/ocean/

he Docker website has a list of drivers at https://docs.docker.com/machine/drivers/


# Unit testing and functional testing 
- mocha and chai the chosen test tools 
Mocha (http://mochajs.org/) 

Chai, see http://chaijs.com/guide/styles/.

- using docker compose to orchestrate test infrastructure 

- Executing test. The build and test results data is used to automatically generate status pages.  Visit https://jenkins.io/index.html

-  Mocha website:  https://mochajs.org/#reporters.

- Frontend headless browser testing. 
    + Puppeteer (https://github.com/GoogleChrome/puppeteer). This tool is a high-level Node.js module to control a headless Chrome or Chromium browser

- You acquire an SSL certificate from Let's Encrypt using an ACME client. ACME is a protocol invented concurrently with the Let's Encrypt service for fetching SSL certificates from a provider. The primary ACME client is Certbot, a command-line tool that helps you register a domain with Let's Encrypt

https://certbot.eff.org/

- The files ending with the .pem extension are PEM-encoded certificates. Privacy Enhanced Mail (PEM), which was an early attempt to develop a secure encrypted email system for the internet. 

- Adding HTTP support to Notes 

import http from 'http';
import https from 'https';

...
const USEHTTPS = process.env.NOTES_USE_HTTPS && (typeof process.env.NOTES_USE_HTTPS === 'string') && (process.env.NOTES_USE_HTTPS === 'true');
const CERTSDIR = process.env.NOTES_CERTS_DIR;
const options = USEHTTPS ? {
    key: fs.readFileSync(`${CERTSDIR}/privkey1.pem`),
    cert: fs.readFileSync(`${CERTSDIR}/fullchain1.pem`),
    ca: fs.readFileSync(`${CERTSDIR}/chain1.pem`)
} : {};
const server = http.createServer(app);
const serverSSL = USEHTTPS ? https.createServer(options, app) : undefined;

import socketio from 'socket.io';

const io = socketio(USEHTTPS ? serverSSL : server, options);
...
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
...
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
if (USEHTTPS) {
    serverSSL.listen(3443);
    serverSSL.on('error', onError);
    serverSSL.on('listening', onListening);
}

    + redirect any HTTP connections to the HTTPS version of your website One method to do this is with the express-force-ssl package for Express. One method to do this is with the express-force-ssl package for Express

    + Qualys SSL Labs test page for SSL implementations. This service will examine your website, especially the SSL certificates, and give you a score. Using the steps in this section will give you an A score. To examine your score, see https://www.ssllabs.com/ssltest/.

- put on your helmet for across the board security. Helmet (https://www.npmjs.com/package/helmet) is not a security silver bullet. It provide several default security options 

Helmet (https://www.npmjs.com/package/helmet) is not a security silver bullet

such as set the X-NDS prefetch control header 

x-frame options header 

remove the x powered by header 

improving HTTPS with strict transport security 

const sixtyDaysInSeconds = 5184000app.use(helmet.hsts({
    maxAge: sixtyDaysInSeconds
}));

- addressing cross-site request forqery(csrf) attacks. 

The csurf package is designed to be used with Express https://www.npmjs.com/package/csurf  In the notes directory, run this:


- denying sql injection attacks. SQL injection is another large class of security exploits, where the attacker puts SQL commands into input data. See https://www.xkcd.com/327/ for an example.

- sequelize deprecation warning regarding operator injection attack 

This issue queue entry has an in-depth discussion of the security problem:  https://github.com/sequelize/sequelize/issues/8417 with more details in the documentation at http://docs.sequelizejs.com/manual/tutorial/querying.html#operators-security.

- scanning for known vulnerabilities. The nsp package (https://www.npmjs.com/package/nsp) scans a package.json or npm-shrinkwrap.json,

According to the npm team, npm version 6 will include this feature as a baked-in capability.  See https://blog.npmjs.org/post/173260195980/announcing-npm6

- using good cookie practices

The package has a few options available, see https://www.npmjs.com/package/express-session:

app.use(session({
        store: sessionStore,
        secret: sessionSecret,
        resave: true,
        saveUninitialized: true,
        name: sessionCookieName,
        secure: true,
        maxAge: 2 * 60 * 60 * 1000 // 2 hours}));



# Cross origin resource sharing 
- The following HTTP request headers specify how external resources should be handled on the client side:

    1. Origin defines where the request originated from
    2. Access-Control-Request-Method defines the HTTP method that was used to request the resource
    3. Access-Control-Request-Header defines any headers that will be allowed in combination with the external resource request

On the server side,  the following headers indicate whether a response is eligible for a CORS-enabled client request:

    1. Access-Control-Allow-Origin: This header either, if exists, specifies that the requester's host is allowed by repeating it, or it could specify that all remote origins are allowed by returning a wildcard: '*'
    2. Access-Control-Allow-Methods: This header specifies the HTTP methods that the server would allow from cross-side's domain
    3. Access-Control-Allow-Headers: This header specifies the HTTP headers that the server would allow from cross-side's domain

- content delivery network. Content Delivery Networks come to help in these cases. They serve as a repository for libraries or other static media content

    + popular javascript cdn 
    
    https://cdnjs.com/

- man-in-the-middle attacks, which can lead to data leakage. To prevent such cases, Transport Layer Security (TLS) should be used. The HTTPS protocol encrypts the transmitted data, ensuring that only appropriate consumers who have the right decryption key will be able to consume the data exposed by the service.

- OpenSSL is available for download at http://www.openssl.org/, where source code distributions are available for all popular operating systems. OpenSSL can be installed as follows:

- Communicable
caching commonly used and often updated resources 
proxying and routing request
securing communication over TLS 

- Modules and Toolkits 
    + Seneca: A microservice toolkit based on property matching
    
    message based microservice. transport agnostic, communication and message transport is separated from your service logic. support plugins 
    
    + Hydra: A package that bundles a couple of modules to help you resolve many microservices concerns, such as distribution and monitoring
    
- storing state

A relational database management system (RDBMS), such as MySQL or PostgreSQLA non-relational database management system, or NoSQL, such as MongoDB or RethinkDBAn in-memory database (IMDB), such as Redis or Memcached

- rethinkDB,  non-relational database using RethinkDB. If you don't have it, just install it by following the official documentation (https://www.rethinkdb.com/docs/).


















    

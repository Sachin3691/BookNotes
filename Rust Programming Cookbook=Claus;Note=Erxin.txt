Rust Programming Cookbook=Claus;Note=Erxin

# Preface
- example code 
https://github.com/PacktPublishing/Rust-Programming-Cookbook. 

- tools 

    Visual Studio Code (https://code.visualstudio.com/)
    rustup (https://rustup.rs)
    rustc (and the rest of the compiler toolchains)
    cargo
    RLS (short for Rust Language Serverâ€”this is for autocompletion)
    Rust language support for Visual Studio Code

- check installed version 

$ rustc --version 

- install rust extension in vscode 
F1 
ext install rust-lang.rust 

- troubleshooting 

$ rm -Rf ~/.rustup 
remove installed rust 

ps> rm ~/.rustup 
powershell 

- create a hello world project with cargo 
$ cargo new hello-world 

    + open directory with vscode 
    
    +  Terminal and navigate to the directory where Cargo.toml is located.
    
    + run the project 
    $ cargo run 
    
    + run test with 
    $ cargo test 
    
    + create a library 
    $ cargo new data-types -- lib 
    
    
- split code with crates and modules 

two projects: one that offers some type of function and another one to use it. Therefore, use cargo to create both projects: 

$ cargo new rust-pilib --lib  

$ cargo new pi-estimator. 
The second command creates a binary executable
    
declare to use the other library as an external crate first. Add the following to Cargo.toml in the pi-estimator project
    
//cargo.toml in pi-estimator project 
[dependencies]
rust-pilib = { path = '../rust-pilib', version = '*'}
    
    
- run bench mark 
$ cargo +nightly bench
    
- compile code comments into a shiny html for document. use //! to document the module from within
$ cargo doc 

- Rust's RFC for supported formatting (https://github.com/rust-lang/rfcs/blob/master/text/0505-api-comment-conventions.md) to find out whether some more advanced statements 

hosted on https://crates.io, on https://docs.rs. 
they can be seen all over the place on https://www.rust-lang.org/learn!

    /// Creates a new empty list.
    /// 
    /// 
    /// # Example
    /// 
    /// ```
    /// use testing::List;
    /// 
    /// let mut list: List<i32> = List::new_empty();
    
- Program to an interface not to an implementation
- Favor object composition over class inheritance
- Sequence types in rust 

    #[test]
    fn exploring_arrays() {
        let mut arr: [usize; 3] = [0; 3];
        assert_eq!(arr, [0, 0, 0]);

        let arr2: [usize; 5] = [1,2,3,4,5];
        assert_eq!(arr2, [1,2,3,4,5]);

        arr[0] = 1;
        assert_eq!(arr, [1, 0, 0]);
        assert_eq!(arr[0], 1);
        assert_eq!(mem::size_of_val(&arr), mem::size_of::<usize>()
         * 3);
    }
    
- debugging rust, required python 3.6
    
    + vscode launch configure 
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "lldb",
            "request": "launch",
            "name": "Debug executable 'debug-me'",
            "cargo": {
                "args": [
                    "build",
                    "--bin=debug-me",
                    "--package=debug-me"
                ],
                "filter": {
                    "kind": "bin"
                }
            },
            "args": [],
            "cwd": "${workspaceFolder}"
        },
        {
            "type": "lldb",
            "request": "launch",
            "name": "Debug unit tests in executable 'debug-me'",
            "cargo": {
                "args": [
                    "test",
                    "--no-run",
                    "--bin=debug-me",
                    "--package=debug-me"
                ],
                "filter": {
                    "kind": "bin"
                }
            },
            "args": [],
            "cwd": "${workspaceFolder}"
        }
    ]
}
    
    + code in main.rs 
struct MyStruct {
    prop: usize,
}

struct Point(f32, f32);

fn main() {
    let a = 42;
    let b = vec![0, 0, 0, 100];
    let c = [1, 2, 3, 4, 5];
    let d = 0x5ff;
    let e = MyStruct { prop: 10 };
    let p = Point(3.14, 3.14);

    println!("Hello, world!");
}

Rust is built on the LLVM compiler toolkit that comes with a range of features out of the box. When a Rust program compiles, it only gets translated into an intermediate language
    
the general debugger, GDB (https://www.gnu.org/software/gdb/), handles most of the cases where debug symbols are compiled into the program
    
- advanced rust 

Functional languages typically don't have a concept of null for the simple reason that it's always a special case

- unsafe is one way to enable easier solutions to sometimes tricky situations, this book (https://rust-unofficial.github.io/too-many-lists/index.html)
    
- generics 

use std::boxed::Box;
use std::cmp;
use std::ops::Index;

const MIN_SIZE: usize = 10;

type Node<T> = Option<T>;

pub struct DynamicArray<T>
where
    T: Sized + Clone,
{
    buf: Box<[Node<T>]>,
    cap: usize,
    pub length: usize,
}

- extend cargo 

cargo picks up any executable starting with cargo- that's available in the PATH environment variable. 

$ cargo new cargo-hello

export PATH=$PATH:/path/to/cargo-hello/target/debug

$env:Path += ";C:/path/to/cargo-hello/target/debug"

$ cargo hello
Hello, world!

- devops,  GitHub (also owned by Microsoft), 

GitLab (https://about.gitlab.com), or 
Atlassian's Bitbucket (https://bitbucket.org). 

Together with CircleCI (https://circleci.com) 

or Travis CI (https://travis-ci.org/), 

these platforms offer powerful tools for teams to make sure that every new deployment reliably meets their goals 

$ cargo run --release
$ cargo build


# Fearless concurrency 
- thread 

use std::thread;


///
/// Doubles each element in the provided chunks in parallel and returns the results.
/// 
fn parallel_map(data: Vec<Vec<i32>>) -> Vec<thread::JoinHandle<Vec<i32>>> {
    data.into_iter()
        .map(|chunk| thread::spawn(move ||
         chunk.into_iter().map(|c| 
         c * 2).collect()))
        .collect()
}

fn main() {

    // Prepare chunked data
    let data = vec![vec![1, 2, 3], vec![4, 4, 5], vec![6, 7, 7]];

    // work on the data in parallel
    let results: Vec<i32> = parallel_map(data.clone())
        .into_iter() // an owned iterator over the results
        .flat_map(|thread| thread.join().unwrap()) // join each 
         thread
        .collect(); // collect the results into a Vec

    // flatten the original data structure
    let data: Vec<i32> = data.into_iter().flat_map(|e| e)
     .collect();

    // print the results
    println!("{:?} -> {:?}", data, results);
}


JoinHandle in a future/promise (http://dist-prog-book.com/chapter/2/futures.html) way.

- visualize comming values 
use std::sync::mpsc::{Sender, Receiver};
use std::sync::mpsc;
use std::thread;

use rand::prelude::*;
use std::time::Duration;

enum ChartValue {
    Star(usize),
    Pipe(usize)
}

- multi thread in rust 


use std::io::Write;
use std::process::{Command, Stdio};

#[derive(Debug)]
struct SearchResult {
    query: String,
    results: Vec<String>,
}

fn process_roundtrip() -> String {
    let mut cat_child = Command::new("cat")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("Could not spawn process");

    let stdin = cat_child.stdin.as_mut().expect("Could 
     not attach to stdin");

    stdin
        .write_all(b"datadatadata")
        .expect("Could not write to child process");
    String::from_utf8(
        cat_child
            .wait_with_output()
            .expect("Something went wrong")
            .stdout
            .as_slice()
            .iter()
            .cloned()
            .collect(),
    )
    .unwrap()
}

- rayon-rs (https://github.com/rayon-rs/rayon) is a popular data-parallelism crate that only requires a few modifications to introduce automatic concurrency 

 found at https://docs.rs/rayon/1.2.0/rayon/fn.join.html

- handling asynchronous messages with actors 

a rise of actors and actor-based designs (https://mattferderer.com/what-is-the-actor-model-and-when-should-you-use-it), facilitated by frameworks such as Akka (https://akka.io/). 


async fn response_code(url: &str) -> Result<StatusCode, Exception> {
    let res = surf::get(url).await?;
    Ok(res.status())
}

#[runtime::main]
async fn main() -> Result<(), Exception> {
    let url = "https://www.rust-lang.org";
    let status = response_code(url).await?;
    println!("{} responded with HTTP {}", url, status);
    Ok(())
}

- futures often called promises,  In Rust, the team chose a more ambitious approach and left the runtime open for the community to implement (for now). Right now the two projects Tokio and Romio (https://github.com/withoutboats/romio) and juliex (https://github.com/withoutboats/juliex) have the most sophisticated support for these futures

impl Error for ErrorWrapper {
    fn description(&self) -> &str {
        match *self {
            ErrorWrapper::Io(ref e) => e.description(),
            ErrorWrapper::Db(_) | ErrorWrapper::Device(_) => "No 
             device present with this id, check formatting.",
            _ => "Unexpected error. Sorry for the inconvenience."
        }
    }
}


# Working with external crates for error handling 
- blog post at https://blog.x5ff.xyz/blog/easy-programming-with-rust-macros/, The Little Book of Rust Macros (https://danielkeep.github.io/tlborm/book/index.html), and the Rust book (https://doc.rust-lang.org/book/ch19-06-macros.html). Macros are best tried out to get a feel for them

// A simple macro without arguments
macro_rules! one_plus_one {
    () => { 1 + 1 };
}

fn main() {
    println!("1 + 1 = {}", one_plus_one!());
}

```
use std::ops::{Add, Mul, Sub};

macro_rules! assert_equal_len {
    // The `tt` (token tree) designator is used for
    // operators and tokens.
    ($a:ident, $b: ident, $func:ident) => (
        assert_eq!($a.len(), $b.len(),
                "{:?}: dimension mismatch: {:?} {:?}",
                stringify!($func),
                ($a.len(),),
                ($b.len(),));
    )
}
```

- integrating rust with other languages 

provide an interface for native binaries (such as .NET https://docs.microsoft.com/en-us/cpp/dotnet/calling-native-functions-from-managed-code?view=vs-2019 or Java's JNI https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/intro.html#wp9502


big bang https://www.linkedin.com/pulse/big-bang-vs-iterative-dilemma-martijn-endenburg/

we need a C compiler toolchainâ€”gcc (https://gcc.gnu.org/) and make: https://www.gnu.org/software/make/manual/make.html

$ cc --version 

$ make ---version 

In any Linux/Unix environment (including the WSLâ€”the Windows Subsystem for Linux: https://docs.microsoft.com/en-us/windows/wsl/install-win10 ), they can require the installation of gcc and make

macos,  similar experience and provides gcc as well as make: https://brew.sh/.

- using legacy code in C 
    + cargo.toml 
[lib]
name = "digest"
crate-type = ["cdylib"]

[dependencies]
libc = "0.2"
ring = "0.14"

    + lib.rs 
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_void};

use ring::digest;

extern "C" {
    fn pre_digest() -> c_void;
}

#[no_mangle]
pub extern "C" fn digest(data: *mut c_char) -> *mut c_char {
    unsafe {
        pre_digest();

        let data = CStr::from_ptr(data);
        let signature = digest::digest(&digest::SHA256, 
        data.to_bytes());

        let hex_digest = signature
            .as_ref()
            .iter()
            .map(|b| format!("{:X}", b))
            .collect::<String>();

        CString::new(hex_digest).unwrap().into_raw()
    }
}

$ cargo build 
$ cargo build --release
There should be a libdigest.so library (or digest.dll on Windows)


    + references in c code 

#include <stdio.h>

// A function with that name is expected to be linked to the project
extern char* digest(char *str);

// This function is exported under the name pre_digest
extern void pre_digest() {
    printf("pre_digest called\n");
}

int main() {
    char *result = digest("Hello World");
    printf("SHA digest of \"Hello World\": %s", result);
    return 0;
}

    + create make file 
# Include the Rust library
LIBS := -ldigest -L../rust-digest/target/release

ifeq ($(shell uname),Darwin)
    LDFLAGS := -Wl,-dead_strip $(LIBS)
else
    LDFLAGS := -Wl,--gc-sections $(LIBS)
endif

all: target/main

target:
  @mkdir -p $@

target/main: target/main.o 
  @echo "Linking ... "
  $(CC) -o $@ $^ $(LDFLAGS)

target/main.o: src/main.c | target
  @echo "Compiling ..."
  $(CC) -o $@ -c $<

clean:
  @echo "Removing target/"
  @rm -rf target
  
    + build in c 
$ make all 

    + tell it where our dynamic library is located. For that, the LD_LIBRARY_PATH environment variable is typically used
    
$ cd rust-digest/target/release
$ LD_LIBRARY_PATH=$(pwd)
$ echo $LD_LIBRARY_PATH 

//then run the c program 
$ ./main
    
- Note: ring (https://github.com/briansmith/ring) is a pure Rust implementation of several cryptography algorithms, so there are no OpenSSL (https://www.openssl.org/) or LibreSSL (https://www.libressl.org) requirements

- make tutorial,  Linux conventions. Check out a short tutorial here: http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/ or go straight to the make manual (https://www.gnu.org/software/make/manual/make.html

- calling into rust from node.js 

virtual/augmented reality environments (https://github.com/microsoft/HoloJS)

    + similar to create lib for c
    + add nodejs code 
const ffi = require('ffi');
const ref = require('ref');

const libPath = '../rust-digest/target/debug/libdigest';


const libDigest = ffi.Library(libPath, {
  'digest': [ "string", ["string"]],
});

const { digest } = libDigest;
console.log('Hello World SHA256', digest("Hello World"));

    + add node package 
{
  [...]
  "dependencies": {
    "ffi": "^2.3.0"
  }
}

    + run node code
$ node src/index.js

the node-ffi (https://github.com/node-ffi/node-ffi) package is required to dynamically find and load the desired libraries
 
- run rust in browser 

$ rustup target add wasm32-unknown-unknown

Use cargo to install a tool called wasm-bindgen-cli (cargo install wasm-bindgen-cli), and check whether it works by invoking wasm-bindgen

    + web service 

    Python (3.x)'s standard library comes with an http.server module, which can be called like this: python3 -m http.server 8080.
    Fans of JavaScript and Node.js can use http-server (https://www.npmjs.com/package/http-server), installable via npm (https://www.npmjs.com/package/http-server).
    Recent versions of Ruby come with a web server as well: ruby -run -ehttpd . -p8080.
    On Windows, you can use IIS Express (https://www.npmjs.com/package/http-server), also via the command line: C:\> "C:\Program Files (x86)\IIS Express\iisexpress.exe" /path:C:\Rust-Cookbook\Chapter07\browser-rust\web /port:8080.

    + rust code 
#[wasm_bindgen]
pub extern "C" fn digest(data: String) -> String {
    hex_digest(&data)
}

#[wasm_bindgen]
pub extern "C" fn digest_attach(data: String, elem_id: String) -> Result<(), JsValue> {
    web_sys::window().map_or(Err("No window found".into()), |win| {
        if let Some(doc) = win.document() {
            doc.get_element_by_id(&elem_id).map_or(Err(format!("No 
            element with id {} found", elem_id).into()), |val|{
                let signature = hex_digest(&data);
                val.set_inner_html(&signature);
                Ok(())
            })
        }
        else {
            Err("No document found".into())
        }
    })
}
// No tests :( 

#[wasm_bindgen(start)]
pub fn start() -> Result<(), JsValue> {
    // This function is getting called when initializing the WASM 
    // module
    Ok(())
}

    + crago.toml 
[lib]
name = "digest"
crate-type = ["cdylib"]

[dependencies]
sha2 = "0.8"
wasm-bindgen = "0.2.48"

[dependencies.web-sys]
version = "0.3.25"
features = [
  'Document',
  'Element',
  'HtmlElement',
  'Node',
  'Window',
]

    + build 
$ cargo build --target wasm32-unknown-unknown
$ wasm-bindgen target/wasm32-unknown-unknown/debug/digest.wasm --out-dir ../web/ --web
$ ls ../web/

    + relative html 
<!DOCTYPE html>
<html>
    <head>
        <meta content="text/html;charset=utf-8" http-equiv="Content-
         Type"/>
        <script type="module">
            import init, { digest, digest_attach } from 
             './digest.js';        
            async function run() {
                await init();
                const result = digest("Hello World");
                console.log(`Hello World SHA256 = ${result}`);
                digest_attach("Hello World", "sha_out")
            }
            run();
        </script>
    </head>
    <body>
        <h1>Hello World in SHA256 <span id="sha_out"></span></h1>
    </body>
</html>

    + start server 
py -m http.server 8080

    + notes 
    
Rust module to do the work. Notice the #[wasm_bindgen] attributes over the extern functions, which allow the macro preprocessor to fetch the input and output types of the function and generate bindings from this interface definition. There is also a special (https://rustwasm.github.io/wasm-bindgen/reference/attributes/on-rust-exports/start.html) 

- using rust and python 

well-liked libraries are implemented in C/C++ and Cython (https://cython.org/) in order to achieve the required performance

- cdylib dynamic library for C. Check out the nomicon (https://doc.rust-lang.org/nomicon/ffi.html) and docs (https://doc.rust-lang.org/cargo/reference/manifest.html#building-dynamic-or-static-libraries)
Our Python code uses the ctypes (https://docs.python.org/3/library/ctypes.html) part of the standard library to load the Rust module.

    gcc (https://gcc.gnu.org/) (includes ar and cc)
    git (https://git-scm.com/) (command-line or UI tools are fine)
    llvm (https://releases.llvm.org/2.7/docs/UsingLibraries.html) (library and header files for the LLVM compiler project)
    libclang (https://clang.llvm.org/doxygen/group__CINDEX.html) (library and header files for the CLang compiler)

    + rust main 
    
use std::env;
use std::env::var;
use std::path::PathBuf;
const HEADER_FILE_NAME: &'static str = "../tinyexpr/tinyexpr.h";

fn main() {
    let project_dir = var("CARGO_MANIFEST_DIR").unwrap();
    println!("cargo:rustc-link-search={}/../tinyexpr/", 
     project_dir);
    println!("cargo:rustc-link-lib=static=tinyexpr");

    if cfg!(target_env = "msvc") {
        println!("cargo:rustc-link-
         lib=static=legacy_stdio_definitions");
    }
    
    let bindings = bindgen::Builder::default()
        .header(HEADER_FILE_NAME)
        .generate()
        .expect("Error generating bindings");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Error writing bindings");
}

$ cc -c -ansi -Wall -Wshadow -O2 tinyexpr.c -o tinyexpr.o -fPIC
$ ar rcs libtinyexpr.a tinyexpr.o

//window 
$ gcc -c -ansi -Wall -Wshadow -O2 tinyexpr.c -o tinyexpr.lib -fPIC

$ cargo build
$ cargo test

- use for web, actix-web uses an error trait to convert Rust errors into HttpResponses. https://actix.rs/docs/errors/

 Yet Another Rust Template Engine (Yarte) (https://crates.io/crates/yarte) and its integration with actix-web.
 
- authentication for web 

 jsonwebtoken (https://github.com/Keats/jsonwebtoken)
 
 Azure Key Vault: https://azure.microsoft.com/en-in/services/key-vault/) 
  
 HMAC (https://searchsecurity.techtarget.com/definition/Hash-based-Message-Authentication-Code-HMAC) algorithm (HS256 by default) 
 
 
# System programming made easy 
- intermezzOS (https://intermezzos.github.io/), an operating system for learning programming (in Rust); another is Redox OS (https://www.redox-os.org/),

- highlight projects on their GitHub (https://github.com/rust-embedded/awesome-embedded-rust)

-  GitHub repository (https://github.com/PacktPublishing/Rust-Programming-Cookbook)

- install Docker (https://docs.docker.com/install/) and make sure you can run Docker without sudo (https://docs.docker.com/install/linux/linux-postinstall/) 

- QEMU, a popular virtualization framework, also supports emulating ARM instructions, so a device is not strictly required. Check out their wiki (https://wiki.qemu.org/Documentation/Platforms/ARM) 

- This is where the I2C (https://learn.sparkfun.com/tutorials/i2c/all) driver offers the as /dev/i2c-1 bus

 i2cdev crate (https://github.com/rust-embedded/rust-i2cdev)

-  bmp085 device driver (https://github.com/celaus/rust-bmp085), which shows a real-world driver implementation in Rust, and watch a talk on the driver at the following URL: https://www.youtube.com/watch?v=VMaKQ8_y_6s.


# Getting practical with Rust 
- random number, file i/o, dynamic json, regular expression, filesystem access, command-line, piping input and output, web requests, using state-of-the-art machine larning, logging, starting subprocesses 

random number generator https://xkcd.com/221/.

randomness (https://www.random.org/) 
 
differently (https://rust-random.github.io/book/guide-gen.html)

different types of RNGs (https://rust-random.github.io/book/guide-rngs.html). The first is rand crate's StdRng, which is an abstraction over (as of this writing) the ChaCha PRNG (https://docs.rs/rand/0.7.0/rand/rngs/struct.StdRng.html), chosen for efficiency and cryptographic security. The second algorithm is SmallRng (https://docs.rs/rand/0.7.0/rand/rngs/struct.SmallRng.html)

- Lorem Ipsum (https://www.lipsum.com/) is a popular dummy text that can be generated on a large scale, so to proceed with the recipe

- First, we open the file and pass the reference to BufReader (https://doc.rust-lang.org/std/io/struct.BufReader.html), a buffered reader. While the initial reference allows reading data as well

- JSON,  TOML (https://github.com/toml-lang/toml) format and compares it to the JSON output

- regex,  regex crate (https://docs.rs/regex/1.2.1/regex/)

- command-line arguments, crate for working with command-line arguments is called clap (https://clap.rs/)

clap (https://clap.rs/) prides itself on being a simple-to-use crate for working with command-line arguments in Rust

surf (https://github.com/rustasync/surf) is a recent crate developed fully async.

reqwest (https://github.com/seanmonstar/reqwest/). Just like the previous function, it will go through several ways to do different types of web tasks

- machine learning, AlexNet's triumph in 2012,https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf

many online courses such as the https://www.fast.ai/ MOOC (http://course.fast.ai/), the Coursera machine learning course (https://www.coursera.org/learn/machine-learning), or Microsoft AI school (https://aischool.microsoft.com/en-us/machine-learning/learning-paths) 

MNIST (https://research.zalando.com/welcome/mission/research-projects/fashion-mnist/) repository from https://github.com/zalandoresearch/fashion-mnist. 

 real-world data (or load the entire model with something like ONNX: https://onnx.ai/)

- log, The log crate (https://github.com/rust-lang-nursery/log), which provides the facade (interface) to the logging macros

- start subprocess 

Rust std::process::Command struct. After setting everything up in steps 1 and 2, we create the main function in step 3. Using Result<(), Box<dyn Error + ...>> with a boxed dyn trait (https://doc.rust-lang.org/edition-guide/rust-2018/trait-system/dyn-trait-for-trait-objects.html) as the return type for the main function

use std::error::Error;
use std::io::Write;
use std::process::{Command, Stdio};

fn main() -> Result<(), Box<dyn Error + Send + Sync + 'static>> {
    let mut ls_child = Command::new("ls");
    if !cfg!(target_os = "windows") {
        ls_child.args(&["-alh"]);
    }
    println!("{}", ls_child.status()?);
    ls_child.current_dir("src/");
    println!("{}", ls_child.status()?);

    let env_child = Command::new("env")
        .env("CANARY", "0x5ff")
        .stdout(Stdio::piped())
        .spawn()?;
    
    let env_output = &env_child.wait_with_output()?;
    let canary = String::from_utf8_lossy(&env_output.stdout)
    .split_ascii_whitespace()
    .filter(|line| *line == "CANARY=0x5ff")
    .count();

    // found it!
    assert_eq!(canary, 1);    
    let mut rev_child = Command::new("rev")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()?;

    {
        rev_child
            .stdin
            .as_mut()
            .expect("Could not open stdin")
            .write_all(b"0x5ff")?;
    }

    let output = rev_child.wait_with_output()?;
    assert_eq!(String::from_utf8_lossy(&output.stdout), "ff5x0");

    Ok(())
}

$ cargo run 
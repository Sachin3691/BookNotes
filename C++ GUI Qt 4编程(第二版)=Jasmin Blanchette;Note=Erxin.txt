C++ GUI Qt 4编程(第二版)=Jasmin Blanchette;Note=Erxin

# 序言
- 1995年 Haavard Nord和Eirik Chambe-Eng开发, Q in Emacs looks pretty and t means toolkit 

# 第一部分 QT 基础
## 第一章 Qt入门
- 两个重要概念, 信号和槽, signal and slot 
- hello Qt 
#include <QApplication>
#include <QLabel>

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QLable *label = new QLabel("Hello Qt!");
    label->show();
    return app.exec();
}

get a plaftorm independent project file 
$ qmake -project 
get a platform relative makefile 
$ qmake hello.pro 

open source qt require minGW 

get a visual studio project file 
$ qmake -tp vc hello.pro 

- add connection for UI element and user action 
QPushButton *button = new QPushButton("Quit");
QObject::connect(button, SIGNAL(clicked()), &app, SLOT(quit()));
button->show();

$ qmake -project 
$ qmake quit.pro

- qt layout manager 
QHBoxLayout 
QVBoxLayout 
QGridLayout 

- Qt class hierarchy
\QQbject\QCoreApplication\QApplication
                \QWidget\QAbstractButton\QPushButton
                                  \QAbstractSpinBox\QSpinBox
                                  \QAbstractSlider\QSlider
                                  \QFrame\QLabel
                \QLayout\QBoxLayout\QHBoxLayout

## 第二章 创建对话框
- Qt Designer 
- create a find dialog 
//finddialog.h 
#ifndef FINDDIALOG_H 
#define FINDDIALOG_H

#include <QDialog>

class QCheckBox;
class QLabel;
class QLineEdit;
class QPushButton;

class FindDialog: public QDialog
{
    Q_OBJECT //it is required for using signal and slot 

pubilc:
    FindDialog(QWidget *parent = 0);
    
signals:
    void findNext(const QString &str, Qt::CaseSensitivity cs);
    void findPrevious(const QString &str, Qt::CaseSensitivity cs);
    
private slots:
    void findClicked();
    void enableFindButton(const QString &text);
    
private:
    QLabel *label;
    QLineEdit *lineEdit;
    QCheckBox *caseCheckBox;
    QPushButton *findButton;
}
#endif 

slots and signals are marco too

//finddialog.cpp
#include <QtGui>
#include "finddialog.h"

//QtGui contain several main GUI modules. There are several core Qt modules such as QtCore, QtGui, QtNetwork, QtOpenGL, QtScript, QtSql, QtSvg, QtXml 
FindDialog::FindDialog(QWidget *parent):QDialog(parent)
{
    label = new QLabel(tr("Find &waht:"));
    lineEdit = new QLineEdit;
    label->setBuddy(lineEdit);
    
    caseCheckBox = new QCheckBox(tr("Match &case"));
    backwardCheckBox = new QCheckBox(tr("Search &backward"));
    
    findButton = new QPushButton(tr("&Find"));
    findButton->setDefault(true);
    findButton->setEnabled(false);
    
    connect(lineEdit, SIGNAL(text(changed(const QString &)), this, SLOT(enableFindButton(const QString&))));
    connect(findButton, SIGNAL(clickecd()), this, SLOT(findClicked()));
    
    QHBoxLayout *topLeftLayout = new QHBoxLayout;
    topLeftLayout->addWidget(label);
    topLeftLayout->addWidget(lineEdit);
    setLayout(mainLayout);
}

//one of the slot implementation
void FindDialog::findClicked()
{
    QString text = lineEdit->text();
    Qt::CaseSensitivity cs = caseCheckBox->isChecked()? Qt::CaseSensitive:Qt::CaseInSensitive;
    
    if(backwardCheckBox->isChecked())
    {
        emit findPrevious(text, cs);
    }
    else
    {
        emit findNext(text, cs);
    }
}

emit is Qt keyword, it will be converted to c++ code during the prehandling 

//use the dialog 
FindDialog *dialog = new FindDialog;
dialog->show();

- get deep understand of signal and slot 
    + slot is just like the common c++ method, it could be virtual, overwrite, public, protected or private. the only difference is that the slot could be connected with signal 
    
    connect(sender, SIGNAL(signal), receiver, SLOT(slot));
    sender and receiver are pointers pointed to QObject, signal and slot are function names, actually SIGNAL and SLOT macro will convert their parameter to strings 
    
    one signal could connect multiple slots, when emit the signal it is no guarantee call the slot method base on the added sequence 
    
    mutliple signals could connect to a same slot 
    
    a signal could connected with another signal, which means when one signal emit the other will be emit too. it's hard to distinguish connected signals and connected slots 
    connect(lineEdit, SIGNAL(textChanged(const QString &)), this, SIGNAL(updateRecord(const QString &)));
    
    support remove signals 
    disconnect(lcd, SIGNAL(overflow()), this, SLOT(handleMatchError)));
    
    to connect signal to slot or another signal the parameters of them must have the same type sequence. If the signal contains much more parameters than the slot have, then the redundant arguments will be ignore 

    the signal and slot are implement in QObject so it is not restricted to be used only in GUI 
    
    + example 
class Employee : public QObject 
{
    Q_OBJECT 
    
public:
    Employee(){mySalary = 0;}
    int salary() const {return mySalary;}
    
public slots:
    viod setSalary(int new Salary);
    
signals:
    void salaryChanged(int new Salary);
    
private:
    int mySalary;
};

void Employee::setSalary(int newSalary)
{
    if(newSalary != mySalary)
    {
        mySalary = new Salary;
        emit salaryChanged(mySalary);
    }
}

- meta object system, it supplies two technology signal-slot and introspection. a moc tool will be used to parse the definition of the class with Q_OBJECT
    * Q_OBJECT macro define each QObject must implement  some introspection methods, metaObject(), tr(), qt_metacall() 
    
    * moc tool generate the signal implemention defined in the class with Q_OBJECT
    * connect() and disconnect() use the meta methods 
    
    check the QMetaObject class document for more information 
    
- quick design a dialog 
    * create window object and UI components 
    * add components into layouts 
    * set tab sequence 
    * create signal-slot connection 
    * implement the slots   
    * save the edit file as *.ui 
    uic tool will convert *.ui to ui_*.h file. it will cotain the method setupUi() for initial window object 
    
    ...
    void setupUi(QWidget *widget){
    }
    ...
    
    manually add header file and cpp file for the UI. add necessary signal and slots 
    
    GoToCellDialog::GoToCellDialog(QWidget *parent):Dialog(parent)
    {
        setupUi(this);
        
        RegExp regExp("...");
        lineEdit->setValidator(new QRegExpValidator(regExp, this));
        
        connect(okButton, SIGNAL(clicked()), this, SLOT(accept()));
        connect(cancelButton, SIGNAL(clicked()), this, SLOT(reject()));
    }
    
    + click a button with a AcceptRole will emit accepted signal, with a RejectRole button will emit rejected signal 
    
    Qt designer will use uic to auotmatic update relative codes 
    
- change dialog shape 
    + extension dialog 
    + multi-page dialog 
    
- dyamic dialog, use QUiLoader class to load ui file 
QUiLoader uiLoader;
QFile file("sortdialog.ui");
QWidget *sortDialog = uiLoader.load(&file);
if(sortDialog){
    ...
}

QUiLoader required add 
CONFIG +=uitools 
to *.pro file 

## 第三章 创建主窗口
- QMainWindow, and QDialog are all inheritance from QWidget 

//qmainwindow.h 
#ifndef MAINWINDOW_H 
#define MAINWINDOW_H

include <QMainWindow>

class QAction;
class QLabel;
class FindDialog;
class Spreadsheet;

class MainWindow: public QMainWindow
{
    Q_OBJECT 
    
public:
    MainWindow();
    
protected:
    void closeEvent(QCloseEvent *event);
    
private slots:
    ...
    
- Qt support several kinds of image format 
- process to create a tool bar 
    + create and set action 
    + add action to menu 
    + add toolbar and add action to toolbar 
    
    + example 
newAction = new QAction(tr("&New", this));
newAction->setIcon(QIcon(":/images/new.png"));
newAction->setShortcut(QKeySequence::New);
newAction->setStatusTip(tr("Create a new spreadsheet file"));
connect(newAction, SIGNAL(triggered()), this, SLOT(newFile());

}
- QMessageBox supplied several standard button 
- RecentFileActions class is used to add recent file lists to main window 
- qobject_cast<T>() could be used on the files which generated by the moc(meta-object compiler ) to do dynamic cast. it will return a subclass contain QObject 

- use dialog, modless dialog 
show(), method will display a hide window 
raise(), will make a window become the top most window
activateWindow, will make window as the current active window 

- save settings, use QSettings class 
    + window will save the setting information into registry 
    + unix like system will save the settings into files 
    + mac os x will use core foundation preferences interfaces to save the settings 
    
    + setting is used key/value pair 
    
    + example 
    QSettings settings;
    settings.beginGroup("findDialog");
    settings.setValue("matchCase", caseCheckBox->isChecked());
    settings.setValue("searchBackward", backwardCheckBox->isChecked());
    settings.endGroup();

- multiple document window 
    + by default close window will only hide a window in Qt. to delete it required to set a attribute Qt::WA_DeleteOnClose 
    
    MainWindow::MainWindow()
    {
        ...
        setAttribute(Qt::WA_DeleteOnClose);
    }
    
- splash screen
QSplashScreen *splash = new QSplashScreen;
splash->setPixmap(QPixmap(":/images/splash.png"));
splash-show();

splash->showMessage(QObject::tr("Setting up the main window..."), topRight, Qt::white);
...

-   splash->showMessage(QObject::tr("Establish connections...");
splash->finish(&mainWin);
delete splash;

## 第四章 实现应用程序功能
- IO relative class 
QFile 
QDataStream 

- functor, is a class which implement the operator()

## 第五章 创建自定义窗口部件
- create a hex spin box 
#ifndef HEXSPINBOX_H
#define HEXSPINBOX_H 

#include <QSpinBox>

class QRegExpValidator;

class HexSpinBox: public QSpinBox
{
    Q_OBJECT 
    
public: 
    HexSpinBox(QWidget *parent = 0);
    
protected:
    QValidator::State validate(QString &text, int &pos) const;
    int valueFromText(const QString &text) const;
    QString textFromeValue(int value) const;
    
private:
    QRegExpValidator *validator;
};

it inheriate from QSpinBox and overwrite three virtual methods 

- window component
    + use Widget template to create a new window object 
    + add necessary UI elements 
    + add necessary signals and slots 
    + connect the signals and slots
    + add adtional logic 
    
- QWidget::update() method will redraw the window 

- a window pallet contain three kinds of colors 
active 
inactive 
disabled 

- create a custom widget in Qt designer 
    + drag a parent element from the UI 
    + choose "Promote to Custom Widget" from the context menu 
    + input the custom widge class name 
    + required to create a plugin to help display the custom widget in designer 
    
class CustomPlugin:public QObject, public QDesignerCustomWidgetInterface 
{
    Q_OBJECT 
    Q_INTERFACES(QDesignerCustomWidgetInterface)
    
public:
    CustomPlugin(QObject *parent=0);
}

//*.pro file for the plugin 
TEMPLATE = lib 
CONFIG += designer plugin release 
HEADERS = ../iconeditor/iconeditor.h \
                        iconeditorplugin.h 
                        
SOURCES = ../iconeditor/iconeditor.cpp \
                        iconeditorplugin.cpp 
RESOURCES = iconeditorplugin.qrc 
DESTDIR = $$[QT_INSTALL_PLUGINS]/designer 

- double buffering, render a window to a off-screen pixmap and copy the pixmap to monitor. this tech is used for reduce the bink and supply a beautiful UI 

# 第二部分 Qt 中级
## 第六章 布局
- QHBoxLayout, QVBoxLayout, QGridLayout, QStackLayout, QSplitter, QScrollArea
- QDockWidget 
QDockWidget *shapesDockWidget = new QDockWidget(tr("shapes"));
shapesDockWidget->setObjectName("shapesDockWidget");
shapesDockWidget->setWidget(treeWidget);
shapesDockWidget->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
addDockWidget(Qt::RightDockWidgetArea, shapesDockWidget);

QMainWindow::saveState() and QMainWindow::restoreState() could be used to save the currnt working area states 

## 第七章 事件处理
- event, event is different from signal. When using window components signal is useful. When implement window components event is useful 
QEvent 
QObject will use event() method to notify the object 

more event types, mousePressEvent(), keyPressEvent(), paintEvent()

bool CodeEditor::event(QEvent *event)
{
    if(event->type() == QEvent::KeyPress)
    {
        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
        if(keyEvent -> key() == Qt::Key_Tab)
        {
            insertAtCurrentPosition('\t');
            return true;
        }
    }
    return QWidget::event(event);
    
- add event filter, installEventFilter, monitor the eventFilter() method 

firstNameEdit->installEventFilter(this);

bool CustomerInfoDialog::eventFilter(QObject *target, QEvent *event)
{
    ...
    if(target == firstNameEdit || target == lastNameEdit || target == cityEdit || target == lastNameEdit){
        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
        if(keyEvent->key() == Qt::Key_Space){
            focusNextChild();
            return true;
        }
    }
    return QDialog::eventFilter(target, event);
}

- Qt supplied 5 level event filters 
    + special event filter, mousePressEvent, keyPressEvent, paintEvent 
    + overwrite QObject::event() 
    + install event filter in QObject 
    + install event filter in QApplication 
    + inheriate from QApplication and reimplement notify()
    
- keep responds 
QApplication::exec() will start the event handling process 

## 第八章 二维图形
- QPainter class, it could draw on drawable device such as QWidget, QPixmap, QImage, QSvgGenerator 

overwrite the QWidget::paintEvent() could be used to customize UI element appearance 

- could use OpenGL replace the QPainter, QtOpenGL module is a wrapper which is 3d graphic library 
- use QPainter 
QPainter painter(this);

QPen, QBrush, QFont, setPen, setBrush, setFont 

- common used draw methods 
drawPoint()
drawLine()
drawPolyline()
drawPoints()
drawLines()
drawPolygon()
drawRect()
drawRoundRect()
drawEllipse()
drawArc()
drawChord()
drawPie()
drawText()
drawPixmap()
drawPath()
FlatCap()
SquireCap()
RoundCap()
MiterJoin()
BevelJoin()
RoundJoin()

- use path 
QPainterPath path;
path.moveTo(30, 52);
path.cubicTo(200, 80, 320, 80, 480, 320);
patiner.setPen(QPen(Qt::black, 8));
painter.drawPath(path);

- move, zoom and rotate 
QTransform class  or directly use the QPainter translate(), scale(), rotate() and shear() methods 

- use QImage to draw high quality images
    + QPixmap or QWidget will used platform relative graphic engine 
    x11 will only works when x render extension 
    mac os x will use x11 but will different from windows 
    
    + QImage::CompositionMode_SourceOver means mixed source and destination images 
    
    Qt support several kinds of composition mode 
    
- print, QPrinter, QPrintDialog, QPainter::newPage() will draw a new page 

QPrintDialog will let the user choose a printer 

QprintDialog printDialog(&printer, this);
QPainter painter(&printer);

then use the painter print the content 

## 第九章 拖放
- Qt window wil sue drag site and drop site to complete the drag drop operation 
- QWidget events, dragEnterEvent and dropEvent()

textEditor = new QTextEdit;
setCentralWidget(textEdit);

textEdit->setAccpetDrops(false);
setAcceptDrops(true);

by default the drop events will board cast from child window to parent to disable the event in child element QTextEdit then the drap event could be handled in MainWindow

- MIME types list, http://www.iana.org/assignments/media-types/
- handle the clipboard event 
QTextEdit supply cut(), copy(), paste() slot. QApplication::clipboard() to access the clipboard

## 第十章 项视图类
- Qt supply a mode/view architecutre 

data source <--> model <--> view 
                              A                  A
                              +-delegate--+
    
- QTableWidget 
- implement custom model, every data element have a data index and attribute which is called role 
Qt::DiaplyRole, Qt::EditRole, Qt::ToolTipRole, Qt::StatusTipRole 
- implement custom delegate 
class TrackDelegate: public QItemDelegate 
{
    Q_OBJECT 
    
public:
    TrackDelegatge(int durationColumn, QObject *parent=0);
    ....
}
    
it must implement createEditor(), setEditorData() and setModelData() method and implement the paint() methods 


## 第十一章 容器类
- STL, learn stl http://www.sgi.com/tech/stl 
- Qt containers, QVector<T>, QLinkedList<T>, QList<T>, QMap<K, T>, QHash<K, T> 
- if the STL is avaliable then we don't have to use Qt containers 
- QtAlgorithms header defined the common used container algorithms 
- QString, QByteArray and QVariant 

## 第十二章 输入与输出
- QIODevice supply the IO operation, contain subclasses 
QTemporaryFile 
QBuffer, read from QByteArray or write to QByteArray
QProcess, execute external process and communication between different process 
QTcpSocket
QUdpSocket 
QSslSocket 

- use QDataStream to read/write binary file 
QFile file("*.dat");
if(!file.open(QIODevice::WriteOnly))
{
    std::cerr << "cannot open file";
    return;
}
else
{
    QDataStream out(&file);
    out.setVersion(DataStream::Qt_4_3);
    out << quint32(0x123451234);
}
    
- handle error in QDataStream, status(), will return QDataStream::Ok, QDataStream::ReadPastEnd, QDataStream::ReadCorruptData 

- use QtIOCompressor  to compress io stream 
- read/write text by QTextSteam, QTextStream use 16bit QChar 

QTextStream::readLine()

- iterator through directory, QDir 
- embedded resource, qmake use special rules to handle rcc file 
RESOURCE = myresource.qrc 

.qrc is a xml file which listed all the embedable files into the executable 

identify resource in the application by :/path  such as :/data-files/phone-coes.dat 

    + side effect 
    whenever the resource changes required to replace the executable 
    the executable file may become too large 
    
- QProcess to communicate between processes, if process can't be start then it will emit error() 
connect(&process, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(processFinished(int, QProcess::ExitStatus)));
    
void processFinished(int exitCode, QProcess::ExitStatus exitStatus)
{
    if(exitStatus == QProcess.CrashExit)
    {
        outputTextEdit -> append(tr("program crashed"));
    }
    else if(exitCode != 0)
    {
        outputTextEdit -> append(tr("program failed"));
    }
    else
    {
        outputTextEdit -> append(tr("program exit normal"));
    }
}    
- QProcess could be used to start other UI application. to create connection between program could also used the network classes in Qt. in window chould use ActiveQt. 

to simply start browser or email client could use QDesktopServices::openUrl()
    
    
## 第十三章 数据库
- QSqlDatabase 
- Desktop edition contain database drivers 
QDB2 
QIBASE 
QMYSQL 
QOCI, orcale call interface 
QODBC 
QPSQL
QSQLITE, sqlite 3 version 
QSQLITE2, sqlite 2 version 
QTDS, sybase self adapte service 
    
- high level abstraction QSqlTableMode, QSqlRelationalTableModel 
- connection and query 
QSqlDatabase db = QSqlDatabase::addDatabase("QMYSQL");
...
- QSqlQuery

## 第14章 多线程
- QThread, QMutex, QSemaphore, QWaitCondition
- QThread supply run(), setMessage(), stop(). stopped is declared to volatile 
class Thread: public QThread 
{
    Q_OBJECT 
    
public:
    Thread();
    
    void setMessage(const QString &message);
    void stop();
    
protected:
    void run();
    
private:
    QString messageStr;
    volatile bool stopped;
};

- synchronize the threads
QMutex 
QReadWriteLock, allowed multiple read 
QSemaphore
QWaitCondition

- QThreadStorage<T>, thread local storage. one use example is high speed cache. each thread will have an independent data without required for locking 
QThreadStorage<QHash<int, double> *> cache;
if(!cache.hasLocalData())
{
    cache.setLocalData(new QHash<int, double>);
}
else 
{
    cache.localData()->insert(id, value);
}
    
- communication with the main thread, main thread is the only thread allowed to create instance for QApplication or QCoreApplication and execute the method exec() to start event loop 

    + use signal slot communication between threads, it is become asynchronous 
connect(&thread, SIGNAL(transactionStarted(const QString &)), statusBar(), SLOT(showMessage(const QString&)));

- if a function could be called by multiple threads which is called thread-safe 

    + Qt thread-safe classes 
    QMutex 
    QMutexLocker
    QReadWriteLock 
    QReadLocker 
    QWriteLocker 
    QSemaphore
    QThreadStorage<T> 
    QWaitCondition
    QQbject::connect() 
    QObject::disconnect()
    QCoreApplication::postEvent() 
    QCoreApplication::removePostedEvents()
    
    + most the non graphic Qt class are fit for a non strict rule, which is reentrant. if the instances of a class are in different threads and they could be used in parallel then the class is called reentranceable 
    
    it is not safe to parallel access a reentrant class which required added lock 
    
    + QObject is reentrant but with three restrictions 
        * sub instance of QObject must be created in the parent thread 
        * before delete QThread must delete all the QObject created by it 
        * must delete the QObject in the thread which created 
        
        to delete a object in different thread must call the method deleteLater() to set a deferred delete 
        
        sub class of QObject such as QTimer, QProcess is reentranceable
        
        * QWidget and subclass of it is not reentranceable which means we could not directly call a method define in UI element 
        
        to update a text in UI by 
        QLabel::setText() signal or QMetaObject::invokeMethod(label, SLOT(setText(const QString&)), Q_ARG(Q_STRING, "Hello"));
        
        
## 第十五章 网络
- QFtp and QHttp 
- low level class QTcpSocket and QUdpSocket
- create service application, QTcpServer 
- create SSL/TLS connection by QSslSocket and QTcpSocket 
- example write a ftp client, the signal method don't required to be implement 

int main(int argc, char *arg[])
{
    //QCoreApplication don't link with QtGui library 
    QCoreApplication app(argc, argv);
    QStringList args = QCoreApplication::arguments();
    
    if(args.count() != 2)
    {
        std::err << "err";
        return 1;
    }
    else
    {
        FtpGet getter;
        if(!getter.getFile(QUrl(args[1])))
        {
            return 1;
        }
        else 
        {
            QObject::connect(&getter, SIGNAL(done()), &app, SLOT(quit()));
            return app.exec();
        }
    }
}

class FtpGet:public QObject 
{
    Q_OBJECT 
    
public:
    FtpGet(QObject *parent = 0);
    bool getFile(const QUrl &url);
    
signals:
    void done();
    
private slots:
    void ftpDone(bool error);
    
private:
    QFtp ftp;
    QFile file;
}

FtpGet::FtpGet(QObject *parent):QObject(parent)
{
    connect(&ftp, SIGNAL(done(bool)), this, SLOT(ftpDone(bool)));
}

bool FtpGet::getFile(const QUrl &url)
{
    ...//download logic 
    ftp.close();
    ...//return true or false 
}

void FtpGet::ftpDone(bool error)
{
    if(error){
    }
    else{
    }
    file.close();
    emit done();
}

bool FtpGet::getFile(const QUrl &url)
{
    ...
    connectId = ftp.connectToHost(url.host(), url.port(21));
    loginId = ftp.login();
    getId = ftp.get(url.path(), &file);
    closeId = ftp.close();
    return true;
}

- http client, QHttp is a asynchronous class 
- TCP client/server, QTcpServer, QTcpSocket
    + TCP is a stream based protocol 
    + high level tcp module is based one line or block 
        * base on line, each data set is end with line break 
        * base on block each data set is treat with binary block with specify size 
        
    + QTcpSocket is inheriate from QIODevice which could read by QDataStream or QTextSteam

- send and receive UDP data 

## 第十六章 XML 
- QXmlStreamReader, QXmlStreamWriter 
- DOM operation suppot by Qt, QDomDocument, QDomElement, DomNode 
- SAX, is a public interface for read XML document 
http://www.sax-project.org/

QXmlDefaultHandler

## 第十七章 提供在线帮助
- QTextBrowser could be used as a simple online help browser 

- setWhatsThis() support add help content as tooltip 

- use QUrl to supply online help 

- use Qt Assistant
Qt application could communicate Assitant with QAssistantClient 

add configuration in CONFIG 
CONFIG += assistant 

QAssistantClient assistant = new QAssistantClient("");
assistant->showPage(path);

on mac Apple help supply the similar function as Qt Asssitant 


# Qt高级
## 第十八章 国际化
- Qt use unicode in side 
- Qt text engine could handle non latine text 
- support right to left text layout 
- support special text input by QLineEdit, QTextEdit 
- required use tr() method wrap all the text in application 
- supply Qt linguist tool for the translator 
- use lupdate, lrelease, Qt linguist could supply the translate 
- in Qt QString each char is a 16 bit QChar 
- QTextCodec supply codic support 
- translate a string in qt 
QCoreApplication::translate("Global stuff", "hello qt!");

- we could tell Qt stop imply convert from const char* to QString 
DEFINES += QT_NO_CAST_FROM_ASCII 

- load translate files 
QApplication app(argc, argv);
QTranslator appTranslator;
appTranslator.load("myapp_" + QLocal::system().name(), qmPath);
app.installTranslator(&appTranslator);
return app.exec();

- QLocal::system() will return a QLocal instance which supply the local information 
        
- QApplication support set test layout direction 
QApplication::setLayoutDirection(Qt::RightToLeft);

- Qt class method relative to localization 
QString::localeAwareCompare() 
QDate, QTime, QDateTime toString() method supply Qt::LocalDate parameter 
QDateEdit and QDateTimeEdit could support local formated date display 

- translate a application which called tr() method need three steps 
    + run lupdate, to abstract all the avaliable characters 
    + use Qt Linguist translate the program 
    + run lrelease to generate a binary .qm file which could be loaded by the QTranslator 
    + modify .pro file to specify which language will be supported 
    
    TRANSLATIONS = *_de.ts\
                                      *_cn.ts\
                                      *_en.ts
.ts is shorten for translate source 

- regenerate .qm from .ts file by 
$ lrelease -verbose spreadsheet.pro 

## 第十九章 自定义外观
- QStyle
use *.qss to custom display style. which syntax is similar to css 

    + let all text editor hae background yellow 
QLineEdit{
    background-color:yellow;
}

- set style for the current application 
QApplication::setStyleSheet() 
qApp->setStyleSheet("QLineEdit{background-color:yellow;}");

QWidget also contain a setStyleSheet method 

- selector 
*, all 
QDial, class selector include subclasses 
.QDial, class selector exclude subclasses 
QDial# ageDial, specify named UI element 
QDial[y="v"], specify property valued UI elements
QFrame > QDial, directly child element 
QFrame QDial, child or grandchild of the specify element 

- assistant controller 
::indicator, radiobox, checkbox, menu,... indicator 
::menu-indicator
::item, menu, menubar, statubar items 
::up-button, scrollbar up button 
::down-button 
::up-arrow 
::down-arrow 
::drop-down 
::title 

- style status, logic not is used "!"
:disabled 
:enabled 
:focus 
:hover 
:pressed 
:checked 
:unchecked 
:indeterminate, a button is parcial selected 
:open 
:closed, UI element in closed or distroyed state
:on 
:off 

- subclass of QStyle, QWindowStyle, QMotifStyle, QCDEStyle 
- QStyleOption 

## 第20章 三维图形
- OpenGL, QtOpenGL, QGLWidget
- overlap with x11 and OpenGL

## 第21章 创建插件
- dyanmic library
    + add into .pro file 
LIBS += -ldb_cxx 
INCLUDEPATH += /usr/local/BerkeleyDB.4.2/include 

- Qt supply a QLibrary class for platform independent search and load library. only need to supply the library name without extension. it will search the library from the platform 

    + example mimetype, then will get mimetype.dll on window and mimetype.so n linux and mimetype.dylib on mac 
    
- Qt plugin classes 
QAccessibleBridgePlugin, QAccessibleBridge 
QAccessiblePlugin, QAccessibleInterface 
QDecorationPlugin*, QDecoration* 
QFontEnginePlugin, QabstractFontEngine 
QIconEnginePluginV2, QIconEngineV2 
QImageIOPlugin, QImageIOHandler 
QInputContextPlugin, QInputContext 
QKbdDriverPlugin, QWSKeyboardHandler 
QMouseDriverPlugin, QWSMouseHanlder 
QPictureFormatPlugin, N/A 
QScreenDriverPlugin, QScreen 
QScriptExtensionPlugin, N/A 
QSqlDriverPlugin, QSqlDriver 
QStylePlugin, QStyle 
QTextCodecPlugin, QTextCodec 

- add configuration in .pro 
CONFIG += plugin 

## 第二十二章 应用程序脚本
- ECMAScript 
- use script extend Qt application, use QtScript, QScriptEngine, QScriptValue 
QScriptEngine interpreter;
QScriptValue operand(&interpreter, display->text().toDouble());
interpreter.globalObject().setProperty("x", operand);
QScriptValue result = interpreter.evaluate(script);


use QScriptEngine::evaluate() to execute a script 

## 第二十三章 平台相关特性
- access local platform API 
    + window 32 
    + mac os x carbon 
    + x11 xlib 
    + ActiveQt to access ActiveX control 
    + Motif/Xt and MFC migrate to Qt, Qt/Motif, Qt/MFC migration framework 
    + reference 
    http://www.froglogic.com 
    
- connect to local API 
#ifdef Q_WS_X11 
...
#endif 

#ifdef Q_WS_MAC
...
#endif

- Qt supplied pre process macro for help identify OS
Q_QS_AIX 
Q_QS_HPUX 
Q_QS_WIN32
Q_QS_WIN64 
...

- ActiveQt framework, QAxContainer and QAxServer 
    + COM type map to Qt type 
    VARIANT_BOOL         bool 
    char, short, int, long      int 
    ...
    
    + add configuration 
    CONFIG += qaxcontainer 
    
    
## 第二十四章 嵌入式编程
- Qt/Embedded linux, Qtopia core 

# install qt 
http://www.qt.io/download/

# build qt application 
- there are three ways to build qt application 
    + qmake 
    + third party build tool such as cmake 
    + use IDE 
    
- qmake used to generate platform independent .pro file, include automatic call the built-in code generation tools(moc, uic and rcc)

- qmake 
.pro file contain the resoureces used by the project. qmake will used to trigger the moc, uic and rcc 

- three main application, app(single app), lib(static or dynamic library) and subdirs(recursive compile) in .pro file 
    + project type is define with TEMPLATE 
TEMPLATE = lib 
TEMPLATE = subdirs 
TEMPLATE = app 

if omite TEMPLATE then it means app 

    + common variable for app and lib 
    
HEADERS 
SOURCES 
FORMS, specify uic files which is generated by designer *.ui 
RESOURCES, rcc files, *qrc 
DEFINES, define the c++ pre compile marks 
INCLUDEPATH, c++ global header files path 
LIBS, the libraries need to be linked, such as in *nix(-L/usr/local/lib -ldb_cxx)
CONFIG 
QT, specify the required QT modules 
VERSION
TARGET, executable file name without extension, prefix or version 
DESTDIR, executable output path 
DLLDESTDIR, output library path 

    + CONFIG is used to specify the compile process which support 
debug, will compile debug information 
relase, without debug information 
warn_off, default is open 
qt, specify application or library use Qt default is set 
dll, dynamic compile library 
staticlib, static compile library 
plugin, plugin is always be a dynamic library 
console, application required access console such as used (cout, cerr, qWarning()...)
app_bundle, only fit for mac os x, 指定应用文件被放置到束中, it is default 
lib_bundle, only fit for max os x, put into framework 

    + to generate makefile for *.pro 
    $ qmake hello.pro 
    
    + use make or nmake compile the project, to generate a VS project 
    $ qmake -tp vc hello.pro 
    
    + generate a xcode project in mac 
    $ qmake -spec macx-xcode hello.pro 
    
    generate make file with 
    $ qmake -spec macx-g++ hello.pro 
    
    + -spec is used to specify the platform relative composition, in linux generate 64 bit intel c++ compiler(icc) makefile with 
    $ qmake -spec linux-icc-64 hello.pro 
    
    + qmake also could be used to generate a new *.pro file which will search in the current directly for (.h, .cpp, .ui,...) and listed finded files in the generated .pro file 
    
- syntax for *.pro file 
variable = values 

values is a  sequence of strings

comment start with "#" and end at the end of line 

    + example 
CONFIG = qt release warn_off 

remove from the current configuration list 
CONFIG-= qt 

    + added only not in 
SOURCES *= main.cpp 

    + the regular expression is similar to the sed(unix stream editor) 
SOURCES ~= s/\.cpp\b/.cxx/
    
    + access environment variables 
$$varName or $${varName}, qmake variable value 
$$(varName), qmake runtime environment variable value 
$(varName), makefile environment variable name 
$$[varName], Qt configuration value 

    + convert to lower case 
$$lower() 

    + for difference platform, use 
condition{
    then-case 
} else {
    else-case 
}

condition could be a platform name such as (win32, unix, macx)
    
qmake also support single line syntax 
condition: then-case 

- include file, for multiple .pro files share the same values 
include(../common.pri)
    
    + the .pro file will be contain in other .pro file will have the .pri extension 
    
- get string from external command 
OS_VERSION = $$system(uname -r)

    + use the result in condition 
contains(OS_VERSION, SunOS): SOURCES += mythread_sun.c 

- third party editor, there are two kinds of these tools 
    + will generate makefile and use standard compile system 
    
    + the system don't require external compile tools 
    
    + tools list 
    cmake 
    boost.build 
    scons 
    
- cmake is a crossplatform makefile generate tools 
qmake.pro 

create a CMakeList.txt 

use cmake command to generate makefile 

use make or make clean to generate the executable 

- boost.build(bjam)
    + use QTDIR environment variable to set the QT install location 
    + add "using qt;" to user-config.jam file 
    + we could also add QT install directory into user-config.jam file instead of use the environment variable 
    using qt: home/kathy/opt/qt432;
    
    + copy boost-build.jam to the application directory and create a Jamroot contains the qt file list 
    
    using qt:...;
    
    exe spreadsheet:
        cell.cpp 
        finddialog.cpp 
        finddialog.h 
        gotocelldialog.cpp 
        gotocelldialog.h 
        gotocelldialog.ui 
        main.cpp 
        mainwindow.cpp 
        ...
        /qt//QtGui 
        /qt//QtCore 
        
        * compile 
    $ bjam release 
    
- SCons is a python based build tool which could be used to replace make 
http://www.scons.org
           
    
## Qt Jambi
- is a java version Qt 
    

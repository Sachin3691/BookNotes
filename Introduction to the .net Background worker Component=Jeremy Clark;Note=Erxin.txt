Introduction to the .net Background worker Component=Jeremy Clark;Note=Erxin

# Course Overview
- BackgroundWorker Goal
    + Keep the UI response
    + for client application
    + not for web
    + not for window app store apps
    
- Simple
    + just 10 members
    + only 4 members for basic functionality
    
    + Methods
    RunWorkerAsync
    ReportProgress
    CancelAsync
    
    + Properties
    WorkerReportsProgress
    WorkerSupportsCancellation
    CancellationPending
    IsBusy
    
    + Events
    RunWorkerCompleted
    ProgressChanged
    
- Component-based
    + can use the property window
    + event driven
    + can drag drop from toolbox
    
- Concealed Threading
- Single Purpose
    + focused on one thing only 
- Full-featured
    + progress reporting, cancellation, and error handling
    
- multiple platforms
    + full .net framework 2.0 - 4.5
    + silverlight 3 - 5
    + window phone

- what is not
    + not general-purpose tool
    + not for complex threading
    + not for parallel processing
    + bettern solutions for 
        * TPL
        * async/wait
        * PLINQ


# Background worker with Tasks TPL
- Task progress reporting
    IProgress<T>(.net 4.5 only)
    + create a Progress<T> object with handler
    new Progress<ProgressObject>(UpdateProgress)

    + Call Progress.Report in the long-running progress
    progress.Report(progressData);
    
    private void UpdatedProgress(ProgressObject progress)
    {
        ProgressPercentage = progress.Percentage;
        Output = progress.Message;
    }
    
- Task, cancellation
private CancellationTokenSource cancelTokenSource;

var task = Task<int>.Factory.StartNew(()=>{...}, cancelToken);

cancelToken.ThrowIfCancellationRequested();
...
cancelTokenSource.Cancel();

if(task.IsCanceled) //check in the task process

- Error Handling
task.IsFaulted

the task exception is aggregated exception, task.Exception.InnerException[0].Message;
    
- Comparison
    + background worker
    free the ui, event driven, limited functionality
    
    + task parallel library
    powerful library










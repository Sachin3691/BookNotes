Lessons from Real World .net code reviews=SHawn Wildermuth;Note=Erxin

# what are code reviews
- introduction
    + to determine what is being done well as well as what can be done better
    
    + sharing the finding of a code review makes all developers involved better
    
    
- what is it?
- why do it?
    + improve the quality of the team
    + improve the quality of the communication
    + improve the quality of the code 
    + find coding problems
- how to do it
    + taking your experience to bear
    + find things to laud and things to fix
    + look for common problems, not one-off issue
    + review 200-400 lines at a time
    + reviewing the whole code base is time consuming
    + no code is perfect
    + maintainable code is a feature
    
- how to not do it, there are patterns to reviewing code- there are anti-patterns too
    + don't get emotional
    + don't focus on blame
    + don't redesign the code
    + don't judge based on how you would have coded it
    + don't include one-off problems
    + trying to find patterns to fix, not finding individual bugs

# lessions for c#
- common problems in c#
- magic strings and numbers
    + hard code strings
    such as log file name

- about if, all if statement should keep inside brace
- string concatenation, use string builder, string format method, use @ to contain keep remain character
    
- const vs readonly
    + readonly can be set at runtime then the variable become read only
    + const variable
    
    the readonly variable calculate from assembly, the const value is take from the code and replace into the using place.
    
    if shield const variable into a assembly, replace assembly is not enough to update the const variable 
    
    so readonly is more flexible from this point of view
    
- IDisposable interface
    + use the using statement
    + implement your own IDisposable type of the global resource
    
- enumeration initialization
    + auto number is start from zero
    
    + uninitialized enum will start from the first enum value
    public enum EnumType
    {
        Unknown = 0,
        ...
    }

- large method bodies
    + a screen full of information
    
    + 60 to 80 lines to keep method displayed in side a normal monitor
    
    + as become bigger, need to add comments
    
    + refactor the long method to several methods
    
    
# lessons for classes
- interfaces and abstract class
    + abstract class and inherit class should have a is a relationship
        * this is a class can't be initialize
        * abstract class can supply default implementation
        
    + interface is guarantee a can relationship, make sure a contract is implement

- excess derivation, don't make a big inherit tree, don't make it deep and complex
- static class and singletons
    + singleton, there is a object that everyone can use, that just use it and don't need to manually create 
    
    it's used to prevent outside word create a new instance and control when and how to create the instance
    
    static Type _output = null;
    public static Type Instance
    {
        get
        {
            if(_output == null)
            {
                _outputter = new Outputter();
            }
            return _outputter;
        }
    }
    
    + use static class
        * only have static members
        * construction of this instance of this class is not allowed
        * use static class to replace singleton pattern
        
- nested class usage
    + can be used as internal implementation
    + the default scope of class is internal so it is not necessary to create nested class
    
- hiding class members with new
public class Animal
{
    public void Walk()
    {
    }
}

public class Dog:Animal
{
    public new void Walk()
    {
    }        
}
    
make method virtual, to allowed override

new keyword is used to hiding base class implementation, it is fit for you don't have the priority to change the property

- Auto property vs private members


# lessons for asp.net
- use encoding in markup files
    + File|Advance Save Options to check the current file encoding
    + make sure the <meta charset="utf-8"> is match the real file encoding
- edge versions of browsers, if you do some html 5, web gl, tell the browser use the latest render engine
<meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1">
- don't embed js/css in page
    + pack work solution for bugs to insert js or css into single page
    
- content delivery networks
    + content delivery network is used common used js library from the other reference side
    use ~/bundles/jquery
    
    bundle is common for MVC project, use the CDN path
    bundles.UseCdn = true;
    
    bundles.Add("~/bundles/jquery", "//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery").Include("~/Scripts/jquery-(version).js");
    
    normally bundle will use cdn in release mode, change the configuration of asp.net to release mode to support CDN
https://developers.google.com/
google CDN there are lots of CDN

- concatenating css, use bundle to concatenate into single file which self writing, for library css still keep separate file
- razor lessons, razor files
    + no way to know where the raze code is
    + take the code to behind to make the code maintainable 
    + add using statement into razor file
    + web.config have a section to let every razor page to load as default namespace
    
- caching inside per request classes
    + context object
    + use dependency injection layer to give caching for single request
    + use static object to implement the cache behavior without IoC
    static CodeReviewContext _ctx;
    internal CodeReviewContext context
    {
        get
        {
            if(_ctx == null)
            {
                _ctx = new CodeReviewContext();
            }
            return _ctx
        }
    }

    tell IoC only create the InReuqestScope
    
- Overuse of Web API Attributed Routing
[Route("api/widget")]
public IEnumerable<Widget>
{
}

use class level Route to prevent too many rout property to increase the maintain load

use web configure with config.Routes.MapHttpRoute() with single code reconfigure the route
config.Routes.MapHttpRoute(
    routeTemplate = ''
)


# lessons for architecture
- introduction, review architecture, how was build system, reading throw system structure
- not invented HERE syndrome
    + collective intelligence will always be smarter than one developer or even a small team. buy or borrow... don't build it unless you're doing something very special 
    + build your own business logic
    + don't build 
        * custom data caching layers
        * in-house ORM/Data Access layer
        * mvc filters with business logic asp.net
    + buy or borrow your core issue and focus on the domain specific logic 
- too many layers
    + as developers, we like architecture diagrams 
    + we can get caught in the idea that more layers and abstraction layers are better... they're not
    + magic diagrams, remove redundant layers of the system
    
    client-side framework
    javascript objects
    web services
    data transfer objects(DTOs)
    business rules
    data access (ORM)
    DB
    
    web clients| desktop clients| mobile clients
    |----------------------------------firewall
    cache servers
    web servers
    |----------------------------------firewall
    internal api servers
    application servers
    database 
- integration problems
    + lack of unit tests
    you can't determine code quality without tests
    
    + manual testing is good, but doesn't scale
    + if you're not running tests, your users are your testers
    + writing tests for client-side and server-side code
    + when they are different(e.g web)
    + most code smell originated in lack of testing 
    + unit tests are more valuable for regression than creation

- continuous integration
    + build code frequently improves code quality
    + integration problems are surface earlier is easier to fix
    + running automated unit test helps find regression bugs
    + breaking the build should be enforced by shame, not reprimands
    + on large teams, this becomes even more important 
    + you should know the state of your code at all times
    
- dependency injection
    + lack of dependency injection
    + ninject, dependency injection, could be unity
    
- circular dependencies
    + property injection
- lazy loading problems in EF
    + EF have a property to enable lazy load enable, turn lazy load off
    + use include linq to add sub relationship table
    from c in db.Customers.Include("Orders")
    
    + do it in the code first model by
    this.Configuration.LazyLoadingEnabled = false;
    
- large result sets in EF
    + paging to begin with 
    + use take operation 
    query.Take(top_number)
    
    query.Skip(25*page).Take(25)
    need to specify a order
    
    + build your paging logic at the beginning of your system
    
- big edmx problems in EF
    + sub diagram, in the future feature
    + delay the request in the big edmx
    + break edmx into unity of smaller size of edmx file, avoid a giant edmx file
    + for websize application small edmx is more helpful
    

























    
    






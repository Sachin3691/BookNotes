Unit Testing with MSTest, Visual Studio2010;Note=Erxin

# Introduction
- Microsoft.VisualStudio.QualityTools.UnitTestFramework.dll
Namespace: Microsoft.VisualStudio.TestTools.UnitTesting
- Normal code, identified as unit test by use of attributes
- Visual Studio uses .Net reflection
- Manage your unit tests in visual studio
    + test view, check the menu
    Test | Window | Test View
    + test list editor, used to group test case, create folder and select the test case into the created group
    + test results
- Test Configuration
    + direct from code 
    + test tools tool bar
    + .testsettings created with a test project
        * could be add into the test project, visual studio support add arbitrary number of test settings
        * before run any test, select the right testsetting by test menu
        Test | Select Active Test Settings | 
        * after the tests run, the test setting could be seen from the test result window
- Debugging unit tests, breaking point could be set anywhere in your code
- Generating unit tests, any class method support generating unit test by content menu. Select the needed options and the VS will generate a template test method in the test project
- Execute unite in the command line, MSTest.exe
    + locate under "\common7\IDE"
    + options
    /testcontainer:[file name], the dll contain all the test
    /test:[test name], a single test
    /testlist:[test list path], a test list
    /testsettings, to specify a test setting file
    + check detail from the msdn
    
# Asserts and Testing Lifecycle
- Initialization and Cleanup of Unit Tests
    + initialize configure a resource shared among your tests
        * database connection
        * shared object
        * a log file
    + Clean up initialized resource after each test finished
    + Test class template
    [TestClass]
    public class ClassTest
    {
        [TestInitialize]
        public void TestInitialize()
        {}
        
        [TestMethod]
        public void TestMethod()
        {}
        
        [TestCleanup]
        public void TestCleanup()
        {}
    }
    + AssemblyInitialize and Clean up, only one method could be decorated as AssemblyInitialize attribute and AssemblyCleanup, TestMethodAttribute
    AssemblyInitialize will be run before the TestInitialize
- Assertions
    + what is assertions
    if ( expected == actual ) then 
        pass
    else
        test fail
    + class method assert
        * assert.AreSame is used for object compare
        * assert.AreEqual is used for value type compare
    + collection assert, CollectionAssert Class
    + string assert, StringAssert Class
    + detail check the assert class on msdn
- Working with TestContext, Set by the runtime
    + Path to deployment directory
    + Test name
    When testing web services, store the url of the web Service
    Asp.net apps, provide access to the page object
    data driven tests, provides access to the data source
    + add test context class 
    [TestClass]
    public class UnitTest1
    {
        public TestContext TestContext {get;set;}
        
        [TestMethod]
        {
            TestContext.WriteLine("TestRunDirectory:{0}", TestContext.TestRunDirectory);
        }
    }
- Data Driven Unit Tests
    + create test data in three types
    xml, database, csv file
    + set the property of the unit test method, change the connection string by the test data could also directly change the test method's property
    
# Type of tests   
- Web performance test
- Testing web applications
    + functional tests
    + data-driven tests
    + performance tests
- Performance of Web Testing
    + create web app
    + create a test project add web test
    Right click the test project|add|Web performance Test...
    + record the web test, visual studio will record the http request for the test website
        * the record file will display in the visual studio
        * the record file is a xml file
        * the recorded request could be deleted
        * the record file could be run under the unite test the result page could check the request header, content, the times
    + parametrize insert rules dynamic params loops
    click the web test root node file (record)
    the visual studio variable %PathToWebRoot% which reference the visual studio's Options|Test Environment|Web root configuration
    + run web test, the recorded test could be run in any test environment
    + analyse results
- web tests work at http layer
    + vs web test engine <=> web server hosting web app
- processing of web testing   
    + add web performance testing
    + support add extraction rule for the recorded web request. right click a request and use the content menu to add the extract value.
        * Give a name
        * Specify the relative Attribute name, such as Style
        * Specify the match value
    + parametrize insert rules dynamic params loops
        * extract rules
        * validation rules
        extract a small bit of data from a web response
        validate that data against a rule
        verify the existence of
            specify text
            html tags and attribute
            from fields and values
        add process is same as extraction rule
    + dynamic parameters
    the value is generated every time that a user runs the application, example session id
    types of dynamic parameters
        * cookie
        * hidden field/view state
        * query string or form post
        * params
        * example
        <script type='text/javascript' lanauage="javascript">
        <!--
        function jScriptQueryString(){
            var Hidden = document.getElementById("HiddenFieldSessionID");
            var sessionId = Hidden.value;
            window.location='JScriptQuery.axpx?CustomQueryString='+sessioinId;
        }
        //-->
        </script>
        <asp:HiddenField ID="HiddenFieldSesionID" runat="server"/>
        <a name="QueryStringLink" href="ASPQuery.aspx?CustomerQueryString=<%=Session.SessionID%>">Dynamic query string/>
        <a href="javaScript:jScriptQueryString()">Dynamic query string generate by javascript/>
    the web performance test will automatic detect the dynamic parameters and add query string
        * dynamic parameters may make test failed
        * use extract value from the dynamic value in visual studio and replace the previous hard code value(automatic wizard from VS) to avoid hard code test dynamic parameters
    + Data Binding
    bind webrequest components to a data source
        * csv files
        * xml
        * database
    In the web test project, after record the webrequest, click add data source icon. choose a type of data source
        * bind the data to the request by the web request item's property page
        * the data source should be set access method property
        * run the test with stop at first step mode could let user set the test run setting
        such as fix run count
- Coded web tests
    + convert aweb test script to code
    + return an enumeration of webrequests to the test runtime
    + add any logic you wish
    + the pre setting have generated webtest code in the web test project
    
    
# Miscellaneous Unit Test Features
- Ordered Tests   
    + appears as a single test in the test windows
    + the result appears in a single row in the test result window
    + can execute 1 test many times
    + used to group test together
    + create order test
        * in the test project right click and add|order test
        * specify the order of tests
        
- Generic Tests, integrate Non-VS automated testing tools
    + can be run from command line
    + must return a value of pass or fail
    + uses your credentials
        * be sure you trust the author
    + create generic test
        * add generic test at the content menu of test project
        * add the exe which need to be test
        * add command line
        * test method return 0 means test pass any thing else mean fail
- Unit Test Attributes
    + owner
    + description
    + test property
    + time out
    + create tes attribute
    [TestMethod]
    [Owner("Phani")]
    [Description("This test is for testin the sqrt")]
    [TestProperty("Test reviewer: ", "Thomas")]
    //if the test run out of the time out there will be a info message
    [Timeout(1000)] 
    public void IsSqrTest()
    {...}
    the test property window will display the setted property
    + other properties relative to team foundation server
    [CssIteraton]
    [CssProjectStrucure], Relative to TFS Classification Iteration field
    [WorkItem]
    + others
    [Priority], it is for the user to review the test 
    [Ignore], set the test attribute to Disable
    [TestCategory], in the test list viewer or test property support add test category
    [ExpectedException], use test attribute [ExpectedException(typeof(DivideByZeroException))]
- WebServiceHelper
    + contain helper method for test webserver
    + developer scenario: where web service is running off Asp.net development server
        * define a web server
        * create a "test project" in visual studio
        * define proxy object
        [TestMethod]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServer("ServiceName"), @"Service_file_location")]
        public void TestMethod()
        {
            WebServcieTesting.ServiceReference1.Servcie1Client = target = new WebServcieTesting.ServiceReferenc1.Service1Client();
            
            System.Web.Service.Protocols.WebClientProtocol pl = new System.Web.Services.Protocols.HttpGetClientProtocol();
            
            pl.Url="http://localhost:25555/service1.svc"
            
            Assert.IsTrue(WebServiceHelper.TryUrlRedirection(pl.testContextIstance, "ServiceName"));
            Assert.AreEqual(expected, target.GetData(parameters))
        }
        * define protocol/set URL
        * use assert.IsTrue for WebServiceHelper.TryUrlRedirection
        * call web service
        * use Assert.AreEqual
- TestConfigurationSection
    + instead of providing values, depend on configuration files
    + steps involved
        * create a app.config file for the test project
        * define configuration section for "TestConigurationSection"
        * define connection strings
        * define data source
        * use the "DataSourceAttribute" for the test method
    + advantages
    flexibility for regions(dev, test,production), without touching code
    flexibility for formats(excel, access, xml)















    
    
    
    
    
    
AngularJS=K.Scott Allen;Note=Erxin


# introduction
- start from google 
www.angularjs.org

builtwith.angularjs.org 

plnk.co
plunker, is a online read web editor 

- two requirement
    + add a <script> tag pointing to angular.js 
    + add an ng-app attribute in your html 
        * ng-app is a an angular directive 
        * the ng is short for angular
        
- go to the plnk.co and launch the editor 
<!DOCTYPE html>
<html>
    <head>
        <script data-require="angular.js@*" data-semver="1.3.0-beta.5" src="https://code.angularjs.org/1.3.0-beta.5/angular.js"/>
        <link ref="stylesheet" href="style.css"/>
        <script src="script.js"></script>
    </head>
    <!-- the ng-app is the markup for angular to define the code region it also could be add to other tags -->
    <body ng-app>
    {{843/42}} <!--this a direct eval for angular binding expression-->
    </body>
</html>

plunker support save or share 
plunker could download the current code package 
the preview could be used to debug the code 
support directly add js package 

- chrome or firefox developer tool to debug and check the js code 
    + keep open the console window will include all the current edit js information 
    clear the console to refresh the current edit status 
    + check the right corner about the error and warning statistic information 
    + go to the source tab of developer tool 
    ctrl+o to search file name, open a script file and click the line number to add a break point, on the right corner could resume the script execution 
    
- javascript pattern 
    + functions as abstractions 
    var work = function(){
        console.log("working hard!");
    };
    
    work(); //will execute the function 
    
    var dowork = function(f){
        console.log("starting");
        try
        {
            f();
        }
        catch(ex)
        {
            console.log(ex);
        }
        console.log("end");
    };
    dowork(work); //invoke the work 
    
    + functions to build modules 
    var worker = createWorker();
    
    worker.job1();
    worker.job2();
    
    var createWorker = function(){
        var workCount = 0;
        var task1 = function()
        {
            workCount += 1;
            console.log("task1" + workCount);
        };
        var task2 = function()
        {
            workCount += 1;
            console.log("task2" + workCount);
        };
        return {
            job1: function(){
            }, //define function inline 
            job2: task2
        };
    };
    
    revealing module pattern, module is a collection of function or feature can do some works 
    
    + functions to avoid global variables, for javascript the global variables are beyond the evil 
    
(function(){
    var worker = createWorker();
    
    worker.job1();
    worker.job2();
    
    var createWorker = function(){
        var workCount = 0;
        var task1 = function()
        {
            workCount += 1;
            console.log("task1" + workCount);
        };
        var task2 = function()
        {
            workCount += 1;
            console.log("task2" + workCount);
        };
        return {
            job1: function(){
            }, //define function inline 
            job2: task2
        };
    };
})(); // IIFE immediately invoke function expression, this will avoid create global variables 


# Controllers 
- 
    


    
    
    
    
    
    
    






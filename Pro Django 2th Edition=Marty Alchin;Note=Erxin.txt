Pro Django 2th Edition=Marty Alchin;Note=Erxin

# introduction
- other resource
    + dive intou python 3 by mark pilgrim
    + the definitive guide to django:web development done right by adrian holovaty
- django version, 1.5.1 for this book

# Understanding django
- philosophy, zen of python, import this
- django's interpretation of MVC pattern
    + model is generally responsible for managing data and core business logic
    + view displays that data to the user
    + plug multiple applications into a single model layer
- Model-Template-View pattern, MTV, four primary code division in a django application
    + Model, exist independent of the rest of the system
    + View, are normally defined as standard python functions
    + Template for presenting data to the user, many views may use HTTP redirects to other URLs, third-party document format(PDF) libraries  or anything else
    + Configuration, separate layer of glue to make views available
- loose coupling, no code should ever know anything about any other code. the key is rely on implementation details as little as possible. Python ways
    + duck typing
    + operator overloading
    + signals and dispatching
    + plugins
- don't repeat yourself(DRY)
- a focus on readability, PEP-8
- failing loudly
    + definition of exception
        * Something excepted; an instance or case not conforming to the general rule
        * One that is excepted, especially a case that does not conform to a rule or generalization
        * An instance that does not conform to a rule or generalization
    + exception is not error
    + in some languages, raising exceptions is extremely expensive, so to prevent performance problems, exceptions are avoided whenever possible
    + in python raise exception is like return from a function
- documenting rule
    + documentation
    + docstrings
    + tests
    + comments
- what's core, is simply the code that is distributed through the main django web site, the gray area is the django.contrib package, they could be third-party applications
- BDFL，Benevolent Dictator for life, who have ultimate authority over all decisions for the framework
    + python world, Guido van Rossum, creator of python holds the position of BDFL
    + django, Adrian Holovaty the creator of the framework, Jacob Kaplan-Moss lead developer of the current work
- News and resources
    + django weblog
    prodjango.com/django-weblog/
    + django community
    prodjango.com/community/
- Resuable application
    + django host on githubs
    + django packages
    prodjango.com/djangopackages
- Getting help
    + mailing list
    http://prodjango.com/backwards-incompatible-changes
    http://prodjango.com/faq/
    + internet relay chart
    http://prodjango.com/irc
    http://prodjango.com/gist

# Django is python
- include python standard library and immense of third-party
- metaclasses change it up, type is actually a metaclass, a class that create other classes, metaprogramming creates or midifies code at runtime rather than programming time
    + most of the metaclasses are subclasses of type
    + metaclass receives the new class as its first argument and provides access to the class object
    + example
    >>> class MetaClass(type):
    ... def __init__(cls, name, bases, attrs):
    ...     print('Defining %s' % cls)
    ...     print('Name: %s' % name)
    ...     print('Bases: %s' % (bases,))
    ...     print('Attributes:')
    ...     for (name, value) in attrs.items():
    ...         print(' %s: %r' % (name, value))
    ...
    >>> class RealClass(object, metaclass=MetaClass):
    ...     spam = 'eggs'
    Defining <class '__main__.RealClass'>
    Name: RealClass
    Bases: (<class 'object'>,)
    Attributes:
    spam: 'eggs'
    __module__: '__main__'
    __qualname__: 'RealClass'
    the __module__ in the list of attributes is a standard part of all python class
    called __new__, with the potential for different set of possibilites
    + python 3 introduced the ability to pass arguments into a class definition
    + python 2, metaclass were assigned to a class variable named __metaclass__
- using a base class with a metaclass, subclasses inherit attributes from their parents the metaclass option is automatically provide
- declarative syntax
class Contact(models.Model):
    """
    Contact information provided when sending messages to the owner of the site.
    """
    name = models.CharField(max_length=255)
    email = models.EmailField()
- centralized access, provides a single module from which applications can access all the necessary utilities
    from django.db import modules
- base class, each feature starts with at least on base class
class Contact(modules.Model)
- attribute classes, the features these objects provide will vary greatly across frameworks, some may behave quite differently from a standard attribute, options are usually read by the metaclass
name = modules.CharField(max_length=255)
email = modules.EmailField()
- ordering class attribute, to display the attribute to the programming at the same order, having all attribute classes inherit from a particular base class, have attrbitues themselves keep track of the instantiation sequence
class BaseAttribute(object):
    creation_counter = 1
    def __init__(self):
        self.creation_counter = BaseAttribute.creation_counter
        BaseAttribute.creation_counter + 1
- classs declaration
- common duck typing protocols
    + callables, allows code to be executed from a number of sources
    __call__(self, ...)
    built-in function to assist in identification of a callable objects
    callable(object_instance) # will return True or False
    + dictionaries
        * __contains__
        * __getitem__(self,key)
        * __setitem__(self,key,value)
    + file
        * write(self, str)
        * close(self)
    + iterable
    __iter__(self)
    + iterabors is called with an boject
        * next(self) until raise StopIteration 
    + generators are a convenient shortcut to create simple iterators without have to define a separate class, netx()
    + sequences
        * __len__(self)
        * __getitem__(self)
        * __setitem__(self, value)
- Augumenting functions
    + excess arguments
    + positional arugments
    func(*args)
    + keyword arguments
    func(**kwargs)
- decorators, wrapping a function as decorators
def wrapper(func):
    def wrapped(*args, **kwargs):
        do_something]
        return func(*args, **kwargs)
    return wrapped
- partial application of functions, part of its funtools module, accepts a callable along with any number of additional arguments and return a new callable
    >>> import functools
    >>> def add(a, b):
    ... return a + b
    ...
    >>> add(4, 2)
    6
    >>> plus3 = functools.partial(add, 3)
    >>> plus5 = functools.partial(add, 5)
    >>> plus3(4)
    7
    >>> plus3(7)
    10
- back to the decorator problem, uses curry to provide arguments for decorators using the newer python 2.4 syntax
@curry(decorate, prefix='Curried')
    >>> from django.utils.functional import curry
    >>> @curry(decorate, prefix='Curried')
    ... def test(a, b):
    ... return a + b
    ...
    >>> test(30, 5)
    'Curried: 35'
The trick is to define the decorator inside another function, which will accept the arguments. This new outer function then returns the decorator
- descriptors, such as getter setter, all references to that attribute also need to be changed, descriptor are a special type of object that when attached to a class can intervene when the attribute is accessed
    >>> import datetime
    >>> class CurrentDate(object):
    ... def __get__(self, instance, owner):
    ... return datetime.date.today()
    ... def __set__(self, instance, value):
    ... raise NotImplementedError("Can't change the current date.")
    ...
    >>> class Example(object):
    ... date = CurrentDate()
    ...
    >>> e = Example()
    >>> e.date
    datetime.date(2008, 11, 24)
    >>> e.date = datetime.date.today()
    Traceback (most recent call last):
    ...
    NotImplementedError: Can't change the current date.
the instance, containing the attribute that was referenced, if the attribute was referenced as an attribute of a class rather than an instance, this will be None
owner, the class where the descriptor was assigned
- keeping track of instance data, __dict__ attribute is used to access a object's namespace
- introspection
    + python introspection tools
    http://prodjango.com/inspect-module/
    + some of inspect's many use will be dtailed here
- common class and function attributes
    + __name__
    + __doc__
    + __module__, the import path of the module
    + __class__, which is the actual class object used to create the object
- identify object types
    + getting arbitrary object types, built-in function, type
- checking for specific types
issubclass, isinstance
- function signatures, inspecting function is inspect.getargspec(), a function that returns informations about what arguments a function aceepts
    + args, a list of all argument names specified for the function no will be []
    + varargs, the name of the variable used for excess positional arguments
    + varkwargs, the name of the variable used for excess keyword arguments
    + defaults, a tuple of all default values specified for the functions' arguments, if no then this will be None
- docstrings, inspect module have a getdoc() method to get this attribute
- applied techniques, useful tactics in terms of django
    + tracking subclasses, used to control subclass name convention
    >>> class SubclassTracker(type):
    ... def __init__(cls, name, bases, attrs):
    ... try:
    ... if TrackedClass not in bases:
    ... return
    ... except NameError:
    ... return
    ... TrackedClass._registry.append(cls)
    ...
    >>> class TrackedClass(metaclass=SubclassTracker)
    ... _registry = []
    ...
    >>> class ClassOne(TrackedClass):
    ... pass
    ...
    + a simple plugin architecture
        * a clear readable way to declare a plugin and make it available
        * a simple way to access all the plugins that have been declared
        * a way to define a neutral point between plugins and the code
        * example
        class PluginMount(type):
            def __init__(cls, name, bases, attrs):
                if not hasattr(cls, 'plugins'):
                # This branch only executes when processing the mount point itself.
                # So, since this is a new plugin type, not an implementation, this
                # class shouldn't be registered as a plugin. Instead, it sets up a
                # list where plugins can be registered later.
                cls.plugins = []
            else:
                # This must be a plugin implementation, which should be registered.
                # Simply appending it to the list is all that's needed to keep
                # track of it later.
                cls.plugins.append(cls)
        * As mentioned before, this relies on metaclasses in django
        class PasswordValidator(metaclass=PluginMount):
            """
            Plugins extending this class will be used to validate passwords.
            Valid plugins must provide the following method.
            validate(self, password)
            Receives a password to test, and either finishes silently or raises a
            ValueError if the password was invalid. The exception may be displayed
            to the user, so make sure it adequately describes what's wrong.
            """
            def is_valid_password(password):
                """
                Returns True if the password was fine, False if there was a problem.
                """
                for plugin in PasswordValidator.plugins:
                    try:
                        plugin().validate(password)
                    except ValueError:
                        return False
                return True

# Models
- Django models are defined as standard Python classes, with a wealth of additional features added in automatically, ORM an object relational mapper allow classes access to database 
    + the more sql write by hand the more opportunity to get attach
- how django processes model classes, The metaclass responsible for processing model definitions is ModelBase, living at django.db.models.base. key features
    + a new class is generated to be used for the actual model, preserving the module location where the original model was defined
    + a custom app_label wasn't provided for the model, it's base on the where it was declared
    + meta options are pulled out of the module and placesd in a special options
    + two special exception, DoesNotExist and MultipleObjectsReturned are created
    + if the module was already defined the existing one is retrieved from the app cache
    + attributes and methods defined on the orginal module are added to the newly-created one
    + setting from inherited parent modules are set on the new module
    + the new module is registered with app cache for future reference
    + newly created module is returned to be used in place of the class that was defined in the source file
- setting attributes on modules, getattr(), setattr() are the python standard way, django provides add_to_class() for a substitute for setattr(), if app needs to add arbitrary objects as attributes to module, they must call add_to_class()
    + difference between setattr
    add_to_class is a class method so the first argument is the class it self different with setattr need to explicit specify the class
- getting information about modules, along with django's modelBase metaclass, its original structure can be determined by using an attribute that exists on every django module called _meta
    + class information (page 43)










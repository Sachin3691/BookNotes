Building APIs with Node.js=Apress;Note=Erxin

# Introduction 
- es6 feature 

ECMAScript 6 at http://es6-features.org

- set up nvm, Node Version Manager (NVM)

curl https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash

- package.json 
document is affected by the config settings described in npm-config.

https://docs.npmjs.com/files/package.json

some of the field values effected by the npm-config 
https://docs.npmjs.com/misc/config
    + keys 
pacakge-lock, If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true.

    + keys 
name 
version 
description 

- npm documentation 

https://docs.npmjs.com/


- npx, execute npm package binaries 

npx [options] <command>[@version] [command-arg]...

npx [options] [-p|--package <pkg>]... <command> [command-arg]...

npx [options] -c '<command-string>'

npx --shell-auto-fallback [shell]

// -p, --package, define the page to be install 
// --no-install, only try to run 
// --cache, set the location of the npm cache 
// --userconfig
// -c <string> -Execute <string>
// --shell-auto-fallback [<shell>]
// --ignore-existing 
// -q, --quiet 
// -n, --node-arg 
// -v, --version 

- RESTful APIs work with the concept of creating and manipulating resources. These resources are entities that are used for queries, entries, and updating and deleting data

expressjs 

- sql database 
SQLite 
Sequelize is an ORM for node.js, promise based framework, http://sequelizejs.com 

- CRUDify API resources 

app.all(), app.get(), app.post(), app.put(), app.patch(), app.delete()

- testing endpoint access using postman 

go to http:///www.getpostman.com.

- authenticating users 

JSON web token,  JWT , go to http://jwt.io

$ npm install passport@0.3.2 passport-jwt@2.0.0 jwt-simple@0.4.1 --save

- encryption of user passwords with bcrypt 
$ npm install bcrypt@0.8.5 --save

- testing the application 
mocha, support TDD, BDD, code coverage html report, customized test reports, asynchronous test support, easy integration with the should, assert and chai module 

https://mochajs.org 

- set up test environment 
1   module.exports = app => {
2     const env = process.env.NODE_ENV;
3     if (env) {
4       return require(`./config.${env}.js`);
5     }
6     return require("./config.development.js");
7    };

- documenting the API 
$ npm install apidoc@0.15.1 --save-dev

https://apidocjs.com/

example: inline documentation for RESTful web APIs 
/**
 * @api {get} /user/:id Request User information
 * @apiName GetUser
 * @apiGroup User
 *
 * @apiParam {Number} id Users unique ID.
 *
 * @apiSuccess {String} firstname Firstname of the User.
 * @apiSuccess {String} lastname  Lastname of the User.
 */


module.exports = app => {
  /**          
   * @api {get} / API Status          
   * @apiGroup Status          
   * @apiSuccess {String} status API Status' message          
   * @apiSuccessExample {json} Success          
   * HTTP/1.1 200 OK          
   * {"status": "NTask API"}          
   */          
  app.get("/", (req, res) => {
    res.json({status: "NTask API"});
  });
};


- preparing the production environment, CORS, Cross-origin resource sharing (CORS) is an important HTTP mechanism. It is responsible for allowing or denying asynchronous requests from other domains.      CORS      , in practice, includes only the HTTP headers that are included on the server side. Those headers can indicate which domain can consume the API
    + enabling CORS in the API
    
    $ npm install cors@2.7.1 --save
    
    + initiate the middleware cors
    
 1   import bodyParser from "body-parser";
 2   import express from "express";
 3   import cors from "cors";
 4
 5   module.exports = app => {
 6     app.set("port", 3000);
 7     app.set("json spaces", 4);
 8     app.use(cors());
 9     app.use(bodyParser.json());
10     app.use(app.auth.initialize());
11     app.use((req, res, next) => {
12       delete req.body.id;
13       next();
14     });
15     app.use(express.static("public"));
16  };

- cluster design, I recommend you read the documentation at https://nodejs.org/api/cluster.html

- compressing with GZIP middleware 
$ npm install compression@1.6.1 --sav

- install sll support to use HTTPS 

To create a simple certificate, you can go to http://www.selfsignedcertificate.com 

- install helmet 
$ npm install helmet            @1.1.0 --save

- modules that will be used 

http-server: CLI for starting a simple HTTP server for static files only.

browserify: A JavaScript compiler that allows use of some NPM modules. Weâ€™ll use some modules that have JavaScript Universal codes (codes that works in back-end and front-end layers) and also allows loading using CommonJS pattern, which is the same standard as Node.js.

babelify: A plug-in for the browserify module to enable reading and compiling ES6 code in the front end.

babel-preset-es2015: The presets for Babel recognizes ES6 code via babelify.

tiny-emitter: A small module to create and handle events.

browser-request: A version of the request module focused for browsers, it is a cross-browser (compatible with all major browsers) and abstracts the whole complexity of an AJAX request.











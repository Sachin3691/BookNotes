Building your first windows phone app=Lars Klint;Note=Erxin

# introduction 
- why would I develop for windows phone?
critical thinking
single best developer opportunity 
- windows phone user is more like to buy app 
- both for window store, phone and pc 
- who is course for 
    + no wp experience
    + know visual studio 
    + c#
    + xaml
    + apps, not games 
    
- reference
building windows phone apps stand out, in pluralsight 
- how do you get the great idea? 
- who will be using it 
- visual design for engage user 
- windows phone workflow 
- blend tool
- code architecture 
mvvm framework
- business logic 
- testing your app 
- marketing 

    
# How to get the create idea
- introduction
- passion to build the best project you can 
- research your competition and be aware 
- differentiate yourself
- self-check your idea and think from potential users 
- starting a project 
    + code, c#
    + technology, learning a new, explore the option
    + competition
- how do you get the idea? 
    + no limit
    + passion rules supreme
        * skill, you are going to live 
        * ambition
        * emotion, involve in any idea of your project 
        * enjoyment
        
- research the market 
    + what is the competition doing 
    + research the market 
        * search the key relative to apps 
        * reading relative articles 
        * solving a problems that large number users 
        
- differentiating factor 
    + what are the factor make your user stand out 
    + provide brand new features 
    + turning point, if there are multiple apps implement the almost the same features 
    + competitor matrix and your apps 
    +-----------+--------------+---------------+
    |           |competitor a  | competitor b  |
    +-----------+--------------+---------------+
    |kittens    |      V       |               |
    +-----------+--------------+---------------+
    |birds      |              |     V         |
    +-----------+--------------+---------------+
    
    + passion, be the best 
    
- self check your idea 
    + distance your idea and your apps 
    + what is the reason to download your apps 
    + personas
        * mother, kids 
        * younger people
        * analyse your user group and forcus on the largest user group 
        
- creating personas 
    + conduct research 
    + condense research 
    + brainstorm
    + refine 
    
- hands on personas, create at the start of the project 


# use Case and Workflow
- Development strategy
- identifying features 
    + roadmap for project 
    + use personas to priorites 
- use cases 
    + feature relationships 
- high level 
- single develop project 
    + Ad Hoc 
    + have to think features and better choose which feature to develop 
    + water flow
        * gather requirements 
        * design 
        * build 
        * verify, quality assurance 
        * maintenance 
            
    + this required know everything in front 
    
- Agile development 
    + sprint -> sprint -> sprint -> sprint 
    each sprint is seems a water flow process 
    0 ---------> n 
    
    + develop small features and show production code every sprint 
    + choose short sprint about two weeks 
    
- identifying features 
    + features 
    + backlog
    + current sprint 

- use cases 
    + use case, focus on the features 
        * actor 
        * action 
        * how to interact different features 
        * precondition 
    + get a use case diagram 
- hands on uses case, define use case 
use case
goal including 
scope 
level
primary actor 
priority 
frequency 
preconditons 
triggers 

success scenario
step 1
step 2
step 3

related information 
effort 
dependent use case 

open issues 

- high level workflow, will define workflow how user interact with your app. workflow is composed with use case 

place the visual element on the screen 

use the interactive wire frame
    
    
# Design Your App 
- introduction 
    + handy tips for designing 
    + layouts and elements 
        * grids 
        * theming 
        * common elements 
    + design implementation 
        * Hierarchy 
    + make your app unique 
    
- designing as developer 
    + half copy other apps and compose them together 
    + 1 to 5 colors, keep it simple, color skin , use adobe Kuler to help choose the color 
    + how many font should use same font, Segoe UI
    + less is more
    + generate the detail into the design is the developer, keep the only useful information to user 
    
- design guidelines and approach 
    + everything layout is in a grid 
    + use accents color which is build in with windows phone, you don't have to worry about which theme user choosen 
    + allow user to pin to start screen 
    + whether or not use splash screen, if you app delay then have to use splash screen 
    + typography 
    + icon style should be consistent 
    
- design implementation 
    + layout 
    absolute, set x/y to play element 
    contain elements in Canvas
    + dynamic 
    StackPanel
    Grid 
    
    + Panorama control, is a unique way to layout horizontal screen 
    suggest to limit to five tabs 
    
    + pages, like wizard experience 
    + app bar, may user to quick access functions, you can show up four icons and any number of context menus 
    
- hands on, Metro Studio, free download have 
http://www.syncfusion.com/download/metro

have 2500 icons metro style

convert fonts to icons 
    
- making your app unique 
- put users first 
- outsourcing use Gigbucks to hire designer 
    + provide features 
    + provide colors 
    + be available and provide feedback

    
# Your app comes to life 
- tools 
blend, visual studio, strengths and weakness

xaml, declarative markup language 

- hands on frist visual studio project 
    + create a window phone project app with template 
    + solution file structure 
    Solution
        Project
            Properties
                AppManifest.xml
                AssemblyInfo.cs
                WMAppManifest.xml //for setup the icons which used by the app 
            References
            Assets //folder to keep images or other resources 
                *.png
            Resources //for localization 
            App.xaml //where the app start, this is the first file to run 
            LocalizedStrings.cs
            MainPage.xaml 
            
    + there are several kinds of phone emulators 
    Emulator WXGA 512MB, 
    Emulator WVGA 512MB,
    Device 
    Emulator WXGA 512MB
    Emulator WVGA
    Emulator WXGA
    Emulator 720p
    + test managemeng for windows phone, for pluralsight courses 
    
- designer workflow,software developer write c#, designer use blend output xaml 
- hands on blend 
    + open project in blend 
    + use the sample data use the right data tab, could create a sample data file
    the sample data type support boolean, string, number, image 
    
- being a sole developer 
    

# Organize your code
- introduction 
    + important of getting the right start 
    + identify dangers lurking for your project 
    + model, view, view model (MVVM)
        * decoupling 
        * code structure 
        * easily tested 
    + source control 
        * control 
        * confidence
        * collaboration 
        * git & github demo 
        
- start out right, solid structure is crucial 
- consequences
    + no strategy 
    + inadequate information 
    + higher risk 
    + more analysis 

    + no reference 
    + change your mind 
    + increase complex 
    + maintenance 
    + more integration issues 
    + project demise

- MVVM framework, not for small project, it is fit for medium or large, data binding is tricky

- hands on MVVM framework 
    + create MVVM code structure for the solution 
    + move the mainPage.xaml to the view
    + change the WMAppManifest.xml file and change the location for the MainPage.xaml to point to the View/MainPage.xaml to let the app.xaml find the main page file 
    + add model class 
- source control 
- using github with visual studio 
- hands on using source tree, is a free jira tool, source tree works with 
    + bitbucket 
    + stash 
    + github 
- keeping on track 
    + be critical 
    + redactor often 
    + constantly improve

# Business logic 
- efficient structures 
- portable class libraries, PCL, for business logic
    + cross platform reuse 
    + mvvm integration 
    + Xamarin is also compatible for PCL 
    + anything you want to test you could place it into PCL to support cross platform development and test 
    
    + makes the MVVM's ViewModel and Model into PCL project to simple the cross platform development 
    
- cloud services 
    + toast notification, such as push notification from cloud service 
        * simpler architecture 
        * lightweight 
        * less maintenance 
    + live title 
    + notification have a security key 
- hands on push notifications from window azure 
    + login management for window azure by a window account
    
    + use notificaton hub to achieve push notification, the steps are
        * new 
        * app service 
        * service bus 
        * notification hub 
        give a name and configuration 
        
    + install nuget package from visual studio to support push notification 
    install window azure messaging package 
    
    var channel = HttpNotificatonChannel.Find("notificationName");
    if(channel != null)
    {
        channel = new HttpNotificatonChannel("notificaitonName");
        channel.Open();
        channel.BindToShellToast();
    }
    
    channel.ChannelUriUpdated += (s, e)=>
    {
        var hub = new NotificationHub("notificationName", "Endpoint=sb://excuserhub-")
        await hub.RegisterNativeAsync(args.ChannelUri.ToString());
    };
    
    + make sure check the WMAppManifest.xml's property Capability ID_CAP_PUSH_NOTIFICATION
    
    + step a console application to send push notification 
    install window azure service bus package for the project, create a NotificationClient and send the toast 
    NotificationClient hub = NotificationHubClient.CreateNotificationFromConnectionString("...");
    //this is a toast format required by window phone 
    string toast = "<xml content or json>"; 
    await hub.SendMonsNotificationAsync(toast);
    
    the connection string is supply by the window azure push notification service 
- best practices 
    + implement feature X using best practices and everything will be fine 
    + first make it work 
    + second make it fast 
    + ask more professionals
- demo 


# Test Solution 
- start testing coming up 
    + what to test 
    + business logic and intellectual 
    + certification testing 
    + events out of your control 
    + first run of your app 
    + performance testing 
    + a good test plan save time 
    + unit tests, integration tests and built-in tests 

- what should i test 
    + include area your app interact with 
    + app certification requirements for window phone, there are several test items 
        * install 
        * verify uninstall 
        * low memory device 
    + static values, settings, references 
    + Uses base notification, don't show this kinds of message in the first 20 would be best choice 
    + keep testing first run 
    + use in build performance test 
    
- unit test 
    + NUnit
    + XUnit
    + MSTest
    
- hands on unit test 
    + add unit test project 
    + unit test steps
    //arrages 
    
    //act 
    
    //assert 
    
- integration test 
- build-in test 
    + open store test kit, which is a buid in  windows phone test tool, right click the project and click Open Store Test kit 
    
- hands on store test toolkit 

# Future proofing your app 
- nearing the end of the journey 
- future proof your app 
- feedback 
    + various ways to get feedback 
    
- code maintenance 
    + fixing bugs 
    + adhering your architecture
    
- updates 
    + keep code fresh and value 
    
- feedbak 
    + promote for ask ranking your app 
    + email
    + twitter 
    + bugsense 
    feature useage 
    user behavior 
    workflow analysis 
    
- hands on about page 
    + use nuget search for ylad, your last about dialog
    + the introduction is installed with the package and easy to setup 
    + it also support localization
    
- maintain your code 
    + customer service 
    
- provide updates, indicate users your app is live 
    + update apps, what's new 
    + push out small updates more offen 
    + major update for example refresh UI as less as possible 
    
- market your app 
    + sign up DLVUP
    + get into the local development community 
    + write articles and in your blog 
    + use social media 
    


















            
            
        
    
    
    
    
    
    
    
    
    

















    
    
    
    
    
    
    
    
    
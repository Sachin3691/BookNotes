WebAssembly in Action=Gerard;Note=Erxin

# Introduction 
- design a performance test cases for 
    + other implmentations 
    http://hildstrom.com/projects/langcomp/index.html
    https://github.com/kostya/benchmarks
    https://attractivechaos.github.io/plb/
    
    koch curve ?
    
    check prime number?
    
    

- live book discussion 

https://livebook.manning.com/#!/book/webassembly-in-action/discussion

- the languages support to compile to webassembly 

https://github.com/appcypher/awesome-wasm-langs

- author

http://blogger.com/

http://dzone.com/

- other 
https://medium.com/@mikevdg/why-webassembly-is-a-big-deal-a308d72c6de1

- improve your mobile site to boost your business 

https://www.thinkwithgoogle.com/intl/en-gb/feature/testmysite/

- reference MDN
https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts
https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API



# First step 
- what is webassembly 
function AsmModule() {
  "use asm";                 1
  return {
    add: function(a, b) {
      a = a | 0;             2
      b = b | 0;
      return (a + b) | 0;    3
    }
  }
}

- WebAssembly is a low-level assembly-like language that can run at near-native speeds in all modern desktop browsers 

- can be written in cpp, rust, go typescript etc. 

- fast start up speed compare to js 

- compile process 
{c/cpp/rust/...} > IR  > .wasm 

- basic webassembly file structure 
preamble //header, all other sections are optional 
type 
import 
function 
table 
memory 
global 
export 
start 
element 
code 
data 
any kind of data //custom sections, optional 

- WebAssembly is secure is that it’s the first language to ever share the JavaScript VM, which is sandboxed from the runtime and has had years of hardening and security tests to make it secure. 

https://webassembly.org/docs/security


# Look inside webassembly modules 
- The Import section declares all the imports that will be used in the module, which can include Function, Table, Memory, or Global imports.                  Imports are designed so that modules can share code and data, but still allow for the modules to be compiled and cached separately

- The Function section is a list of all the functions in the module. The position of the function declaration in this list represents the                  index of the function body in the Code section. 

- The Table section holds a typed array of references, like functions, that can’t be stored in the module’s linear memory as raw bytes.                  This section provides one of the core security aspects of WebAssembly by giving the WebAssembly framework a way to map objects                  in a secure way.

- memory, The Memory section holds the linear memory used by the module instance.                                          

- global section for the definition of global variables 
- The Export section holds a list of all objects that will get returned to the host environment once the module has been instantiated. include function, table, memory or global exports 
- The Start section declares the index of the function that’s to be called after the module has been initialized but before the export section are callable 
- Element declares the data that get loaded into the module's table section during instantiation 
- Code holds the body of each function 
- Data declares the data that gets loaded into the module's linear memory 
- custom section 


# Creating your first webassembly module 
- The Emscripten toolkit is currently the most mature toolkit available to compile C or C++ code into WebAssembly bytecode.

    + setup env window 
$ git clone https://github.com/emscripten-core/emsdk.git
$ cd emsdk
$ emsdk install latest
$ emsdk activate latest
$ emsdk_env.bat

    + updating sdk 
$ emsdk update 
$ emsdk install latest 
$ emsdk active latest 
$ emsdk_env.bat

    + using docker image 
$ docker run --rm -v $(pwd):/src -u $(id -u):$(id -g) \ 
    emscripten/emsdk emcc helloworld.cpp -o helloworld.js

    + reference 
    https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm
    https://developer.mozilla.org/en-US/docs/WebAssembly/existing_C_to_wasm
    
    + example 
#include <stdlib.h>
#include <stdio.h>
#include <emscripten.h>
    
    
int IsPrime(int value) {
  if (value == 2) { return 1; }                      1
  if (value <= 1 || value % 2 == 0) { return 0; }    2

  for (int i = 3; (i * i) <= value; i += 2) {        3
    if (value % i == 0) { return 0; }                4
  }

  return 1;                                          5
}

$ emcc calculate_primes.c -o html_template.html

//generated html 
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
  </head>
  <body>
    HTML page I created for my WebAssembly module.

    <script src="js_plumbing.js"></script>          1
  </body>
</html>

    + other options 
    https://emscripten.org/docs/optimizing/Optimizing-Code.html
    
    + specify only one function in the EXPORTED_FUNCTIONS command-line array. If you need to specify multiple functions, don’t include a space in between the comma and the next function,         or you’ll receive a compilation error.
    
    + The WebAssembly.instantiateStreaming() function compiles and instantiates a WebAssembly module directly from a streamed underlying source. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming
    
var importObject = { imports: { imported_func: arg => console.log(arg) } };

WebAssembly.instantiateStreaming(fetch('simple.wasm'), importObject)
.then(obj => obj.instance.exports.exported_func());


    

- intermediate representation (IR), and a backend to convert the IR into the desired machine code

{c/cpp/rust} => {IR} => {x86, ARM}

 Emscripten uses the LLVM compiler

- typescript -> webassembly

https://www.assemblyscript.org/

    + setup environment 
npm install --save @assemblyscript/loader
npm install --save-dev assemblyscript

npx asinit .

npm run asbuild

- rust to webassembly
    + reference 
    https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm

- go to webassembly 
    + reference 
    https://github.com/golang/go/wiki/WebAssembly#getting-started


# Workign with modules 
- Emscripten provides a number of helper functions that make interactions between the module and JavaScript 


# Creating a webassembly module that calls into javascript 
- example 

int ValidateCategory(char* category_id, int* valid_category_ids,
    int array_length) {                                             1
  if (ValidateValueProvided(category_id,
      "A Product Category must be selected.") == 0) {               1
    return 0;
  }

  if ((valid_category_ids == NULL) || (array_length == 0)) {
    UpdateHostAboutError("There are no Product Categories available.");
    return 0;
  }

  if (IsCategoryIdInArray(category_id, valid_category_ids,
      array_length) == 0) {
    UpdateHostAboutError("The selected Product Category is not valid.");
    return 0;
  }

  return 1;
}

mergeInto(LibraryManager.library, {                               1
  UpdateHostAboutError: function(errorMessagePointer) {
    setErrorMessage(Module.UTF8ToString(errorMessagePointer));
  }
});

$ emcc validate.cpp --js-library mergeinto.js

function onClickSave() {
  setErrorMessage("");                                 1

  const name = document.getElementById("name").value;
  const categoryId = getSelectedCategoryId();

  if (validateName(name) &&                            2
      validateCategory(categoryId)) {                  3
                                                       4
  }
}

function validateName(name) {                     1
  const isValid = Module.ccall('ValidateName',
      'number',
      ['string', 'number'],                       2
      [name, MAXIMUM_NAME_LENGTH]);               3

  return (isValid === 1);
}

- creating a webassembly module that talks to javascript using function pointers 

    + Using a function pointer given to the module by JavaScript

void(*UpdateHostOnSuccess)(void);

#ifdef __EMSCRIPTEN__
  EMSCRIPTEN_KEEPALIVE
#endif
void ValidateName(char* name, int maximum_length,                 1
    OnSuccess UpdateHostOnSuccess, OnError UpdateHostOnError) {   2
  if (ValidateValueProvided(name) == 0) {
    UpdateHostOnError("A Product Name must be provided.");
  }
  else if (strlen(name) > maximum_length) {
    UpdateHostOnError("The Product Name is too long.");
  }
  else {
    UpdateHostOnSuccess();
  }
}

#ifdef __EMSCRIPTEN__
  EMSCRIPTEN_KEEPALIVE
#endif
void ValidateCategory(char* category_id, int* valid_category_ids,   1
    int array_length, OnSuccess UpdateHostOnSuccess,
    OnError UpdateHostOnError) {                                    2
  if (ValidateValueProvided(category_id) == 0) {
    UpdateHostOnError("A Product Category must be selected.");
  }
  else if ((valid_category_ids == NULL) || (array_length == 0)) {
    UpdateHostOnError("There are no Product Categories available.");
  }
  else if (IsCategoryIdInArray(category_id, valid_category_ids,
      array_length) == 0) {
    UpdateHostOnError("The selected Product Category is not valid.");
  }
  else {
    UpdateHostOnSuccess();
  }
}

$ emcc validate.cpp -s RESERVED_FUNCTION_POINTERS=4
 -s EXTRA_EXPORTED_RUNTIME_METHODS=['ccall','UTF8ToString',
'addFunction','removeFunction'] -o validate.js


# Dynamic linking: The basic 
- linking options 
    + C or C++ code can manually link to a module by using the dlopen function 
    + instruct Emscripten that there are WebAssembly modules to link to by specifying them in the dynamicLibraries array of Emscripten’s generated JavaScript file. 
    + In your JavaScript, you can manually take the exports of one module and pass them in as imports to another using the WebAssembly JavaScript API
    
    https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API

- three approaches to dynamic linking in this chapter:        
    + dlopen, The side module needs to be downloaded to Emscripten’s file system first.                              
    Calling dlopen returns a handle to the side module file.                                             
    Passing the handle and the function name that you wish to call to the dlsym function will return a function pointer to the function in the side module.                                             
    At this point, calling the function pointer is the same as calling a normal function in your module.                              
    Because you’re requesting a function name based on the side module’s handle, having a function with the same name in the main module won’t cause any problems.                                             
    Linking to a side module is performed as needed.      

    $ emcc calculate_primes.cpp -s SIDE_MODULE=2 -O1 -o calculate_primes.wasm
    
```
#include <cstdlib>

#ifdef __EMSCRIPTEN__
  #include <dlfcn.h>         1
  #include <emscripten.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

                             2

#ifdef __cplusplus
}
#endif
```
```
int main() {
  emscripten_async_wget("calculate_primes.wasm",     1
      "calculate_primes.wasm",                       2
      CalculatePrimes,                               3
      NULL);                                         4

  return 0;
}

void* handle = dlopen(file_name, RTLD_NOW);

FindPrimes find_primes = (FindPrimes)dlsym(handle, "FindPrimes");

// the calculate primise function that calls a function in the side module 
...
void CalculatePrimes(const char* file_name) {
  void* handle = dlopen(file_name, RTLD_NOW);      1
  if (handle == NULL) { return; }

  FindPrimes find_primes =
      (FindPrimes)dlsym(handle, "FindPrimes");     2
  if (find_primes == NULL) { return; }

  find_primes(3, 100000);                          3

  dlclose(handle);                                 4
}
...

```

1 Opens the side module
2 Gets a reference to the FindPrimes function
3 Calls the function in the side module
4 Closes the side module

$ emcc main.cpp -s MAIN_MODULE=1 -o main.html
    
    + dynamicLibraries, 
    You give Emscripten a list of side modules that you want it to link to by including them in the dynamicLibraries array property of the Module object. This list needs to be specified before Emscripten’s JavaScript code is initialized.                                             
    Emscripten handles downloading and linking the side module to the main module for you.                              
    Your module’s code calls the functions in the side module the same way it calls its own functions.                              
    It’s not possible to call a function in another module if you already have a function with that name in the current module.                              
    All the side modules specified are linked as soon as Emscripten’s JavaScript code is initialized. 

Module['dynamicLibraries'] = ['calculate_primes.wasm'];

$ emcc main.cpp -s MAIN_MODULE=1 --pre-js pre.js -s EXPORTED_FUNCTIONS=['_putchar','_main'] -o main.html


    + The WebAssembly JavaScript API                                                                  
    You handle downloading the WebAssembly module using the fetch method and use the WebAssembly JavaScript API to have that module instantiated.                                             
    You then download the next WebAssembly module and pass the necessary exports from the first module as the imports for the current module.                                             
    Your module’s code calls the functions in the side module the same way it calls its own functions.                              
    As with the dynamicLibraries approach, it’s not possible to call a function in another module if you already have a function with that name in the current module.

$ emcc is_prime.c -s SIDE_MODULE=2 -O1 -o is_prime.wasm
$ emcc find_primes.c -s SIDE_MODULE=2 -O1 -o find_primes.wasm

```
...
const isPrimeImportObject = {                                           1
  env: {
    __memory_base: 0,
  }
};

WebAssembly.instantiateStreaming(fetch("is_prime.wasm"),                2
    isPrimeImportObject)
.then(module => {                                                       3

  const findPrimesImportObject = {                                      4
    env: {
      __memory_base: 0,
      _IsPrime: module.instance.exports._IsPrime,                       5
      _LogPrime: logPrime,                                              6
    }
  };

  return WebAssembly.instantiateStreaming(fetch("find_primes.wasm"),    7
      findPrimesImportObject);

})                                                                      8
.then(module => {
  module.instance.exports._FindPrimes(3, 100);                          9
});
```

# Dyanmic linking the implementation 
- using dynamic linking in a single-page application 
dlopen in your C or C++ code 
dynamicLibraries , in your JavaScript provides Emscripten 
Manually linking your js takes the exports of one module and passes them as the imports to another 

- add code in cpp file 
```
#ifdef __EMSCRIPTEN__
  EMSCRIPTEN_KEEPALIVE
#endif

#include <cstdlib>

#ifdef __EMSCRIPTEN__
  #include <emscripten.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
}
#endif

```

# Threading web workers and pthreads
- using a web worker to fetch and compile a webassembly module 
http://mng.bz/gVBG

- instantiating a WebAssembly module on behalf of Emscripten's JavaScript code 
- Creating a WebAssembly module that uses pthreads 
https://en.wikipedia.org/wiki/POSIX_Threads

```
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_THREADS 5

void *perform_work(void *arguments){
  int index = *((int *)arguments);
  int sleep_time = 1 + rand() % NUM_THREADS;
  printf("THREAD %d: Started.\n", index);
  printf("THREAD %d: Will be sleeping for %d seconds.\n", index, sleep_time);
  sleep(sleep_time);
  printf("THREAD %d: Ended.\n", index);
  
}

int main(void) {
  pthread_t threads[NUM_THREADS];
  int thread_args[NUM_THREADS];
  int i;
  int result_code;
  
  //create all threads one by one
  for (i = 0; i < NUM_THREADS; i++) {
    printf("IN MAIN: Creating thread %d.\n", i);
    thread_args[i] = i;
    result_code = pthread_create(&threads[i], NULL, perform_work, &thread_args[i]);
    assert(!result_code);
  }

  printf("IN MAIN: All threads are created.\n");

  //wait for each thread to complete
  for (i = 0; i < NUM_THREADS; i++) {
    result_code = pthread_join(threads[i], NULL);
    assert(!result_code);
    printf("IN MAIN: Thread %d has ended.\n", i);
  }

  printf("MAIN program has ended.\n");
  return 0;
}
```

- benefits of web workers 

- nodejs worker threads
https://nodejs.org/api/worker_threads.html

- WebAssembly supports pthreads by using web workers and a SharedArrayBuffer.

https://github.com/webassembly/threads/blob/master/proposals/threads/Overview.md

```
/// main.js ///
let moduleBytes = ...;  // An ArrayBuffer containing the WebAssembly module above.
let memory = new WebAssembly.Memory({initial: 1, maximum: 1, shared: true});
let worker = new Worker('worker.js');
const mutexAddr = 0;

// Send the shared memory to the worker.
worker.postMessage(memory);

let imports = {env: {memory: memory}};
let module = WebAssembly.instantiate(moduleBytes, imports).then(
    ({instance}) => {
        // Blocking on the main thread is not allowed, so we can't
        // call lockMutex.
        if (instance.exports.tryLockMutex(mutexAddr)) {
            ...
            instance.exports.unlockMutex(mutexAddr);
        }
    });


/// worker.js ///
let moduleBytes = ...;  // An ArrayBuffer containing the WebAssembly module above.
const mutexAddr = 0;

// Listen for messages from the main thread.
onmessage = function(e) {
    let memory = e.data;
    let imports = {env: {memory: memory}};
    let module = WebAssembly.instantiate(moduleBytes, imports).then(
        ({instance}) => {
            // Blocking on a Worker thread is allowed.
            instance.exports.lockMutex(mutexAddr);
            ...
            instance.exports.unlockMutex(mutexAddr);
        });
};
```

- real-world use cases 
    + Although not quite the same as pthreads in WebAssembly, web workers can be used as a polyfill for parallel processing in browsers
    
    + Web workers can be used to prefetch and compile WebAssembly modules in anticipation of their need.
    
    + WebAssembly in eBay, http://mng.bz/Ye1a
    
    
# WebAssembly text format 
# Debugging 
# Testing 
- memory and numeric instructions for the object types 
http://webassembly.github.io/spec/core/text/instructions.html

https://mochajs.org/#running-mocha-in-the-browser

Creating automated tests using Mocha
Running your tests at the command line in Node.js
Running your tests in the browsers you intend to support

- WebAssembly Binary toolkit 

https://webassembly.github.io/wabt/demo/wat2wasm
https://github.com/WebAssembly/wabt


# Advanced topics 
- how dynamic linking works for webasssemlby modules 
- Your C or C++ code can manually link to a module by using the dlopen function.
- JavaScript, you can manually take the exports of one module and pass them in as imports to another using the WebAssembly JavaScript API.

- reference 
https://emscripten.org/docs/api_reference/Filesystem-API.html

- debug webasssembly in chrome 
https://developers.google.com/web/updates/2019/12/webassembly
https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/

- webassembly binary toolkit 
https://github.com/WebAssembly/wabt#running-wasm2wat

- decompile webassembly 
https://v8.dev/blog/wasm-decompile


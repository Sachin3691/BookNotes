Husky intracompany standard Tfs best practices;Note = eshang

:Reference link
http://boltfs02/sites/HmiReArchitecture/TrainingAndDocumentation/Wiki%20Pages/TFS%20Best%20Practices.aspx

:Check in
Pending changes
run all test
get last and merge

:Merging
merge all the conflict before check in

:Work item creation
Epic work item
    title and include work item number
    completion field is not requried
    link to user story
    ranking field
User story item
    summary
    completion
    links to epic and tasks
    ranking
Task work item
    title ans summary
    baseline work(hours), remaining works(hours) and completed work(hours)
    link to user story
    ranking optional

:Global priority field
optional

:User story points manangement(baseline and percent complete)
an item is not directly realated to an epic of us then assign the points directly
item from a us to another team
    crate the work item and set the story point value
    remove the assigned story point value 
note complete a us at the end of a iteration
    assign the completed story points to a task completed in the iteration and set the completed percent to 100%
    assign the remaining points to the user story and set the complete percent to 0% also set the iteration path to the next iteration
    
:For bug
link to the us or epic if possible

:Use of the "Description" field
make effective use of this templates
=>task type work item
* Purpose
* Design
- ideas and changes
* Tests Required
- add the tests need update and code or do not have time to update
* Action Items
- list what needs to be done. 
;
=>bug type work items
* Problem
* Reported Version(s)
* Expected Behavior
* Suggested Solution
* Investigation
* Root Cause Analysis (5 Why's)
- Why 1: <why did the reported problem happen?>
* Root Cause Summary
- Technical Root Cause: < i.e., what wasn’t the code doing.  This should be a more generalized "problem area" or "category">
- Process Root Cause: <i.e., what weren’t we doing.  This should be a more generalized "problem area" or "category">
* Solution
<description of the actual solution to the problem>
* Action Items

:Epic organization
Epic driven project throught development and release to validation
oEpic:
    §  Make sure all requirements organized under section 1.
    §  Risks and Assumptions added.
    §  Stakeholders added under Product Owner.
    §  Link to Concepting document and Engineering Test document under References.
    §  Make sure Epic sections organized as per the updated template.
oEngineering Testing:
    §  Make sure Engineering Test document created and link added in Engineering Test Plan.
    §  Test results updated after testing done.
oWork Items (general)
    §  Make sure Rank properly filled in.
oUser Story work items
    §  Mark whether each User Story requires Validation or not using the existing “Exit Criteria” (Yes/No) field (think of it as User Story “exiting” development!?!?!).
    §  “Notes” tab includes a checklist (each item marked as “(done)” before changing User Story status to Resolved or Complete).
;
user story work items
* Purpose
The Epic document must contain the agreed to requirements.  The purpose when this US was created was:
* Notes
- 
* Action Items
- (***)
Notes (DOD: Definition of Done Checklist)
* Resolved: (mark as done)
- Code checked in
- Epic updated with requirements, risks, assumptions
- Tasks closed
- Eng test written
- Eng test executed
- Eng test results recorded
- Ready for system test
- Release notes updated






    

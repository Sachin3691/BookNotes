MEAN Web Development Second Edition=Amos Q;Note=Erxin

# Introduction 
- open source projects 
http://meanjs.org 
MEAN.io 
http://www.daloradius.com 
- introducing mean, mongodb, express, angular and node.js. devops and CI
- install mongodb 
    + running as a windows service 
    > sc stop mongodb 
    > sc delete mongodb 
    
    install mongodb service 
    > > "C:\Program Files\MongoDB\Server\3.2\bin\mongod.exe" --config "C:\Program Files\MongoDB\Server\3.2\mongod.cfg" --install
    > net start mongodb 

    + more configuration options, http://docs.mongodb.org/manual/reference/configuration-options/.

- install node.js 


# Getting start with node.js 

# Building an Express web application 

# Introduction to mongodb 
- The BSON formatOne of the greatest features of MongoDB is its JSON-like storage format named BSON. Standing for Binary JSON, the BSON format is a binary-encoded serialization of JSON-like documents
- Supporting ad hoc queries means that the database will respond to dynamically structured queries out of the box, without the need to predefine each query
- To provide data redundancy and improved availability, MongoDB uses an architecture called a replica set. Replication of databases helps to protect your data to recover from hardware failure and increase read capacity.

one of the set members can't reach the primary instance for more than 10 seconds, the replica set will automatically elect and promote a secondary instance as the new primary

- MongoDB supports horizontal scaling, which it refers to as sharding. Sharding is the process of splitting the data between different machines, or shards. Each shard holds a portion of the data and functions as a separate database.

- CRUD operations for MongoDB 
> db.posts.insert({...})
> db.posts.update({...})
> db.posts.save({...})
> db.posts.find({})
> db.posts.remove({})

    + query operations 
> db.posts.find({ "user": { $in: ["alice", "bob"] } })


# Introduction to Mongoose 
- Mongoose is a robust Node.js ODM module that adds MongoDB support to your Express application. 
- install 

using npm 

- config 
const config = require('./config');
const mongoose = require('mongoose');
module.exports = function () {
    const db = mongoose.connect(config.db);
    return db;
};

- define schema 
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const UserSchema = new Schema({
        firstName: String,
        lastName: String,
        email: String,
        username: String,
        password: String
    });
mongoose.model('User', UserSchema);

- model validation 
const UserSchema = new Schema({
        … email: {
            type: String,
            index: true,
            match: /.+\@.+\..+/
        },
        …
    });
    
const UserSchema = new Schema({
        ...password: {
            type: String,
            validate: [function (password) {
                    return password.length >= 6;
                }, 'Password should be longer']
        },
        ...
    });
    
- support middleware 


# Managing User authentication using passport 
- using Passport library 

# Introducing to Angular 

# Creating a MEAN CRUD module 

# Adding realtime with Socket.io 

# Testing MEAN app
- mocha 


# Automating and debugging mean applications 
- introudcing webPack 
- introducing ESLint 
- using Nodemon,  Nodemon is a Node.js command-line tool that functions as a wrapper to the simple node command-line tool, but watches for changes in your application files.

- Debugging express with V8 inspector. add these lines into package.json scripts field. It's a node command line --inspect 

"debug": "node --inspect --debug-brk server.js",

- debugging angular with Angular Augury. a Chrome extension called Angular Augury. Angular Augury extends the Chrome Developer Tools with a new tab where you can debug different aspects of your Angular application. Installing Angular Augury is quite straightforward.









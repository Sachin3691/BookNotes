Create an Endless Runner Game for MObile in Unity=Lars Alin;Note=Erxin

# create the game 
- we need the ground pieces sprides, such as blank, ground_left, ground_middle, ground_right 

arrange these elements as image in to the game hierarchy under a tile game object which could avoid us create game object during the run time 

there is also a game object called startTilePosition which is a base line of the game 

    + create a levelCreator.css file 
public class levelCreator: MonoBehavior{
    private GameObject tilePos;
    private GameObject lastTile; 
    private float startUpPosY;
    private const float tileWidth = 1.25f;
    private int heightLevel = 0;
    private GameObject tmpTile;
    private float outofbounceX;
    
    private GameObject collectedTiles;
    private GameObject gameLayer;
    private GameObject bgLayer;
    private float startTime; 
    
    void Awake()
    {
        Application.targetFrameRate = 60;
    }
    
    void Start()
    {
        gameLayer = GameObject.Find("gameLayer");
        bgLayer = GameObject.Find("bckgroundLayer");
        collectedTiles = GameObject.Find("tiles");
        
        for(int i = 0; i < 21; i++){
            GameObject tmpg1 = Instantiate(Result.Load("ground_left", typeof(GameObject))) as GameObject;
            tmpg1.transform.parent = collectedTiles.transform.FindChild("gLeft").transform;
            
            GameObject tmpg1 = Instantiate(Result.Load("ground_middle", typeof(GameObject))) as GameObject;
            tmpg1.transform.parent = collectedTiles.transform.FindChild("ground_middle").transform;
            
            GameObject tmpg1 = Instantiate(Result.Load("ground_right", typeof(GameObject))) as GameObject;
            tmpg1.transform.parent = collectedTiles.transform.FindChild("ground_right").transform;
            
            GameObject tmpg1 = Instantiate(Result.Load("gBlank", typeof(GameObject))) as GameObject;
            tmpg1.transform.parent = collectedTiles.transform.FindChild("gBlank").transform;
        }
        
        collectedTiles.transform.position = new Vector2(-60.0f, -20.0f);
        
        tilePos = GameObject.Find("startTilePosition");
        startUpPosY = tilePos.transform.position = y;
        outofbounceX = tilePos.transform.position.x - 5.0f;
        fillScene();
        startTime = Time.time; //set the current time 
    }
    
    void FixedUpdate()
    {
        if(startTime - Time.time % 5 == 0)
        {
            gameSpeed += 0.5f; //every 5 seconds increase the game speed 
        }
        
        gameLayer.transform.position = new Vector2(gameLayer.transform.position.x - gameSpeed * Time.deltaTime, 0); //the last parameter is high
        
        bgLayer.transform.position = new Vector2 (bgLayer.transform.position - gameSpeed/ * Time.deltaTime, 0);
        
        foreach(Transform child in gameLayer.transform){
            if(child.position.x < outofbounceX){
                switch(type){
                    case "ground_left(Clone)":
                        tmpTile = collectedTiles.transform.FindChild("gLeft").transform.GetChild(0).gameObject;
                        break;
                    case "ground_middle(Clone)":
                        tmpTile = collectedTiles.transform.FindChild("gMiddle").transform.GetChild(0).gameObject;
                        break;
                    case "ground_right(Clone)":
                        tmpTile = collectedTiles.transform.FindChild("gRight").transform.GetChild(0).gameObject;
                        break;
                    case "blank(Clone)":
                        tmpTile = collectedTiles.transform.FindChild("gBlank").transform.GetChild(0).gameObject;
                        break;
                }
            }
        }
        
        if(gameLayer.transform.childCount < 25)
        {
            spwanTile();
        }
    }
    
    private void spawnTile()
    {
        if(bankCounter > 0)
        {
            setTile("blank");
            blankCounter --;
            return;
        }
        if(middleCounter > 0)
        {
            setTile("middle");
            middleCounter--;
            return;
        }
        if(lastTile=="blank")
        {
            changeHeight();
            setTile("left");
            middleCounter = (int)Random.Range(1,8);
        }
        else if(lastTile == "right")
        {
            blankCounter = (int)Random.Range(2,4);
        }else if(lastTile == "middle")
        {
            setTile("right");
        }
    }
    
    private void changeHeight()
    {
        int new HeightLevel = (int)Random.Range(0,4);
        if(newHeightLevel<heightLevel)
        {
            heightLevel--;
        }
        else if(newHeightLevel > heightLevel)
        {
            heightLevel++;
        }
    }

    private void fillScene()
    {
        for(int i = 0; i < 15; i++)
        {
            setTiltle("middle");
        }
        setTiltle("right");
    }
    
    public void setTile(string type)
    {
        switch(type){
            case "left":
                tmpTile = collectedTiles.transform.FindChild("gLeft").transform.GetChild(0).gameObject;
                break;
            case "middle":
                tmpTile = collectedTiles.transform.FindChild("gMiddle").transform.GetChild(0).gameObject;
                break;
            case "right":
                tmpTile = collectedTiles.transform.FindChild("gRight").transform.GetChild(0).gameObject;
                break;
            case "blank":
                tmpTile = collectedTiles.transform.FindChild("gBlank").transform.GetChild(0).gameObject;
                break;
        }
        
        tmpTile.transform.parent = gameLayer.transform;
        tmpTile.transform.position = new Vector2(tilePos.transform.position.x + (tileWidth), startUpPosY+(heightLevel * tileWidth));
        
        tilePos = tmpTile;
        lastTile = type;
    }
}    
    
will generate the tile ground 

- putting a randomized level design into motion 
    + add randomized background layer 
    + use the start up script connect to the main camera 
    
- add hero into the game 
    + drag and drop the hero animation sprites, it will automatic create a animate in unity 5 
    + adjust the z-order 
    + add collider 2d for the hero 
    + add rigidbody 2d 
    change mass to 5 
    gravity scale to 3 
    fixed angle to true 
    
    + add player script to the hero 
public class playerHandler:MonoBehavior
{
    private bool inAir = false;
    private int _animState = Animator.StringToHash("animState");
    
    private Animator _animator;
    public bool jumpPress = false;
    
    void Start()
    {
        _animState = this.transform.GetComponent<Animator>();
    }
    
    void Update()
    {
        if(!inAir && this.rigidbody2D.velocity.y > 0.05f)
        {
            _animator.setInteger(_animState, 1);
            inAir = true;
        }
        else if(!inAir && this.rigidbody2D.velocity.y <= 0.001f)
        {
            _animator.SetInteger(_animState, 1);
            inAir = true;
            
            if(jumpPress)
            {
                jump();
            }
        }
    }
    
    public void jump()
    {
        jumpPress = true;
        if( !inAir )
        {
            this.rigidbody2d.AddForce(Vector2.up * 3000);
        }
    }
}
    
    + add input controller to control the main camera to make the camera jump with the hero 
public class inputController: MonoBehavior
{
    private bool isMobile = true;
    private playerHandler _player;
    
    
    
    void Start()
    {
        if(Application.isEditor)
        {
            isMobile = false;
        }
        
        _player = GameObject.Find("Player").GetComponents<PlayerHandler>();
        
        
    }
    
    void Update()
    {
        if(isMobile)
        {
            int tmpC = Input.touchCount; 
            tmpC --;
            
            if(Input.GetTouch(tmpC).phase == TouchPhase.Began)
            {
                handleInteraction(true);
            }
            if(Input.GetTouch(tmpC.phase == TouchPhase.Ended)
            {
                handleInteraction(false);
            }
        }
        else 
        {
            if(Input.GetMouseButtonDown(0)
            {
                handleInteraction(true);
            }
            if(Input.GetMouseButtonUp(0))
            {
                handleInteraction(false);
            }
        }
    }
    
    void handleInteraction(bool starting)
    {
        if(starting)
        {
            _player.jump();
        }
        else
        {
            _player.jumpPress = false;
        }
    }
}
    
- changing animation states 
    + create a new animate state called jump 
    + add a new clip from teh animator window 
    + add transition from running to jump 
    + set the condition and create parameter for the transition state 
    
    + add scripts to the player handler scripts 
- bringing objects into play 
    + use scripts to generate new game object called Reward 
    + set the box collider and for the reward and check the is trigger property 
    
public class crateScript: MonoBehavior
{
    private float maxY;
    private float minY;
    private int direction = 1;
    void Start()
    {
        maxY = this.transform.position.y  + .5f;
        minY = maxY - 1.0f;
        
        crateRender = this.transform.GetComponent<SpriteRender>();
    }
    
    void Update()
    {
        this.transform.position = new Vector2(this.transform.position.x, 
                                              this.transform.position.y + direction * 0.05f);
                                              
        if(this.transform.position.y > maxY)
        {
            direction = -1;
        }        
        if(this.transform.position.y < minY)
        {
            direction = 1;
        }
    }
    
    void OnTriggerEnter2D(Collider2D coll)
    {
        if(coll.gameObject.tag == "Player")
        {
            switch(crateRender.sprite.name)
            {
                case "crate_0":
                    GameObject.Find("Main Camera").GetComponent<levelCreator>().gameSpeed -= 1.0f;
                    break;
                case "crate_1":
                    GameObject.Find("Main Camera").GetComponent<levelCreate>().gameSpeed -= 1.0f;
                    break;
                case "crate_2":
                    GameObject.Find("Player").rigidbody2D.AddForce(Vector2.up * 6000);
                    break;
                case "crate_3":
                    //add score 
                    break;
            }
            
            this.transform.position = new Vector2(this.transform.position.x, this.position.y + 30.0f);
        }
    }
}
- respawing crates and initializing enemy tiles 
- generating an enemy frenzy 
- keeping track of the high score 
- incorporating sound effects and score handling 
- applying final tweaks and exporting to an iphone 
go to menu project setings select the iphone icon to export to iphone, input the developer account, Bundle Identifierand bundle version select the ios version 

go to the build settings, add scenes to be build and click build will generate a IOS xcode project output.open the IOS project with xcode, hit play to play ISO simulator 











    
    
    
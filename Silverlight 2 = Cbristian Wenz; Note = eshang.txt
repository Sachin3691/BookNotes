Silverlight 2 = Cbristian Wenz; Note = eshang

Silverlight架构模型
BCL			;							;	DLR， Dynamic Languages
Data		;	Network		;	WPF		;	Python, Ruby, VBx, JScript
Linq		;	Web Service	;	Control	;	
Collections	; 	Http Request;	Media	;
Generics	;				;	UI		;
Managed Code Interop;
CLR Execution Engine
UI Core
Vector Graphics	;	Inputs	;	Js Engine
Animations		;	Controls;	Ajax Library
Images			;	Media	;
Text			;	DRM		;
Presentation Core
XAML
Networking	DOM	Scripting
Browser

RIA
特点：
客户端服务器平衡、异步通信、网络效率
缺点：
沙箱、不能禁用脚本、脚本下载时间、对搜索引擎不可见、对Internet连接的依赖
；
流行的技术种类
silverlight, flash & flex, ajax, adobe air, javafx, google gears

WPF
下一代操作系统UI技术，基于矢量并使用XML
Windows Presentation Foundation
;
.net 3.0的组成部分之一，还包括
WCF, windows communication foundation 通信子系统
WCS, windows cardSpace 数字标识系统
WF, Windows Wordflow Foundation 工作流
SVG, Scalable Vector Graphics, 可缩放矢量图形

Microsoft Expression Blend， 是silverlight 美工开发的IDE

类型转换使用as
varObject as aimType;
aimType.FunctionOrAttributeName;

键盘时间
使用事件参数的 e.key 属性

变形
translateTransform, 改变位置
scaleTransform, 改变缩放元素
skewTransform, 水平和垂直倾斜角度
rotateTransform, 旋转角度
matrixTransform, 所有元素点与矩阵相乘
；
<xamlControl.renderTransform>
	<someTranform/>
</xamlControl.renderTransform>

创建动画
StoryBoard
;
支持的动画属性
AutoReverse, Duration, From, To, By, RepeatBehavior, StoryBoard.TargetName, SotryBoard.TargetProperty
;
动画类型
DoubleAnimation, colorAnimation, PointAnimation
;
关键帧动画
DoubleAnimationUsingKeyFrames, ColorAnimationUsingKeyFrames, PointAnimationUsingKeyFrames
;
关键帧之间的点支持的插值方法
Linear, Discrete (不插值), Spline 沿二次贝塞尔曲线绘制
;
动画控制
Begin(), Pause(), Resume(), Stop(), Seek(offset)
;
objStoryBoard.Begin();

window movie maker, http://www.microsoft.com/downloads/
WMV, Windows media video
WMA, Windows media audio
asx格式的流不支持暂停
；
微软提供半免费得流服务
http://silverlight.live.com
;
嵌入多媒体
<mediaElement>

数据绑定
目的是将代码与逻辑表示分离；
实现的方法就是使用函数指针完成的；
；
同名CS与XAML文件可以直接在XAML文件中进行绑定
<someControl attribue = {Binding objCsFileVariableOrClassProperty Mode = ...}/>
;
为整个数据集设置数据上下文
UIObject.DataContext
;
对于事件的处理函数，无需在UI中使用{}来包裹绑定事件处理，例如
<... MouseLeftButtonDown = "SomeCsFunctionName" />
;
使用CS代码创建数据绑定   
objSomeClass = new SomeClass{ attributeName = "name" };
Bidning b = new System.Windows.Data.Binding("attributeName");
b.Mode = System.WIndows.Data.BindingMode.OneTime;
objUI.SetBinding(UIType.TextProperty, b );
;
绑定模式
OneTime, 仅在绑定的时候有效，以后改变数据源则不会对输出有影响；
OneWay, 只在绑定源到绑定目标上有效，随时更改绑定源随时有效
TwoWay, 两个方向均起作用
如果使用OneWay或TwoWay, 那么对应的绑定源必须实现INotifyPropertyChanged接口，在System.ComponentModel中定义

数据转换
Data Conversions
转换器要实现一个接口IvalueConverter
实现两个方法
Convert(), ConvertBack()
两个方法有相同的四个参数
value, targetType, parameter, culture
;
引用命名空间
<UIObject xmlns: someName = "clr-namespace:otherNamespaceUri"; [assembly = myOtherAssembly">

<UIObject.Resources>
	<someName:userConverterClass x:Key = "userConverter"/>
</UIObject.Resources>

<UIChildObject attribute = "{Binding bindAttrib, mode = twoWay, Converter = {StaticResource userConverter}}"/>
StaticReource表示要使用的时内部资源，不是外部资源
</UIObject>

数据验证
Data Validation
在Binding语句中要将UI成员的两个属性设置为true，并且必须是双向绑定
NotifyOnValidationError, ValidatesOnExceptions
这样验证失败就会引发异常，只要处理对应的异常就可以了
;
在绑定类的属性赋值函数中加入
if( String.IsNullOrEmpty(value) )
	throw new ArgumentException();
...
在UI对象上加上异常处理委托
uiObject.BindingValidationError += dealValidataionErrror;
;
在异常处理函数中, 使用事件参数来检测异常处理情况
e.Action 枚举值为 Addded, Removed 说明是新添加的还是已经处理
e.Handled = true/false 表示异常是否继续在元素树中继续传递

ASP页面中嵌入Silverlight控件
<asp:Silverlight>
属性
Source, Version, ScaleMode, Width, Height
使用silverlight控件的时候还需要在网页中进行注册
<asp:Silverlight ID = "someName" runat = "Server" Source = "xxx.xap" version = "2.0" width = "20" height = "20" />
<%@ Register Assembly = "System.Web.Extensions, Version = 3.6.0.0, Culture = neutral, PublicKeyToken = 31...." Namespace = "System.Web.Ui.SilverightControls" TagPrefix = "asp" %>
;
嵌入媒体内容
<asp:MediaPlayer>
属性
 MediaSource， AutoPlay， Muted， PlaceholderImageUrl， ScaleMode, Volume

使用外部网络资源
webClient类支持两个重要的事件
DownloadProgressChanged web请求进度改变, DownloadStringCompoleted web请求已完成
；
事件属性
BytesReceived, TotalBtesToReceive

WCF服务， windows communication Foundation
实现SOAP访问协议，Simple Object Access Protocol
包含两个文件
*.svc
<%@ servicehost language = "C#" debug = "true" service = "addService" codeBehind = " ... *.cs " %>
*.cs
using ...
[serviceContract( namespace = "http://www...")]
[aspNetCompatibilityRequirements(RequirementsMode = aspNetCompatibilityRequirementsMode.Allowed)]
public class AddService
{
	[operationContract]
	public int Add(int a, int b)
	{
		return a + b;
	}
}
对应的服务代码
;
客户端使用服务方法，使用
AddServiceReference命名空间中提供的 servicClassNameClient 方法来创建对service的引用

JavaScript 对Silverlight进行编程
可以使用 silverlight对应的DOM， ID进行访问插件
document.getElementById("idName");
;
Silverlight 提供javaScirpt api接口来提供与javaScript的交互
从silverlight内下载内容遵循以下步骤
objSilverlight.createObject(), 初始化下载程序
添加事件监听
提供下载信息
发送HTTP请求
触发产生的事件
*.aspx部分
<%@page language = "c#" %>
void Page_load()
{
	response.clear();
	response.bufferOutput = false;
	response.addheader("Content-length", "1003");
	for(int i = 0; i < 17; i ++ )
	{
		response.write("sdfasdf");
	}
	response.end();
}
无论何种脚本编写，都不能使用输出缓冲，还要发送正确的Content-length http头
还可以下载字体或图像等其他资源文件，通过 javaScript 与silverlight 交互来通过silverlight显示









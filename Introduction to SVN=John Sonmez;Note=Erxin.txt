Introduction to SVN=John Sonmez;Note=Erxin

# about this course
- basic introduction to svn
- windows based with Tortoise SVN
- working knowledge vs detail
- branching and merging
- best practices
- outline
    + source control
    + about svn
    + architecture
    + repository structure
    
- what source control is
    + code storage
    + versioned
    + facilitates multiple developers
    
- types of source control
    + locking, we can't modify the same file in the same time, lock the changing, you have to wait some to check in the file then begin edit
    + merging, this is the strategy of SVN, a local copy of the file and merge the local to the server
    + distributed, this is a newer one, git. every single person have their local repository, their changes can push into source control 
    
- about svn, history of SVN 
    + created by CollabNet in 2000, designed to be like CVS but better
    + became a top-level apache project in Feb 2010
    
    + merge based
        * developers check out local copies of code
        * changes to the same file are 'merged'
        
    + commits are atomic, it is check in all or nothing operation
    + uses properties for metadata, these property have key/value pair
    + branching and tagging are copies, you splitting the code into a new branch, it is storing the changes of the old copy one
    + different implementations, have multiple implementations
    
- architecture
    + working copy <---svn client ----> repository ---> file system
                          |                 A
            or by service layer             |
                          +----------->services(apache/svn server)
    
    + basic architecture like a shared file system
        * but versioned
        repository version1 <---change file
        repository version2 <--- svn version at the entire repository
    
        * each repository difference is saved 
    + using SVN
    repository ---check out working copy --> working copy, we have complete copy
          A                                         |
          |                                         |
          |                                         V
          |                                     change files
          |                                         |
          |                                         |
          |            commit changes               V
          merge?--------------------------------modified working copy
                                                the .svn contain information of trac changes
                                                
- repository structure 
    + a repository is a big tree!
    repositories/
        scratch/
            branches/
            tags/
            trunk/
                
    + branches
        * branched code goes here, branch is different life cycle of the codes
        * uses a copy to be efficient
        only differences are saved
        * can branch any part of code, like copy from current code version to the branch
        * branches are like new trees
        
        simple is good
        
    + tags
        * just a name for a revision
        * also is a copy, but read only 
        doesn't take up additional space
        * don't have functional purpose
        
    + trunk, the main code line
        * active development happens on trunk
        * branch is when you absolutely need to
    

# setting up svn
- installing svn server
http://subversion.apache.org

build the client and server, where are lots of packages for the same version of svn

apache and server throw apache http server

443 is ssh port
use 8443 for subversion, use subversion authentication

install visual svn for window as svn server
    + create new user
    + delete subversion file

- creating a repository, use visual svn managemeent console to create new repository
    + setup repository hooks
    + before commit hook, pre-commit hook
    Property | Hook
    
    branch and tag are copy the code by only the differences
    
- installing Tortoise svn, SVN client, check the version which fit for svn
- initial checkout
    + pick a place
    + pick a svn repository
    + pick a trunk
    + pick a revision
- first commit
    + create a file
    + commit a directory, will list all the un-trac files
    + right click and add it to svn by the context menu
    + double click the list of svn before commit is make sure not break any thing before checkin
    
    
# basic commands
- add/delete
    + delete a physical file and check the file in the list
    + manual delete by svn content manual
- rename, add and delete in one
- blame, blame a developer about a changes, will list all the revision of the changes relative to a single file
    + right click a changed like could show changes
- update
- ignore
- revert
- properties, modify the properties for the file in a folder
    + check the property list of a repository by the content menua
    + add new property
    such as ignore list
    author
    or customer property name/value 
    property is a metadata for the folders or files
    
    
# branching
- what is branch
---------------------------------> 
trunk |                 V
      |                 merge
      +-------------------------->
       branch
      
branch may come back to trunk by merge, branch is a separation

merge a specific point of time of a branch into another code line

a separate of code line 

branch = copy(cheap copy), you can branch from any time of a code

example
Trunk/
    src/
    doc/
you could only branch the src folder or doc folder separately 

branch don't have to merge back

in svn, branch is a copy, is a cheap copy it only record the changes. it's not equal to a file copy

$ svn copy <src> <dest>, is the command line command of svn

reasons for branching
    + branch for a feature, it's a little overhead 
    + branch for a release, create a branch as soon as release, do bug fix for that branch 
    + branch for different version, this is not recommend but some people do this
    
- creating a branch
    + doing a branch at server level
    + select a folder and right click branch/tag
    + put the branch into the branches folder
    name the branch as /branches/new-branch-name
    + put the log message
    + also could specific revision of the repository
    + check the box switch working copy to new branch/tag, if not check will still works on the trunk
    actually svn use copy command to create branch
    
    + check which branch you are on by check the propert of window folder, there will be an additional subversion tab
    
- switching
    + after changes a file if want to switch to other branches, the changes will still be kept
    + svn switch and put the svn uri to switch
    + commit the changes
    
    + the switch is also could be done at a folder level, it is need a good reason to do it
- merging
    + made changes on branch and trunk
    + when you do a merge, you must check out the destination
    + do a svn merge by the context menu
        * merge a range of revisions
        * reintegrate a branch, merge a branch back into trunk
        merge and pick the branch uri
        
        could test the merge by hit the test button
        * merge two different trees, keep two code line and merge them into new one
        * after merge the code, do the necessary test
- conflicts, avoid branching and merging as possible as you can
    + before merge switch to the destination branch
    + during the merge, edit the conflict
    + click resolve button, svn will continue merge
    + you could also mark a file with content menu as resolve
- tagging
    + tag a trunk
    + choose branch/tag menu, you don't commit to a tag, svn treat branch and commit as same use copy command
    but in common scenario we don't' commit to a tag

# best practices
- using showlog, is a comes with svn, is a visual presentation of changes
    + use context menu choose showlog
- commit monitor, a tool allow you to monitor svn commit changes
    + commit monitor
    http://tools.tortoisesvn.net/CommitMonitor.html
    
    + install it you could monitor commit changes
    + add project, choose url, put user name and password, or 5 minutes
    + double click to see the difference
- branching strategies
    + branch per feature, a lot of overhead, merge back on each branch
    + branch per release, do all your work to release from that branch, then merge the release back to trunk
    suggest branch after you release
    + branch per developer, they commit their code from their branch, a higher level separation, not good for CI, someone on the team have to merge
    + branch per team
    + branch only when needed, avoid branch for all cost
    
                       +--rel1 hot fix--->
                       |                    +-->rel 1 hot fix 2---->
                       |                    |                  |
                  +------------------------------------------------->
                release 1                                      |
                  |                                            V
    --------trunk ------------------------------------------------->
                    |
                    +---------release 2---------------------------->
                    
    some of temp hot fix may not need to return back to the main trunk, get continue integration works smoothly 
- merge in, merge out
   +-----branch ----------->
   |              ^   |
   |              |   V
---------------------------> trunk

merge trunk into branch, fix the conflict and do the test, and then merge branch to trunk(no conflicts)
this strategy will avoid pressure to fix trouble on the trunk, this could make sure everything on the trunk is solid

- advanced merging, revert changes, complicated scenario
    + merge a range of revision, use showlog to choose the aim revisions
    + check the revision list
    + edit any conflicts
    
    + revert to specify revision
    merge from the same branch, specify the revision numbers and check the Reverser merge check box to undo these revision from the branch  
    
    
# svn hacking and subversion offcial document 
http://subversion.apache.org/docs/community-guide/
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
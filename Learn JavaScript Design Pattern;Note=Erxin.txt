Learn JavaScript Design Pattern;Note=Erxin


# The creational pattern 
- there are four ways in which keys and values can then be assigned to an object 
obj.key = 'value'
obj[key] = value 
Object.defineProperty(obj, "key", {value:"more control of the property's behavior",
                                   writable:true,
                                   enumerable: true,
                                   configurable: true});
                                   
var defineProp = function(obj, key, value){
    config.value = value;
    Object.defineProp(obj, key, config);
}                           

- when you call a javascript constructor to create an object all the properties of the contructor's prototype are then made available to the new object 

function Car(model, year, miles){
    this.model = model;
    this.year = year;
    this.miles = miles;
}

Car.prototype.toString = function(){
    return this.model + "has done " + this.miles + "miles";
};

- Singleton pattern 
var SingletonTester = (function(){
    function Singleton(options){
        options = options || {};
        
        this.name = 'SingletonTester';
        this.pointX = options.pointX || 6;
        this.pointY = options.pointY || 10;
    }
    
    var instance;
    var _static  = {
        name: "SingletonTester",
        getInstance: function(options){
            if (instance === undefined){
                isntance = new Singleton(options);
            }
            return instance;
        }
    };
    return _static;
})();

var singletonTest = SingletonTester.getInstance({pointX: 5});

- object literals notation, an object is described as a set of comma-separated name/value pairs enclosed in curly braces{}, Names inside the object may be either strings or identitifers that are followed by a colon

- disadvantage of module pattern which return a object from a closure is that if the private function refers to a public function, that public function can't be overridden 

even assign a new function to the variable of the object, the private function will still reference the previous defined function 

    + example code 
var obj = (function(){
  var hello = function(){
    writeln("hello");
  };
  var _private = function(name){
     hello(); 
     writeln(" to " + name);
  };

  return {
     sayHello:_private,
     hello:hello
  };
})();

obj.hello();
obj.sayHello("erxin");
obj.hello = function (){writeln("hi");};
obj.hello();
obj.sayHello("erxin");

//output 
hello
hello
 to erxin
hi
hello
 to erxin

- observer pattern, is a design pattern which allows an object(known as a subscriber) t watch another object 

disadvantages, dyamic relationship between subjects adn observers the update dependency can be difficult to track 

    + dojo, jquery, YUI already have utitilies to help implement the observer and subscriber pattern 
dojo.publish("channel", [arg1, arg2, ...]);
var handle = dojo.subscribe(channel, function(data){})
dojo.unsubscrible(handle);

$(obj).trigger("channel", [arg1, arg2, ...]);
$(obj).on("channel", function(event){...});
$(obj).off("channel");

//YUI 
element.publish("channel", [arg1, arg2, arg3]);
element.on("channel", function(data){...})
element.detach("channel");

    + other implemented libraries 
AmplifyJS, PubSubJS, OpenAjaxHub

Ben Alman's Pub/SUb gist
https://gist.github.com/661855(recommanded)

Rick Waldron's jQuery-core style take on the above 
https://gist.github.com/705311

Peter higgins' plugin 
http://github.com/phiggins42/bloody-jquery-plugins/blob/master/pubsub.js 

AppendTo's Pub/Sub in AmplifyJS 
http://amplifyjs.com 

Ben Truyman's gist 
https://gist.github.com/826794
- using dojo.setObject() allow us to set the value of children, creating any of the intermedia objects in the rest of the path passed if they don't already exist. it is convenience to create namespace 

- ExtJS, you're in for some luck as the official documentation incorporate module pattern with framework 

Ext.namespace("myNameSpace");

myNameSpace.app = function(){
    ...
}

- jQuery, a library function is defined which declares a new library and automatically binds up the init function to document.ready when new libraries are created 
function library(module){
    $(function(){
    
        if(module.init){
            module.init();
        }
    });
}

- implementation of the mediator pattern can be found below 
var mediator = (function(){
    var channels = {};
    
    var subscribe = function(channel, fn){
        if(!channels[channel])
        {
            channels[channel] = [];
        }
        
        channles[channle].push({
            context: this, 
            callback: fn
        });
        return this;
    }
    
    var publish = function(channel){
        if(!channels[channel])
        {
            return false;
        }
        
        var args = Array.prototype.slice.call(arguments, 1);
        
        for(var i = 0; l = channels[channel].length; i < l; i ++){
            var subscription = channels[channel][i];
            subscription.callback.apply(subscription.context, args);
        }
        return this;
    }
    
    return {
        publish: publish,
        subscribe: subscribe,
        installTo: function(obj){
            obj.subscribe = subscribe;
            obj.publish = publish;
        }
    };
})

//use the implementation from above to a Observer/Subscribe pattern 
(function(m){
    var person = "Luke";
    
    m.subscribe('nameChange', function(arg){
        console.log(person);
        person = arg;
        console.log(person);
    });
    
    m.publish('nameChange', 'David');
})(mediator);


    + biggest downside of mediator pattern, 
        * it can introduce a single point of failure 
        * modules are always communicate indirectly this may cause a performance hit 
        * not easy to maintain for beginner 
        
- mediator vs observer, observer pattern there is no signle object that encapsulates a constraint, instead the observer and the subject must cooperate to maintain the constraint 

the mediator centralizes message and just distributing. it places the responsibility for maintaining a constraint squarely in the mediator 

- medaitor vs facade, mediator centralizes communication between modules where it's explicitly referenced by these modules 

facade however just defines a simpler interface to a module or system but doesn't add any additionaly functionality. other module in the system aren't directly aware of the concept of a facade 

- prototype pattern, ecmascript 5 standard requires the use of Object.create which we've previously looked at briefly. Object.create creates an object which has a specified prototype and which optionally contains specified properties(i.e Object.create(prototype, optionalDescriptionObjects))

var car = Object.create(vehicle, {
    "id", {
        value: MY_GLOBAL.nextId(),
        enumerable: true
    },
    
    "model":{
        value: "ford",
        enumerable: true
    }
});

- command pattern, aims to encapsulate method invocation gives you ability to both aprameterize and pass method calls around that can be executed at your discretion. 

- facade pattern, provies a convenient higher-level interface to a large body of code hiding its true underlying complexity 

whenever you're using jQuery's $(element).css() or $(el).animate() youre actually using a facade 

- when to use the factory pattern, can be especially useful when applied to the following situation 
    + object setup require a high level complexity 
    + generate different instances depending on the environment 
    + working with many small objects that share the same properties 
    + composing classes with instances of other classes that need only satisfy an API contract to work 
    
- when not to use the factory pattern, the abstract factory is used to encapsulate a group of individual factories with a common group

an abstract factory should be used where a system must be independent from the way the objects it creates are generated or it needs to work with multiple types of objects 

don't add additional complexity to your code 

- the mixin pattern, are classes which provide the functionality to be inherited by a subclass inheriting from mixins are a means of collecting functionality and classes may inherit functionality from multiple mixins through multiple inheritance 

demo for javascript augement a constructor to have a particular method without using the typical inheritance methods or duplicate code 

var Car = function(settings){
    this.model = settings.model || "no model provided";
    this.color = settings.color || "no color provided";
};

var Mixin = function(){};

Mixin.prototype = {
    driveForward: function(){
    
    },
    
    driveBackward: function ()
    {
    }
};

function augment(receivingClass, givingClass){
    if(arguments[2]){
        for(var i = 2, len = arguments.length; i < len; i ++){
            receivingClass.prototype[arguments[i]] = givingClass.prototype[arguments[i]];
        }
    }
    else{
        for(var methodName in givingClass.prototype){
            if(!receivingClass.prototype[methodName]){
                receivingClass.prototype[methodName] = givingClass.prototype[methodName];
            }
        }
    }
}

augment(Car, Mixin, "driveForward", "driveBackward");

var vehicle = new Car({model: "Ford Escort", colour:"blue"});

vehicle.driveForward();

- the decorator pattern, a structural design pattern that promotes code reuse and is a flexible alternative 

it is used when it's necessary to delegate responsibility to an object where it doesn't make sense to subclass it. a common reason for this is that the number of features required demand for a very large quantity of subclasses

- flyweight are an approach to taking several similar objects and placing that shared information into a single external object or structure 

first is on the data-layer, where we deal with the concept of large quantity of similar objects stored in memory. the second is on the DOM layer where the flyweight can be used as a central event-manager to avoid attaching event handlers to every child element 

- define a very basic factory. going to check a book with a particular title has been previously created inside the system 

var BookFactory = (function(){
    var existingBooks = {};
    
    return {
        createBook: function(title, author, genre, pageCount, publisherID, ISBN){
            var existingBook = existingBooks[ISBN];
            if (existingBook){
                return existingBook;
            }
            else{
                var book = new Book(title, author, genre, pageCount, publisherID, ISBN)
                existingBooks[ISBN] = book;
                
                return book; 
            }
        }
    }
});

- MV* patterns, business data(models) from user interface (views) with a third component (controls) (tradditionally) managing logic 

smalltalk-80 MVC architecture 

    + domain element was known as a mdel and were ignorant of the user-interface 
    + presentation was taken care of by the view and the controller, but there wasn't just a single view and controller. a view-controller pair was required for each element being displayed on the screen and so there was no true separation between them 

    + the controller's role in this pair was handling user input(such as key-presses and click) doing something sensible with them 
    + observer pattern was relied upon for updating the view whenever the model changed 
    
group model together, such as a observable model collection 

- templating, javascript templating solution such as Handlebars.js and Mustache

Backbone is neither a truly MVC/MVP nor MVVM framework. it's infact better to consider it a member of the MV* family which approaches architecture in its own 

controllers are consider the glue for an application adding and responding to DOM events rendering tepmlates 

- delving deeper, when a model is changed it notified the rest of the application it has been updated 

- javascript MVVM implementation 
KnockoutJS
Kendo
MVVM 

ViewModel sits behind our UI layer. it exposes data needed by a view(from a model) and can be viewed as the source our views to for both data and actions 

ViewModel are synchronized and updated via two-way data-binding triggers(data-triggers) also allow us to further react to changes in the state of our model attributes 

- deep object extension, javascript framework jQuery $.extend, if youare looking to extend object(namespace) using vanillaJS 

function extend(destination, source){
    var toString = Object.prototype.toString, object Test = toString.call({});
    
    for(var property in source){
        if(source[property] && objTest == toString.call(source[property])){
            destination[property] = destination[property] || {};
            extend(destination[property]) = source[property];
        }
    }
    return destination;
};

var myNS = myNS || {};
extend(myNS, {
    utils:{
    }
});

- a sample implementation of nested namespacing may look like this 

var myApp = myApp || {};

myApp.routers = myApp.routers || {};
myApp.model = myApp.model || {};
myApp.model.special = myApp.model.special || {};

myApp.utitilies.charting.html5.plotGraph(...);

- populate the behaviour for two namespaces: one intially defined (utils) and another which we dynamically create as a part of the functionality assignement for utils 

- using the call API to provide a natrual separation between contexts and argument. this pattern can feel a lot more like a module creator 

- module pattern, allows us to encapsulate logic for a unit of code such that we can have both private and public methods and variable 

- lazy initialization, a design pattern with allows us to delay expensive process 

- the compose pattern describes a group of objects that can be treated in the same way a single instance of an object

such as the element selected by jQuery selector 

- the adapter pattern is a pattern which translates an interface a class into an interface compatible with a specific system 

- the facade pattern in jquery 
$.get 
$.post 
$.getJSON
$.getScript

- iterator pattern is a design pattern where iterators (objects that allow us to traverse through all the element of a collection) access the elements of an aggregate object sequentially without needing to expose its underlying form 

- strategy pattern, is a pattern where a script may select a particular algorithm at runtime. the purpose of this pattern is that it's able to provide a way to clearly define families of algorithms encapsulate each as a object and make them easily interchangeable 

- proxy pattern basically a class that functions as an interface to something else, a file a resource an object in memory something else that is difficult to duplicate etc. jquery's proxy() method takes as input a function and return a new one that will always have a particular context 

- builder pattern different implementation steps have the ability to construct different representations of objects 

- prototype pattern is used when objects are created based on template of an existing object through cloning 

Rick Waldron has an implementation you can use below 

function clone(obj){
    var val, length, i, temp = [];
    if (Array.isArray(obj)){
        for(i = 0, length = obj.length; i < length; i++){
            val = obj[i];
        
            if(typeof val === "object"){
                val = clone(val);
            }
            temp[i] = val;
        }
        return temp;
    }
    
    return (function(src){
        var props = {};
        Object.getOwnPropertyNames(src).forEach(function(name){
            var descriptor = Object.getOwnPropertyDescriptor(src, name);
            
            if(typeof src[name] === "object"){
                descriptor.value = clone(src[name]);
            }
            props[name] = descriptor;
        });
        return props;
    })(obj);
}

- three formats for writing modular JavaScript
AMD, asychronouse module definition format, both the module and dependencies can be asynchronously loaded.  
CommonJS
Harmony

    + Script loaders for CommonJS and AMD format 
RequireJS, curl.js 

- AMD, embraced by projects including dojo, MooTools, Firebug and jQuery 1.7. sometimes called CommonJS AMD 

define(
    module_id /*optional*/,
    [dependencies] /*optional*/, 
    definition_function /*function for instantiating the module or object */
)

module_id is an optional argument which is typically only required when non-AMD concatenation tools are being used 



















PE file introduction;Note=Erxin

# Peering inside the PE: a tour of the win32 portable executable file format 
- reference 
https://msdn.microsoft.com/en-us/library/ms809762.aspx?f=255&MSPPError=-2147217396

- PE file is exist from win 3.1
- Microsoft also introduced a new object module format produced by their compilers and assemblers. This new OBJ file format has many things in common with the PE executable format. 

- before window nt, The executable and object module format that these tools produced and worked with is called COFF (an acronym for Common Object File Format)

- Virtual device drivers written for 16-bit Windows were using a different 32-bit file layout—the LE format—long before Windows NT appeared on the scene. 

- Prior to the Windows NT C compiler, all Microsoft compilers used the Intel OMF (Object Module Format) specification

- The PE format is documented (in the loosest sense of the word) in the WINNT.H header file. About midway through WINNT.H is a section titled "Image Format." This section starts out with small tidbits from the old familiar MS-DOS MZ format and NE format headers before moving into the newer PE information.

To help make logical sense of the information in WINNT.H, read the Portable Executable and Common Object File Format Specification, on MSDN Library quarterly CD-ROM releases up to and including October 2001

- PE file dumpers, DUMPBIN is easily the most comprehensive. It even has a nifty option to disassemble the code sections in the file it's taking apart. 

The DUMPBIN tool is contained in window sdk 

Borland users can use TDUMP to view PE executable files, but TDUMP doesn't understand the COFF OBJ files. 

- one PEDUMP file contained in mono tool, The source code for PEDUMP is available on any MSJ bulletin board



## win32 and PE basic concepts, use term module to mean the code, data, and resource of an executable file or dll 
- Besides code and data that your program uses directly, a module is also composed of the supporting data structures used by Windows to determine where the code and data is located in memory

16-bit Windows, the supporting data structures are in the module database (the segment referred to by an HMODULE). In Win32, these data structures are in the PE header

CodeView debug information 
----------------------------
COFF Symbols 
----------------------------
COFF Line numbers 
----------------------------
...
----------------------------   ---
.reloc                          A
----------------------------    |
.idat-a                         |
----------------------------    |
.edata                          Sections 
----------------------------    |
.data                           |
----------------------------    |
.text                           V
----------------------------   ---
...
---------------------------- Section table(array of IMAGE_SECTION_HEADERS)
...
----------------------------
Data directory               IMAGE_NT_HEADERS-------------------+
---------------------------- IMAGE OPTIONAL_HEADER              |
IMAGE_FILE_HEADER                                               V
----------------------------
"PE\0\0"                     PE Signature 
----------------------------
"MZ"                         MS-DOS Header 
---------------------------- Offset 0 

- The first important thing to know about PE files is that the executable file on disk is very similar to what the module will look like after Windows has loaded it. The Windows loader doesn't need to work extremely hard to create a process from the disk file. 

The loader uses the memory-mapped file mechanism to map the appropriate pieces of the file into the virtual address space.

The 16-bit NE file loader reads in portions of the file and creates completely different data structures to represent the module in memory. 

- Relative Virtual Address (RVA). Many fields in PE files are specified in terms of RVAs. An RVA is simply the offset of some item, relative to where the file is memory-mapped.

(Virtual address 0x10464)-(base address 0x10000) = RVA 0x00464

To convert an RVA into a usable pointer, simply add the RVA to the base address of the module.

The base address is the starting address of a memory-mapped EXE or DLL and is an important concept in Win32. For the sake of convenience, Windows NT and Windows 95 uses the base address of a module as the module's instance handle (HINSTANCE). 

for Win32 is that you can call GetModuleHandle for any DLL that your process uses to get a pointer for accessing the module's components.

- A section in a PE file is roughly equivalent to a segment or the resources in an NE file. Sections contain either code or data. Unlike segments, sections are blocks of contiguous memory with no size constraints. 


## the PE header 
- The first few hundred bytes of the typical PE file are taken up by the MS-DOS stub. This stub is a tiny program that prints out something to the effect of "This program cannot be run in MS-DOS mode." So if you run a Win32-based program in an environment that doesn't support Win32, you'll get this informative error message.

With every Win32-based program you start up, you get an MS-DOS-based program loaded for free!

The WINNT.H file includes a structure definition for the MS-DOS stub header that makes it very easy to look up where the PE header starts.

The e_lfanew field is a relative offset (or RVA, if you prefer) to the actual PE header. To get a pointer to the PE header in memory, just add that field's value to the image base:

// Ignoring typecasts and pointer conversion issues for clarity...
pNTHeader = dosHeader + dosHeader->e_lfanew;


The main PE header is a structure of type IMAGE_NT_HEADERS, which is defined in WINNT.H. This structure is composed of a DWORD and two substructures and is laid out as follows:
DWORD Signature;
IMAGE_FILE_HEADER FileHeader;
IMAGE_OPTIONAL_HEADER OptionalHeader;

The Signature field viewed as ASCII text is "PE\0\0". 

- IMAGE_FILE_HEADER Fields
WORD Machine
0x14d	Intel i860
0x14c	Intel I386 (same ID used for 486 and 586)
0x162	MIPS R3000
0x166	MIPS R4000
0x183	DEC Alpha AXP

WORD NumberOfSections 
DWORD TimeDateStamp
DWORD PointerToSymbolTable, this field is only used in OBJ files, it represent the linker produced time for this file 
DWORD NumberOfSymbols, the number of symbols in the COFF symbol table 
WORD SizeOfOptionalHeader, the size of an optional header that can follow this structure 
WORD Characteristics
0x0001 There are no relocations in this file
0x0002 File is an executable image (not a OBJ or LIB)
0x2000 File is a dynamic-link library, not a program
... other values are defined in WINNT.H 

- The third component of the PE header is a structure of type IMAGE_OPTIONAL_HEADER. For PE files, this portion certainly isn't optional. The COFF format allows individual implementations to define a structure of additional information beyond the standard IMAGE_FILE_HEADER. The fields in the IMAGE_OPTIONAL_HEADER are what the PE designers felt was critical information beyond the basic information in the IMAGE_FILE_HEADER.

WORD Magic,
 signature WORD of some sort, always appears to be set to 0x010B
 
BYTE MajorLinkerVersion
 the numbers are decimal values 
 
BYTE MinorLinkerVersion

DWORD SizeOfCode,
one code section, match the .text section. usually most files only have one code section 
 
DWORD SizeOfInitializedData,  
total size of all the sections that are composed of initialized data (not including code segments.) It doesn't seem to be consistent with what appears in the file 
 
DWORD SizeOfUninitializedData,
Uninitialized data usually goes into a section called .bss. the loader commits space for the virtual address space, but doesn't take up any space in the disk file 
 
DWORD AddressOfEntryPoint
the address where the loader will begin execution. This is an RVA, and usually can usually be found in the .text section.
  
DWORD BaseOfCode
The RVA where the file's code sections begin. The code sections typically come before the data sections and after the PE header in memory. 
  
DWORD BaseOfData, 

DWORD ImageBase, 
When the linker creates an executable, it assumes that the file will be memory-mapped to a specific location in memory. That address is stored in this field. In executables produced for Windows NT, the default image base is 0x10000. For DLLs, the default is 0x400000.In Windows 95, the address 0x10000 can't be used to load 32-bit EXEs because it lies within a linear address region shared by all processes. Because of this, Microsoft has changed the default base address for Win32 executables to 0x400000. 
 
DWORD SectionAlignment
When mapped into memory, each section is guaranteed to start at a virtual address that's a multiple of this value. the default section alignment is 0x1000.
  
DWORD FileAlignment
  In the PE file, the raw data that comprises each section is guaranteed to start at a multiple of this value. The default value is 0x200 bytes, probably to ensure that sections always start at the beginning of a disk sector (which are also 0x200 bytes in length)
  
WORD MajorOperatingSystemVersion
WORD MinorOperatingSystemVersion
 The minimum version of the operating system required to use this executable. 

WORD MajorImageVersion
WORD MinorImageVersion
 A user-definable field. This allows you to have different versions of an EXE or DLL. You set these fields via the linker /VERSION switch

WORD MajorSubsystemVersion
WORD MinorSubsystemVersion
 Contains the minimum subsystem version required to run the executable. A typical value for this field is 3.10 (meaning Windows NT 3.1).

DWORD Reserved1
 Seems to always be 0.

DWORD SizeOfImage
This appears to be the total size of the portions of the image that the loader has to worry about. It is the size of the region starting at the image base up to the end of the last section.

DWORD SizeOfHeaders
The size of the PE header and the section (object) table. The raw data for the sections starts immediately after all the header components.

DWORD CheckSum
Supposedly a CRC checksum of the file. For trusted services must have a valid checksum 

WORD Subsystem
The type of subsystem that this executable uses for its user interface. WINNT.H defines the following values
NATIVE      1
WINDOWS_GUI 2
WINDOWS_CUI 3   run in windows character subsystem 
OS2_CUI     5   run in the OS/2 character subsystem 
POSIX_CUI   7   run in the Posix character subsystem

WORD DllCharacteristics
A set of flags indicating under which circumstances a DLL's initialization function (such as DllMain) will be called. 
Call when DLL is first loaded into a process's address space, 1
Call when a thread terminates, 2 
Call when a thread starts up, 4 
Call when DLL exits, 8

DWORD SizeOfStackReserve
The amount of virtual memory to reserve for the initial thread's stack.Default is 1MB, if you set this value to 0 which means default 

DWORD SizeOfStackCommit
The amount of memory initially committed for the initial thread's stack. This field defaults to 0x1000 bytes (1 page). TLINK32 makes it two pages 

DWORD SizeOfHeapReserve

DWORD SizeOfHeapCommit, process heap, default is one page 

DWORD LoaderFlags
From WINNT.H, these appear to be fields related to debugging support. Normally an executable will not enable these bits 
inovke a breakpoint instruction before starting the process 
inovke a debugger on the process that's been loaded 

DWORD NumberOfRvaAndSizes
The number of entries in the DataDirectory array. The value always set to 16 by the current tools. An array of IMAGE_DATA_DIRECTORY structures. 
IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]
Some elements at the end of the array are currently unused. The first element of the array is always the address and size of the exported function table (if present). The second array entry is the address and size of the imported function table, and so on. For a complete list of defined array entries, see the IMAGE_DIRECTORY_ENTRY_XXX #defines in WINNT.H. 


# The Section Table 
- The section table is essentially a phone book containing information about each section in the image. The sections in the image are sorted by their starting address (RVAs), rather than alphabetically.

In an NE file, your program's code and data are stored in distinct "segments" in the file. Part of the NE header is an array of structures, one for each segment your program uses. Each structure in the array contains information about one segment. The information stored includes the segment's type (code or data), its size, and its location elsewhere in the file. 

In a PE file, the section table is analogous to the segment table in the NE file. Unlike an NE file segment table, though, a PE section table doesn't store a selector value for each code or data chunk. Instead, each section table entry stores an address where the file's raw data has been mapped into memory. Sections are memory ranges in a process's virtual address space.

PE files differ from NE files is how they manage the supporting data that your program doesn't use, but the operating system does; for example, the list of DLLs that the executable uses or the location of the fixup table. In an NE file, resources, export, import aren't considered segments. The story with PE files is different. Anything that might be considered vital code or data is stored in a full-fledged section. 

Immediately following the PE header in memory is an array of IMAGE_SECTION_HEADERs. The number of elements in this array is given in the PE header (the IMAGE_NT_HEADER.FileHeader.NumberOfSections field). I used PEDUMP to output the section table and all of the section's fields and attributes.

- IMAGE_SECTION_HEADER Formats

BYTE Name[IMAGE_SIZEOF_SHORT_NAME]
This is an 8-byte ANSI name (not UNICODE) that names the section. Most section names start with a . (such as ".text"), but this is not a requirement, as some PE documentation would have you believe. You can name your own sections with either the segment directive in assembly language, or with "#pragma data_seg" and "#pragma code_seg" in the Microsoft C/C++ compiler.
If you're a printf devotee, you can use %.8s to avoid copying the name string to another buffer where you can NULL-terminate it.

union {
DWORD PhysicalAddress
DWORD VirtualSize
} Misc;
This field has different meanings, in EXEs or OBJs. In an EXE, it holds the actual size of the code or data. This is the size before rounding up to the nearest file alignment multiple. For OBJ files, this field indicates the physical address of the section. 

DWORD VirtualAddress
In EXEs, this field holds the RVA to where the loader should map the section. With Microsoft tools, the first section defaults to an RVA of 0x1000. In OBJs, this field is meaningless and is set to 0.

DWORD SizeOfRawData
In EXEs, this field contains the size of the section after it's been rounded up to the file alignment size. In OBJs, this field contains the exact size of the section emitted by the compiler or assembler. I

DWORD PointerToRawData
This is the file-based offset of where the raw data emitted by the compiler or assembler can be found. If your program memory maps a PE or COFF file itself (rather than letting the operating system load it), this field is more important than the VirtualAddress field. You'll have a completely linear file mapping in this situation, so you'll find the data for the sections at this offset, rather than at the RVA specified in the VirtualAddress field

DWORD PointerToRelocations
In OBJs, this is the file-based offset to the relocation information for this section.  In EXEs, this field (and the subsequent field) are meaningless, and set to 0.

DWORD PointerToLinenumbers
This is the file-based offset of the line number table. A line number table correlates source file line numbers to the addresses of the code generated for a given line. In EXE files, the line numbers are collected towards the end of the file, after the raw data for the sections. In OBJ files, the line number table for a section comes after the raw section data and the relocation table for that section.

WORD NumberOfRelocations
The number of relocations in the relocation table for this section (the PointerToRelocations field from above). This field seems relevant only for OBJ files.

WORD NumberOfLinenumbers
The number of line numbers in the line number table for this section 

DWORD Characteristics
What most programmers call flags, the COFF/PE format calls characteristics. This field is a set of flags that indicate the section's attributes. DWORD Characteristics
What most programmers call flags, the COFF/PE format calls characteristics. This field is a set of flags that indicate the section's attributes. Some of the common important flags are:
0x00000020 This section contains code. Usually set in conjunction with the executable flag (0x80000000).
0x00000040 This section contains initialized data. Almost all sections except executable and the .bss section have this flag set.
0x00000080 This section contains uninitialized data (for example, the .bss section).
0x00000200 This section contains comments or some other type of information. A typical use of this section is the .drectve section emitted by the compiler, which contains commands for the linker.
0x00000800 This section's contents shouldn't be put in the final EXE file. These sections are used by the compiler/assembler to pass information to the linker.
0x02000000 This section can be discarded, since it's not needed by the process once it's been loaded. The most common discardable section is the base relocations (.reloc).
0x10000000 This section is shareable. When used with a DLL, the data in this section will be shared among all processes using the DLL. 
The default is for data sections to be nonshared, meaning that each process using a DLL gets its own copy of this section's data. In more technical terms, a shared section tells the memory manager to set the page mappings for this section such that all processes using the DLL refer to the same physical page in memory. T
0x20000000 This section is executable. This flag is usually set whenever the "contains code" flag (0x00000020) is set.
0x40000000 This section is readable. This flag is almost always set for sections in EXE files.
0x80000000 The section is writeable. If this flag isn't set in an EXE's section, the loader should mark the memory mapped pages as read-only or execute-only. 

The PE format dispenses with all that, and guarantees that a section's data will be stored contiguously within the file. the locations of items are stored as simple DWORD offsets. All in all, PE format is much easier to work with than the NE, LX, or LE formats 


# Common sections 
- common sections in EXE and OBJ files 
- Code sections 
.text section is where all general-purpose code. the linker concatenates all the .text sections from the various OBJs into one big .text section in the EXE. If you use Borland C++ the compiler emits its code to a segment named CODE. PE files produced with Borland C++ have a section named CODE rather than one called .text. I'll explain this in a minute.

There was additional code in the .text section beyond what I created with the compiler or used from the run-time libraries. In a PE file, when you call a function in another module (for example, GetMessage in USER32.DLL), the CALL instruction emitted by the compiler doesn't transfer control directly to the function in the DLL. Instead the call instruction transfers control to a 

JMP DWORD PTR [XXXXXXXX]

The JMP instruction indirects through a DWORD variable in the .idata section. This .idata section DWORD contains the real address of the operating system function entry point.  the loader doesn't need to patch every instruction that calls a DLL. All the PE loader has to do is put the correct address of the target function into the DWORD in the .idata section. The downside to the PE method is that you can't initialize a variable with the true address of a DLL function.

FARPROC pfnGetMessage = GetMessage;

would put the address of GetMessage into the variable pfnGetMessage. In 16-bit Windows, this works, while in Win32 it doesn't. In Win32, the variable pfnGetMessage will end up holding the address of the JMP DWORD PTR [XXXXXXXX] 

a JMP DWORD PTR [XXXXXXXX] thunk. Under the Microsoft system, this thunk comes to the EXE from the .text section of an import library. Because the library manager (LIB32) creates the import library (and the thunk) when you link the external DLL, the linker doesn't have to "know" how to generate these thunks itself. The import library is really just some more code and data to link into the PE file.

The Borland system of dealing with imported functions is simply an extension of the way things were done for 16-bit NE files. The import libraries that the Borland linker uses are really just a list of function names along with the name of the DLL they're in. TLINK32 is therefore responsible for determining which fixups are to external DLLs, and generating an appropriate JMP DWORD PTR [XXXXXXXX] thunk for it. TLINK32 stores the thunks that it creates in a section named .icode.

- Data section 
.data section is where your initialized data goes. This data consists of global and static variables that are initialized at compile time. It also includes string literals. The linker combines all the .data sections from the OBJ and LIB files into one .data section in the EXE. Local variables are located on a thread's stack, and take no room in the .data or .bss sections.

The .bss section is where any uninitialized static and global variables are stored. The linker combines all the .bss sections in the OBJ and LIB files into one .bss section in the EXE. 
In the section table, the RawDataOffset field for the .bss section is set to 0, indicating that this section doesn't take up any space in the file.
TLINK doesn't emit this section. Instead it extends the virtual size of the DATA section.

.CRT is another initialized data section utilized by the Microsoft C/C++ run-time libraries (hence the name). Why this data couldn't go into the standard .data section is beyond me.

The .rsrc section contains all the resources for the module.

The .idata section contains information about functions (and data) that the module imports from other DLLs. This section is equivalent to an NE file's module reference table. A key difference is that each function that a PE file imports is specifically listed in this section.

The .edata section is a list of the functions and data that the PE file exports for other modules. Its NE file equivalent is the combination of the entry table, the resident names table, and the nonresident names table. there's seldom a reason to export anything from an EXE file, so you usually only see .edata sections in DLLs.
Microsoft tools, the data in the .edata section comes to the PE file via the EXP file. it relies on the library manager (LIB32) to scan the OBJ files and create the EXP file that the linker adds to its list of modules to link. EXP file is just a different file extension compare to OBJ. The format is same

- relocate section 
The .reloc section holds a table of base relocations. A base relocation is an adjustment to an instruction or initialized variable value that's needed if the loader couldn't load the file where the linker assumed it would.

If the loader is able to load the image at the linker's preferred base address, the loader completely ignores the relocation information in this section. 

If you want to take a chance and hope that the loader can always load the image at the assumed base address, you can tell the linker to strip this information with the /FIXED option. While this may save space in the executable file, it may cause the executable not to work on other Win32-based implementations. For example built an EXE for Windows NT and based the EXE at 0x10000 but the address is in used in win95

the JMP and CALL instructions that the compiler generates use offsets relative to the instruction, rather than actual offsets in the 32-bit flat segment. If the image needs to be loaded somewhere other than where the linker assumed for a base address, these instructions don't need to change, since they use relative addressing.

- thread local storage 
When you use the compiler directive _ _declspec(thread), the data that you define doesn't go into either the .data or .bss sections. It ends up in the .tls section, which refers to "thread local storage,"

related to the TlsAlloc family of Win32 functions. When dealing with a .tls section, the memory manager sets up the page tables so that whenever a process switches threads, a new set of physical memory pages is mapped to the .tls section's address space. This permits per-thread global variables.

In most cases, it is much easier to use this mechanism than to allocate memory on a per-thread basis and store its pointer in a TlsAlloc'ed slot.

_ _declspec(thread) variables. In Windows NT and Windows 95, this thread local storage mechanism won't work in a DLL if the DLL is loaded dynamically by LoadLibrary.

In an EXE or an implicitly loaded DLL, everything works fine. If you can't implicitly link to the DLL, but need per-thread data, you'll have to fall back to using TlsAlloc and TlsGetValue with dynamically allocated memory.


- .rdata 
Although the .rdata section usually falls between the .data and .bss sections, your program generally doesn't see or use the data in this section. The .rdata section is used for at least two things. First, in Microsoft linker-produced EXEs, the .rdata section holds the debug directory, which is only present in EXE files.

TLINK32 EXEs, the debug directory is in a section named .debug

The debug directory is an array of IMAGE_DEBUG_DIRECTORY structures. . Three main types of debug information appear: CodeView®, COFF, and FPO.

To find the start of the debug directory table, use the RVA in the seventh entry (IMAGE_DIRECTORY_ENTRY_DEBUG) of the data directory.

If you specified a DESCRIPTION entry in your program's DEF file, the specified description string appears in the .rdata section. 

- These .debug$S and .debug$T sections only appear in OBJs. They store the CodeView symbol and type information. 

- The .drective section only appears in OBJ files. It contains text representations of commands for the linker

- When you use _ _declspec(export) in your code, the compiler simply emits the command-line equivalent into the .drectve section (for instance, "-export:MyFunction").

- don't feel constrained to use only the standard sections provided by the compiler or assembler. If you need a separate section for some reason, don't hesitate to create your own. In the C/C++ compiler, use the #pragma code_seg and #pragma data_seg. In assembly language, just create a 32-bit segment

The other thing to remember is that section names that are out of the ordinary can often give a deeper insight into the purpose and implementation of a particular PE file.

- PE file imports 
The other thing to remember is that section names that are out of the ordinary can often give a deeper insight into the purpose and implementation of a particular PE file in .idata section or .icode(borland c++)

The .idata section (or import table, as I prefer to call it) begins with an array of IMAGE_IMPORT_DESCRIPTORs. There is one IMAGE_IMPORT_DESCRIPTOR for each DLL that the PE file implicitly links to. 

here's no field indicating the number of structures in this array. Instead, the last element of the array is indicated by an IMAGE_IMPORT_DESCRIPTOR that has fields filled with NULLs

    + IMAGE_IMPORT_DESCRIPTOR Format
DWORD Characteristics
This field is really an offset (an RVA) to an array of pointers. Each of these pointers points to an IMAGE_IMPORT_BY_NAME structure.

DWORD TimeDateStamp

DWORD ForwarderChain
This field relates to forwarding. Forwarding involves one DLL sending on references to one of its functions to another DLL. in Windows NT, NTDLL.DLL appears to forward some of its exported functions to KERNEL32.DLL. An application may think it's calling a function in NTDLL.DLL, but it actually ends up calling into KERNEL32.DLL. 

DWORD Name
This is an RVA to a NULL-terminated ASCII string containing the imported DLL's name. such as "KERNEL32.DLL"
    
PIMAGE_THUNK_DATA FirstThunk
This field is an offset (an RVA) to an IMAGE_THUNK_DATA union. In almost every case, the union is interpreted as a pointer to an IMAGE_IMPORT_BY_NAME structure. If the field isn't one of these pointers, then it's supposedly treated as an export ordinal value for the DLL that's being imported

The important parts of an IMAGE_IMPORT_DESCRIPTOR are the imported DLL name and the two arrays of IMAGE_IMPORT_BY_NAME pointers. In the EXE file, the two arrays (pointed to by the Characteristics and FirstThunk fields) run parallel to each other, and are terminated by a NULL pointer entry at the end of each array. The pointers in both arrays point to an IMAGE_IMPORT_BY_NAME structure. 

    + graph demo 
    
IMAGE-IMPORT-DESCRIPTOR                                             Import Address table
Characteristics(hint name) ------------> HintName Array ---> 44 <-------------+
TimeDateStamp                                            GetMessage           |
ForwarderChain                                               72               |
Imported DLL Name  --->"USER32.DLL"                     LoadIcon              |
FirstThunk ------------------------+                          19              |
Additional IMAGE_IMPORT_DESCRIPTOR |                   TranslateMessage       |
                                   |                         95               |
                                   |                      ISWindows           |
                                   +------------------------------------------+
                                   
    
Why are there two parallel arrays of pointers to the IMAGE_IMPORT_BY_NAME structures? The first array (the one pointed at by the Characteristics field) is left alone, and never modified. It's sometimes called the hint-name table. The second array (pointed at by the FirstThunk field) is overwritten by the PE loader. The loader iterates through each pointer in the array and finds the address of the function that each IMAGE_IMPORT_BY_NAME structure refers to. The loader then overwrites the pointer to IMAGE_IMPORT_BY_NAME with the found function's address. The [XXXXXXXX] portion of the JMP DWORD PTR [XXXXXXXX] thunk refers to one of the entries in the FirstThunk array. Since the array of pointers that's overwritten by the loader eventually holds the addresses of all the imported functions, it's called the Import Address Table.    
                                 
    + example imports table for an EXE file 
GDI32.dll
  Hint/Name Table: 00013064
  TimeDateStamp:   2C51B75B
  ForwarderChain:  FFFFFFFF
  First thunk RVA: 00013214
  Ordn  Name
    48  CreatePen
    57  CreateSolidBrush
    62  DeleteObject
   160  GetDeviceCaps
    //  Rest of table omitted...

  KERNEL32.dll
  Hint/Name Table: 0001309C
  TimeDateStamp:   2C4865A0
  ForwarderChain:  00000014
  First thunk RVA: 0001324C
  Ordn  Name
    83  ExitProcess
   137  GetCommandLineA
   179  GetEnvironmentStrings
   202  GetModuleHandleA
    //  Rest of table omitted...

An IMAGE_IMPORT_BY_NAME structure is very simple, and looks like this:
    
WORD    Hint;
BYTE    Name[?];    
    
The first field what the export ordinal for the imported function is. Unlike with NE files, this value doesn't have to be correct. Instead, the loader uses it as a suggested starting value for its binary search for the exported function    
    
Besides providing the code portion of an imported function thunk, the import library provides the pieces of the PE file's .idata section (or import table). linker doesn't really know the differences between imported functions and functions that appear in a different OBJ file. The linker just follows its preset rules for building and combining sections

- PE files exports 
A PE file stores information about its exported functions in the .edata section. Generally, Microsoft linker-generated PE EXE files don't export anything, so they don't have an .edata section. Borland's TLINK32 always exports at least one symbol from an EXE. Most DLLs do export functions and have an .edata section. The primary components of an .edata section (aka the export table) are tables of function names, entry point addresses, and export ordinal values.

    + At the start of an .edata section is an IMAGE_EXPORT_DIRECTORY structure
DWORD Characteristics
This field appears to be unused and is always set to 0.

DWORD TimeDateStamp

WORD MajorVersion

WORD MinorVersion

DWORD Name
The RVA of an ASCIIZ string with the name of this DLL.

DWORD Base
The starting ordinal number for exported functions. For example, if the file exports functions with ordinal values of 10, 11, and 12, this field contains 10. To obtain the exported ordinal for a function, you need to add this value to the appropriate element of the AddressOfNameOrdinals array.

DWORD NumberOfFunctions
The number of elements in the AddressOfFunctions array.

DWORD NumberOfNames
The number of elements in the AddressOfNames array. This value seems always to be identical to the NumberOfFunctions field, and so is the number of exported functions.

PDWORD *AddressOfFunctions
This field is an RVA and points to an array of function addresses. The function addresses are the entry points (RVAs) for each exported function in this module.

PDWORD *AddressOfNames
This field is an RVA and points to an array of string pointers. The strings are the names of the exported functions in this module.

PWORD *AddressOfNameOrdinals
This field is an RVA and points to an array of WORDs. The WORDs are the export ordinals of all the exported functions in this module. don't forget to add in the starting ordinal number specified in the Base field.

each component of an exported entry is an element in an array. There are three of these arrays (AddressOfFunctions, AddressOfNames, AddressOfNameOrdinals), and they are all parallel to one another

Name:            KERNEL32.dll
  Characteristics: 00000000
  TimeDateStamp:   2C4857D3
  Version:         0.00
  Ordinal base:    00000001
  # of functions:  0000021F
  # of Names:      0000021F

  Entry Pt  Ordn  Name
  00005090     1  AddAtomA
  00005100     2  AddAtomW
  00025540     3  AddConsoleAliasA
  00025500     4  AddConsoleAliasW
  00026AC0     5  AllocConsole
  00001000     6  BackupRead
  00001E90     7  BackupSeek
  00002100     8  BackupWrite
  0002520C     9  BaseAttachCompleteThunk
  00024C50    10  BasepDebugDump
  // Rest of table omitted...
  
many cases there are two functions that only differ by one character at the end of the name, for instance CreateWindowExA and CreateWindowExW. Instead, the appropriate function is selected in WINDOWS.H, via preprocessor #ifdefs. This excerpt from the Windows NT WINDOWS.H shows an example of how this works:  

| #ifdef UNICODE
| #define DefWindowProc  DefWindowProcW
| #else
| #define DefWindowProc  DefWindowProcA
| #endif // !UNICODE


# PE file resources 
- Finding resources in a PE file is quite a bit more complicated than in an NE file. 

Navigating the resource directory hierarchy is like navigating a hard disk. There's a master directory (the root directory), which has subdirectories. The structures of type IMAGE_RESOURCE_DIRECTORY

    + IMAGE_RESOURCE_DIRECTORY Format
DWORD Characteristics
Theoretically this field could hold flags for the resource, but appears to always be 0.

DWORD TimeDateStamp    

WORD MajorVersion

WORD MinorVersion

WORD NumberOfNamedEntries
The number of array elements that use names and that follow this structure.

WORD NumberOfIdEntries
The number of array elements that use integer IDs, and which follow this structure.

IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[]
This field isn't really part of the IMAGE_RESOURCE_DIRECTORY structure. Rather, it's an array of IMAGE_RESOURCE_DIRECTORY_ENTRY structures that immediately follow the IMAGE_RESOURCE_DIRECTORY structure. 

A directory entry can either point at a subdirectory (that is, to another IMAGE_RESOURCE_DIRECTORY), or it can point to the raw data for a resource. Generally, there are at least three directory levels before you get to the actual raw resource data. 

    + IMAGE_RESOURCE_DIRECTORY_ENTRY Format
DWORD Name
This field contains either an integer ID or a pointer to a structure that contains a string name. If the high bit (0x80000000) is zero, this field is interpreted as an integer ID. 
If the high bit is nonzero, the lower 31 bits are an offset (relative to the start of the resources) to an IMAGE_RESOURCE_DIR_STRING_U structure. contains a WORD character count, followed by a UNICODE string with the resource name 

DWORD OffsetToData
This field is either an offset to another resource directory or a pointer to information about a specific resource instance.


# PE File base relocations 
- linker makes an assumption about where the file will be mapped into memory. Based on this, the linker puts the real addresses of code and data items into the executable file. 

- if the loader was able to load the file at the base address assumed by the linker, the .reloc section data isn't needed and is ignored. The information stored in the .reloc section allows the PE loader to fix these addresses in the loaded image so that they're correct again. 

- The base relocation entries are packaged in a series of variable length chunks. Each chunk describes the relocations for one 4KB page in the image. 

- Each chunk of base relocation data begins with an IMAGE_BASE_RELOCATION structure

- IMAGE_BASE_RELOCATION Format
DWORD VirtualAddress
This field contains the starting RVA for this chunk of relocations. 

DWORD SizeOfBlock
The size of this structure plus all the WORD relocations that follow. To determine the number of relocations in this block, subtract the size of an IMAGE_BASE_RELOCATION (8 bytes) from the value of this field, and then divide by 2 (the size of a WORD). 
(44 - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD) = 18 WORD TypeOffset

0 IMAGE_REL_BASED_ABSOLUTE This relocation is meaningless and is only used as a place holder to round relocation blocks up to a DWORD multiple size.
3 IMAGE_REL_BASED_HIGHLOW This relocation means add both the high and low 16 bits of the delta to the DWORD specified by the calculated RVA


# Differences Between PE and COFF OBJ Files
- Two portions of the PE file that are not used by the operating system. These are the COFF symbol table and the COFF debug information. 

creating an EXE file from a single OBJ should be just a matter of inserting a few tables and modifying a couple of file offsets within the image. You can think of a COFF file as an embryonic PE file. Only a few things are missing or different

    + COFF OBJ files don't have an MS-DOS stub preceding the IMAGE_FILE_HEADER, nor is there a "PE" signature preceding the IMAGE_FILE_HEADER.
    
    + OBJ files don't have the IMAGE_OPTIONAL_HEADER. In a PE file, this structure immediately follows the IMAGE_FILE_HEADER. COFF LIB files do have an IMAGE_OPTIONAL_HEADER.
    
    + OBJ files don't have base relocations. Instead, they have regular symbol-based fixups. I haven't gone into the format of the COFF OBJ file relocations because they're fairly obscure. 
    
    + The CodeView information in an OBJ file is stored in two sections (.debug$S and .debug$T). When the linker processes the OBJ files, it doesn't put these sections in the PE file.
    
- Using PEDUMP

- NE file format, Win16 New Executable format. 
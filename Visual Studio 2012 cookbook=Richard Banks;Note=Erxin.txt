Visual Studio 2012 cookbook=Richard Banks;Note=Erxin

# forward
- the blog of the author
http://www.richard-banks.org/

# book structure
- title and abstraction
- credits
    + author
    + reviewers
    + project coordinator
    + proofreader
    + indexer
    + production coordinator
    + acquisition editor
    + lead technical editor
    + technical editor
    + cover work
- foreword
- about the author
- about the reviewer
- publisher and resources
http://PacktLib.PacktPub.com
- table of content
- preface
    + what this book covers
    + what you need for this book, such as development environment
    + who this book for
- conventions
    + command-line input or output
    + warning
    + tip
    + note
- reader feadback
feedback@packtpub.com

- customer support
    + downloading example code
    + errate
    + piracy
    + questions

# discovering visual studio 2012
- project types
    + 2012 only have office 2010 template
    + asp.net mvc 3 updater
     http://aspnet.codeplex.com/releases/view/59008

- customize tab look in the option window
- shortcut for search solution explore, ctrl+;
- shift + f3 to move to previous match
- visual studio support directly edit 3d model
- pixel shaders
DGSL (Directed Graph Shader Language)
HLSL shadersusing C++


# getting starts with windows store application
- window 8 users with skyDrive storage space that window store apps can use
- choosing the right development technology
    + javascript html5
    + c++
    + xaml, .net
    + directX apps
- create new project
    + javascript window store app
        * grid app
        * split app
    + project type
        * class library
        * unit test library
        * dll, window store apps
        * static library, window store apps
        * windows runtime component
        * direct2d app(xaml and direct3d app
        
                    JavaScript/HTML .NET C++
Blank App           Y Y Y
Grid App            Y Y Y
Split App           Y Y Y
Fixed Layout App    Y
Navigation App      Y
Class Library       Y
Unit Test Library   Y Y
Windows Runtime 
    Component         Y Y
DLL                     Y
Static Library          Y
Direct 2D/3D App        Y

- there is a window 8 simulator for the project debug option
- remote debugging
- define app capability by the package.appxmanifest
- valide window store app Windows App Cert Kit.
    

# web development asp.net, html 5, css and javascript
- asp.net application support region in css
/* #region name */
/* #end region */

- networktable and click start capturing will get the network trace 


# .net framework 4.5 development
- adding the ribbon to a wpf application
<Ribbon>
    <Ribbon.QuickAccessToolBar>
     ...
    </Ribbon.QuickAccessToolBar>
</Ribbon>

# unit test
- test explore support analyze code coverage
- find in files, find matching clones in solution will find duplicate codes

# debugging your .net application
- start action to start external program
- start options check the user remote machine enter the name of the remote machine 
- debugging you .net application
    + create two folder on production server, c:\intellitrace and c:\intellitracelogs
    + download the intelliTrace collector for visual studio from 
    http://go.microsoft.com/fwlink/?LinkId=245688.
    select the pre created intellitrace folder
    + extract the contents of the IntelliTraceCollection.cab file by opening command promot, changing directory to the c:\intelliTrace folder
    expand IntelliTraceCollection.cab -F:*.* .
    + import the intelliTrace PowerShell module, open an elevated opwerShell promot change the directory to c:\intelliTrace and then enter the following command
    import-Module .\microsoft.visualstudio.intellitrace.powershell.dll
    + to verify the module was imported corretly
    get-command *intelli*
    + make sure the webserver can write to the log location, start iis manager and select basic settings for the web application, make a note of the name of the application pool being used
    + navigate to the application pools node in iis manager and make a note of the identity(that is, the account name)
    + grant the account used by the application pool full access to the c:\intellitracelogs location
    + start collect trace log in the powershell
    Start-IntelliTraceCollection "DefaultAppPool" c:\IntelliTrace\collection_plan.ASP.NET.trace.xml c:\IntelliTraceLogs
    + from your browser do some operation on the web application
    + stop the collection by 
    Stop-IntelliTraceCollection "DefaultAppPool"
    + copy the .iTrace file from the production server to local machine
    + double click the .iTrace file to open it in VS, the relative code will displayed with selected trace request

- debugging parallel code, Task Parallel library and Parallel linq
    + debug|window|parallel stacks
    + use the property [EventSource(Guid="sdafasdfasdfsadf)] to mark a class to helpe trace concurrency
    + analyzer|concurrency visualizer|advance settings, add provider guid
    
    
# asynchrony in .net
- make your code asynchronous, asyncand await keywords for both the C# and Visual Basic languages in 2012 and .net 4.5
- understanding asynchrony and the windows runtime
- using asynchrony with web application, use web class
WebClientclass includes a task-based version of DownloadString called DownloadStringTaskAsyncthat returns a Task<string> object
var client = new WebClient()
{
    CachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore)};
    var contents = client.DownloadStringTaskAsync(url);
    return contents;
}

Any method where the await keyword is used must have the async keyword in its declaration

calls the Wait()method so that the program will not terminate before receiving a response from of all the asynchronous tasks that were started. This use of Wait()
- working with actors and the TPL dataflow library

The design guideline for the Windows Runtime libraries in Windows 8 was that any method that was likely to take more than 50 ms to complete was changed to be asynchronous

- for windows rt, the WebClient class doesn't exist in WinRT, so you'll be using the HttpClient class instead.

- async in asp.net web form application, In WebForm1.aspx, add Async="true"to the end of the page directive
<%@ Page Lauguage="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="WebFeedReader.WebForm1" Async="true"%>

private async static Task<string> ReadFeed(string url)
{
    var client = new WebClient()
    {
        CachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore)
    };
    return await client.DownloadStringTaskAsync(url);
}

protected void Page_Init(object sender, EventArgs e)
{
    var feedUrls = new List<string>(){
        "http://massively.joystiq.com/rss.xml",
        "http://ffeds.feedburner.com/ScottHanselman"
    };
    RegisterAsyncTask(new PageAsyncTask(async((ct)=>{
        var stopwatch = Stopwatch.StartNew();
        var feeds = await Task.WhenAll(
            from url in feedUrls select ReadFeed(url)
        );
        foreach(var feed in feeds)
        {
            Debug.WriteLine(feed.Length);
        }
        duration = stopwatch.Elapsed;
        timeTaken.InnerText = duration.ToString();
    });
}

protected void Page_PreRender(object, sender, EventArgs e)
{
    Debug.WriteLine("Duration:{0}", duration);
}

the output will be
Duration:00:00:00
198178
1234
1234

the duration is zero because the method is executed asynchronous, the result is the length of return string
asp.net web forms the page methods are executed synchronously, event mark the method with async keyword. you must use RegisterAsyncTask to make the relative code execute in async


# unwrapping c++ development
- using xaml with c++, C++ can only use XAML when creating WinRT applications. not for desktop applications
- using testing c++ applications
several components of the C++11 language standard and some long-requested pieces of the C99 standard.

- example the MyColor.h suorce file content
    + create a new blank app(xaml) project by navigating to visual c++
    + open the mainPage.xaml file with its content
    <Grid>element:
    <Border BorderBrush="LightBlue" BorderThickness="4" 
    CornerRadius="20" Margin="5">
        <StackPanel Margin="5">
            <TextBlock Text="Red level" Margin="5" />
            <Slider x:Name="redLevelSlider" Minimum="0" 
            Maximum="255" Value="{Binding Path=RedValue, 
            Mode=TwoWay}"
            Margin="5" Width="255" HorizontalAlignment="Left" />
            <TextBlock Text="Numeric value:" Margin="5"/>
            <TextBox x:Name="tbValueConverterDataBound" 
            Text="{Binding Path=RedValue, Mode=TwoWay}"
            Margin="5" Width="150" HorizontalAlignment="Left"/>
        </StackPanel>
    </Border>
    
    + create MyColor.h,  For the data binding to work, you will need an object to bind to. Add a new header file to your project and call it MyColor.h. As a note
#pragma once
#include "pch.h"
using namespace Platform;
using namespace Windows::UI::Xaml::Data;
namespace CppDataBinding
{
[Bindable]
public ref class MyColor sealed : INotifyPropertyChanged
{
public:
MyColor(void);
virtual ~MyColor(void);
virtual event PropertyChangedEventHandler^ 
PropertyChanged;
property String^ RedValue
{
    String^ get() { return _redValue; }
    void set(String^ value)
    {
        _redValue = value;
        RaisePropertyChanged("RedValue");
    }
    }
        protected:
            void RaisePropertyChanged(String^ name);
        private:
            String^ _redValue;
    };
}

    + MyColor.cpp and enter the folloowing code as its content

#include "pch.h"
#include "MyColor.h"
using namespace CppDataBinding;
using namespace Windows::UI::Xaml::Data;

MyColor::MyColor(void) {}
MyColor::~MyColor(void) {}

void MyColor::RaisePropertyChanged(String^ name)
{
    PropertyChanged(this, ref new 
    PropertyChangedEventArgs(name));
}

    + go back to MainPage.xaml.h file and add the MyColor.h file to the #include list, go to the public members of the MainPage class add
    public:
        MainPage();
        property MyColor^ _myColor;

    + go to the code behind file and add data context
    MainPage::MainPage()
    {
        InitializeComponent();
        _myColor = ref new MyColor();
        this->DataContext = _myColor;
    }


# unit testing c++ applications
- Visual Studio 2013 includes built-in support for unit testing with CppUnit.    
- support configure test to run after each build
- add test class and method follow the wizard, test method example
TEST_METHOD(RobTheBank)
{
    auto vault = new BankVault();
    auto totalFunds = vault->AddFunds(200);
    Assert::AreEqual(200, totalFunds);
    vault->StageHeist();
    totalFunds = vault->CurrentFunds();
    Assert::AreEqual(0, totalFunds);
}
- run code analysis
select Run Code Analysis on Solution(Alt + f11)
Build| Run Code Analysis on Solution.
- c++ and directX being promoted by microsoft as the primary way to build high-performance games in window8.x, xna only allow for build desktop appliation
- mono game, an open source implementation of the XNA framework at http://www.monogame.net
- create a directX app by navigating to visual c++| window store and name it rotatingCube
// Start recieving touch/mouse events and keyboard events
window->PointerReleased += ref new TypedEventHandler<CoreWindow^, 
PointerEventArgs^>(this, &App::OnPointerReleased);
window->KeyDown += ref new TypedEventHandler<CoreWindow^, 
KeyEventArgs^>(this, &App::OnKeyDown);
m_isRotating = true;

- HLSL, The pixel and vertex shaders used in the application are written using High-Level Shading Language(HLSL), a C++ style Domain Specific Language(DSL)for describing how the color should be calculated for each rendered pixel in an object

- Starting with Visual Studio 2012, Microsoft has added a new mechanism for building shaders, using a language called Directed Graph Shader Language(DGSL)
Add| New Item, and then choose Graphics| Visual Shader Graph (.dgsl).

- create a 3d model using the following steps
    + right-click on the project and select Add|Item
    + choose Graphics|3D Scene(.fbx)

- Visual Studio addresses some of the debugging issues for DirectX applications by including a new Graphics Diagnostics tools


# working with team foundation server 2013
- server based workspace approach make offline work very difficult
- the only time Visual Studio communicated with TFS was during the check-in process
- support directly send code review and add comment
- visual studio 2013 also support git
- work from the git command prompt
http://msdn.microsoft.com/en-us/library/dd286572(v=vs.120).asp

    
# languages
- fortifying javascript applications with typeScript
http://www.typescriptlang.org/
- integrating python into visual studio
- integrating python with .net

# visual studio medley
- creating installer packages, offer a version of the third-party installer project type InstallShield
    + window store app you don't need a installer
    + a web application then microsoft suggest you to either use xcopy or the msdeploy web deployment
    + fallback to use Wix(windows intaller xml) project for desktop application, http://wixtoolset.org/, or use installShield
- create a installerShield project
    + download and install InstallerShield
    + Add|New project|Other Project Types| Setup and deployment| IntallShield limited edition project
    + the installShield project assistant will appear
    + click on the right arrow at the bottom of the project assitant
    + advance through the project assistant until you get to the application files page
    + select visual studio output selector dialog and select primary output
    + right click the setup project to try install the project 
- submitting apps to the window store
    + visual c#| window store |blank app
    + navigate to project|store and select open developer account
    + project | store | reserve app name, current microsoft guideline will allow an app name to be reserved for a year
    + package your application for uploading to the store by choosing Project|Store|Create app packages
    + upload app packages
    + app certificastion, http://code.msdn.microsoft.com/windowsapps/Licensing-API-Sample-19712f1a
- creating visual studio add-ins and extensions, required visual studio sdk
- creating your own snippets
http://snippetdesigner.codeplex.com/








    

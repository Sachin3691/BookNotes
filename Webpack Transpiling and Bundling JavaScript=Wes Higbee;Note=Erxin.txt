Webpack Transpiling and Bundling JavaScript=Wes Higbee;Note=Erxin

# What is webpack 
- welcome 
    + interactive viewing 
    use vue.js 
    
    vue can not refresh browser and reflect the changes 
    
    + react could do the same 
    + angular.js will refresh the page 
    
- webpack benefits 
    + interactive coding 
    + seamless compilation 

- check module support website 
http://caniuse.com

    
- compiler hook types 
    + reference 
    https://github.com/webpack/tapable#hook-types
    
Basic hook (without “Waterfall”, “Bail” or “Loop” in its name). This hook simply calls every function it tapped in a row.

Waterfall. A waterfall hook also calls each tapped function in a row. Unlike the basic hook, it passes a return value from each function to the next function.

Bail. A bail hook allows exiting early. When any of the tapped function returns anything, the bail hook will stop executing the remaining ones.

Loop. TODO

- benefit bundling for performance 
- sophisticated bundling, bundle per page, bundle/clode splitting, minify, lazy load, remove unsued code for different products 

$ npm install lodash 

module format interop (CJS node), ESM(harmony) AMD (RequireJS), UMD, globals 

webpack is a module loader /resolution, your responsibility is to specify relationships between modules, not path & script order 

- help with caching 
caching can be tailored to development and production separately. we require cache in product and no cache in development 

- source maps, source map file will be generated by webpack for help set breakpoint in the bundled files 

- webpack benefits 
caching 

dev isn't prod, easily customized builds per environment 

source map 

platform for transformation 

- a compiler platform 

service worker and appcache 

course series and updates 

incremental builds, even without interactive coding 

extensible via Plugins and Loaders 

use future technology 

- can import webassembly and supoprt cpp, rust with webpack 

- debugger.html, dev-tool is used webpack 

- course series and updates 
tentative course series 

    + first bundle js 
    + second bundle css, less etc with web app 
    + multiple bundles 
    + bundle optimization 

    https://github.com/g0t4/optimizing-web-apps-webpack/

# Bundling code 
- cloning and starting the solitaire

    + clone the game 
    https://github.com/g0t4/optimizing-web-apps-webpack/
    
    https://github.com/devtools-html/debugger.html
    
- bundling app.js 
$ npm install -D webpack 

$ npx webpack --help 

npx is used to run command locally which is release with npm 

$ npx webpack app/app.js app/dist/app.bundle.js 

this will only package only the entry point file

we could replace the entry file location into the html 

webpack will help us wrapper the code into a function boilerplate

we could add import JS file to let webpack package the relative JS files for us 

- webpack polyfills module for help compatible with old world browsers 

//in the code we write 
import "./klondlike/scoring.js";

//webpack will generate 
/*harmony import*/var __WEBPACK_IMPORT_MODULE_0_klondlike_scoring_js_ == __webpack_require__(1);

all the module will be packaged into an array 

- webpack polyfills use strict 
webpack detect an import statement then will automatic add "use strict" into the bundle 

- learning from webpack source 
    + learn from the source code 
    + learn from the official document. such as check the implementation of "use strict"

- generating an interactive graph 

$ webpack *.js *.js --verbose 

etc 

    + check the graph of modules npm packages 
    $ npm install -D webpack-stats-graph 
    
    $ npx webpack *.js *.js --json > stats.json 
    
    $ webpack-stats-graph
    will create the graph for you. which is a dot file 

- challenge, link the process together bundle the app and generate the graph. After webpack it will reduce the web request count 


# Accelerating Development
- Benefits of Watch and WDS 
watch mode, wath the changes and regenerate the bundle for you 

hot module replacement, we no long need to run the webserver and help us reload the changed files 

- watch mode 








# Dev Isn't Prod 

# Transpiling using the future now 

# Understanding Loaders 

# Running Build Tasks 

# Troubleshooting with source maps 

































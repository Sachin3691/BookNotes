Learning Node, 2nd Edition=Shelly Powers;Note=Erxin

# The node environment 
- installing node 
$ apt-get install make g++ libssl-dev git 
- simple http server 
- hosting node on your server, vps or managed host 
- use npm upgrade node 
$ npm install -g 
$ npm install npm -g n 

# node building blocks the global objects events and node's asynchronous nature 
- process object 
- buffers typed array and strings 
let buf = new Buffer(24);

- event queue, loop 
- eventEmitter 
var events = require('events');

var em = new events.EventEmitter();

# basics of node modules and npm 
- overview of the node module system 
- how node finds and loads a module 
var name = require('url');

if the module isn't cached, then node checks to see if it's a native module. native modules are those that are pre-compiled binaries such as the c++ addons discussed in chapter 1 

if the module isn't cached or isn't a native module, a new module object is created for it 

the module's exports property is returned 

    + delete the module 
delete require("module-name");

    + node will first search for the module fromcurrent director with module-name.js, if not found then search for module-name.json, finally search for module-name.node extension which assume the module is precompiled node add-on 
    
    node looks for module in a node_modules subdirectory 

    + node wrap the module in anonymouse functions 
    function (module, exports, __filename, ...){}

- sandboxing and the vm module, is a customizable context which is used for instead of directly eval javascript code 

var vm = require('vm');

var sandbox = {
    process:'this baby',
    require:'that'
};

vm.runInNewContext('console.log(process);', sandbox);

- an in-depth exploration of npm 
    + install 
    $ npm install module-name [-g]
    
    + install from file system 
    $ npm install uri 
    
    + list installed modules 
    $ npm ls 
    $ npm ls -g 
    
- check configuration 
$ npm config list 

npm config ls -l 

- search for module 
$ npm search description string 

- if you're using npm and get a registry error parsing json error you can use one of the npm mirros to complete your task 
$ npm --registry uri search description strings 

- create a default package 
$ npm init --yes 

- update json file in a pacakge to relfect the newly installed module 
$ npm install request --save-dev 
this is a development dependency 

save to production dependency by 
$ npm install request --save 

change configuration for the save option by 
$ npm config set save=true 
$ npm config set save-exact=true
saved with exact version not npm's semver range 

- creating and publishing your own node module 
    + create a module, uses exports to expose function or object to the outside of node module 
    exports.property = value;
    
    + use require to add dependency 
    
    + packaging an entire directory 
    {"name": "mylibrary",
    "main": "./mymodule/mylibrary.js"}

    package.json file contain the information about the directory 
    main is the entry point for the module 
    
    + prepare your module for publication 
    $ npm init 
    
    use test to check the module is works as expected 
    $ npm test 
    
    test install the module by 
    $ npm install . -g 
    
    + add user to npm 
    $ npm adduser 
    $ npm publish 

- discovering node modules and three must-have modules 
    + better callback management with async 
    
    waterfall 
    series 
    parallel 
    whilst 
    queue 
    until 
    auto 
    iterator 
    apply 
    nextTick 
    
    $ npm install async 
    
    + commandline magic with commander 
    $ npm install commander 
    provide running an application such as ubiquitous -h 
    
    provide custom options 
    
    var program = require('commander');
    
    program.version('0.0.1')
                   .option('-s, --source [web site]', 'source website')
                   .option('-f, --file [file name]', 'File name ')
                   .parse(process.argv);
                   
    program.source; 
    program.file;

- ubiquitous underscore 
$ npm install underscore 


# interactive node with repl and more on the console 
- interactive component known as REPL, real eval print loop 
- special variable _, is the previous expression value 
- end repl by ctrl+c twice or ctrl+d once 
- repl commands 
.save, saves your inputs in the current object context into a file 

.break, break through multiline entry will drop the multiline content 

.clear, reset the context object and clears any multiline expression 

.exit, exits reple 

.help, display all the avaliable commands 

.save, the current repl session into a file 

.load loads a file into the current repl session 

- repl and rlwrap, is a wrapper that adds GNU readline library functionality to command lines that allow increased flexibility with keyboard input 

$ apt-get install rlwrap 

- custom repl 
var repl = require('repl');

repl.start(options);

properties of options:
prompt 
input 
output 
eval 
useGlobal 
useColors 
ignoreUndefined 
terminal 
writer 
replModel, runs in strict mode, default or hybrid 

- stuff happens, save often 
- the necessity of console 
    + console message types 
    var Console = require('console').Console;
    var cons = new Console(process.stdout, process.stderr);
    cons.log('testing');
    
    //using existing console object 
    var cons2 = new console.Console(process.stdout, process.stderr);
    cons2.error('test');
    
- format the message with help from util.format() and util.inpsect 

util.format('the value is %d and the string is %s', val, str);
%s, string 
%d, number 
%j, json 
%% use to literal percentage sign 


# Node and the web 
- http module, server and client 
var http = require('http');
var server = http.createServer().listen(8124);
server.on('request', function(request,response) {
    console.log('request');
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.end('Hello World\n');
});

http.Server is inherit from EventEmitter

request is a instance of IncomingMessage class 
request.headers: the request/response header objects
request.httpVersion: HTTP request version
request.method: only for a http.Server request, and returns HTTP verb ET or POST)
request.rawHeaders: raw headers
request.rawTrailers: raw trailers

one of the HTTP moduleâ€™s classes: http.ClientRequest, http.Server, http.IncomingMessage, and http.ServerResponse.

- involved in creating a static web server 
create an http server and listen for requests 
when a request arrives parse the request url to determine the location for the file 
check to make sure the file exists 
if the file doesn't exist respond accordingly 
if the file does exist open the file for reading 
prepare a response header 
write the file to the response 
wait for the next request 

- ports we use 
80 for default http 
443 for https 

- mime module can return proper mime type for a give file name 

- using apache to proxy a node application 

    + the simplest approach to running a node application with apache is to have apache proxy the node service's requests 
    
    + arsing the query with the query string 

    querystirng.parse();
    
- dns resolution, the dns module functions, dns.lookup() and dns.resolve(). the dns.lookup() function can be used to get the first returned ip address given a domain name 

dns.lookup('oreilly.com', function(err,address,family) {
    if (err) return console.log(err);
    console.log(address);
    console.log(family);
});
family: a number, 4 or 6, representing the type of address you want (IPv4 or IPv6)
hints: supported getaddrinfo flags, a number
all: if true, returns all addresses (default is false)

dns.resolve() function resoles a host name into record types 
A: default IPv4 address
AAAA: IPv6 address
MX: mail exchange record
TXT: text records
SRV: SRV records
PTR: used for reverse IP lookup
NS: name server
CNAME: canonical name records
SOA: start of authority record

dns.resolve('oreilly.com','MX', function(err,addresses) {
    if (err) return err;
    console.log(addresses);
});


# Node and the local system 
- readline and zlib provide interactive command-line communication 
- exploring os 
var os = require('os');

operation relative setting and environment settings 
os.tmpdir();
os.homedir();
os.freemem();
os.loadavg();
os.totalmem();

- streams and pipes 
    + stream is an abstract interface which means you're not going to be directly createing streams. instead you'll be working with various objects that implmenet stream, such as a http request, file system read or write, zlib compression, process.stdout... 
    
    + what you can do for stream 
    change encoding by setEncoding 
    check readable, writable 
    capture stream events, such as data received or connection closed
    pause and resume the stream 
    pipe data from a readable stream to a writable stream 
    
    + example 
    var file = fs.createReadStream(pathname);
    file.on("open", function() {
    file.pipe(res);
    });

- a formal introduction to the file system (fs)
fs.FSWatcher, listen for file or directory changes 
fs.ReadStream 
fs.WriteStream 
fs.Stats 

- directory access and maintenance 
fs.readdir()

- file streams 
- resource access with Path 
path.basename()
path.delimiter 
path.normalize 

- creating a command-line utility 
#! /usr/bin/env node 

....

- pipes and readline, a seeming never ending communication thread is also started just by importing readline 
var readline = require('readline');
var rl = readline.createInterface(process.stdin, process.stdout);
rl.question(">>what is the meaning of life?", function(answer){
    console.log("abou the meaning of the, you said " + answer)
});


# Networking sockets and security 
- Servers, Streams nad Sockets 
- socket is a endpoint in a communication and a network socket is an end point in a communication between application running on two different computers o the network 

only one person can talk at a time which called half-duplex 
communication streams allows two-way communication, full-duplex 

zlib is an example of a full-duplex stream, also networked streams(tcp) and encrypted(crypto)

- tcp sockets and servers 

allow create socket as half open by set options 
var net = require('net');
var server = net.createServer(function(conn){
}).listen(PORT);

{allowHalfOpen:true, pauseOnConnect: false}

var client = new net.Socket();
client.setEncoding('utf8');

//bind to a unixsocket 
const unixsocket = '/home/examples/public_html/odesocet';

var server = net.createServer(function(conn){

}).listen(unixsocket);

- udp/datagram socket 
require('dgram');

- setting up tls/ssl, use openssl go generate necessary file 
$ openssl req -new -key site.key -out site.csr

- working with https 
var fs = require("fs"),
https = require("https");
var privateKey = fs.readFileSync('site.key').toString();
var certificate = fs.readFileSync('final.crt').toString();

var options = {
    key: privateKey,
    cert: certificate
};

https.createServer(options, function(req,res) {
    res.writeHead(200);
    res.end("Hello Secure World\n");
}).listen(443);

- crypto module for encryption. it is an interface for openssl functionality 

use crypto module's createHash to encrypt the password 

var hashpassword = crypto.createHash('sha1').update(password).digest('hex');

- use mysql by 
$ npm install node-mysql 


# Child processes 
- child_process.spawn 
var spawn = require('child_process').spawn,
            find = spawn('find',['.','-ls']),
            grep = spawn('grep',['test']);
            
grep.stdout.setEncoding('utf8');
// direct results of find to grep
find.stdout.on('data', function(data) {
    grep.stdin.write(data);
});

// now run grep and output results
grep.stdout.on('data', function (data) {
    console.log(data);
});

// error handling for both
find.stderr.on('data', function (data) {
    console.log('grep stderr: ' + data);
});

grep.stderr.on('data', function (data) {
    console.log('grep stderr: ' + data);
});

- The child_process.spawnSync() is a synchronous version of the same function.
- child_process.exec and child_process.execFile
- child_process.fork, variation of spawn() is for spawning node processes 
- running a child process on windows, either you need to use child_process.exec() or need to invoke whatever command you want to run via the windows command interpreter cmd.exe 


# Node and es6 
- strict mode 
"use strict";
- let and const 
- arrow functions 
- classes 
- promises and bluebird 


# Full-stac node development 
- common form of full stack development with node is 
mongodb 
express 
angularjs 
and node 

- the express application framework, it is almost a ubiquitous in the node world 

    + install 
    $ npm install expression --save 
    
    + minimal hello world express application 
    var express = require('express');
    var app = express();
    
    app.get('/', function(req, res){
        res.send('hello world');
    });
    
    app.listen(3000, function(){
        console.log('example app listening on port 3000');
    });

    //explain 
    app.get handle all get web requests 
    res.write() and res.end() to respond to the web request 
    
    + use express generator to generate a full structure express application 
    $ npm install express-generator -g 
    
    generator will creaet necessary sub dirs  and install the dependencies 
    $ npm install 
    from the sub dir 
    
    add following env 
        * linux / mac 
        DEBUG=app-name:* npm start 
        
        * window 
        set DEBUG=app-name:* npm start 
        
    also could use npm start for debugging 

    the skeleton of app 
â”œâ”€â”€ app.js
â”œâ”€â”€ bin
â”‚ â””â”€â”€ www
â”œâ”€â”€ package.json
â”œâ”€â”€ public
â”‚ â”œâ”€â”€ images
â”‚ â”œâ”€â”€ javascripts
â”‚ â””â”€â”€ stylesheets
â”‚ â””â”€â”€ style.css
â”œâ”€â”€ routes
â”‚ â”œâ”€â”€ index.js
â”‚ â””â”€â”€ users.js
â””â”€â”€ views
â”œâ”€â”€ error.jade
â”œâ”€â”€ index.jade
â””â”€â”€ layout.jade

- mongodb 
- redis key/value store, for message queue application 
- angularjs 


# Node in development and production 
- debugging node applications 
    + node debugger 
    
    $ node debug application 
    
    $ node debug -p 3638 
    $ node debug http://localhost:3000 
    
    add debugger; statement to the application to embedded breakpoints 
    
    in the debugger also support use sb() function to set breakpoint 
    
    ...
    
- node inspector, using node inspector in visual studio 
$ npm install -g node-inspector 
$ node-debug application.js 

close browser or use ctrl+c in terminal window 

- using testing with assert 
var assert = require('assert');

- unit testing with nodeuint 
$ npm install nodeunit -g 

- other testing framework 
    + mocha 
    + chai 
    + vows is a bdd testing framework 
    
- keeping node up and running, forever is a just such a tool ensures that your appilcation restarts if it crashes 
$ npm install forever -g 

forever start -a -l forever.log -o out.log -e err.log finalserver.js 

- banchmark and load testing with apache bench, performance testing consist of benchmark testing and load testing 
$ ab -n 100 -c 20 http://burningbird.net/ 

- load test 
$ npm install -g loadtest 


# Node in new environment
- samsung IoT and GPIO 
    + GPIO is an acronym for general-purpose input/output 
    
    + IoT.js is a subset of node modules 
    
    could run on device raspberry pi 
    
- window with charka node, on January 19, 2016 microsoft issue a pull request to enable node to run with microsoft's chakraCore engine. the company created a v8 shim that implements most of the v8 essential apis. 

- node for mcrocontrollers and microcomputers 

    + fritzing is open-source software that gives people the tools to prototype a design and then actually have the design physically created 
    
    for raspberry pi 
    $ npm install johnny-five raspi-io 
    + node and adruino 
    $ npm install johnny-five 





















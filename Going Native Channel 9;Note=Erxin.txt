Going Native Channel 9;Note=Erxin

# GoingNative 0: Help us fly this plane, Some modern C++, Meet Ale Contenti
- Share pointer, normal pointer will leaking memory if not release the allocated memory
int main()
{
    MyClass *p = new MyClass;
    
    ...
}

with shared pointer will fix this problem

int main()
{
    shared_ptr<MyClass> ptr0(new MyClass);
    
    ...
}

- lambda function 
for_each(v.begin(), v.end(), [](int n){
    cout << n <<(n%2 == 0? "is even":"is odd")<<endl;
});


# GoingNative 1:
- visual studio have improve the cpp edit environment
- architecuture of ms cpp compiler

cl.exe    -obj->+---+
                |CRT| <-> window 32 api
link.exe    ->  +---+
                  A
                  |
                  |
                  V
              user code start with main

CRT, c run time, more than standard c runtime, it's between the compiler and the window the api, the compiler tell CRT how to call the user code

- how to build a c runtime application, application link to dll
/MD -> msvcr100.dll
/MDd -> msvcr100d.dll
/MT -> libcmt.lib
/MTd -> libcmtd.lib

- static initializer
struct X_Type;
X_Type x;

main()
{
}

x, is initialize before any parts of your application, which is static initializer

crt have a function such as doexit(number);

//the _tmain is the crt main method, for window application will be wmain, c runtime source code is available when you install visual studio
int _tmain(int argc, _TCHAR* argv[])
{
}

crt is added more secure memory operation or other debug process, you main method is run after the nt kernel threading and crt main function


# Going Native 2:
- wrl to provide low level control from cpp, wrl, template library for targeting window runtime
    + close to api and COMs
    + use template meta programming to implement the wrl
    + win rt is still COM, COM boundary
    + don't throw exception from winrt
    + make sure your code don't throw exception cross boundary
    + wrl is every low level, for example if wrl need 50 lines, cpp0x only need to write two lines
- cpp also could consume CRT method 
- CRT is provide a api safe environment which is not run under managed code
- implement application in different ways
    + com
        * IDL -> MIDL -> .h
              -> definishions of interfaces
        * cpp <- ATL then you get *.dll, here is the implementation
        * *.dll is the result
        * registration the *.dll
        
    + wrl
        * IDL, window rt generate the *.h, create winMD
        * CPP WRL, -> compile get the *.dll
        * there is no COM registration to the system, there only have manifest file
        
    example of the code
    #include WRL_headers
    #include "myComponent.h"

    class MyComponent:
        RuntimeClass<IInterface1,
        IInterface2>
    {
        
    }

    in the previous days the IInterface1, ... will need to implement by the programmer for the window COM such as InspectableClass(L"Component") this will register the component for the window rt 
   

# Going native 3:





































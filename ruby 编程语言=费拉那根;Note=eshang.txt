ruby 编程语言=费拉那根;Note=eshang

:漫游ruby
>常用语创造dsl
>字典hash, 定义的一种方法
    - 定义, d = {:key=>value, ...}
    - 引用, d[:key]
>操作符
    - 'string' * number, 返回复制number次string
    - '%s %d' % [string, number], format string
    - a > b ? expression_true: expression_false
>方法
def functionName() #全局
    ...
end
def className.functionName() #类方法
    ...
end
>条件判断
    - nil作为false处理
    - true, false, 指明bool值
    - 所有其他值都作为true!!! 区别于C与javascript
>irb, interactive ruby, 是一个ruby shell
>ri, 文档查看器, ruby的一个工具, 可以用于查看类帮助或者文档
    - ri Array
    - ri Array.sort
    - ri Hash#each, #引用实例方法
    - ri Math::sqrt, #引用类方法
>rubyGems, ruby的包管理系统
    - http://rubygems.org, 网站
    - 例子
    gem install rails
    - 其他指令
        * list, 所有安装的gem
        * environment
        
:ruby程序的结构与运行        
>常量 大写字母
>标示符中的标点含义
    - $, 全局变量
    - @, 实例变量
    - ?, 惯例, 放在返回布尔值的变量名最后
    - !, !结尾的对象表示会改变调用它们的对象
    - =, 等号结尾的方法, 在调用的时候可以省略等号, 方法常用于赋值操作的左侧
>关键字
__LINE__, case, ensure, not, then, __ENCODING__, __FILE__, def, for, class, false, or, redo, true, undef, BEGIN, END, defined?, if, rescue, unless, do, in, retry, until, alias, else, module, return , when, and, elsif, next, self, while, begin, end, nil, super, yield, break
一下三个关键字在出现在每行开头的时候
=begin, =end, __END__ 程序结束
>Kernel, Module, Class, Object几个类的方法, 也作为保留字处理
    - methods that appear to be statements or keyword
    at_exit, catch, private, require, attr, include, proc, throw, attr_accessor, lambda, protected, attr_reader, load, public, attr_writer, loop, raise
    - global functions
    Array, chomp!, gsub!, select, Float, chop, iterator?, sleep, Integer, chop!, load, split, String, eval, open, sprintf, URI, exec, p, srand, abort, exit, print, sub, autoload, exit!, printf, sub!, autoload?, fail, putc, syscall, binding, fork, puts, system, block_given?, format, rand, test, callcc, getc, readline, trap, caller, gets, readlines, warn, chomp, gsub, scan
    - common used object methods
    allocate, freeze, kind_of?, superclass, clone, frozen?, method, taint, display, hash, methods, tainted?, dup, id, new, to_a, enum_for, inherited, nil?, to_enum, eql?, inspect, object_id, to_s, equal?, instance_of?, respond_to? untaint, extend, is_a?, send
>一些换行的不同
    - z = x + 
      y    # z = (x+y)
    - z = x
          + y # z = x; z + y
    - \, 续行
>空格与方法调用, 不要在方法名的右侧留空格, 否则会影响调用顺序
    - f(a+b)+c
    - f (a+b)+c  # 等于f((a+b)+c)
    - ruby.exe -w会提供这类语法的编译警告
>句法结构
    - [1, 2,3], array
    - {1=>"one"}, hash
    - 1..3, range literal
>块结构
    - 与迭代器连接
        3.times{...} 等效于
        1.upto(10) do |x|
            ...
        end
    - 例如类或者模块
>指定程序编码
# coding: utf-8
#-*-coding:utf-8-*-

:数据类型与对象
>数字
    - integer
        * fixnum
        - bignum
    - float
    - complex
    - bigDecimal
    - rational
>`, 反引号内的字符串直接作为shell命令执行, 使用kernel包中的命令
>单个字符变量
?char
>字符串编码
    - ruby1.8, 字符串是字节序列, 没有保存编码信息
    - ruby1.9, 字符串包含了编码信息, 内容为编码后的字节序列
        * ASCII-8BIT, 编码格式是ruby1.9对ruby1.8的支持
    - str.force_encoding('coding'), 强制转换编码格式
    - 定义 %q[...], %Q[...], 这种方式允许内部有任意个"符号
>数组, Arrays, []
>哈希, Hashes, {key=>value}, {:key=>value}, :key为标示符, symbol
    - 如果需要可变的hashes键, 那么改变键值后要调用rehash方法
>符号, symbols, ruby解释器会维护一个符号表, symbol table, 其中存储了所有已知的类, 方法的名称, 这样可以避免大多数的字符串比较. 可以用位置来引用符号表中的方法,类等
    - 定义
    :name
    :"name"
    :'name with space'
    %s[name]
>对象的引用
    - 所有的对象赋值都是引用赋值
    - 立即值, Fixnum和Symbol对象是立即值
    - 立即值与引用的差别是不能定义单键方法(singleton methods)
>对象标识, 使用object类的hash方法返回
>对象相等
    - equal?方法








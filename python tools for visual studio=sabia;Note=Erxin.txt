python tools for visual studio=sabia;Note=Erxin

# preface
- what this book covers
- what you need for this book
- who this book for 
- conventions
    + code block style
    + command line output
    + use input style
    + warning 
    + tips
    + errata
    + resource download uri


# introduction
- PTVS
- installation and configuration
vs+ptvs+python interpreter
- ptvs codeplex source uri
 http://go.microsoft.com/fwlink/?LinkID=299429
- ptvs tools overview
View| Other Windows | Python Environments
View| Other Windows | Python Interactive
    + python environments
    Completion DB when you open it the first time
    Completion DB is up to date will shown to imply the db is updated
    it will be auto trigger to update when open a python project
    + python interactive
    visual studio panel with ptvs


# python tools in visual studio
- mastering intelliSense with python 
ctrl+j, displays the list
ctrl+space, auto complete feature
ctrl+shift+space, recall the intellisense window
- using read-eval-print loop, REPL tool for python inside visual studio
    + type $help in REPL to show help
    $help                     Show a list of REPL commands
    $attach                   Attaches the Visual Studio debugger to the REPL window process to enable debugging
    $cls                      Clears the contents of the REPL editor window
    $echo                     Suppress or unsuppress output to the buffer
    $load                     Loads commands from file and executes until complete
    $mod                      Switches the current scope to the specified module name.
    $reset                    Reset to an empty execution engine, but keep REPL history
    $wait                     Wait for at least the specified number of milliseconds
    
    $mod support load and execute a python file/module
    
    + every pice of code in our project could using the Send to Interactive command to run in the REPL

    + tell the debuger use REPL as output of the application, click Debug| Execute Project in Python Interactive entry or shift+alt+f5

- navigating code with ease
goto definition, find all references
- object browser, View|Object Browser or ctrl+alt+j


# day to day coding tools
- solution, a container of projects, provides a way to group the whole code base of work in a single file/folder structure, handling different commands and operation during different events
- project, classical definition of a bunch of files
- specifying python environments
    + right click python environments
    + add python environment/add virtual environment
    + if necessary python libraries are not installed on the machine, pip, setuptools and virtualEnv, (PTVS) will take care of this by downloading and installing them

    + add reference to add other project to current python project 
- defining search paths, tells visual studio where to search for additional libraries, you can reference a folder or a .zip file
- refactoring
    + rename
    + extract method
- debugging
- breakpoints
- utilizing watch entries, add watch in the content menu


# django in PTVS
- django is high-level python web based on the model view controller pattern framework
https://www.djangoproject.com/
- installing a python package
    + right click the added python environment and select install python package
    + the run as administrator checkbox should only be check when the installation has failed
- running the application
    + ptvs runs the django manage.py command
    + a browser instance will output of the website is shown
    + equivalent of launching
    python manage.py runserver

- intelliSense in django templates
    + django block tag
    "{% ... %}"
- setting up and managing a database for a django project
    + solution explorer window and select the django sync db entry
- creating a new django application
    + right click the project
    + select add django app

- deploying a django project on microsoft azure
    + register window azure
    + create a website
    + open the storage creation area at the bottom of the page
    + create storage account
    + open the django project and set the python environment
    + right click and select publish web wizard window
    + select import from a window azure web site
    + further documentation about python on windows azure
    http://www.windowsazure.com/en-us/develop/python/


# advanced django in PTVS
- library management, when to choose easy_install over pip, pip advantage
    + all packages are downloaded before installation
    + care is taken when presenting useful output on console
    + pip track why that package was required
    + error message should be useful
    + code is relatively concise and cohesive
    + package don't have to be installed as egg
    + native support is available for other version control system
    + uninstallation of package is easy
    + simple to define
    
- the fabric library, the deployment and development task manager
    + fabric is a python library and command line tool allows execution in application deployment and administration task
    http://fabric.readthedocs.org/
    
    + create a configuration file, fabfile.py for fabric contain the necessary method
    + make some tasks that interact with a remote server through ssh

- south the database deployment library
    + automatic migration creation
    + database independence
    + app-savvy, south knows and works with the concept of django applications
    + vcs-proof, south will notic when someone else commits migrations

- why use south with django, you have to align database from a development server env to production server env
    + installing south, install python package south
    + test the installation, solution explorer|open django shell on the content menu of project file
    + schema migration with south, using django app 
    + register the new application in the setting.py and make sure that south remains as the last entry of the installed_apps
    + instead of using the standard django sync_db command, set up a migration for model knigh
    + execute the initialization migration by executing the following command
    python manage.py schemamigration south2ptvs --initial


# ipython and ironpython in PTVS
- ipython, is more oriented toward extending the REPL interface, on the fly graph plotting
- ironpython provide .net class access
- ipython in PTVS
- ipython in PTVS, academic scientific computing background
    + distribution package for window
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack. 

    + matplotlib support plotting
    
    + different interactive model
        * standard
        * ipython, permits us to see the graphs directly inside REPL
        * ipython w/o PyLab, permits to see the graphs that are rendered in an independent window
        
    + display
    hist(x, y)
    savefig('file.png')
        
- ironpython
http://ironpython.net/
- ironpython currently not support ipython
- using the python code in .net with ironpython
- right click reference to add .net reference
- using the python code in .net with ironpython
    + create a project targeting .net 4.5
    + reference IronPython and Microsoft.Scripting assembly
    + create a new c# class contains the code for python integration
    class PythonExecute
    {
        public static void Execute()
        {
            ScriptEngine engine = Python.CreateEngine();
            string script = @"
def PrintMessage():
    print 'this is a test message!'
    
PrintMessage()
";
            engine.Execute(theScript);
        }
    }
    
    + call variables and functions defined in .net application by define a scope and pass as argument to execute function
    add scope object into upper example
    
    dynamic scope = engine.CreateScope();
    scope.Add = new Func<int, int, int>((x,y)=>x+y);
    string script = @"
def msg():
    print('add 2 and 3 equal to %s' % add(2,3))
";
    engine.Execute(script, scope);

    + execute a python file
    engine.Execute(pythonFileUir, scope);


















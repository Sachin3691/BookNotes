Tensorflow, getting started=Jerry Kurata;Note=Erxin

# Course overview 
- example 
virtual asssitants 

automatic recognition 

self-driving vehicles 

- tesnsor flow 
interface for expressing machine learning algrotihms 

implementation for executing such algorithms 

a framework for creating ensemeble algorithms for todays's most challenging problems 

- tensorflow as an interface 
lower level library 

flexible structure

predefined implementation available 

the source code could be download 

- tensorflow as an implementation for execution 
scales up and down 

easier deployment to production, easy move from laptop to claster 

- tensor flow environment 
languages interfaces, python, cpp

execution environment, execution master use the process we add or remote server 

- why is called tensorflow? 
computation graph of (a*b)+c 

    + tensor is n-dimention structure
    n=0, single value 
    n=1, list of values 
    n=2, matrix of values 

    the tensor could do normal math operation 
    
    
    
    tensors flowing between operations => "tensorflow"
    
- skills and course structure 
not required                | required 
experience in tensorflow    | software experimence 
python 3.5                  | experimence with data in tables 
IDE, visual studio code     | 
advanced statics or math    |

- course modules 

use a computation graph on local or remote 

introducing tensorflow 

creating neural networks 

debugging and monitoring 

transfer learning, use the previous trained model to find data

expanding with add-ons, Keras and TFLearn, less on managing data with tensor flow 

summary 


# Creating neural networks in tensorflow 
- install 

creating models in tensorflow 

discussing tensorflow architecture 
    
    +steps 
    OS 
    GPU 
    Environment 
    Direct, Virtual or Docker Container 
    Python version 
        Linx 2.7, 3.3 
        Window 3.5 or later 
    Demo 

- introduce neural networks 
- neural network symbology 













Dive into Rust=Fan;Note=Erxin

# introducton 
- reference 
https://github.com/rust-lang/rust

- rust process 
RFC( Request for comments ) > nightly > Beta > Stable 

- standard document 
https://doc.rust-lang.org/std/

https://rustc-dev-guide.rust-lang.org/about-this-guide.html

- development environment 
    + window 
rustc.exe, compiler 
cargo.exe, package management 
cargo-fmt.exe, rustfmt.exe, source code formatter 
rust-gdb.exe, rust-lldb.exe, debugger 
rustdoc.exe, document generator 
rls.exe, racer.exe, code indicator 
rustup.exe, is used to manage the toolset 

$ rustup self update 
$ rustup self unisntall 
$ rustup update 
$ rustup install nightly 
$ rustup default nightly 

- 中国科技大学mirror, USTC LUG
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static 
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 

//USTC proxy setting
$HOME/.cargo add file "config" contains:
```
[source-crates-io]
registry = "https://github.com/rust-lang/crates-io-index"
replace-with='ustc'
[source.ustc]
registry="git://mirrors.ustc.edu.cn/crates.io-index"
```

//install RLS 
$ rustup self update 
$ rustup update nightly 
$ rustup component add rls --toolchain nightly 
$ rustup component add rust-analysis --toolchain nightly 
$ rustup component add rust-src --toolchain nightly 

- offical package management website. https://crates.io/ 

- hello world 

fn main(){
    let s = "hello world";
    println!("{}", s);
}

$ rustc *.rs 

- rust code is managed by crate and mod, crad is similar to project, it will generate a lib or exe. it may composed with several mods 


# Variable and types 
- define varaible, by default the variable is readonly. It need to add mut to indicate it is mutable 
let variable_name:variable_type = value;

let (mut a, mut b) = (1,2);

- raw identifier, to define variable name with keyword characters 

use the keyword self
```
r#self 
```

- same name variable will shadowing the previous defined variable. it will get no error compare to C/C++
let a:i32;
let a:i16;

- variable 类型推导
let elem = 5u8;
let mut vec = Vec::new();
vec.push(elem);
println!("{:?}", vec);

- '_' is a special character in compiler. example let compiler decide the type for vec 

let player_scors = [{"Jack", 20}, {"Jane", 23}];

let players: Vec<_> = player_scors;
- static variable, rust is not allowed define static variable with code block 
static variable_name:type = value;

static verc: Vec<i32> = {let mut v = Vec::new(); v.push(1); v};
- read, write global variable required add unsafe keyword 
unsafe {
    GVar = 5;
}

- rust is not allowed execute code before main and after main function 
- const 

const const_name:const_type = value;

- bool 
let y:bool = true;
let x = false;

- char, any unicode character, each required 4 bytes 
let c1 = '\n';
let c3 = '\u{7fff}';
let x :u8 = 1;
let y:u8 = b'A'; //single byte character 
let s :&[u8;5] = b"hello";

- int types, the number expression can add _ in any where, we can directly call object method from number 
let var1 :i32 = 32;
let var2 :i32 = 0xFFF;
let var3 :i32 = 0o55;
let var4 :i32 = 0b1001
let var5 = 1_234_5;

- integer overflow, in debugger mode, integer overflow will trigger panic. in realese mode the higher bit will be ignore when overflow happened 

```
fn arithmetic(m:i8, n:i8) ->i8 {
    println!("{}", m+n);
    return m+n;
}

fn main(){
    let s = "hello world";
    println!("{}", s);

    let a = 5;
    let b = 6;
    println!("{} + {} = {}", a, b, arithmetic(a, b));
}
```

the compiler provide additional options to control the handling process.

$ rust -O *.rs 

$ rustc -C overflow-checks=no *.rs

- 浮点数类型

let f1 = 123.0f64
let f2 = 0.1f64;
let f3 = 0.1f32;
let f4 = 12E+99_f64;
let f5 :f64 = 2.;

浮点数状态
enum std::num::FpCategory{
    Nan,
    Infinite,
    Zero,
    Subnormal,
    Normal
}

IEEE 754 x = (-1)^s * (1 + M) * 2^e
s, 符号位
M, 尾数
e, 指数

Subnormal, 防止在浮点数过小的时候突然降到零，当指数为全零的时候指数表示-126为不是-127, 这时候比普通状态下浮点数精度低

let x = 1.0f32/0.0; //Infinite 
let y = 0.0f32/0.0; //Nan 

Nan不支持排序， 判断大小， 返回值为false

- 指针类型
Box<T>, 指向类型T，所有权指针， 有权释放内存
&T, 指向类型T的借用指针，无权释放内存
&mut T, 指向类型T的mut型借用指针，无权释放内存
*const T, 只读类型，没有生命周期信息，无权写数据
*mut T, 可读写指针，没有生命周期信息，可以写数据

    + 智能指针
Rc<T>, 计数指针，共享所有权限，线程不安全
Arc<T>, 原子型引用计数指针，共享所有权限，线程安全
Cow<'a,T>, Clone-on-write, 写时复制指针，可能借用指针，可能具有所有权的指针

- 类型转换，必须显示转换
let var1 :i8 = 41;
let var2 :i16 = var1 as i16;

标准库中提供from into, trait etc. 

- 复合数据类型

    + tuple 
    + struct 
    + tuple struct 
    + enum 
    + 类型递归定义














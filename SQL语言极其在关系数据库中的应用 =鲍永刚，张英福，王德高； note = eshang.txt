SQL语言极其在关系数据库中的应用 =鲍永刚，张英福，王德高； note = eshang

实体概念模型，entity-relationship,ER 

SQL语言分类
数据描述语言, Data Definition Language DDL, 如 Create, Alter, Drop等
数据操纵语言, Data Manipulation Language DML, insert, delete, update select, commit , rollback
数据控制语言, Data Control Language DCL, Grant, Revoke ;用于设置数据库的访问权限

建立卸载数据库
CREATE DATABASE <name> 
DROP DATABASE <name>

建立、修改、删除表
CREATE TABLE <name>( <列名><类型>[NULL|NOT NULL][,...][,<表级约束>[,...]]
表级约束类型
PRIMARY KEY(<列名,...>)
;
UNIQUE(<列名>)
;
FOREIGN KEY(<外键列>) REFERENCES<参照表> [ON <DELETE|UPDATA> <NO ACTION| CASCADE | SET NULL | SET DEFAULT>][ON..]
CASCADE指同步删除或修改子表中的参照行
;
[CONSTRAINT <约束名>] CHECK (列约束表达式)
例如
CHECK( 列名 IN ('男', '女'))
CONSTRAINT 列 CHECK( 列1 > 0 AND 列1 < 15 )
;
ALTER TABLE<表>
[ADD [COLUMN] <列> <类型> <属性>]
|ALTER [COLUMN] <列> SET DEFAULT ...
|[ADD <表级约束>]
|[DROP CONSTRAINT <表级约束> {RESTRICT|CASCADE}]
;
INSERT [INTO] <表> VALUES(...)
;
UPDATA <表> SET <列> = {DEAULT|NULL <表达式>}[,...]WHERE
;

查询数据
[ WITH <common_table_expression>] 
SELECT select_list [ INTO new_table ] 
[ FROM table_source ] [ WHERE search_condition ] 
[ GROUP BY group_by_expression ] 
[ HAVING search_condition ] 
[ ORDER BY order_expression [ ASC | DESC ] ] 
The UNION, EXCEPT and INTERSECT operators can be used between queries to combine or compare their results into one result set.
Syntax
<SELECT statement> ::=  
    [WITH <common_table_expression> [,...n]]
    <query_expression> 
    [ ORDER BY { order_by_expression | column_position [ ASC | DESC ] } 
  [ ,...n ] ] 
    [ COMPUTE 
  { { AVG | COUNT | MAX | MIN | SUM } (expression )} [ ,...n ] 
  [ BY expression [ ,...n ] ] 
    ] 
    [ <FOR Clause>] 
    [ OPTION ( <query_hint> [ ,...n ] ) ]
	
<query_expression> ::= 
    { <query_specification> | ( <query_expression> ) } 
    [  { UNION [ ALL ] | EXCEPT | INTERSECT }
        <query_specification> | ( <query_expression> ) [...n ] ] 
		
<query_specification> ::= 
SELECT [ ALL | DISTINCT ] 
    [TOP ( expression ) [PERCENT] [ WITH TIES ] ] 
    < select_list > 
    [ INTO new_table ] 
    [ FROM { <table_source> } [ ,...n ] ] 
    [ WHERE <search_condition> ] 
    [ <GROUP BY> ] 
    [ HAVING < search_condition > ] 
例子
USE AdventureWorks2008R2;
GO
-- Define the CTE expression name and column list.
WITH Sales_CTE (SalesPersonID, SalesOrderID, SalesYear)
AS
-- Define the CTE query.
(
    SELECT SalesPersonID, SalesOrderID, YEAR(OrderDate) AS SalesYear
    FROM Sales.SalesOrderHeader
    WHERE SalesPersonID IS NOT NULL
)
-- Define the outer query referencing the CTE name.
SELECT SalesPersonID, COUNT(SalesOrderID) AS TotalSales, SalesYear
FROM Sales_CTE
GROUP BY SalesYear, SalesPersonID
ORDER BY SalesPersonID, SalesYear;
GO

where条件
逻辑关系、连接表达式、关系表达式、LIKE、EXIST、BETWEEN、IN、SOME/ALL

GROUP BY, ORDER BY

多表连接，JOIN；笛卡尔积，即向量的叉积
SELECT * FROM TABLE [JOIN EXPRESSION]
CROSS JOIN TABLE [AS] 别名	//即求两个表的笛卡尔积
JOIN TABLE [[AS] <别名>] [ON] <连接条件>	//内连接，按照条件过滤笛卡尔积结果
LEFT JOIN TABLE [[AS] <别名>] [ON] <连接条件>	//左连接，按照条件过滤，如果有表没有符合条件的记录那么为空
RIGHT JOIN TABLE [[AS] <别名>] [ON] <连接条件>  //右连接，按照条件过滤，如果有表没有符合条件的记录那么为空
FULL JOIN TABLE [[AS] <别名>] [ON] <连接条件>  

子查询，指嵌套在其他SQL语句（SELECT, INSERT, UPDATE, DELETE）中的SELECT语句，受到如下限制
可以使用子查询的句子如下：EXIST, IN, SOME/ALL, 关系表达式

自定义函数
Create Function functionName(@parameters)
Returns type
Begin
	expression
	Returns @param
End
;
Create Procedure procedureName
[in|out|inout] @parameters
As
Begin
	[Begin Transaction]
	expression
	[Commit]
End
;

自定义变量
declare <变量名序列> <变量类型>
赋值
set <varName> = <expression>

if expression
if <case1> then
[elseif <case2> then]
[else]
end if

CASE varName
When value Then expression
...
end 

While <case> Loop
  expression
End Loop

While <case>
  expression
End While

For <circleName> As
  [<cursorName> [Sensitive|Insensitive] Cursor For]
  definistionForCursor
Do
  expression
End For
Sensitive时游标动态反应结果，否则不是动态反应结果

事物，transaction；具有如下几种命令
Set Transaction, 设置事物特性
Start Transaction, 
Commit, 
Rollback, 
Savepoint
；
在set 和 start期间的事物隔离级别 Isolation Level
Read Uncommitted, Read Committed, Repeatable Read, Serializable

触发器，trigger
create trigger

视图，view

游标，Cursor,用于对表中的每个记录进行一个行处理; 实现方法
1.用DECLARE语句声明游标
2.用OPEN语句打开
3.反复用FETCH语句读取游标当前行
4.用CLOSE关闭游标
；
Declare <name> [Sensitive|Insensitive]
[Scroll]Cursor
For <Select expression>
[For { Read Only| Update [ Of <columnName>]}]
;
Scroll指游标可以前后移动，使用游标
Open <name>
;
Fetch [Next|Prior|First|Last|{Absorlute|Relative}] <intNumber> From <name> Into <varNameList>
;
Close <name>

索引，Index, 是加快数据处理速度的手段,建立索引的方法
Create Index <name> On <tableName>(<columnName>)
只有需要的时候才建立，只针对SQL语句中的WHERE句子有效；删除索引
Drop Index <tableName>.<indexName>

数据库安全，角色，ROLE，建立数据库角色
Create Role <roleList>

数据库授权，用户权利分配
Grant ...
;
取消授权
Revoke ...

配置服务器，可以使用存储过程
sp_configure

PL/SQL 是ORCALE 9i的SQL语言
T-SQL是SQL SERVER的SQL语言

数据库的插入，按照默认值插入
Insert Into tableName Values(...) //与select * 的顺序要一致
在需要插入默认值的时候使用Default 关键字
所有列均有默认值可以使用
Insert Into tableName Default Values
;
从其他表中读取行，插入到另一个表中
Insert Into tableName( col0, col1, col2 )
Select col0, col1, col2
From talbeName1
Where col2 in ( "condition0", "condition1" ... )

字符串便利, sql 中没有循环操作，实现的方法是使用查询来构建笛卡尔积

字符串包含引号
select 'g''day mate' qmarks from t1
select 'beavers' ' teeth'
select ''''

使用 replace()和 translate()函数来删除字符串中的字符
使用case when ... then ... else ... end
row_number()
substring()

数字计算, avg(), max(), min()
对某列求和
select sum( columnName ) from tableName
求和后并按照某列内容分类
select sum( columnName0 ) from tableName group by columnName1
;
求表的行数
select count(*) from emp

计算两个日期之间的差值
datediff( date0, date1 )

游标的例子
例子
table1结构如下
id    int
name  varchar(50)
;
declare @id int
declare @name varchar(50)
declare cursor1 cursor for         --定义游标cursor1
select * from table1               --使用游标的对象(跟据需要填入select文)
open cursor1                       --打开游标
;
fetch next from cursor1 into @id,@name  --将游标向下移1行，获取的数据放入之前定义的变量@id,@name中
;
while @@fetch_status=0           --判断是否成功获取数据
begin
update table1 set name=name+'1'
where id=@id                           --进行相应处理(跟据需要填入SQL文)
;
fetch next from cursor1 into @id,@name  --将游标向下移1行
end
;
close cursor1                   --关闭游标
deallocate cursor1

备份指定表
DECLARE @RowCnt int,
            @TotalRows int,
            @AccountNumber char(11),
            @sql varchar(8000),
            @date char(10),
            @ArchPath varchar(500)
 
SET @RowCnt = 1
SET @date = CONVERT(CHAR(10),GETDATE(),110)
SET @ArchPath = '\D$EDATAWorkFoldersSendSendData'
SELECT      @TotalRows = count(*) FROM table1
--select @ArchPath
 
WHILE (@RowCnt <= @TotalRows) 
      BEGIN
            SELECT @AccountNumber = AccountNumber, @output_filename FROM table1 WHERE Identity_Number = @RowCnt
            --PRINT @AccountNumber --test
            SELECT @sql = N'bcp "SELECT h.HeaderText, d.RECORD    FROM table2 d     INNER JOIN table3 h ON d.HeaderID = h.HeaderID  WHERE d.ccountNumber = '''
                                    + @AccountNumber+'''" queryout "'+@ArchPath+ @output_filename + '.txt" -T -c'
            --PRINT @sql
            EXEC master..xp_cmdshell @sql
            SELECT @RowCnt = @RowCnt + 1
      END











C++ Primer Plus(5th)=Stephen Prata; Note = Erxin

:预备知识
>GP, generic programming
>Bjarne Stroustrup, 主页, The C++ Programming language和The design and evolution of C++作者
http/www.research.att.com/-bs/

:数据处理
>climits, 头文件定义了常用的符号常量例如
CHAR_BIT, CHAR_MAX, UCHAR_MAX, INIT_MAX...
>浮点数, float.h, cfloat.h是C的float.h的C++版本, ostream方法setf()强制显示为定点小数形式, 避免过长显示为e表示法

:复合类型
>数组
>字符串
>string类
>C++标准库
>结构
	- 一般形式
	struct name{...};
	- 位字段, 用于与某些硬件的寄存器对应
	struct torgle_register
	{
		unsigned int SN:4; 	//  4bits for SN value
		unsigned int: 4; 	// 4 bits unused
		bool goodIn: 1;   	//valid input(1 bit)
		bool goodTorgle: 1;	// successful torgling
	};
>共用体
union name{...};
>枚举
enum name{..};
>内存分配
new|delete pointer;
	- 创建动态数组
	type *pArray = new type[length];
	delete[] *pArray;
	不要delete内存两次
	new[] 对应 delete[]
	对空值使用delete是安全的
	不能使用sizeof操作确定动态分配内存数组包含的字节数
	使用new[]为一个实体分配内存, 则使用delete[]释放
	- 指针加减是根据指针指向的类型的大小增减对应的字节
	
:循环和关系表示
>for, do while, while, goto
>while(cin.getch()), cin标准输入是否则成功

:分支语句
>if, if else, &&, ||, !, cctype字符函数库, ? :, switch, continue, break
>C++从C中继承了一个字符相关的函数软件包, ctype.h, C++中为cctype, 用于测试字符串是否为数字,可打印等

:C++的编程模块
>const
非常量数据可以赋值给常量或非常量指针, 只能将非常量数据的地址赋值给非常量指针
	- 常量指针
	const type* p_var;	 //可以从新分配指向内容, 但内容不能修改
	type* const p_var;   //指向固定地址, 内容可修改
>函数指针
double (*p_function)(parameters...);
double sum(double a, double b);
double (*p_sum)(double, double);
p_sum = sum;
(*p_sum)(5.0, 4.2);
	
:函数
>内联函数
inline, 与宏的区别是, 宏不能安值传递
>引用
type& var_reference = var_name;
	- 实参类型正确, 但不是左值, 产生临时变量
	- 实参类型不正确, 产生临时变量
	- const引用
>默认参数
type function(para0, para1 = default_value){...}
>函数模板
template<typeVar>
type function(parameters){...}
使用生命进行模板函数具体化
>重载模板, 或指定特定类型的函数处理方法
	
:内存模型和名称空间
>单独编译, 程序分层
	- 头文件, 包含结构声明和函数原型
	函数原型, 常量, 结构声明, 类声明, 模板, 内联函数
	!不要包含函数定义或变量声明
	使用宏避免多次包含头文件
	#ifndef HEAD_FILE_H
	#define HEAD_FILE_H
	...
	#endif
	- 源代码文件, 包含于结构有关的函数代码
	- 源代码文件, 包含调用与结构相关的函数代码
	- 在IDE中不要讲头文件加到工程列表中或用#include包含源文件
	- 确保每个库都是用同一个编译器生成的目标文件才能连接成功
>变量存储方式, 5种
自动			代码块
寄存器			代码块
静态, 无连接	代码块加static
静态, 外部链接	函数外
静态, 内部链接	函数外加static
>变量说明符与限定符
auto, register, static, extern, mutable根据const来解释, const, volatile共享内存
>C++查找函数规律
本文件->所有源文件->库文件件
>命名空间
namespace name
{
	class class_name{...};
}
使用
name::class_name;
::,是作用域说明符
>using声明与编译指令
	- using name_space_name[::element]; //声明, 只是一个可用
	- using namespace name_space_name;	//编译指令, 所有名称都可用

:对象和类
>const成员函数
type function_name() const;  //promise not to change invoking object, only use in member method
>构造函数与析构函数
	- 接受一个参数的构造函数允许用赋值语句来初始化
	  接受一个参数的构造函数定义了从参数类型到类类型的转换, 如果使用了关键字explicit限定 则只能用于显示转换
	class_name obj = value;
	class_name obj = (class_name) value
	- 未被初始化的对象, 程序将使用默认构造函数初始化
	class_name obj;
	class_name *po = new class_name;
	- 析构函数, 无返回值且唯一
	~class_name(){};
>抽象数据成员, abstract data type, ADT, 堆栈

:使用类
>操作符重载
operator op(argument-list){...}
编译器在遇到类对象的操作符的时候会对操作函数进行替换
obj0->obj1 = obj0.operator+(obj1);
>操作符重载限制
	- 至少有一个参数是自定义类型
	- 不违反原来的操作语法规则
	- 不能定义新的操作符
	- 不能重载的操作符有
	sizeof, ., *, ::, ?:, typeid, const_cast, dynamic_cast, reinterpret_cast, static_cast
	- 只能通过成员函数重载的操作符
	=, (), [], ->
>友元
函数, 类, 成员函数
	- 创建友元, 将原型放置在类声明中
	class class_name
	{
		...
		type operator op_element(parameter_list);
		friend type operator op(parameter_list);
	}
	- 成员函数
	- 非成员函数, 如果操作自定义类型, 那么一定是自定义类型的友元
	- 转换函数, 用于将自定义类型转换到特性的系统内建类型, 没有返回值, 没有参数
	operator type()[const]{...}
	- 推荐将加法定义为友元, 这样更容易适合自动类型转换
	由于定义了, 单个参数构造函数与转换函数. 多个转换函数之间出现混淆
>在main之前调用某函数, Bootstrap, 全局对象, 能满足这样的要求, 全局对象在main之前创建. 可以创建一个类, 默认构造函数将调用所有的需要调用的函数, 用于初始化对象的不同部分
class class_name
{...}
class_name before_main;
int main(void)
{...}
>构造函数
	- 默认构造
	- 复制构造
	className::className(const className &obj){..}
	- 赋值操作
	className& className::operator = (const className &obj);
	要检测是否是自我赋值
>new 操作符
	- 可以使用分配的缓存
	const int BUF_SIZE = 512;
	char *buffer = new char[BUF_SIZE];
	className *p = new (buffer)className(...);
	className *pnext = new (buffer + sizeof(className))className(...);
	p->~className();
	pnext->~className();
	delete[] buffer;
	需要显示调用分配缓存中的对象析构函数
	- new与delete, new[]与delete[]要匹配

:类继承
>基类指针只能调用基类的元素
	- 派生类到基类的转换可以是隐式的
	- 基类到派生类是必须显示的, 而且一般情况下不允许
>虚拟析构函数
>引用
type ? var_name = value;
>指针
type * pointer = &value;
>虚拟成员函数和动态联编
	- 对于非虚方法是用静态联编
	- 对于虚方法是用动态联编
>虚函数工作原理
	- 给每个对象添加一个隐藏成员, 虚函数表指针, virtua function table, 存储了为类对象进行声明的虚函数的地址. 基类对象包含一个指针, 派生类对象包含一个指针. 如果派生类重新定义了虚函数, 那么就会替换基类同样位置的虚函数地址
>继承方法重定义, 重定义继承的方法并不是重载, 而是隐藏了原来的函数, 不论参数是否相同. 两条重定义规则
	- 如果重定义继承方法, 确保与原来的原型完全相同, 如果返回类型为基类的引用或指针, 可以变为派生类的引用或指针, 称为返回类型协变(coveriance of return type)
	- 如果基类声名了重载, 那么派生类中要重新定义所有的重载方法
	- 构造函数与析构函数是不能被继承的, 析构函数最好要设置为虚函数
>singleton, 使用static类型实现
>抽象类
类定义中有纯虚函数
class className
{
	virtual type functionName() = 0;
}

:C++中的代码重用
>私有, 保护继承
>在多重继承的时候使用虚拟继承来避免重复继承基类
class sub_class:virtual public base_class
{}
class sub0_class:virtual public base_class
{}
class sub_final_class: public sub_class, public sub0_class
{}

:C++的代码重用
>模板也可以作为参数

:友元, 异常, 和其他
>嵌套类, 类定义可以嵌套
class wrap_class
{
	class inner_class
	{};
};
作用域
位置	包含它的类	派生类	外部
private		y		n		n
protect		y		y		n
public		y		y		wrap_class::inner_class引用访问
>异常
调用abort()函数, 在cstdlib|stdlib中
	- 异常机制
	try{}
	catch(const char *s){}
	catch(...){} //catch whatever is left
	- exception类
	#include <exception>
	- stdexcept异常类, 错误类型
	domain_error, invalid_argument, length_error, out_of_bounds, range_error, overflow_error, underflow_error
	- 内存分配问题异常处理, 有两种方式
		* bad_alloc, 让new引发bad_alloc异常, 返回空指针
		* new.h
	- 未捕获的异常首先不会终止程序, 会调用terminate()函数, terminate调用abort函数
>RTTI, runtime type identification, 运行阶段类型识别, 运行阶段确定对象类型
	- dynamic_cast, 模板方法可以确定是否可以安全滴将对象的地址付给指定类型的指针
	className *p = dynamic_cast<className *>(pointer_name);
	不成功返回0即空指针
	- typeid, 操作符返回一个对象类型的值, 用于确定两个对象是否为相同类型
	typeid(<className|expression_return_obj>)
	if(typeid(obj0) == typeid(obj1))
	- type_info, 结构存储了有关特性类型的信息
	- 注意, 如果在if ... else系列语句中使用了typeid, 就应考虑使用虚函数处理对应的类
>类型转换操作
	- dynamic_cast, 子类到父类的转换, 不成功则返回空指针
	- const_cast, 改变值为const或volatile, 只是对类型做一次改变
	const_cast<type_name> expression;
	- static_cast, 就是进行隐式类型转换, 如基类到派生类, 派生类到基类, double到int, int到double
	- reinterpret_cast, 用于危险的类型转换, 简化操作
	struct dat{ short a; short b};
	long value = 0xA224B118;
	dat *pd = reinterpret_cast<dat *>(&value);
	cout << pd->a;
		* 不能讲指针转换为更小的整形或浮点型
		* 不能讲函数指针与数据指针互换
	- RTTI, 运行阶段类型信息

:string类和标准模板库
>auto_ptr, 模板类, 动态内存分配, 在头文件memory中. 是利用析构函数释放指针内存, 部分实现
template<class X> class auto_ptr
{
public:
	explicit auto_ptr(X* p = 0)throw(); // throw()表示构造函数中不会抛出异常
}
同样只能指针要求new, delete, new [], delete []配对使用, 不能释放非堆内存
>STL, 一组表示容器, 迭代器, 函数对象和算法的模板, STL是通用编程generic programming, 而非面向对象编程, 作为标准C++的一部分
	- vector
	  可以重写vector的操作符[], 使其内部调用std::vector<T>::at(index)方法来实现索引值的的范围检测
	- 容器
	- 序列, deque, list, queue, priority, stack, vector
	- 联合容器
	- 函数符概念
	生成器, generator
	一元函数, unary function
	二元函数, binary function
	返回布尔值得断言, bool predicate
	返回布尔值得二元断言, binary predicate
	- 算法, sort, copy, find, random_shuffle, set_union, set_intersection, set_difference, transform

:输入, 输出和文件
>iostream
>fostream
>ofstream
>string

	
	
	
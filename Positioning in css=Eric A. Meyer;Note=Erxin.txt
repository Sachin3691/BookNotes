Positioning in css=Eric A. Meyer;Note=Erxin

# Preface 
- conventions used in this book 
italic, new terms, urls, email

constant width, for progam listing as well as within paragraphs to refer to program elements 

constant width bold, should be typed literally by user 

constant width italic, shows text that should be replaced with user-supplied values or by values determined by context 

# Positioning 
- basic concepts 
    + types of positioning , five different types for the position property 
    static, block level generate a rectangular box that is part of the document's flow 
    
    relative, the element's box is offset by some distance. the element retains the shape it would have had were it not positioned and the space that the element would ordinar have occupied is preserved 
    
    stick, the element is left in the normal flow util the condition that rigger its stickiness come to pass, as which point it is removed from the normal flow but it its original space in the normal flow is preserved. it wi act as if absolutlely positioned with respect to its containg block. once the condtions to enforce stickness are no longer met the element is returned to the normal flow  
    
    absolute,  element's box is complete removed from the flow of the document 
    
    fixed, behaves as though it was set to absolute but its containing block is the viewport itself 
    
    inherit, 
    
    apply to all elements 
    
    + the containing block, is the box tht contains another element. the containing block depends entirely on the type of positioning 
    
    for a non-root element whos position value is relative or static, its containing block is formed by the content edge of the nearest block-level, table-cell or inline block acestor box 
    
    for a non root element a position value is absolute its containing block is set to the nearest ancestor 
    
    if there are no ancestors, then the element's containing block is defined to be the initial containing block 
    
    + positioned elements can be positioned outside of the their containing block. this is similar to the floated elements can use negative margins to float outside of their parent's content area 
    
    + offset properties, use four distinct properties to describe the offset of a positioned element's sides with respect to its containing block 
    top, right, bottom, left 
        * values, length | percentage| auto | inherite 
        
        * inital value, auto 
        
        * inherited no 
        
    + width and height 
    
    + limiting width and height, min-max properties 
    min-width min-height, max-width, max-height 
    
    + content overflow and clipping, there are a few alternatives in such situations and css lets you select among them 
    
        * values, visible|hidden|scroll|auto|inherit 
        * initial value, visible 
        * applied to block-level and replaced elements 
        
    + element visibility 
        * values visible|hidden | collapse| inherit 
        * all elements 
        * initial value, visible 
        
- absolute positioning
    + containing blocks and absolutely positioned elements 
    + absolute position block is relative to the container block 
    
    + auto edges, there is a special bhavior that applies when any of the offset properties other than bottom is set to auto 

- position example 
<div style="position: absolute; left: 0; width: 100%; background: #CCC;
    op: 0; height: 5em; bottom: 0; margin: auto 0;">
element D
</div>

- placement on the z-axis, let you alter the way which elements overlap each other. it takes its name from the coordinate system in which side to side is the x-axis and top-to-bottom is the y-axis, the higher z-index is closer to the reader than those with lower z-index 

- fixed positioning can be exploited in a number of interesting ways. this will fix the header and sidebar to the top and side of the viewport, where they will remain regardless of how the document is scrolled. 
div#header {position: fixed; top: 0; bottom: 80%; left: 20%; right: 0;
background: gray;}
div#sidebar {position: fixed; top: 0; bottom: 0; left: 0; right: 80%;
background: silver;}

div#main {position: absolute; top: 20%; bottom: 0; left: 20%; right: 0;
overflow: scroll; background: white;}

- relative positioning 
- sticky positioning 
    + the offsets are used to define a sticky-positioning rectangle with relation to the containing block 

#scrollbox {overflow: scroll; width: 15em; height: 18em;}
#scrollbox h2 {position: sticky; top: 2em; bottom: auto;left: auto; right: auto;}

make it sticky is to scroll that content util the top of the h2 touches the top of the sticky-positioning rectangle 
















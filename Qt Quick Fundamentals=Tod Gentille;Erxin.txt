Qt Quick Fundamentals=Tod Gentille;Erxin

# Overview 
- Qt 
- Pros and Cons 
    + four pillars of Qt Quick 
    nested elements 
    properties 
    binding 
    notifications 
    
    + Pros 
    modular 
    easy 
    rearrangeable 
    quick prototyping 
    extensible 
    
    + cons 
    QML/C++/JavaScript 
    Performance, OpenGL based implementation 
    
- sneak peak at tweets
    + qt quick demo for qml quick search 
    + QML built in widget support flick 
    
- what are the prerequisites to learn Qt Quick?
interest in programming 
an open mind 
a designer's eye 
limited ability to code (html skill will do)
not fear of javascript 
full Qt Quick applications 
read/process user and file data 
consume web APIs 
data model/view/delegate 

    + hello world qt quick application 
import QtQuick 2.2 
import QtQuick.Control 1.2 

ApplicationWindow{
    visible: true
    width: 640
    height: 480
    title: qsTr("hello world")
    
    menuBar: MenuBar {
        Menu{
            title: qsTr("File")
            MenuItem{
                text: qsTr("Exit")
                onTriggered: Qt.quit();
            }
        }
    }
    Text {
        text: qsTr("Hello World")
        anchors.centerIn:parent
    }
}

- course outline 
    + QML syntax 
    + QML visual types 
    + JavaScript 
    + User input 
    + Positioning 
    + Transforms, transitions and animations 
    + Models, views and delegates 
    xpath and xquery 
    
    + dialogs and more 
    
    
# QML Syntax 
- qml syntax types, attributes and the qt global object 
    + overview 
        * basic types 
        * qml object 
        * nesting 
        * attributes 
        * importing 
        
    + basic language types 
    c++ types 
    basic tyes from qml module 
    basic types no import required 
    
    + basic types 
    int 
    bool 
    real 
    double 
    string 
    url, can't direct comparable to string 
    list 
    enumeration 
    var, generic property type that can refer to any data type 

    + qt quick imported types 
    color 
    font 
    matrix 4*4 
    quaternion 
    vector2d 
    vector3d 
    date 
    point 
    size 
    rect 
    
    + colr can be define names or values 
    SVG color names 
    ARGB, #FF112233 
    RGB, #112233 
    Qt.Lighter 
    Qt.tint, Qt.hsla 

    + global objects 
    Qt.quit() 
    Qt 
    
    QML console.log 
        * provide by Qt required prefix 
    .qsTr 
    .font 
    .lighter 
    .darker 
    .resolveUrl 
    .zie 
    quit 
    
        * provide by QML don't require prefix 
    XMLHttpRequest 
    offline storage database apis 
    logging 

    + font 
    + date 
    specify as yyyy-mm-dd string 
    format with Qt.formatDate() 
    Qdate <-> date for c++ programmer 

- QML sytax object and component creation 
    + QML object declaration 
    name
    delimiters 
    id attribute 
    property 
    
    //define each property in each line 
    Item{
        id:myItemId 
        width:640
    }
    
    //define properties in a single line 
    Item{id:myItemId; width:640}

    + qml object attributes 
    id 
    properties 
    signals 
    singal handlers 
    methods 
    attached properties 
    
    each qml object as a instance of class
    
    + id attribute 
    optional but recommanded 
    
    id name should follow the titleCase naming convention 
    
    a lowest level item in a file named root. the qt document has this to say:"be advised to use consistent ids for all root items in your project, for example just root. this helps you keep track of items used and avoid side effects"
    
        * example 
        Text{
            id: textId 
            text: "here is some simple text"
        }
        
        Text {
            id : nextTextId 
            text: textId.text 
        }
    
        we have defined two object, first id is textId and create text property with a string. the second is binded to the previous textId
    
    + nesting elements 
    Item {
        id:myItemId 
        
        Rectangle{
            color:"teal"
        }
    }
    
    items at overlapping location have z-ordering determing implicity by where thy appear in a qml file 
    
    + custom properties 
        * proeprty of a specific type 
        property string firstString: "this is a custom property "
    
        * variant properties 
        property var largeFont: 48 
        
        most commonly var property is used to reference native Qt objects that don't correspond to any of our basic types 

        declaring a custom property implicity creates a singal for that property. it gets raised when the value changes also an signal handler gets created 
        the signal handler is named via a convention. it's called onFirstStringChanged 
        on[PropertyName]Changed, the first letter is capitalized 
        on[_PropertyName]Changed, if the first letter is a underscore then the next character still will be captalized 

        * alias properties, it holds a reference to another property. it does not allocate a new unique storage space for the property 
        property alias myTextField: textId.text 

        * property scope 
        later loaded docs can look in earlier ones, but it's a bad idea 
        the alias property can forward a property to an outer scope, much better idea 

    + grouped properties 
    //using inline group notation 
    Text{
        font {pixelSize: 0; italic:true}
    }
    
    //Using do notation 
    Text{
        font.pixelSize :largeFont
        font.italic: true 
    }
    
    //using block group notation 
    Text{
        font{
            pixelSize: 0 
            italic:true 
        }
    }

    + building components, two way of component building 
        * build up a tree of qml objects wth nesting and put them in a file. then it become a reusable component 
        
        * build component inline using the component keyword. it's time to switch over to qt creator and take a look at all of these features 

- demo expanding hello world, open project in qt creator 
//main.qml 

import QtQuick 2.2 
import QtQuick.Controls 1.1 

ApplicationWindow {
    visible: true 
    width: 640 
    height: 480 
    title: qsTr("hello world")
    
    property date myDate: "2014-05-30"
    property string myString "http://syncor.blogspot.com"
    property url myUrl: "http://syncor.blogsport.com"
    
    Text {
        text:Qt.formatDate(myDate, "yyyy-MM-dd")
        font.pixelSize:16 
        color: "teal"
        onTextChanged:console.log(myString === myUrl)
    }
    
    Rectangle{
        width: textId.implicitWidth + 10 
        height: textId.implicitWidth + 5 
        Text {
            id: textId 
            text: qsTr("welcome to qt quick foundation")
            anchros.centerIn:parent 
            font.pixelSize: 24 
        }
    }
}

- creating a vertical field component 
Column{
    Label{
        id:labelId 
        text: "some text"
    }
    TextField{
        maximumLength: 100 
    }
}

    + right click to add a new file
    + name the file start with a capital letter 
    
    import QtQuick 2.2 
    import QtQuick.Controls 1.1 
    
    Column{
    id:rootId 
    property alias vFieldLabelId:labelId 
    property alias vFieldTextId: textFieldId
    
    Label{
        id:labelId 
        text: "some text"
    }
    TextField{
        maximumLength: 100 
    }
    
    + use the new created component from the main.qml, reference the component by the file name without the qml extension 
    VerticalField{
        vFieldLabelId.text: "a new label "
    }
    
- solving a common error. expect token "}"
    + the preivous error application may still in process block us debugging 
    + use the application panel to kill the preivous process or use task manager 
    
    
# QML Visual Types 
- overview 
- the item object 
	+ inheritance
	visual types -> Item -> QtObject 

	+ item is used to group items together it doesn't be displayed  
	+ all the visual types 
	+ geometry 
	x 
	y 
	width 
	height
	z stacking order 
	
	avoid setting geometry directly 

	+ layout 
	anchors 
	margins 

	+ key handling 
	Keys, Keys.onPressed 
	KeyNavgitation move between focusable items 
	focus 	true/false 

	Qt also support focus scope 

	+ Transformations 
	transform, Rotation, Scale and Translate for 3D 
	transformOrigin, the origin point for scaling and rotation 
	rotation, rotation in degrees (no z-axis)
	scale reduce (>0 and <1) enlarge(>1), mirror(<0)
	
	+ visual 
	opacity, transparent(0), opaque(1)
	visible, true or false 
	clip, true or false 
	smooth, true or false(leave it true). true will use linear interpolation
and false use nearest neighbor 

	+ States are very useful and easily abused you can associate a list of
states with an object and each state. 
	each state can be defined multiple property changes. it also can be used
to run scripts, modify anchors, re-parent an item, or override a signal
handler 
	+ there are lots of Visual Types, we will only cover parts of them in this
lession 
	AnimatedSprite 
	BorderImage	
	Canvas
	Column
	Flickable 
	Flipable 
	Flow 
	FocusScope 
	Grid 
	Image 
	Loader 
	MouseArea
	MultiPointTouchArea 
	ParticlePainter 
	PathView 
	PinchArea
	Rectangle 
	Repeater 
	Row 
	ShaderEffect 
	ShaderEffectSource 
	SignalSpy
	SpriteSequence
	TestCase 
	Text 
	TextEdit 
	TextInput

- the rectangle object 
boarder 
color 
radius 
gradient 

	+ create a new project in qt creater 
	+ edit the qml 
Item{
	anchros.centerIn:parent
	Rectangle{
		id:firstRectId
		width:50
		height:50
		color:"#ff000"
	}
}

	+ visible property always win thanthe opacity property 
- the text object 
color 
font 
style
Unicode 
<b>html</b> html support in text area 

	+ create a new project 
	+ add text object 
Text{
	text:qsTr("string...\u2345")
	elide:Text.ElideRight
	width:100
	font{
		family:"arial narrow"
		italic: true 
		pointSize:24 
	}
	color:"#A00"
	textFormat:Text.StyledText
	style:Text.Outline 
} 

the property value also could call function, such as formatString.arg(parameter)
- the image object
	+ Source 
	Resource
	File
	Internet 

	+ Display 
	mirror 
	fillMode 
	alignment 

	+ Performance 
	asynchronous 
	cache 
	smooth 
	
	+ example 
		* create a new project 
		* follow the wizard and click run first will create a runtime folder for the project 
		* copy the images into the source folder 
		* right click the source folder from the Resource folder and add the images 
		* add Image item into the ApplicationWindow 
		Image {
			source: "BlueBullet.png"
		}

		we could use the relative path to specify the image path. 

		we could also use the resource prefix wehn the image is
already added to the resource folder 
		source: "qrc:BlueBullet.png"

		specify use the file system path 
		source: "file:BlueBullet.png"

		the source could also use a http path. which means it accept
uri format path 

- boarderImage, AnimationImage and Screen. 
we could splite the images into 9 grid. the corner will not be resized when
create boarder 

we add BorderImage item 
BorderImage{
	id:PicFrameId
	source: "Frame.png"
	horizontalTileMode: BorderImage.Stretch
	verticalTitleMode: BorderImage.Strech
	boarder{
		top:120
		left:120
		bottom:395
		right:275
	}
}

	+ the AnimationImage support add gif type image as the source 
	AnimatedImage{
		id: gifId
		source: "Upload.gif"
		x: (currentFrame/frameCount) * width
		y: 50
	}
	The AnimatedImage also support reference the currentFrame and count
property of the gif image 

	+ the Qt application also could aware of the destop avaliable hight
to support hanlde multple browsers 


# JavaScript aka ECMAScript 
- overview 
explain the javascript and the qml, it is similar to html and javascript 

- major differences 
No DOM 
Qt Global Object, Check Qt Type Reference from the document 
qsTr, function is avaliable 
.arg modification to Strings 
console/print, is avaliable 
XMLHttpRequest, is avaliable 

- subtle differences 
QML is more strict, no global namespace pollution which means you can't pollut the JS global object with your own members 

the "this" keyword will not always be defined 

prefer explicit ids for QML instead of use this keyword 

- where could use JavaScript
Property bindings 
Signal hanlders 
Standalone custom methods 
Imported from .js files 

- JavaScript property assignment 

    + ternary operator 
    color: width < 200? "red":"blue"
    
    color:if(width<200) "red";else "blue"
    
    for multiple lines of javascript code could use curly braces 
    color:{
        if(width<200)"red";
        else "blue";
    }
    
    standalone function 
    
    Rectangle{
        id:rectId 
        function setColor()
        {
            if(width<200) return "red"
            else return "blue"
        }
        color: rectId.setColor();
    }
    
- importing javascript resource files into qml 

    + in qml main 
ApplicationWindow{
    visible:true 
    width:640 
    height:480
    title:qsTr("script demo")
    function buttonClicked(){
        print("hello from qml");
    }
    
    Button{
        id:btnId 
        
    }
}

    + create our own JavaScript resource file 
        * new file 
        * Qt section from the template 
        * choose JS file 
        * give it a new and follow the wizard 
        * add our JS logic 
        * import the JS file from qml 
        
        import "javascript-file-name" as AliasName
        
        ApplicationWindow{
            ...
            
            Button{
                Text: AliasName.func();
            }
        }
        
        * import a JS file from the other JS file 
        .import "javascript-file-name" as AliasName
        
        //other JS logic 
        
        * if we use the Qt.include("javascript-file-name"); for javascript import will also import the namespace into the current file 
        
        //JS 1 
        function foo1(){
        }
        
        //JS 2 
        .import "JS1" as JS1
        function foo2(){
        }
        
        // QML/JS 
        import "JS2" as JS2 
        JS2.foo1();     // will get error 
        
        if we use in JS2 then JS2.foo1();  will not get error 
        Qt.include("JS1"); 
        
- function scope 
    + we could use unqulified references when the function is at the same scope as well or if the function is at the root of the element scope  
    
    other wise we need to use the parent keyword to do relative reference or use id reference 
    
    id reference will always works 
    
- Qt binding 
    + bind javascript function to a property 
        * create a custom property 
        ApplicationWindow{
            ...
            property double phi: 1.618
            
            Button{
                    id:setWidthId 
                    height:50
                    width: height * phi
                    onClicked:width=height*phi //this will make the width bind to a result of the expression which make the property width lost the automatic update behavior 
                    
                    //to bypass this issue we should use Qt.binding 
                    onClicked: Qt.binding(function(){
                        return width = height * phi;
                    })
            }
            
            Button{
                onClicked:setWidthId.height *= 1.2 
                anchors.top:setWidthId.bottom 
                anchors.topMargin:10
            }
        }
        
- Qt creator content assitent is not always reliable, the intelligent is not always right 
- summary 

# User input
- overview 
    + MouseArea 
    + QtQuick.Controls x.x 
    advanced 
    basic 
    
    QtQuick for more advance 
    
    the prebacked controls are easy to use 
    
    keys and keyNavigation 
    
    TextInput for single line text entry 
    
    TextEdit for mutliple line and also support rich text entry. TextEdit not support scrollbar 
    TextArea support for scroll bar 
    Int Validator 
    Double Validator 
    RegExp Validator 
    Focus Scope, when you want to create user controls 
    
    + Gestures 
    Flickable 
    PinchArea 
    ...
    
    + Events 
    KeyEvent 
    DragEvents 
    WheelEvent 
    MouseEvent 
    TouchPoint 
    PinchEvent 
    
- MouseArea Button input 
Rectangle{
    ...
    MouseArea{
        anchors.fill: parent //we need to set the bounds of the mouse area 
        onClicked:parent.x == 0? parent.x = 50: parent.x = 0
    }
}

we could use the width or height property of MouseArea to specify a range such as root.width 

when a item moved which coordinate system will also be moved. so the item.x item.y will be changed. So we could make the MouseArea at the same level of the Rectangle then reference the x, y coordinate with the id of the rectangle to prevent the mouse are moved with the rectangle 

the mouse area also have hoverEnable property the onHoveredChanged handler will be called 
MouseArea{
    hoverEnable:true 
    onHoveredChanged: containsMouse ? paranet.color = "teal": parent.color="cyan"
}
- MouseArea Drag and Drop 
ApplicationWindow{
    ...
    function setColorByX(x){
        var MAX = 256
        var exp = Math.floor(x/MAX)
        var operand = x % MAX
        var result = "#" + (operand) * mult + 0xaa
        return result
        ...
    }
    
    Rectangle{
        id: containerId 
        width: 600; height: 200
        Rectangle{
            id: dragRectId 
            width: 50; height: width 
            color: setColorByX(x)
            MouseArea 
            {
                anchors.fill: parent 
                drag.target: dragRectId 
                drag.anxis: Drag.XA
            }
        }
    }
}

- keyboard attached property 
Rectangle{
    MouseArea{

    }
    Keys.onDigit0Pressed: radius = 0 
    Keys.onDigit1Pressed: radius = 25 
    focus: true 
    Keys.onPressed: handler 
}

we could search the onPressed key handler to the non built-in handlers. Check the properties of KeyEvent from the document which passed in the onPressed
Qt.Key_xxx is the value of built-in key code 

we could set the event.accepted property to false to let other handlers to handle the event 

event.modifiers property could be used to check control keys. Qt.ControlModifier 

- KeyNavgitation Attached Property 
KeyNavigation.down: simpleDemoId 

KeyNavgitation.up: dragRectId 

we could use these properties to handle the up, down, left, right navigation keys 

KeyNavgitation.priority: KeyNavgitation.BeforeItem
this property is very useful when you create a textArea and if you want the tab key navigate to another item. 

- Text Entry  
    + TextInput 
    TextInput {
        id: textInputId 
        text: "string"
    }
    
    property int textMargin: 5 
    
    Ractangle {
        id: textInputRectId 
        color: "honeydew"
        width: 100; height: textInputId 
        radius: textMargin 
        border.width: 2
        border.color: "olivedrab"
        
        TextInput{
            id: textInputId 
            ...
        }
        
        TextEdit{
            id:textEdit.Wrap 
            ...
            text: "string s"
        }
    }
    we could enable the wrapping for TextEdit item 
    the textFormat:textEdit.RichText could let the text edit item support html in the text property 
    
    we could use a Flickable item to hold the textEdit item to let the user drag the content up and down 
    
- Validators 
TextInput{
    ...
    text:"1234"
    validator:TextInput.IntValidator{bottom:0; top: 2000}
}

the other values for the text input will not be allowed. 

    + other validators 
    DoubleValidator 
    RegExpValidator 
    
    
- Focus Scope, FocusScopeDemo. the code is comprised of an outer rectangle object and it has a setText function 

Rectangle{
    ... 
    Text{
        id: widgetLableId 
        anchros.fill: parent 
        font.pixelSize: 16 
        horizontalAlignment: Text.AlignCenter 
        verticalAlignment: Text.AlignVCenter
    }
}

    + we could use Column item to position the items 
    + FocusScope item doesn't have explicit height and width property we could custom property 
    
    when you have multiple widgets and imported them input one page. We need the FocusScope to help us set the focus between the widgets, otherwise the focus may always be set on the first widget 

    use FocusScope to wrap the user content of the widget  
    
    FocusScope{
        id: myWidgetFocusId 
        property alias color: myWidgetId.color 
        width: myWidgetId.width 
        height: myWidgetId.height 
        Rectangle{
        
        
        }
    }
    
    + the qml make system may have problems when you changed some files and it will not build all the 
- Qt Quick Controls Import, switch to q creator and select the index button 

search the qt quick controls is the gallary to start 

we could start the tab label controls 

we could use the find symbols from the context menu in qml 

the qml could be splits into Views, Models and Styles 

# Positioning 

# Transforms, transitions and animations 

# Models views and delegates 

# Dialogs and More 









    
    
    
    
    


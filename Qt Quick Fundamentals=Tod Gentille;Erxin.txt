Qt Quick Fundamentals=Tod Gentille;Erxin

# Overview 
- Qt 
- Pros and Cons 
    + four pillars of Qt Quick 
    nested elements 
    properties 
    binding 
    notifications 
    
    + Pros 
    modular 
    easy 
    rearrangeable 
    quick prototyping 
    extensible 
    
    + cons 
    QML/C++/JavaScript 
    Performance, OpenGL based implementation 
    
- sneak peak at tweets
    + qt quick demo for qml quick search 
    + QML built in widget support flick 
    
- what are the prerequisites to learn Qt Quick?
interest in programming 
an open mind 
a designer's eye 
limited ability to code (html skill will do)
not fear of javascript 
full Qt Quick applications 
read/process user and file data 
consume web APIs 
data model/view/delegate 

    + hello world qt quick application 
import QtQuick 2.2 
import QtQuick.Control 1.2 

ApplicationWindow{
    visible: true
    width: 640
    height: 480
    title: qsTr("hello world")
    
    menuBar: MenuBar {
        Menu{
            title: qsTr("File")
            MenuItem{
                text: qsTr("Exit")
                onTriggered: Qt.quit();
            }
        }
    }
    Text {
        text: qsTr("Hello World")
        anchors.centerIn:parent
    }
}

- course outline 
    + QML syntax 
    + QML visual types 
    + JavaScript 
    + User input 
    + Positioning 
    + Transforms, transitions and animations 
    + Models, views and delegates 
    xpath and xquery 
    
    + dialogs and more 
    
    
# QML Syntax 
- qml syntax types, attributes and the qt global object 
    + overview 
        * basic types 
        * qml object 
        * nesting 
        * attributes 
        * importing 
        
    + basic language types 
    c++ types 
    basic tyes from qml module 
    basic types no import required 
    
    + basic types 
    int 
    bool 
    real 
    double 
    string 
    url, can't direct comparable to string 
    list 
    enumeration 
    var, generic property type that can refer to any data type 

    + qt quick imported types 
    color 
    font 
    matrix 4*4 
    quaternion 
    vector2d 
    vector3d 
    date 
    point 
    size 
    rect 
    
    + colr can be define names or values 
    SVG color names 
    ARGB, #FF112233 
    RGB, #112233 
    Qt.Lighter 
    Qt.tint, Qt.hsla 

    + global objects 
    Qt.quit() 
    Qt 
    
    QML console.log 
        * provide by Qt required prefix 
    .qsTr 
    .font 
    .lighter 
    .darker 
    .resolveUrl 
    .zie 
    quit 
    
        * provide by QML don't require prefix 
    XMLHttpRequest 
    offline storage database apis 
    logging 

    + font 
    + date 
    specify as yyyy-mm-dd string 
    format with Qt.formatDate() 
    Qdate <-> date for c++ programmer 

- QML sytax object and component creation 
    + QML object declaration 
    name
    delimiters 
    id attribute 
    property 
    
    //define each property in each line 
    Item{
        id:myItemId 
        width:640
    }
    
    //define properties in a single line 
    Item{id:myItemId; width:640}

    + qml object attributes 
    id 
    properties 
    signals 
    singal handlers 
    methods 
    attached properties 
    
    each qml object as a instance of class
    
    + id attribute 
    optional but recommanded 
    
    id name should follow the titleCase naming convention 
    
    a lowest level item in a file named root. the qt document has this to say:"be advised to use consistent ids for all root items in your project, for example just root. this helps you keep track of items used and avoid side effects"
    
        * example 
        Text{
            id: textId 
            text: "here is some simple text"
        }
        
        Text {
            id : nextTextId 
            text: textId.text 
        }
    
        we have defined two object, first id is textId and create text property with a string. the second is binded to the previous textId
    
    + nesting elements 
    Item {
        id:myItemId 
        
        Rectangle{
            color:"teal"
        }
    }
    
    items at overlapping location have z-ordering determing implicity by where thy appear in a qml file 
    
    + custom properties 
        * proeprty of a specific type 
        property string firstString: "this is a custom property "
    
        * variant properties 
        property var largeFont: 48 
        
        most commonly var property is used to reference native Qt objects that don't correspond to any of our basic types 

        declaring a custom property implicity creates a singal for that property. it gets raised when the value changes also an signal handler gets created 
        the signal handler is named via a convention. it's called onFirstStringChanged 
        on[PropertyName]Changed, the first letter is capitalized 
        on[_PropertyName]Changed, if the first letter is a underscore then the next character still will be captalized 

        * alias properties, it holds a reference to another property. it does not allocate a new unique storage space for the property 
        property alias myTextField: textId.text 

        * property scope 
        later loaded docs can look in earlier ones, but it's a bad idea 
        the alias property can forward a property to an outer scope, much better idea 

    + grouped properties 
    //using inline group notation 
    Text{
        font {pixelSize: 0; italic:true}
    }
    
    //Using do notation 
    Text{
        font.pixelSize :largeFont
        font.italic: true 
    }
    
    //using block group notation 
    Text{
        font{
            pixelSize: 0 
            italic:true 
        }
    }

    + building components, two way of component building 
        * build up a tree of qml objects wth nesting and put them in a file. then it become a reusable component 
        
        * build component inline using the component keyword. it's time to switch over to qt creator and take a look at all of these features 

- demo expanding hello world, open project in qt creator 
//main.qml 

import QtQuick 2.2 
import QtQuick.Controls 1.1 

ApplicationWindow {
    visible: true 
    width: 640 
    height: 480 
    title: qsTr("hello world")
    
    property date myDate: "2014-05-30"
    property string myString "http://syncor.blogspot.com"
    property url myUrl: "http://syncor.blogsport.com"
    
    Text {
        text:Qt.formatDate(myDate, "yyyy-MM-dd")
        font.pixelSize:16 
        color: "teal"
        onTextChanged:console.log(myString === myUrl)
    }
    
    Rectangle{
        width: textId.implicitWidth + 10 
        height: textId.implicitWidth + 5 
        Text {
            id: textId 
            text: qsTr("welcome to qt quick foundation")
            anchros.centerIn:parent 
            font.pixelSize: 24 
        }
    }
}

- creating a vertical field component 
Column{
    Label{
        id:labelId 
        text: "some text"
    }
    TextField{
        maximumLength: 100 
    }
}

    + right click to add a new file
    + name the file start with a capital letter 
    
    import QtQuick 2.2 
    import QtQuick.Controls 1.1 
    
    Column{
    id:rootId 
    property alias vFieldLabelId:labelId 
    property alias vFieldTextId: textFieldId
    
    Label{
        id:labelId 
        text: "some text"
    }
    TextField{
        maximumLength: 100 
    }
    
    + use the new created component from the main.qml, reference the component by the file name without the qml extension 
    VerticalField{
        vFieldLabelId.text: "a new label "
    }
    
- solving a common error. expect token "}"
    + the preivous error application may still in process block us debugging 
    + use the application panel to kill the preivous process or use task manager 
    
    
# QML Visual Types 
- overview 
- the item object 
- the rectangle object 
- the text object 
- the image object 
- boarderImage, AnimationImage and Screen 

# JavaScript aka ECMAScript 

# User input 

# Positioning 

# Transforms, transitions and animations 

# Models views and delegates 

# Dialogs and More 









    
    
    
    
    


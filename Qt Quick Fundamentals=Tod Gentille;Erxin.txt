Qt Quick Fundamentals=Tod Gentille;Erxin

# Overview 
- Qt 
- Pros and Cons 
    + four pillars of Qt Quick 
    nested elements 
    properties 
    binding 
    notifications 
    
    + Pros 
    modular 
    easy 
    rearrangeable 
    quick prototyping 
    extensible 
    
    + cons 
    QML/C++/JavaScript 
    Performance, OpenGL based implementation 
    
- sneak peak at tweets
    + qt quick demo for qml quick search 
    + QML built in widget support flick 
    
- what are the prerequisites to learn Qt Quick?
interest in programming 
an open mind 
a designer's eye 
limited ability to code (html skill will do)
not fear of javascript 
full Qt Quick applications 
read/process user and file data 
consume web APIs 
data model/view/delegate 

    + hello world qt quick application 
import QtQuick 2.2 
import QtQuick.Control 1.2 

ApplicationWindow{
    visible: true
    width: 640
    height: 480
    title: qsTr("hello world")
    
    menuBar: MenuBar {
        Menu{
            title: qsTr("File")
            MenuItem{
                text: qsTr("Exit")
                onTriggered: Qt.quit();
            }
        }
    }
    Text {
        text: qsTr("Hello World")
        anchors.centerIn:parent
    }
}

- course outline 
    + QML syntax 
    + QML visual types 
    + JavaScript 
    + User input 
    + Positioning 
    + Transforms, transitions and animations 
    + Models, views and delegates 
    xpath and xquery 
    
    + dialogs and more 
    
    
# QML Syntax 
- qml syntax types, attributes and the qt global object 
    + overview 
        * basic types 
        * qml object 
        * nesting 
        * attributes 
        * importing 
        
    + basic language types 
    c++ types 
    basic tyes from qml module 
    basic types no import required 
    
    + basic types 
    int 
    bool 
    real 
    double 
    string 
    url, can't direct comparable to string 
    list 
    enumeration 
    var, generic property type that can refer to any data type 

    + qt quick imported types 
    color 
    font 
    matrix 4*4 
    quaternion 
    vector2d 
    vector3d 
    date 
    point 
    size 
    rect 
    
    + colr can be define names or values 
    SVG color names 
    ARGB, #FF112233 
    RGB, #112233 
    Qt.Lighter 
    Qt.tint, Qt.hsla 

    + global objects 
    Qt.quit() 
    Qt 
    
    QML console.log 
        * provide by Qt required prefix 
    .qsTr 
    .font 
    .lighter 
    .darker 
    .resolveUrl 
    .zie 
    quit 
    
        * provide by QML don't require prefix 
    XMLHttpRequest 
    offline storage database apis 
    logging 

    + font 
    + date 
    specify as yyyy-mm-dd string 
    format with Qt.formatDate() 
    Qdate <-> date for c++ programmer 

- QML sytax object and component creation 
    + QML object declaration 
    name
    delimiters 
    id attribute 
    property 
    
    //define each property in each line 
    Item{
        id:myItemId 
        width:640
    }
    
    //define properties in a single line 
    Item{id:myItemId; width:640}

    + qml object attributes 
    id 
    properties 
    signals 
    singal handlers 
    methods 
    attached properties 
    
    each qml object as a instance of class
    
    + id attribute 
    optional but recommanded 
    
    id name should follow the titleCase naming convention 
    
    a lowest level item in a file named root. the qt document has this to say:"be advised to use consistent ids for all root items in your project, for example just root. this helps you keep track of items used and avoid side effects"
    
        * example 
        Text{
            id: textId 
            text: "here is some simple text"
        }
        
        Text {
            id : nextTextId 
            text: textId.text 
        }
    
        we have defined two object, first id is textId and create text property with a string. the second is binded to the previous textId
    
    + nesting elements 
    Item {
        id:myItemId 
        
        Rectangle{
            color:"teal"
        }
    }
    
    items at overlapping location have z-ordering determing implicity by where thy appear in a qml file 
    
    + custom properties 
        * proeprty of a specific type 
        property string firstString: "this is a custom property "
    
        * variant properties 
        property var largeFont: 48 
        
        most commonly var property is used to reference native Qt objects that don't correspond to any of our basic types 

        declaring a custom property implicity creates a singal for that property. it gets raised when the value changes also an signal handler gets created 
        the signal handler is named via a convention. it's called onFirstStringChanged 
        on[PropertyName]Changed, the first letter is capitalized 
        on[_PropertyName]Changed, if the first letter is a underscore then the next character still will be captalized 

        * alias properties, it holds a reference to another property. it does not allocate a new unique storage space for the property 
        property alias myTextField: textId.text 

        * property scope 
        later loaded docs can look in earlier ones, but it's a bad idea 
        the alias property can forward a property to an outer scope, much better idea 

    + grouped properties 
    //using inline group notation 
    Text{
        font {pixelSize: 0; italic:true}
    }
    
    //Using do notation 
    Text{
        font.pixelSize :largeFont
        font.italic: true 
    }
    
    //using block group notation 
    Text{
        font{
            pixelSize: 0 
            italic:true 
        }
    }

    + building components, two way of component building 
        * build up a tree of qml objects wth nesting and put them in a file. then it become a reusable component 
        
        * build component inline using the component keyword. it's time to switch over to qt creator and take a look at all of these features 

- demo expanding hello world, open project in qt creator 
//main.qml 

import QtQuick 2.2 
import QtQuick.Controls 1.1 

ApplicationWindow {
    visible: true 
    width: 640 
    height: 480 
    title: qsTr("hello world")
    
    property date myDate: "2014-05-30"
    property string myString "http://syncor.blogspot.com"
    property url myUrl: "http://syncor.blogsport.com"
    
    Text {
        text:Qt.formatDate(myDate, "yyyy-MM-dd")
        font.pixelSize:16 
        color: "teal"
        onTextChanged:console.log(myString === myUrl)
    }
    
    Rectangle{
        width: textId.implicitWidth + 10 
        height: textId.implicitWidth + 5 
        Text {
            id: textId 
            text: qsTr("welcome to qt quick foundation")
            anchros.centerIn:parent 
            font.pixelSize: 24 
        }
    }
}

- creating a vertical field component 
Column{
    Label{
        id:labelId 
        text: "some text"
    }
    TextField{
        maximumLength: 100 
    }
}

    + right click to add a new file
    + name the file start with a capital letter 
    
    import QtQuick 2.2 
    import QtQuick.Controls 1.1 
    
    Column{
    id:rootId 
    property alias vFieldLabelId:labelId 
    property alias vFieldTextId: textFieldId
    
    Label{
        id:labelId 
        text: "some text"
    }
    TextField{
        maximumLength: 100 
    }
    
    + use the new created component from the main.qml, reference the component by the file name without the qml extension 
    VerticalField{
        vFieldLabelId.text: "a new label "
    }
    
- solving a common error. expect token "}"
    + the preivous error application may still in process block us debugging 
    + use the application panel to kill the preivous process or use task manager 
    
    
# QML Visual Types 
- overview 
- the item object 
	+ inheritance
	visual types -> Item -> QtObject 

	+ item is used to group items together it doesn't be displayed  
	+ all the visual types 
	+ geometry 
	x 
	y 
	width 
	height
	z stacking order 
	
	avoid setting geometry directly 

	+ layout 
	anchors 
	margins 

	+ key handling 
	Keys, Keys.onPressed 
	KeyNavgitation move between focusable items 
	focus 	true/false 

	Qt also support focus scope 

	+ Transformations 
	transform, Rotation, Scale and Translate for 3D 
	transformOrigin, the origin point for scaling and rotation 
	rotation, rotation in degrees (no z-axis)
	scale reduce (>0 and <1) enlarge(>1), mirror(<0)
	
	+ visual 
	opacity, transparent(0), opaque(1)
	visible, true or false 
	clip, true or false 
	smooth, true or false(leave it true). true will use linear interpolation
and false use nearest neighbor 

	+ States are very useful and easily abused you can associate a list of
states with an object and each state. 
	each state can be defined multiple property changes. it also can be used
to run scripts, modify anchors, re-parent an item, or override a signal
handler 
	+ there are lots of Visual Types, we will only cover parts of them in this
lession 
	AnimatedSprite 
	BorderImage	
	Canvas
	Column
	Flickable 
	Flipable 
	Flow 
	FocusScope 
	Grid 
	Image 
	Loader 
	MouseArea
	MultiPointTouchArea 
	ParticlePainter 
	PathView 
	PinchArea
	Rectangle 
	Repeater 
	Row 
	ShaderEffect 
	ShaderEffectSource 
	SignalSpy
	SpriteSequence
	TestCase 
	Text 
	TextEdit 
	TextInput

- the rectangle object 
boarder 
color 
radius 
gradient 

	+ create a new project in qt creater 
	+ edit the qml 
Item{
	anchros.centerIn:parent
	Rectangle{
		id:firstRectId
		width:50
		height:50
		color:"#ff000"
	}
}

	+ visible property always win thanthe opacity property 
- the text object 
color 
font 
style
Unicode 
<b>html</b> html support in text area 

	+ create a new project 
	+ add text object 
Text{
	text:qsTr("string...\u2345")
	elide:Text.ElideRight
	width:100
	font{
		family:"arial narrow"
		italic: true 
		pointSize:24 
	}
	color:"#A00"
	textFormat:Text.StyledText
	style:Text.Outline 
} 

the property value also could call function, such as formatString.arg(parameter)
- the image object
	+ Source 
	Resource
	File
	Internet 

	+ Display 
	mirror 
	fillMode 
	alignment 

	+ Performance 
	asynchronous 
	cache 
	smooth 
	
	+ example 
		* create a new project 
		* follow the wizard and click run first will create a runtime folder for the project 
		* copy the images into the source folder 
		* right click the source folder from the Resource folder and add the images 
		* add Image item into the ApplicationWindow 
		Image {
			source: "BlueBullet.png"
		}

		we could use the relative path to specify the image path. 

		we could also use the resource prefix wehn the image is
already added to the resource folder 
		source: "qrc:BlueBullet.png"

		specify use the file system path 
		source: "file:BlueBullet.png"

		the source could also use a http path. which means it accept
uri format path 

- boarderImage, AnimationImage and Screen. 
we could splite the images into 9 grid. the corner will not be resized when
create boarder 

we add BorderImage item 
BorderImage{
	id:PicFrameId
	source: "Frame.png"
	horizontalTileMode: BorderImage.Stretch
	verticalTitleMode: BorderImage.Strech
	boarder{
		top:120
		left:120
		bottom:395
		right:275
	}
}

	+ the AnimationImage support add gif type image as the source 
	AnimatedImage{
		id: gifId
		source: "Upload.gif"
		x: (currentFrame/frameCount) * width
		y: 50
	}
	The AnimatedImage also support reference the currentFrame and count
property of the gif image 

	+ the Qt application also could aware of the destop avaliable hight
to support hanlde multple browsers 


# JavaScript aka ECMAScript 
- overview 
explain the javascript and the qml, it is similar to html and javascript 

- major differences 
No DOM 
Qt Global Object, Check Qt Type Reference from the document 
qsTr, function is avaliable 
.arg modification to Strings 
console/print, is avaliable 
XMLHttpRequest, is avaliable 

- subtle differences 
QML is more strict, no global namespace pollution which means you can't pollut the JS global object with your own members 

the "this" keyword will not always be defined 

prefer explicit ids for QML instead of use this keyword 

- where could use JavaScript
Property bindings 
Signal hanlders 
Standalone custom methods 
Imported from .js files 

- JavaScript property assignment 

    + ternary operator 
    color: width < 200? "red":"blue"
    
    color:if(width<200) "red";else "blue"
    
    for multiple lines of javascript code could use curly braces 
    color:{
        if(width<200)"red";
        else "blue";
    }
    
    standalone function 
    
    Rectangle{
        id:rectId 
        function setColor()
        {
            if(width<200) return "red"
            else return "blue"
        }
        color: rectId.setColor();
    }
    
- importing javascript resource files into qml 

    + in qml main 
ApplicationWindow{
    visible:true 
    width:640 
    height:480
    title:qsTr("script demo")
    function buttonClicked(){
        print("hello from qml");
    }
    
    Button{
        id:btnId 
        
    }
}

    + create our own JavaScript resource file 
        * new file 
        * Qt section from the template 
        * choose JS file 
        * give it a new and follow the wizard 
        * add our JS logic 
        * import the JS file from qml 
        
        import "javascript-file-name" as AliasName
        
        ApplicationWindow{
            ...
            
            Button{
                Text: AliasName.func();
            }
        }
        
        * import a JS file from the other JS file 
        .import "javascript-file-name" as AliasName
        
        //other JS logic 
        
        * if we use the Qt.include("javascript-file-name"); for javascript import will also import the namespace into the current file 
        
        //JS 1 
        function foo1(){
        }
        
        //JS 2 
        .import "JS1" as JS1
        function foo2(){
        }
        
        // QML/JS 
        import "JS2" as JS2 
        JS2.foo1();     // will get error 
        
        if we use in JS2 then JS2.foo1();  will not get error 
        Qt.include("JS1"); 
        
- function scope 
    + we could use unqulified references when the function is at the same scope as well or if the function is at the root of the element scope  
    
    other wise we need to use the parent keyword to do relative reference or use id reference 
    
    id reference will always works 
    
- Qt binding 
    + bind javascript function to a property 
        * create a custom property 
        ApplicationWindow{
            ...
            property double phi: 1.618
            
            Button{
                    id:setWidthId 
                    height:50
                    width: height * phi
                    onClicked:width=height*phi //this will make the width bind to a result of the expression which make the property width lost the automatic update behavior 
                    
                    //to bypass this issue we should use Qt.binding 
                    onClicked: Qt.binding(function(){
                        return width = height * phi;
                    })
            }
            
            Button{
                onClicked:setWidthId.height *= 1.2 
                anchors.top:setWidthId.bottom 
                anchors.topMargin:10
            }
        }
        
- Qt creator content assitent is not always reliable, the intelligent is not always right 
- summary 

# User input
- overview 
    + MouseArea 
    + QtQuick.Controls x.x 
    advanced 
    basic 
    
    QtQuick for more advance 
    
    the prebacked controls are easy to use 
    
    keys and keyNavigation 
    
    TextInput for single line text entry 
    
    TextEdit for mutliple line and also support rich text entry. TextEdit not support scrollbar 
    TextArea support for scroll bar 
    Int Validator 
    Double Validator 
    RegExp Validator 
    Focus Scope, when you want to create user controls 
    
    + Gestures 
    Flickable 
    PinchArea 
    ...
    
    + Events 
    KeyEvent 
    DragEvents 
    WheelEvent 
    MouseEvent 
    TouchPoint 
    PinchEvent 
    
- MouseArea Button input 
Rectangle{
    ...
    MouseArea{
        anchors.fill: parent //we need to set the bounds of the mouse area 
        onClicked:parent.x == 0? parent.x = 50: parent.x = 0
    }
}

we could use the width or height property of MouseArea to specify a range such as root.width 

when a item moved which coordinate system will also be moved. so the item.x item.y will be changed. So we could make the MouseArea at the same level of the Rectangle then reference the x, y coordinate with the id of the rectangle to prevent the mouse are moved with the rectangle 

the mouse area also have hoverEnable property the onHoveredChanged handler will be called 
MouseArea{
    hoverEnable:true 
    onHoveredChanged: containsMouse ? paranet.color = "teal": parent.color="cyan"
}
- MouseArea Drag and Drop 
ApplicationWindow{
    ...
    function setColorByX(x){
        var MAX = 256
        var exp = Math.floor(x/MAX)
        var operand = x % MAX
        var result = "#" + (operand) * mult + 0xaa
        return result
        ...
    }
    
    Rectangle{
        id: containerId 
        width: 600; height: 200
        Rectangle{
            id: dragRectId 
            width: 50; height: width 
            color: setColorByX(x)
            MouseArea 
            {
                anchors.fill: parent 
                drag.target: dragRectId 
                drag.anxis: Drag.XA
            }
        }
    }
}

- keyboard attached property 
Rectangle{
    MouseArea{

    }
    Keys.onDigit0Pressed: radius = 0 
    Keys.onDigit1Pressed: radius = 25 
    focus: true 
    Keys.onPressed: handler 
}

we could search the onPressed key handler to the non built-in handlers. Check the properties of KeyEvent from the document which passed in the onPressed
Qt.Key_xxx is the value of built-in key code 

we could set the event.accepted property to false to let other handlers to handle the event 

event.modifiers property could be used to check control keys. Qt.ControlModifier 

- KeyNavgitation Attached Property 
KeyNavigation.down: simpleDemoId 

KeyNavgitation.up: dragRectId 

we could use these properties to handle the up, down, left, right navigation keys 

KeyNavgitation.priority: KeyNavgitation.BeforeItem
this property is very useful when you create a textArea and if you want the tab key navigate to another item. 

- Text Entry  
    + TextInput 
    TextInput {
        id: textInputId 
        text: "string"
    }
    
    property int textMargin: 5 
    
    Ractangle {
        id: textInputRectId 
        color: "honeydew"
        width: 100; height: textInputId 
        radius: textMargin 
        border.width: 2
        border.color: "olivedrab"
        
        TextInput{
            id: textInputId 
            ...
        }
        
        TextEdit{
            id:textEdit.Wrap 
            ...
            text: "string s"
        }
    }
    we could enable the wrapping for TextEdit item 
    the textFormat:textEdit.RichText could let the text edit item support html in the text property 
    
    we could use a Flickable item to hold the textEdit item to let the user drag the content up and down 
    
- Validators 
TextInput{
    ...
    text:"1234"
    validator:TextInput.IntValidator{bottom:0; top: 2000}
}

the other values for the text input will not be allowed. 

    + other validators 
    DoubleValidator 
    RegExpValidator 
    
    
- Focus Scope, FocusScopeDemo. the code is comprised of an outer rectangle object and it has a setText function 

Rectangle{
    ... 
    Text{
        id: widgetLableId 
        anchros.fill: parent 
        font.pixelSize: 16 
        horizontalAlignment: Text.AlignCenter 
        verticalAlignment: Text.AlignVCenter
    }
}

    + we could use Column item to position the items 
    + FocusScope item doesn't have explicit height and width property we could custom property 
    
    when you have multiple widgets and imported them input one page. We need the FocusScope to help us set the focus between the widgets, otherwise the focus may always be set on the first widget 

    use FocusScope to wrap the user content of the widget  
    
    FocusScope{
        id: myWidgetFocusId 
        property alias color: myWidgetId.color 
        width: myWidgetId.width 
        height: myWidgetId.height 
        Rectangle{
        
        
        }
    }
    
    + the qml make system may have problems when you changed some files and it will not build all the 
- Qt Quick Controls Import, switch to q creator and select the index button 

search the qt quick controls is the gallary to start 

we could start the tab label controls 

we could use the find symbols from the context menu in qml 

the qml could be splits into Views, Models and Styles 


# Positioning 
- one at a time 
    + anchors  lines, there are 7 virtical anchor lines 
    top 
    verticalCenter 
    bottom 
    left 
    horizontalCenter 
    right 
    baseline 
    
        * anchor margins 
        anchors.topMargin 
        anchors.leftMargin 
        anchors.rightMargin
        anchors.bottomMargin

	verticalCenterOffset
	...

	Anchor margins only apply to anchors; they are not a generic means of
	applying margins to an item. if anchor margin is specified for an edge
	but the item is not anchored to any item on that edge, the margin is
	not applied 
	Think of the margins and the position lines as closely coupled pairs
	of items 

	* anchor limits 
	can only reach to Parent, Sibling and can't reach to grand parent and
	child 

	* anchors vs absolute could not be used together. 
        
    + cooridnates 
- Positioners 
	+ Grid basics 
	rows, if you don't set the column, then the column will be increased
	to fit the items into the grid. 

	columns, if you set both rows and columns, then the items will be
	wrapped arround. if there are more than row*column items. the wrapped
	items will be repositioned from the start 

	most of the time we don't need to set the row property and let the Qt
	automatic increase the row size   
	
	spacing, the spacing could control the row column space. stick to use
	spacing to give you space between each cell instead of explicitly set
	the heigth and width of row/column
	columnSpacing 
	rowSpacing 
	if explicitly set the width and height of grid may also change the
	size of the grid. if the grid are using with anchors may lead the
	anchor not works.

	* Grid alignment 
	horizontalItemAlignment 
	Grid.AlignLeft 
	Grid.AlignRight 
	Grid.AlignHCenter 

	verticalItemAlignment 
	Grid.AlignTop
	Grid.AlignBottom 
	Grid.AlignVCenter 

	* Rows and Columns 
	Column
	spacing 

	Row 
	spacing 
	layoutDirection, Qt.LeftToRight(default), Qt.RightToLeft

- mutliple items 
grid row 
column 
- fixed size container 
- small items large containers 
- adjustable tools 
GridLayout 
RowLayout 
ColumnLayout 
QtQuick.Layouts

	+ using layout 
import QtQuick.Layouts 1.1 

Grid, GridLayout 
Column, ColumnLayout
Row, RowLayout 

there are similar to the positioners. The are design to layout and resize the
content 
	+ key features 
	New 		old 
	resizable	alignment 
	min/max/	spacing 
	preferred
	width and heights 

	+ Layout properties 
	alignment, Qt.Alignment 
	minimumHeight, real 
	column, int 
	minimumWidth, real 
	..
	
	row, column are start from zero
	there are rowSpacing and columnSpacing and no spacing property.

	+ RowLayout and ColumnLayout are specialized GridLayout

	+ if want to manually set row and column you would better manually set
	all of the row and column
- Flow, is the same as the base of html container 
	+ automatic wrapping 
	+ flow, Flow.LeftToRight or Flow.TopToBottom
	+ layoutDirection, Qt.LeftToRight or Qt.RightToLeft 
	+ spacing 
Flow{
	width: parent.width
	height:parent.height
	flow:Flow.TopToBottom
}

we could set the window to flowId.implicitWidth and flowId.implicitHeight


# Transforms, transitions and animations 
- Transforms
Rotation
Scale 
Translate 

without animations tranforms are applied base on the sequence 

- Animation
	+ PropertyAnimation
	ColorAnimation
	NumberAnimation
		SpringAnimation 
		SmoothedAnimation 
	RotationAnimation
	Vector3dAnimation
- Controlling Animations 
	+ once at a time 
	start 
	stop 
	resume 
	pause 
	restart 

	+ group animation and run sequential 
	+ gropu and run parallel 
	+ use behavior to define default animation 
	+ Easing support dozens of types of easing function 

	+ special animations 
	ParentAnimation, used for re-parenting an item 
	AnchorAnimation, in transitions with AnchorChanges 

	+ Still more 
	PathAnimation 
	PauseAnimation 
	ScriptAnimation 
	PropertyAnimation

	+ States as logic containers 
	changes properties as group 
	run a script 
	override a signal handler 
	re-parent an item 
	reposition an item 

	+ transition 
	smmoooth state changes 

- demo transforms 
Text{
    ...
    transform:Rotation{
        origin.x :212 
        origin.y:16 
        angle: 45 
        axis:{x:1; y:1; z:1}
    }
}

when checking the document if a group keyword appear after a property which like the axis. It is meaning the property could be either set with axis.x ... or axis{ x: 1; ...}

we could also use Scale, ... etc 
transform:Scale{
    xScale: .9 
    ...
}

- Animation 
    + broad topic 
    + many types 
    + many triggers 
    + many syntaxes 
    
    + PropertyAnimation properties 
    duration, default value is 250 
    easing
        easing.type 
    exclude, check document for more infomation, which define the items will not be included in the animation 
    from and to 
    property/properties. document said it is equal but don't believe it! trying to use the singlar form to specify multiple properties will result in errors. when you just a single property, you could use either form, but the singlar form is optimized for a single property 
        properties:"x, y, opacity" 
    target/targets
    	target:someId -OK 
	targets: someId -OK
	targets:[Id0, Id1, ...]
	target:[oneId, nextId] NOT OK 

	+ Example
	Standalone 
	Text32 {
		id:textId 
		x:885 
		...
		PropertyAnimation{
			target: textId
			property: "x"
			to: 0
			duration: 1000
			running: true
		}
	}

 	the target property of PropertyAnimation is required, the running true
	will make the property animation auto run

	we could add multiple targets into a animation 
	PropertyAnimation{
		targets:[Id0, Id1]
	}

	+ Shorthand syntax for property animation 
	Text32{
		PropertyAnimation on targetPoperty{
			to: 0;
			duration: 1000
		}
	}
	when Qt load this will automatic start animation

- easing 
	+ PropertyAnimation Easing 
	+ Grouped Property 
	amplitude 
		Bounce 
			Elastic 
				Period 
	overshoot
		Back 
	period 
	Simple Monomial 
		Quad t^2 
		Cubic t^3 
		Quart t^4 
		Expo 2^t 
	Trig 
		Sine 
			Circ
	type
		there are four basic animation variables
		In
		Out 
		InOut 
		OutIn

		example: InCubic OutCubic InOutCubic OutInCubic 
	+ 41 types 
	+ two major categories 
	Linear 
	Non-Linear 

	+ example 
	Rectangle {
		...
		NumberAnimation on height{
			duration: 3000
			to : 400-borderRelief 
			easing.type: Easing.OutInCubic
		}
	}
- Controlling Order 
	+ ParallelAnimation 
	+ SequentialAnimation 
	+ PauseAnimation 

	these control animation could be think as container for animations 

	+ Sequential 
	Stream Comes Down
	Glass Fills Up 
	Stream Turns Off 
	Full Glass

	+ Drop by Drop 
	Stream height Grows 
	Class Fills -> water height grows -> y position changes -> stream height
	shortens 
	Water Turns off -> Stream height goes to 0 -> Stream y poistion moves down 
	Full Glass Appears 

	+ Example 
	ApplicationWindow{
		SequentialAnimation{
			id:animId
			NumberAnimation{
				target: waterId 
				property: "height"
				from: 0; to: 71 
				duration: fillTime
			}

			NumberAnimation{
				target: waterId 
				property: "y"
				from: 415
				to: 345
				duration: fillTime 
			}

			ParallelAnimation{
				target: streamId 
				property:"height"
				from: 200 
				to: 0 
				duration: onOffTime
				easing.type: Easing.InCubic
			}

			ParallelAnimation{
				...
			}
		}
	}
	MouseArea{
		anchors.fill: parent 
		onClicked: {
			fullGlassId.opacity = 0
			streamId.height = 0
			streamId.y = 155 
			streamId.opacity = 1 
			waterId.height = 0 
			waterId.opacity = 1 
			animId.start()
		}
	}
	
- States
	+ any QML item derive from Item have State property 
	+ syntax 
	states:[
		State{
		name:"Asleep"
			when: !mouseAreaId.containsMouse
			changes:[
				PropertyChanges {
					target: rootId 
					isAsleep: true
				},
				...
			]
		},
		State{
		}
	]

	State{
		name: "Awake"
		extend: "Asleep"
		when: mouseAreaId.containsMouse 
		PropertyChanges {
			target: rootId
			isAsleep: false 
		}
		PropertyChanges{
			target: sceneId
			color: "#202020"
		}
	}

	if there are several state's when properties get to true then the first
	state will win
	
	+ use transitions to make switch more smoothly during switch between
	different states 

	transitions: Transition{
		ColorAnimation {duration: 1000}
		NumberAnimation{
			properties: "y, opacity"
			duration: 1000
			easing.type :Easing.InSine
		}
	}
	states:[
		...
	]

	+ the extend property of a State could be set to another name of a State.
	This means the extend State is based on the target State. It is really
	usefully when add a intermedia State between key States 

	State{
		name: "Awaking"
		extend: "Asleep"
		PropertyChanges {
			target: owlDrowsyId 
			opacity: 1
		}
		PropertyChanges {
			...
		}
	}
	Keys.onDigit1Pressed:{
		if(sceneId.state === "Awake")
			scenId.state = "DosingOff"
		else if(sceneId.state == "Asleep")
			sceneId.state = "Awaking"
	}
- demo states 
- summary 

# Models views and delegates 
- Overview 
	+ ListModel 
	+ ListView 
	mode 
	delegate 
	header 
	footer 
	higlight 
	+ Reapter
	+ XmlListModel

- ListModel and ListView 
Data <--------------------------> Model 
 |									|
 |									V
 Delegae 						View(ListView, GridView, PathView etc.)
 ^								    |
 |								    |	
 +-----Display a row of data--------+	

Delegate has a way to walk up the chain, so to speak to find the current
ListView and the current model 

The delegate can change the data in the model and the view will automatically
update 

ListModel's primary building block is ListElement 

	+ the methods support by ListModel 
	append 
	remove 
	move 
	get 
	set 
	clear 
	count

	sync(), sync ListModel 
	setProperty(int index, string property, variant value)
	dynamicRoles: bool 

	+ Roles: name and category 
	ListModel{
		id:listModelId 
		ListElement {name: "Anders"; category: "C#"}
		ListElement {...}
		...
	}
void using common property names such as text 

	+ dynamicRoles, roles underlying "type" can change, then we can change the
	second element as a number 

	set it first 

	Not compatible with static ListElements, we have to use the methods to
	dynamically add ListElements to your ListModel 

	typically 4-6 times slower! depending on your platform 

	+ the Final method
	setProperty(index index, string property, variant value);

	example:
	setProperty(0, "name", "Tod");  //set the previous list listModelId 

	+ jsobject dict which use JSON syntax 

	online json editor http://www.jsoneditoronline.org 

	+ ListModel methods, redux 
	append(jsobject dict)
	object get(int index)
	insert(int index, jsobject dict) 
	remove(int index, int count)
	set(int index, jsobject dict)

	+ Model-View-Delegate example for ListModel 
	ListModel{
		model: listModelId 
		ListElement {name: "Anders"; category: "C#"}
		...
	}	

	ListView{
		model: listModelId 
		width: 150; heigth: 100;
		delegate: Row{
			Text: {text: index+"."}
			Text: {text: "Name:" + name}
			Text: {text: "\t Category:" category}
		}
	}
	the delegate specified how to abstract the model into the view. we could
	also define the delegate in other place to make it more reusable  
	
	+ ListView support custom header and footer 

	the verticalLayoutDirection property can be specified as
	ListView.bottomtotop and the header will move to bottom and list will be
	reverse. 

	the layout direction can be set to Qt.righttoleft

- demo ListView troubleshooting 
ListView{
	id: listViewId
	model: listModelId
	delegate: Row{
		id: rowId 
		spacing: 10 
		Text{
			text: index + ". " + model.name
			font.pixelSize: 24 
		}
		Text{
			text: category
			font.pixelSize: 24
			Component.onCompleted: print ("Row" + ListViewId.height)
		}
	}
	Component.onCompleted: print("List view height" + height + "width:" width)
}

Component.onCompleted is an attached property provided by the QML engine, and
we can use it to execute some debugging statements. The doc say the
order of running the onCompleted script is undefined. 

The output of the log for qml will display 
qml:Row 0 
qml: List view height 0 width 0
this will make the list view only display a single row in it

we could add anchros.fill: parent to the ListView then will expand the visible
area

lots of example of QML will use onCompleted singals to trace out QML behavior.
The onCompleted event only means the qml have been completed from the
framework's view and it's doesn't means all the item's properties are resolved

- demo ListView decorations 
	+ first move the delegate code out of the list itself from QML and put a
	delegateId instead and we add a component with the id 

	ListView{
		id: listViewId 
		model: listModelId 
		anchros.fill: parent 
		delegate: delegated 
	}
	Component{
		id: delegateId 
		Row: {
			id: rowId
			spacing: 10 
			Text{
				text: index + ". " + model.name
				font.pixelSize: 24
			}
		}
	}
	
	then we have a more reusable component, but we don't want to make the
	component bound to the fixed fontSize with a specific list view. So we
	need the component find the view which contain it by it self. W
		* We need add a id to the root element of the component 
		* use the id to find the relative list view 
		Component{
			id:...
			Row:{
				id:rowId
				...
				Text{
					font.pixelSize: rowId.ListView.view.fontSize
					...
			}
		}

	+ we could add highlight to our list view by 
	ListView{
		...
		highlight: Rectangle{
			width: parent.width
			color: "lightgray"	
		}

	+ add section to ListView, to automatic group base on section settings
	ListView{
		...
		section{
			property:"category"
			criteria: ViewSection.FullString
			labelPositioning: ViewSection.InlineLables
			delegate: Rectangle{
				width: listViewId.width
				height: 30 
				color: "lightsteelblue"
				Text:{text.section;font.pixelSize: listViewId.fontSize}
			}
		}
	}

- demo ListView orientation 
    + define ListView relative items in qml 
    //main.qml {
        ...
        
        Row{
            DemoListView{}
            DemoListView{verticalLayoutDirection: ListView.BottomToTop}
            Column{
                DemoListView{orientation: Qt.Horizontal}
                DemoListView{orientation: Qt.Horizontal}
            }
        }
    }
    
    //DemoListView.qml 
    ListView{
        ...
        property bool isVertical: orientation === Qt.Vertical 
        property int rowWdith: isVertical? 180: 50 
        property int rowHeight: isVertical? 50: 180
        
        width: isVertical? 200: 300
        height: isVertical? 300:200
        header: Header{}
        footer: Footer{}
        delegate: Delegate{}
    }
    
    //Header.qml 
    Component{
        id: headerId 
        ...
        Text{
            ...
            rotation: isVertical? 0: -90
        }
    }
    
    //Delegate.qml
    Component{
        id: delegateId 
        ....
    }
    
    //put into Footer.qml 
    Component{
        id: footerId
        ...
    }
- repeater 
    + properties 
    modal: any 
    delegate: Component 
    count: int 
    itemAdded(int index, Item item)
    itemRemoved(int index, Item item)
    
    + example 
    //main.qml will generate 4 list view instance 
    Row{
        spacing: 10 
        Reapter{
            model: 4 
            DemoListView{}
        }
    }
    
    + use custom property array to set a property of repeater 
    //main.qml  
    property variant directionSetting: [
        ListView.TopToBottom
        ListView.BottomToTop
    ]
    
    Row{
        spacing: 10 
        Repeater{
            model: 2 
            DemoListView{
                verticalLayoutDirection: directionSetting[index]
            }
        }
    }
    
    + qt also support object list 
    
    property var obejctList: [
        {name: "Syncor", service: "programming"}
        {name: "Syncor", service: "programming"}
    ]
    ...
    Repeater{
        Text{ text: modelData.name + " : " + modelData.service}
    }

- XmlListModel and XPath, required to import QtQuick.XmlListModel 2.0 
    + XmlListModel only hold a collection of read-only data in xml roles 
    + properties of XmlListModel
    source or xml 
    query 
    roles list<xmlRole>
    status, help troubleshooting 
        XmlListModel.Loading 
        XmlListModel.Ready 
        XmlListModel.Error 
        XmlListModel.Null 
        
    + source 
    source: "qrc:///qt-quick-fundamentals-m07.xml"
    source: "http://www.omdbapi.com/?r=XML&s=Breaker Morant"
    
    the r flag specifies the response data type. I want XML. the other option is JSON, and JSON is the default 
    s specify the search 
    
    + example of XmlListModel 
    //the xml data content 
    ...
    <clip href="qt-quick-fundamentals.wmv" title="Overview" bold="true"/>
    <clip href="qt-quick-fundamentals.wmv" title="Overview" />
    <clip href="qt-quick-fundamentals.wmv" title="Overview" bold="false"/>
    ...
    
    //the qml content 
    import QtQuick 2.2 
    import QtQuick.Controls 1.2 
    import QtQuick.XmlListModel 2.0 
    import QtQuick.Layouts 1.1 
    
    ...
    XmlListModel{
        id: clipsId 
        source: "qc:///qt-quick-fundamentals-m07.xml"
        query: "/module/clips/clip"
        XmlRole{name: "title"; query: "@title/string()"}
        XmlRole{name: "href"; query: "@href/string()"}
        ...
        
        onStatusChanged: {
            var pre = "XmlListModel"
            if(status === XmlListModel.Ready)  print(pre + "Ready -count:", cout );
            if(status === XmlListModel.Loading)  print(pre + "Loading...");
            if(status === XmlListModel.Error)  print(pre + "Error:",  errorString());
            if(status === XmlListModel.Ready)  print(pre + "Null");
        }
    }
    
    in QML your query has to start with either the slash or double slash 
    / = start at the root 
    // find matches anywhere 
    @ select attribute instead of element 
    [] position predicate starts at 1 
    [@someAttribute] boolean predicate 
    
    Then we could use Views to display the model, for example we could use ListView 
    ListView{
        id:...
        model: clipsId 
        
        delegate: Text{
            text: title 
            font.bold: bold 
            ...
        }
    }
    
- xpath syntax api explain  
http://www.omdbapi.com
        
- summary 


# Dialogs and More 
- dialogs, five basic dialogs 
    + ColorDialog 
    + FontDialog 
    + FileDialog 
    + MessageDialog 
    + Dialog 
    
    + Common properties of the basic dialogs 
    modality, QtWindowModality, Modal or NonModal 
    title, string 
    <return/updated properties> 
        fileUrl, fileUrls, folder 
        color, currentColor 
        font, currentFont 
    visible: bool 
    
    + Common methods 
    open(), set the visibility property to true 
    close(), set the visibility property to false 
    
    all dialogs emit the onAccepted and onRejected signals 
    
    + all signals 
    accepted 
    apply 
    discard 
    help 
    no 
    rejected 
    reset 
    yes 
    
    + MenuBar, Toolbar and Action 
    MenuBar > Menu > MenuItem Action 
    ToolBar > ToolButton > Action 
    
- menu, toolbar, action 
Action{
	id:quitActionId
	text: qsTr("Exit")
	iconSource: "images/exit.png"
	onTriggered: Qt.quit()
}
menuBar: MenuBar{
	Menu {
		title: qsTr("File")
		MenuItem{
			action: quitActionId 
		}
	}
}
toolBar: ToolBar{
	ToolButton{action: quitActionId}
}

we could add images resource into the resource folder of the project 
Resources/qml.qrc/images/*.png

- file dialog 
import QtQuick.Dialogs 1.1 

property string folderToOpenUrl: ""

Action{
	id: folderOpenActionId
	text: "open folder" 
	iconSource: "images/folderopen.png"
	onTriggered: folderDialogId.open()
}

ToolBar: ToolBar{
	Row{
		ToolButton{action: quitActionId}
		ToolButton{action: folderOpenActionId}
	}
}

FileDialog{
	id: folderDialogId 
	selectFolder: true 
	title: baseAppName 
	modality: Qt.WindowModal
	onAccepted: folderToOpenUrl = fileUrl
	onRejected: folderToOpenUrl = "folder not selected"
}
- font and color dialogs

property int fileIndex: 0
property int colorIndex:1 
property int fontIndex: 2

function setModelValue(index, value){
	modelId.setProperty(index, "value", value)
}

ListModel{
	id: modelId
	ListElement{name: "File/Folder"; value:"no selection"}
	ListElement{name: "Color"; value:"no selection"}
	ListElement{name: "Font"; value:"no selection"}
}

ColorDialog{
	...
}

FontDialog{
	...
	onAccepted: setModelValue(fontIndex, font.family)
	onRejected: setModelValue(fontIndex, noSelection)
}

TableView{

	model:modelId
	TableViewColumn{role: "name"; title:"Dialog Type", width: 100}
	TableViewColumn{role: "value"; title: "Result"; width: 300}
}

the modelId.setProperty will change the row of the ListModel
- message and custom dialogs, custom dialog required QtQuick.Dialogs 1.2 
Dialog{
	id: customDialogId
	signal heckYeahClicked()   //create a custom signal 
	Calendar{
		id: calenderId
		onDoubleClick: ...
	}
	Row{
		Button{
			text: "built in click"
			onClicked: customDialogId.click(StandardButton.Ok)
		}
		Button{
			text: "Heck yeah customer signal"
			onClicked: {
				customDialog.heckYeahClicked()
			}
		}
	}
	onHeckYeahClicked: .... //handle the custom signal the event, it is a
	naming convention 
}

MessageDialog{
	id: messageDialogId
	onYes: ...
	onNo: ...
}

- coding conventions, qt coding convention to follow teams' guidlines 
QML object structure 
Grouped properties 
Private properties 
Lists of one item 
JavaScript 


JSLint for reference

	+ recommaned 
	object start with id 
	define custom properties 

	define signals 

	define functions 

	current object built-in properties setting 

	child objects 

	states 

	transitions

	+ group properties 
	define group propety by online syntax or use a object definition and don't
	write group name on each line

	+ private properties there is no built-in support but we could use
	QtObject to simulate it 
	Item{
		id: someComponent 
		width: 50; height: 50
		QtObject{
			id: priv
			property real pinSize: height/2
		}
	}

	+ prefer no brackets for single item 

	states: State{

	} 

	than 
	states: [
		States{
		}
	]

	+ things left unsaid 
	Canvas 
	Connection, used to send signal outside of QML or C++ 
	LocalStorage, for sqlite operation 
	Loader, for lazyload 
	QtTest, for unit test 
	Timer 
	Worker Script, for parallel jobs 
- summary 

# References 
- http://www.syncorsystems.com 








    
    
    
    
    

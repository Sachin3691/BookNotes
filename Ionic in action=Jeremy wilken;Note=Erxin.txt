Ionic in action=Jeremy wilken;Note=Erxin

# Introducing ionic and hybrid apps 
- ionic combination of technologies angular and cordova 
- a hybrid application is a type of mobile app that uses a browser window to display its interface 
- device loads the app, cordova app wrapper loads the web app code 
- cordova javascript api, this is the bridge that commnicates between the app and the device 
- angular, web application that controls the app routing and function 
- ionic, this provide the user interface components redered in the app 
- types of mobile experiences
    + native mobile apps 
    + mobile website 
    maintainability 
    no installation 
    cross-platform 
- hybrid application 
    + disadvantages 
    web view limitations 
    access native features via plugins, the plugin development may delay for the sdk release
    + no native user interface controls 
    
- understands how the ionic stack works 
    + the user taps on a button 
    + the button calls the angular controller 
    + cordova communicates with the device using native SDKs and requests the camera app 
    + the device opens the cappera app( or prompts for permissions if necessary), user take a picture 
    + user confirms the image data return to cordova 
    + cordova pass the image back to angular controller 
    + the visual display of the image is updated inside of ionic components 
    
- ionic user interface framework 
navigation buttons 
navigation bar 
popover 
list 
footer bar 
icons and tabs 

- angular web application framework 
- drawback of using ionic 
limited platforms
older platform not supported 
not equal to native
not geared for heavy graphics, 

- prerequistes for building apps with ionic 


# Setting up your computer to build apps 
- creating a working same project to see how it all fits together 
- setting up dev environment 
node.js, http://nodejs.org 
ionic cli, http://ionicframework.com 
cordova, http://cordova.apache.org 

- start a new project 
$ ionic start project-name 

- project folder structure 
.bowerrc 
.gitignore 
bower.json 
gulpfile.js 
hooks 
ionic.project 
package.json 
plugins 
scss 
www 

    + front end code loaded with bower and gulpl dependencies are loaded with npm 
    
- previewing in browser 
$ ionic serve 

don't use safari for windows which is not supported by apple now 

- setting up previewing environments 
    + install platform tools 
    + download set up emulators for previewing 
    + set up a connected device for previewing 
    + set up the project for each supported platform and preview 
    
- ios 
- android, open android virtual device manager by 
$ android avd 

- setting up a connected device 
- previewing in an emulator 
$ ionic emulate ios 
$ ionic emulate android 

- previewing on a mobile device 
$ ionic run ios -l -c 
$ ionic run android -l -c 

- build 
$ ionic build android 
$ abd -d install uri-for-apk 


# What you need to know about angularJS 
- how angularjs apps are built and structured 
- the fundamental of angularjs that power many ionic features 
- how to use controllers, filters, directives, scope and more 
- example, https://github.com/ionic-in-action
- angularjs at a glance 
controller, models, and scope managing data and logic 

services reusable objects with methods 

two way binding sharing between controller and view 

- basics for angular app, loading data with controller and display data in the view 

- angular and asynchronous methods 

- convert data to display in the view 

- handling click events to select a note 

- create a directive to parse a note with markdown 

- using models to manage content editing 

- saving and deleting a note 

- adding the save() method 

- angularjs in depth, http://manning.com/aden, 
- angularjs in action, http://manning.com/bford
- angular website htttp://angularjs.org, https://angular.io  


# Ionic navigation and core components 
- create your app and define each views and scratch the layout 
- ionic use ui-router instead of ngRoute, it is a extended ngRoute, such as named views, nested views and parallel views 
- designing good app navigation
address bar 
reload buton 
forward and back buttons 

- declaring the app views with the state provider, ionNaviView is a similar in the sense that it allows content to be loaded inside 
<body ng-app="App">
    <ion-nav-bar class="bar-positive">
        <ion-nav-back-button class="button-clear">
            <i class="ion ion-ios-arrow-left"></i> back 
        </ion-nav-back-button>
    </ion-nav-bar>
    <ion-nav-view></ion-nav-view>
</body>

use $stateProvider service to declare your states, $urlRouterProvider to help provide a fallback in case an invalid request is made 

use ionContent to wrap your content 

- using cas components and adding a simple list of links, adding a list to home view 
<ion-view title="Aloha Resort" hide-back-button="true">
    <ion-content>
        <div class="list">
            <a href="#/reservation" class="item">
                see your reservation 
            </a>
        <div>
    <ion-content>
<ion-view>

- css and javascript components, in ionic some components are css only such as buttons. other are javascript-only sucha s infinite scroll 

- adding icons to the list items 
<ion-view title="Aloha Resort" hide-back-button="true">
    <ion-content>
        <div class="list">
            <a href="#/reservation" class="item item-icon-left">
                <i class="icon ion-document-text"/> See your reservation
            </a>
            <a href="#/weather" class="item item-icon-left">
                <i class="icon ion-ios-partlysunny"/> Current weather
            </a>
            <a href="#/restaurants" class="item item-icon-left">
                <i class="icon ion-fork"/> Nearby restaurants
            </a>
        </div>
    </ion-content>
</ion-view>

add first route to app config() method 
angular.module('App', ['ionic'])
.config(function ($stateProvider, $urlRouterProvider) {
	$stateProvider
	.state('tabs', {
		url : '/tabs',
		templateUrl : 'views/tabs/tabs.html'
	});
	$urlRouterProvider.otherwise('/tabs');
})

add tab content for each tab 
<ion-tabs class="tabs-icon-top tabs-positive">
    <ion-tab title="Rates" icon-on="ion-social-bitcoin" icon-off=
"ion-social-bitcoin-outline">
    </ion-tab>
    <ion-tab title="History" icon-on="ion-ios-analytics" icon-off=
"ion-ios-analytics-outline">
    </ion-tab>
    <ion-tab title="Currencies" icon-on="ion-ios-cog" icon-off=
"ion-ios-cog-outline">
    </ion-tab>
</ion-tabs>

- using a controller and model for the reservation view 

# Tabs advanced lists and form components 
- using the tabs component with individual navigation histories 
    + ionTabs, adding tabs and navigation 
<body ng-app="App">
    <ion-nav-bar class="bar-positive">
        <ion-nav-back-button class="button-clear">
            <i class="ion-chevron-left"/> Back
        </ion-nav-back-button>
    </ion-nav-bar>
    <ion-nav-view/>
</body>

    + tabs don't require individual views 
    
    + ionRefresher, pull-to-refresh the rates 
    
    + ionicPopover, showing help in a popover 
- charting historical data
    + add highcharts-release for javascript chages and highcharts-ng for angularjs 
- displaying a list of items that can be toggled and reordered 
- setting up pull-to-refresh to reload data 
- using several mobile form input controls  

# Weather app, using side menus, modals, action sheets, and ionScroll 
- using ion-side-menus 
- get a forecast.io api key 
- building custom scrolling content, uisng ionScroll with paging 
- creating filters for forecast data 


# Advanced techniques for professional apps 
- customizing ionic styles uisng sass variables 
    + setting up sass, syntactically awesome sytlesheets is a css preprocessor http://sass-lang.com 
    $ npm install -g gulp 
    $ ionic setup sass 
    ionic use gulp to run tasks, such as convert sass to css. gulp use gulpfile.js for configuration 
    
    + to customize variable you'll modify the sass/scss/ionic.app.scss file 
    // The path to ionicons font files, relative to the built CSS in www/css
    $ionicons-font-path: "../lib/ionic/fonts" !default;
    // Include all of Ionic
    @import "www/lib/ionic/scss/ionic";
    
    + regenerate css by 
    $ gulp sass 
    
    when you use ionic serve and you setup sass the serve command will automatically rebuild the css 
    
    + listen for events with $ioniGesture service, avaliable gesture events 
hold, 
tap 
doubletap 
touch 
release 
drag 
dragstart 
dragend 
dragup 
dragdown 
dragleft 
dragright 
swipe 
swipeup 
swipedown 
swipeleft 
swiperight 
transform, two fingers touch and move generic 
transformstart 
transformend 
rotate 
pinch 
pinchin 
pinchout 

- storing data for persistence 
    + localstorage 
    + sqlite 
    + websql, indexeddb and sqlite 
    + other options from cordova plugins 
    
- adapt styling for a platform or device type 
ionic.Platform.isAndroid()
ionicPlatform.isIOS()

- modify default configuration with $ionicConfigProvider 


# Using cordova plugins 
- ngCordova plugins provide a lot of great features, http://ngcordova.com, supports dozens of cordova plugins 
    + implement each call to cordova features as promise to ensure a consistent 
    + handles calling the digest loop when necessary automatically so you focus on just writing your code 
    + ionic community has already selected a good set of plugins for you to avoid having to research them yourself 
    + have good document 
    + every plugin comes with a mock service to use during unit testing 
    + install 
$ ionic add ngCordova 

- add a camera plugin 
$ ionic plugin add org.apache.cordova.camera 
$ ionic add ngCordova

- using geolocation in weather app 
- improving the weather app 


# Previewing debugging and automated testing 
- setup ionic project start up 
$ ionic plugin add org.apache.cordova.console
$ ionic plugin add org.apache.cordova.device
$ ionic plugin add com.ionic.keyboard
$ ionic platform add [ios/android]

- preview the display of app on iOS and android use ionic cli's lab feature 
- debugging from a device 
$ ionic emulate ios -l -c 

- unit test with jasmine and karma 
http://jasmine.github.io/
http://karma-runer.github.io/ 

    + setup 
$ npm install --save-dev karma karma-jasmine karma-chrome-launcher
$ npm install -g karma-cli

- integration tests with protractor and webdriver, selenium http://docs.seleniumhq.org/projects/ 
$ npm install -g protractor 
$ webdriver-manager update 

# Building and pubulishing apps 
- building and publishing for android 
setup -> build app file -> sign app file -> optimize app file -> create listing in google play -> upload app file 

- building and pubishing for ios 
setup signning io -> setup app id -> create listing in itunes connect -> build and upload app file 

- ionic has a template for photoshop that you can use to design your icon 
design your icon at http://mng.bz/2ow0

- creating the splash-screen images, the center about 1200 x 1200 pixels for shared in all size of screens 

- preparing your app for production 
    + remove the corodva console plugin 
    + remove any unnecessary files 
    + remove unused libraries 
    + compress your code 
    + compress your graphics 
    
- setup key for android 
$ keytool -genkey -v -keystore know_your_brew.keystore -alias know_your_brew
-keyalg RSA -keysize 2048 -validity 10000

- build the release app file 
$ cordova build --release android 

- signing the apk file 






















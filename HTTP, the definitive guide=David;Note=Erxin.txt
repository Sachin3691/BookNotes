HTTP, the definitive guide=David;Note=Erxin

# Introduction 
- reference 
https://learning.oreilly.com/library/view/http-the-definitive/1565925092/

# PartI. HTTP. The web's foundation 
## Overview of HTTP
- Resource, Web servers host web resources . A web resource is the source of web content. 
- Media types, HTTP carefully tags each object being transported through the Webwith a data format label called a MIME type. MIME (Multipurpose Internet MailExtensions). It is a textual label such as 

text/html 
text/plain 
image/jpeg
image/gif 
video/quicktime 
application/vnd.ms-powerpoint 

https://learning.oreilly.com/library/view/http-the-definitive/1565925092/apd.html

URI, HTTP can retrieve the object. URIs come in two flavors, called URLs and URNs

- URIs, uniform resourceidentifier

- URLs, The uniform resource locator (URL) is the mostcommon form of resource identifier. 

- URNs, uniform resource name, or URN. A URN serves as aunique name for a particular piece of content, independent of wherethe resource currently resides.

urn:ietf:rfc:2141

currently urn is experimental

- transactions, An HTTP transaction consists of a request command (sent from client toserver), and a response result (sent from the server back to the client).

- methods 
GET, send named resource from the server to the client 
PUT, store data from client into a named server resource 
DELETE, delete the named resource from a server 
POST, send client data into a server gateway application 
HEAD, send just the HTTP headers from the response for the named resource 

- status codes 
200, OK
302, redirect 
404, not found 

- messages, consist of three parsts 

    + start line, the start line indicating what to do or happend for request and response 
    + header fields, separated by colon for easy parsing 
    + body, optional message body containing any kinds of data. 
    
- simple message example 

HTTP/1.0 200 OK
-------------------------
Date: Sun, xxx GMT 
Server:Apache/1.3.11 BSafe-SSL/1.38 (Unix)
Last-modified:Tue, 04 
Content-length:403 
Content-type:text/html 
-------------------------
<HTML>
<HEAD><TITLE>Joe's tools</TITLE></HEAD>
<BODY>
    ...
</BODY>
</HTML>

- connections 
    + TCP/IP, HTTP is an application layer protocol. HTTP doesn’tworry about the nitty-gritty details of network communication; in  Internettransport protocol, TCP/IP is choosen for network communication. It provides 
    
Error-free data transportation

In-order delivery (data will always arrive in the order in which it was sent)

Unsegmented data stream (can dribble out data in any size at any time)

    + network protocol stacks 
HTTP
TCP
IP
Network-sepcific link interface
Physical network hardware 

- conntions, IP addresses and port numbers. before HTTP connection, TCP need to establish the connection with IP and port

    1. browser extract server's host name from URL 
    2. browser converts the hostname into server's IP 
    3. browser extract the port number 
    4. browser establish a TCP connection 
    5. browser sends an HTTP request 
    6. the server send the response back 
    7. the connecton closed 

- using telnet, The Telnet utility connects your keyboard to a destination TCP portand connects the TCP port output back to your display screen.

it can generally connect to any TCP server including HTTP servers 

    + And automated Telnetscripting is no fun at all. For a more flexible tool, you might wantto check out nc (netcat). Thenc tool lets you easily manipulate and script UDP-and TCP-based traffic
    
    http://www.bgw.org/tutorials/utilities/nc.php

- protocol versions 

HTTP/0.9, The 1991 prototype version of HTTP is known asHTTP/0.9. Thisprotocol contains many serious design flaws

HTTP/1.0, 1.0 was the first version of HTTP that was widely deployed.HTTP/1.0 addedversion numbers, HTTP headers, additional methods, and multimediaobject handling.

HTTP/1.0+Many popular webclients and servers rapidly added features to HTTP in the mid-1990sto meet the demands of a rapidly expanding

HTTP/1.1HTTP/1.1 focused oncorrecting architectural flaws in the design of HTTP, specifyingsemantics, introducing significant performance optimizations

HTTP-NG (a.k.a. HTTP/2.0)HTTP-NG is aprototype proposal for an architectural successor to HTTP/1.1 thatfocuses on significant performance optimizations

- architectural components of web 

Proxies, intermediaries sit between client and server 

Caches 

Gateways, special web servers taht connect to other applications 

Tunnels, special proxies that blindly forward http communications

agents, semi-intelligent web clients 

- references 
http://www.w3.org/Protocols/

http://www.ietf.org/rfc/rfc2616.txt, RFC 2616

http://www.ietf.org/rfc/rfc1945.txt, RFC 1945, “Hypertext TransferProtocol—HTTP/1.0,” is an informational RFCthat describes the modern foundation for HTTP.

http://www.w3.org/Protocols/WhyHTTP.html

http://www.w3.org/DesignIssues/Architecture.html

http://www.wrec.org/Drafts/draft-ietf-wrec-taxonomy-06.txtm Internet Web Replication andCaching Taxonomy


## URL and resources 
- url syntax 

<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>

http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true
http://www.joes-hardware.com/inventory-check.cgi?item=12731&color=blue

- url shortcuts 

    + URLs come in two flavors:absolute andrelative
    
    + BASE urls
    
    + relative urls
    
    Path is ./hammers.html; base URL ishttp://www.joes-hardware.com/tools.html.
    
    get our new absolute URL: http://www.joes-hardware.com/hammers.html.

- shady characters 

Simple MailTransfer Protocol (SMTP) for electronic mail

    + url character set 
    + encoding mechanism,  encoding simply represents the unsafe character by an“escape” notation, consisting of apercent sign (%) followed by two hexadecimal digits that representthe ASCII code of the character
    
    character           ascii code          example URL
    
    ~,                  126 (0x7E),         http://www.joes-hardware.com/%7Ejoe
    SPACE               32 (0x20)           http://www.joes-hardware.com/more%20tools.html
    %                   37 (0x25)           http://www.joes-hardware.com/100%25satisfaction.html
    
    + ascii restricted characters 
    https://learning.oreilly.com/library/view/http-the-definitive/1565925092/ch02s04.html

- a sea of schemes 
http, http://<host>:<port>/<path>?<query>#<frag>

https, https://<host>:<port>/<path>?<query>#<frag>

mailto, mailto:<RFC-822-addr-spec>, exam: mailto:joe@joes-hardware.com

ftp, ftp://<user>:<password>@<host>:<port>/<path>;<params>

rtsp, rtsp://<user>:<password>@<host>:<port>/<path>, for audio and video

rtspu, rtspu://<user>:<password>@<host>:<port>/<path>, udp protocol 

file, file://<host>/<path>

news, news:<newsgroup> or news:<news-article-id>

telnet, telnet://<user>:<password>@<host>:<port>/

- the future, Persistent uniform resource locators (PURLs) are an example of how URN functionality can be achieved using URLs.

For more information on PURLs, visit http://purl.oclc.org

- information reference 

http://www.w3.org/Addressing/
The W3C web page about naming and addressing URIs and URLs.

http://www.ietf.org/rfc/rfc1738
RFC 1738, “Uniform Resource Locators (URL),” by T. Berners-Lee, L. Masinter, and M. McCahill.

http://www.ietf.org/rfc/rfc2396.txt
RFC 2396, “Uniform Resource Identifiers (URI): Generic Syntax,” by T. Berners-Lee, R. Fielding, and L. Masinter.

http://www.ietf.org/rfc/rfc2141.txt
RFC 2141, “URN Syntax,” by R. Moats.

http://purl.oclc.org
The persistent uniform resource locator web site.

http://www.ietf.org/rfc/rfc1808.txt
RFC 1808, “Relative Uniform Resource Locators,” by R. Fielding.


## HTTP Messages 
- flow of messages, The terms “inbound,” “outbound,” “upstream,” and “downstream” describe message direction.


client -- inbound(to server) --message-> proxy # --> server
      <--- proxy <-response--outbound (to user agent)-+

- messages flow downstream,  All messages flow downstream , regardless of whether they are request messages or response messages (see Figure 3-2). The sender of any message is upstream of the receiver

- the parts of a message 

http message structure
{
start line
headers
body
}

The start line and headers are just ASCII text, broken up by lines. Each line ends with a two-character end-of-line sequence, consisting of a carriage return (ASCII 13) and a line-feed character (ASCII 10). This end-of-line sequence is written " CRLF.”. old application may recieve only line feed 

body is optional chunk of data, text or binary or empty 

headers give you a bit of information about the body 

- message syntax 

    + request message
    
    <method> <request-URL> <version>
    <headers>

    <entity-body>

    + response message
    
    <version> <status> <reason-phrase>
    <headers>

    <entity-body>
    
    + fields 
    version, HTTP/<major>.<minor>
    
    response lines containing “HTTP/1.0 200 NOT OK” and “HTTP/1.0 200 OK” should be treated as equivalent success indications
    
    headers, each of which is a name, followed by a colon (:), followed by optional whitespace, followed by a value, followed by a CRLF. 
    
    body, Not all messages contain entity bodies, so sometimes a message terminates with a bare CRLF.

- start lines, reqeust use it to say what to do, response say what happened 

GET /test/hi-there.txt HTTP/1.1

HTTP/1.0  200 OK
- methods, seven of these methods

GET, no body
HEAD, GET just headers for a document, no body
POST, send data to the server, has body
PUT, store data to server, has body 
TRACE, trace the message through proxy servers to the server, no body 
OPTIONS, determine what methods can operate on a server, no body 
DELETE, remove a document from the server, no body

- status codes
overall range           defined range           category
100-199                 100-101                 informational
200-299                 200-206                 successsful
300-399                 300-305                 redirection
400-499                 400-415                 client error 
500-599                 500-505                 server error 

    + examples
200 OK
401 unauthorized 
404 not found 

- Reason phrases are paired one-to-one with status codes. The reason phrase provides a human-readable version of the status code

- version numbers, Version numbers are intended to provide applications speaking HTTP with a clue about each other’s capabilities and the format of the message

- headers, name/value pairs, HTTP header fields add additional information to request and response messages. 

Content-length: 19

    + header classifications 
general headers, both request and response
request headers 
response headers 
entity headers, describe body size and contents or resource itself 
extension headers, customized new headers 

syntax: a name, followed by a colon (:), followed by optional whitespace, followed by the field value, followed by a CRLF.

        * example
        Date: Tue, 3 Oct 1997 02:16:03 GMT
        The date the server generated the response

    + header continuation lines, Long header lines can be made more readable by breaking them into multiple lines, preceding each extra line with at least one space or tab character.
    
```
HTTP/1.0 200 OK
Content-Type: image/gif
Content-Length: 8572
Server: Test Server
	Version 1.0
```

- entity body, Entity bodies are the payload of HTTP messages. They are the things that HTTP was designed to transport.

- version 0.9 messages, HTTP/0.9 messages also consisted of requests and responses, but the request contained merely the method and the request URL, and the response contained only the entity. No version information (it was the first and only version at the time), no status code or reason phrase, and no headers were included.

- methods, compliant with HTTP Version 1.1, a server need implement only the GET and HEAD methods for its resources.

    + safe methods, The GET and HEAD methods are said to be safe, meaning that no action should occur as a result of an HTTP request that uses either the GET or HEAD method.
    
    GET, ask a server to send a resource
    
    HEAD, similar to GET, but the server only return the headers in the response. find a resource, check exist, has been modified 
    
    + PUT, put data into server
    + POST, send input data, often used to support forms
    + TRACE, request initiates a “loopback” diagnostic at the destination server. The server at the final leg of the trip bounces back a TRACE response, with the virgin request message it received in the body of its response. 
    
    Request message:
    ```
    TRACE /product-list.txt HTTP/1.1
    Accept: *
    Host: www.joes-hardware.com
    ```
    
    request through a proxy and get to the server
    ```
    TRACE /product-list.txt HTTP/1.1
    Host: www.joes-hardware.com
    Accept: * 
    Via: 1.1 proxy3.company.com
    ```
    
    ```
    
    Response message:
    ```
    HTTP/1.1 200 OK
    Content-type: text/plain
    Content-length:96
    
    TRACE /product-list.txt HTTP/1.1
    Host: www.joes-hardware.com
    Accept: *
    Via: 1.1 proxy3.company.com
    ```

    No entity body can be sent with a TRACE request. The entity body of the TRACE response contains, verbatim, the request that the responding server received.
    
    + OPTIONS,  asks the server to tell us about the various supported capabilities of the web server. 
    ```
    OPTIONS * HTTP/1.1
    Host: www.joes-hardware.com
    Accept: * 
    ```
    
    ```
    HTTP/1.1 200 OK
    Allow: GET, POST, PUT, OPTIONS
    Context-length:0
    ```
    + DELETE, method does just what you would think
    
    ```
    DELETE /product-list.txt HTTP/1.1
    Host: www.joes-hardware.com
    ```
    
    ```
    HTTP/1.1 200 OK
    Content-Type: text/plain
    Content-Length:54
    
    I have your delete request, will take time to process.
    ```

    + EXTENSION methods, example
    
    These methods are all part of the WebDAV HTTP extension
    
    LOCK, allows a user to "lock" a resource
    MKCOL, allows a user to create a resource 
    COPY, facilitates copying resources on a server 
    MOVE, moves a resource on a server 
    
- Status code, We include the recommended reason phrases from the HTTP/1.1 specification.

    + 100-199, informational status codes
    
    https://learning.oreilly.com/library/view/http-the-definitive/1565925092/ch03s04.html#httptdg-CHP-3-TABLE-6
    
    
    100, continue
    101, switching protocols 
    
    + clients and 100 continue
    If a client is sending an entity to a server and is willing to wait for a 100 Continue response before it sends the entity, the client needs to send an Expect request header (see Appendix C) with the value 100-continue. If the client is not sending an entity, it shouldn’t send a 100-continue Expect header,
    
    + 200-299, success status code 
    200 OK
    201 Created, 
    202 accepted, but server has not performed any action 
    203 no authoritative information, 
    204 no content, response contain headers and a status line 
    205 reset content, tells the browser to clear any html form elements  
    206 partial content, request part or a range of a document by using special headers, this status code indicates that the range request was successful
    
    + 300-399, redirection status codes, tell clients to use alternate locations. allows browsers to go to the new location transparently, without bothering their human users.
    
    good practice to response non-HEAD requests that include a redirection status code to include an entity with a description and links to the redirected URL(s)
    
    ```
    GET /sasonal/index-fall.html HTTP/1.1
    Host: www.joes-hardware.com
    Accept: * 
    If-Modifed-Since: Fri, Oct 3 1997 02:16:00 GMT
    ```
    
    ```
    HTTP/1.1 304 Not Modified
    ```
    
    300 multiple choices, when a client has requested a URL that actually refers to multiple resources
    301 moved permanently
    302 found, like 301 however the client should use the URL given in the location header, future request should use the old URL
    303 see other, tell the client that the resource should be fetched using a different URL
    304 not modified, clients can make their requests conditional by the request headers they include 
    305 use proxy, indicate that the resource must be accessed through a proxy
    306 (unused)
    307 temporary redirect, like 301 however the client should use the URL given in location header, future requests should use the old URL
    
    + 400-499: client error status codes, a request server can't handle 
    
    400 bad request, malformed request 
    401 unauthorized
    402 payment required, not used currently 
    403 forbidden, request refused by server
    404 not found
    405 method not allowed, request method is not supported 
    406 not acceptable
    407 proxy authentication requried, like 401 but used for proxy servers which required authentication
    408 request timeout
    409 conflict, 
    410 gone, similar to 404, except the server once hold the resource. used for web site maintenance
    411 length required, requires a content-length header 
    412 precondition failed, make a conditional request and one of the conditions fails
    413 request entity too large
    414 request URI too long 
    415 unsupported media type, a client sneds an entity of a content type that the server does not understand or support 
    416 request range not satisfiable, a given resource that range invalid 
    417 expectation failed, request contain a expect request header. the server could not satisfy
        * example 
        Expect: 100-continue
        
        if the server does not understand the expect header's value should return 417. 
        
    + 500-599 server error status code 
    500 internal server error 
    501 not implemented
    502 bad gateway, bogus response from the next link in the reqeust response chain. such as unable to connect to its parent gateway
    
    503 service unavailable, server currently cannot service the request but will be able to in the future. it can include a retry-after header in the response 
    
    504 gateway timeout, similar to status code 408, except that the response is coming from a gateway or proxy that has timed out waiting for a response 
    
    505 http version not supported. server application elect not to support older versions of the protocol 
    

- Headers 
    + headers 
    https://learning.oreilly.com/library/view/http-the-definitive/1565925092/apc.html
    
    + file classes of headers 
        * general, used both by client and server
        Date: Tue, 3 Oct 1974 02:16:00 GMT
        
        * request headers, provide extra information to the server
        Accept: */*
        
        * response headers, provide information to the client 
        
        * entity headers, tell the type of the data in the entity body 
        Content-Type: text/html; charset=iso-latin-1
        
        * extension headers, non-standard and created by application 
        
    + references 
    Accept, The Accept header is used by clients to let servers know what media types are acceptable. may include a list of quality values (q values) that tell the server which media type is preferred. “*” is a special value that is usedto wildcard media types. For example,“*/*” represents all types, and“image/*” represents all imagetypes.
        * example:
        
        Accept: text/*, image/*
    Accept-Charset
    Accept-Encoding
    Accept-Language
    Accept-Ranges, it is a response header used by servers to tell clients whether they accept requests for ranges of a resource. Servers might want tosend the “none” value for normalrequests to discourage clients from making range requests in thefuture.
        * example 
        
        Accept-Ranges: 1#range-unit|none
        Accept-Ranges: none
        Accept-Ranges: bytes
    Age, tells the receiver how old aresponse is. It is the sender’s best guess as to howlong ago the response was generated by or revalidated with the originserver. 
        * example 
        Age: delta-seconds
        Age: 60
    Allow, inform clients what HTTP methods are supported on a particular resource
        * example 
        Allow: GET, HEAD
    Authorization, sent by a client to authenticate itself with a server. A client will include this header in its request after receiving a 401 Authentication Required response from a server. 
        * example 
        Authorization: authentication-scheme #authentication-param
        Authorization: Basic YnJpYW4tdG90dHk6T3ch
    Cache-Control, Used to pass caching directions along with the message
        * example
        
        Cache-Control: no-cache
    Client-ip, Provides the IP address of the machine on which the client is running
    Connection, Allows clients and servers to specify options about the request/response connection. One special token value is “close”.This token means that the connection is going to be closed after theresponse is completed. HTTP/1.1 applications that do not supportpersistent connections need to insert the Connection header with the“close” token in all requests andresponses.
        * example 
        Connection: close
    Content-Base, The base URL for resolving relative URLs within the body
    Content-Encoding
    Content-Language
    Content-Length
    Content-Location, Where the resource actually is located, For objects that may have multiple URLs, a response messagecan include a Content-Location header indicating the URL of theobject used to generate the response. The Content-Location can bedifferent from the requested URL. This generally is used by serversthat are directing or redirecting a client to a new URL
        * example 
        Content-Location: (absoluteURL | relativeURL)
        Content-Location: http://www.joes-hardware.com/index.html
        
    Content-MD5
    Content-Range
    Content-Type
    Cookie, Used by clients to pass a token to the server—not a true security header
    Cookie2, Used to note the version of cookies a requestor supports
    Date
    ETag, The entity tag associated with this entity, An entity tag is basically a way of identifying a resource.
        * example 
        ETag: W/"11e92a-457b-3134b5aa”
    Expect, used by clients to let servers know that they expect certain behavior. currently close tied to response code 100. if a server does not understand the Expect header’s value, it should respond with a status code of 417 Expectation Failed.
        * example 
        Expect: 100-continue
    Expires, gives a date and time at which the response is no longer valid
    From, provides the email address of the client's user 
    Host, gives the hostname and port of the server to which request is being sent 
    If-Modified-Since
    If-Match
    If-None-Match
    If-Range
    If-Unmodified-Since
    Last-Modifed
    Location, Tells the client where the entity really is located; used in directing the receiver to a (possibly new) location (URL) for the resource
    Max-Forwards
    MIME-Version, MIME is HTTP’s cousin.While they are radically different, some HTTP servers do constructmessages that are valid under the MIME specification. 
        * example 
        MIME-Version: DIGIT “.” DIGIT
        MIME-Version: 1.0
    
    Pragma, Another way to pass directions along with the message, though not specific to caching, Proxies and gateways must not remove the Pragma header. It is sent by browsers when users click on the Reload/Refresh button. Many servers send Pragma: no-cache as a response header (as an equivalent to Cache-Control: no-cache), but despite its common use
    Proxy-Authenticate
    Proxy-Authorization, Same as Authorization, but used when authenticating with a proxy
    Proxy-Connection
    Public, A list of request methods the server supports for its resources
    Range
    Referer, provides the URL of the document that contains the current request URI
    Retry-After
    Server, The name and version of the server’s application software
    Set-Cookie
    Set-Cookie2
    TE, Tells the server what extension transfer codings are okay to use such as chunked encoding and trailers.
    
        ** example
        transfer-codings= “trailers” | (transfer-extension [accept-params])
        TE: chunked
        
    Trailer, Lists the set of headers that are in the trailer of a message encoded with the chunked transfer encoding
    Title
    Transfer-Encoding 
    UA-(CPU, Disp, OS, Color, Pixels), capabitlity of client 
    Upgrade 
    User-Agent
    Vary, A list of other headers that the server looks at and that may cause the response to vary
    Via, Shows what intermediaries (proxies, gateways) the message has gone through
    Warning
    WWW-Authenticate
    X-Cache
    X-Forwarded-For
    X-Pad
    X-Serial-Number

- reference 
http://www.w3.org/Protocols/rfc2616/rfc2616.txt
http://www.w3.org/Protocols/


# Connection management 
- TCP connections, TCP streams are segmented and shipped by IP packets. 
    + protocol stack, HTTP
HTTP
TCP
IP
Network interfaces

    + protocol stack HTTPS 
HTTP
TLS or SSL
TCP
IP
Network interfaces 

    + IP packets carry TCP segments with chunk of the TCP data stream 
    
Version| Hdr length(words) | Type of service (TDS) | Total datagram length(bytes)
Packet ID(16-bit number)  | Flags | Fragmentation offset 
Time to live (TTL) | Upper-level protocol | Header checksum 
Source IP address 
Destination IP address 
Source port | Destination port 
TCP sequence number 
Piggybacked acknowledgement 
Hdr elngth(words)| Reserved|URG|ACK|PSH|RST|SYN|FIN| Window size 
TCP checksum| Urgent pointer 
Get /index.html HTTP/1.1<CR><LF>
Host:www.joes-hardware.c 
...

- TCP segment is carried by IP packet from 

IP packet header (usually 20 bytes)

A TCP segment header (usually 20 bytes)

A chunk of TCP data (0 or more bytes)

- Keeping TCP connections straight

<source-IP-address, source-port, destination-IP-address, destination-port>

- Programming with TCP sockets, these APIhides all the details of TCP and IP from the HTTP programmer 

s = socket()

bind(s, local_ip:port)

connect(s, remote_ip:port)

listen(s, ...)

s2 = accept(s)

n = read(s, buffer, n)

n = write(s, buffer, n)

close(s)

shutdown(s, <side>)

getsockopt(s, ...)

setsockopt(s, ...)

- client server communication with TCP 

client                              server 
|                                   |create socket(socket)
|                                   |bind socket to port 80
|                                   |permit socket connections (listen)
|                                   |wait for connection(accept)
|get IP address & port              |
|create new socket(socket)          |
|connect to server IP:port          |
|                                   |application notificatied


|send http request(write)           |
|wait for HTTP request(read)        |
|                                   |

- TCP performance considerations 

    + HTTP transaction delays
    server -----------------------------------------------------------------------
                          A       \     A                            \ 
                         /         \   /                              \
                        /            V                                 V
    client --DNS lookup-----Connect----request----| process|---response ---|close

    + possible causes of HTTP delay
    client convert url to IP and DNS resolution
    
    TCP connection delay, a second or two 
    
    take time to send HTTP data through TCP connection
    
    web server then writes back the HTTP response 
    
- performance focus areas 

the TCP connection setup handshake 
TCP slow start congestion control 
Nagle's algorithm for data aggregation 
TCP's delayed acknowledgement algorithm for piggybacked acknowledgements 
TIME_WAIT delays and port exhaustion 

- TCP connection handshake delays 

    1. to request a new TCP connection, TCP exchanges a series of IP packets to negotiate the terms of the connection 
    
    server ---------------------------------------------------------------
               A                 \         A              \
             SYN                SYN+ACK   ACK GET/HTTP...   HTTP/1.1 304
            /                          V /                  V
    client---connection handshake delay------data transfer --------|Time ----


    The TCP connect ACK packet (Figure 4-8c) often is large enough to carry the entireHTTP request message,[4] and many HTTP server response messagesfit into a single IP packet
    
    acknowledgmentalgorithms introduce significant delays. Depending on your operatingsystem, you may be able to adjust or disable the delayedacknowledgment algorithm
    
- TCP slow start, TCP transfer data depends on the age of the TCP connections. Connectiosn tune themselves overtime, to prevent sudden overload. "persistent connections" TCP connection reuse

- nagle's algorithm and TCP_NODELAY

Nagle’s algorithm (named for its creator, John Nagle) attempts to bundle up a large amount of TCP data before sending a packet, aiding network efficiency. The algorithm is described in RFC 896

Nagle’s algorithmwill hold up the sending of data until an acknowledgment arrives, but the acknowledgment itself will be delayed 100-200 milliseconds by thedelayed acknowledgment algorithm

HTTP applications often disable Nagle’s algorithm toimprove performance, by setting the TCP_NODELAY parameter on theirstacks. 

- TIME_WAIT accumulation and port exhaustion 

When a TCP endpoint closes a TCP connection, it maintains in memory asmall control block recording the IP addresses and port numbers ofthe recently closed connection. This information is maintained for ashort time. around twice the estimated maximum segment lifeftime (2msl, often two minutes).
prevents any strayduplicate packets from the previous connection from accidentallybeing injected into a new connection that has the same addresses andport numbers.

client connects to the server, it gets a new sourceport in order to have a unique connection. But because a limitednumber of source ports are available (say, 60,000) and no connectioncan be reused for 2MSL seconds (say, 120 seconds), a limitednumber of source ports are available (say, 60,000) and no connectioncan be reused for 2MSL seconds (say, 120 seconds), this limits theconnect rate to 60,000 / 120 = 500 transactions/sec.
 
Some operatingsystems slow down dramatically when there are numerous openconnections or control blocks
 
- HTTP connection handling 
    the oft-misunderstood connection header, HTTP messages are forwarded hop by hop fromthe client, through intermediary devices, to the origin server (orthe reverse).
    
    two adjacent HTTP applications may want to apply a setof options to their shared connection. The HTTP Connection header field has acomma-separated list of connection tokens thatspecify options for the connection that aren’tpropagated to other connections. 
    
    there are a few hop-by-hop headers that might not be listedas values of a Connection header, but must not be proxied. Theseinclude Proxy-Authenticate, Proxy-Connection, Transfer-Encoding, andUpgrade. For more about the Connection header

- serial transaction delays,  improve HTTPconnection performance.

parallel connections, concurrent HTTP requests across multiple TCP connections 

persistent connections, reusing TCP connections to eliminate connect/close delays

pipelined connections, concurrent HTTP requests across a shared TCP connection 

multiplexed connections, interleaving chunks of requests and responses

- parallel connections may make the pages load faster. a single HTTP transaction to a fast server could easily consume all of the available modem bandwidth. If multiple objects are loaded inparallel, each object will just compete for this limited bandwidth

- persistent connections, Persistent connections offer some advantages over parallel connections. it avoid 

opens/closes a new connection 
reduced performance becauses of TCP slow start 
limitted parallel connections 

    + two types,  the older HTTP/1.0+ “keep-alive” connections and the modern HTTP/1.1 “persistent” connections.
    
- HTTP/1.0+ keep-aliave connections 

- Keep-alive operation, is deprecated and no longer documented in the current HTTP/1.1 specification. 

if the server is willing to keep the connection open for the next request. 

- Keep-alive options, the serverintends to keep the connection open for at most five moretransactions, or until it has sat idle for two minutes

The timeout parameter is sent in a Keep-Alive response header.

The max parameter is sent in a Keep-Alive responseheader. 

The Keep-Alive header also supports arbitrary unprocessed attributes,primarily for diagnostic and debugging purposes.

- Keep-Alive connection restrictions and rules 

keep-aliave doesn't happen by default in HTTP/1.0, client must send it

it must be sent with all messages 

clients can tell if the server will close the connection after the response without keep-alive 

proxies and gateways must enforce the rules of the connection header 

formally keep-alive connections should not be established with a proxy server that isn't guaranteed to support the connection header 

any connection header fileds (include keep-alive) from an HTTP/1.0 device should be ignored, because they may have been forwarded mistakenly by an old proxy server 

clients must be prepared to retry requests if the connection closes before they receive the entire response 

- keey-alive and dumb proxies. both the client and server believe theyare speaking keep-alive, but the proxy they are talking todoesn’t know anything about keep-alive. the proxy will hang waiting for the connection to close 

proxy should ignore and remove the keep-alive header 

- the proxy connection hack, proxy is asmart proxy (capable of understanding persistent connectionhandshaking), it replaces the nonsense Proxy-Connection header with aConnection header, which is then sent to the server, having thedesired effect.


- http/1.1 persistent connections

HTTP/1.1 persistentconnections are active by default. HTTP/1.1 assumesall connections are persistent unless otherwiseindicated. HTTP/1.1 applications have to explicitly add a Connection. clients and servers still can close idle connectionsat any time. 

- persistent connection restrictions 

close request header the client can't send more request 

close request should be final 

HTTP/1.1 proxeis must manage persistent connections separately with clients and servers 

HTTP/1.1 proxy servers should not establish persistent connections with an HTTP/1.0 client 

regardless of the values of connection headers, HTTP/1.1 devices may close the connection at any time 

HTTP/1.1 applications must be able to recover from asynchronous closes 

clients must prepared to retry if the connection closes 

a single user client should maintain at most two persistent connections to any server or proxy.  a proxy should maintain at most2N connections to any server or parent proxy, N is the user count 

    
# Pipelined connections 
    
    
    
# reference 
- internet engineering task force, IETF, https://tools.ietf.org/

Engineering contributions to the IETF start as an Internet Draft, may be promoted to a Request for Comments, and may eventually become an Internet Standard.

- http 1.1
https://ietf.org/rfc/rfc2616.txt

- http 2.0
https://www.ietf.org/rfc/rfc7540.txt

- http 3.0
https://quicwg.org/base-drafts/draft-ietf-quic-http.html










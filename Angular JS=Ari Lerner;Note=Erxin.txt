Angular JS=Ari Lerner;Note=Erxin

# 初识AngularJS

# 数据绑定和第一个Angular 应用
- 数据绑定
angularjs create real time template and update the view 

select a html tag and add attribute ng-app, the tag is contain the area of angularjs application 
<tag ng-app>
</tag>
- template replace
{{variable-name}}

- define controller 
<tag ng-controller="controller-name">
</tag>

define controller in javascript 
function controller-name($scope, other-variable-or-service){
    ...
}

# 模块
- 模块包含了主要的应用代码，一个应用可以包含多个模块module 
angular.module('module-name', [dependencies-requires-string-module-list]) 
声明模块

# 作用域
- $scope, it is nestable

when angularjs init the application ng-app. it will binding the root scope $rootScope. it is the root of all the $scope service 

$scope is a bridge between html and controller 

all the attribute could be accessed directly from the view 

angular.module('my-app', []).run(function($rootScope){
    $rootScope.name = "world";
});

<div ng-app="my-app">
    <h1> hello {{name}}</h1>
</div>

- angular module contain several elements 
directive 
value binding, {{}}
filter
form control

- life cycle of $scope 
user input event which is monitor by ng-module attribute 
or 
The element with the attribute ng-click is clicked 
then angularjs will start event loop 

$scope will evalue the expression 

- directive and scope, ng-controller and ng-repeat will create their own scope 


# 控制器
- define controller 
function NameController($scope){
    ...
}

this will create controller in global scope 

the other way is create controller in some module 
var cm = angular.module('custom-module', []);
cm.controller('custom-controller', function($scope){
    $scope.add = function(v){
        return v+1;
    };
    
});

- use controller 
<div ng-controller="custom-controller">
    <button ng-click="add(1)">Add</button>
</div>

- controller is not design for manipulate the DOM, format or operate the data 

- if angularjs can't find a property from current scope then it will search the parent till $rootScope

- controller is nestable 
<div ng-controller="parent-controller">
    <div ng-controller="child-controller">
    </div>
</div>

then define two controls in javascript. the $scope object of the parent controller could be accessed by the child $scope 

the controller code should keep simple, the process logic should be keep in directive or service 


# 表达式
- {{expression}}
    + 表达式都在其所属的作用域执行
    + 表达式解析错误并不会抛异常, typeerror, referenceError 
    + 不支持流程控制语句
    + 可以接受过滤器
    
- angularjs use built-in $parse service to evalue the expression. we could inject this service into controller to manually evalue the expression. 使用$watch service to add a manually parse process 

<div ng-controller="my-controller">
    <input ng-mode="expr"
           type="text"/>
    <h2>{{value}}</h2>
</div>

angular.module("custom-module", []).controller("my-controller", function($scope, $parse){
    $scope.$watch('expr', function(newVal, oldVal, scope){
        if(newVal != oldVal){
            var parseFun = $parse(newVal);
            $scope.parsedValue = parseFun(scope);
        }
    });
});

- 插值字符串, $interpolate, 手动更新时插入指定字符串

# 过滤器
- $filter 
{{expression | filter}}

- built-in filter 
currency 
date 
true/false 
json
limitTo
lowercase
uppercase 
number 
orderBy

- custom filter 
angular.module("my-module.filters", []).filter('capitalize', function(){
    return function(input){};
});

- form validater attributed, which could be added to the member elements of form such as input
required
ng-minlength
ng-maxlength
ng-pattern
<input type="email"/>  //automatic valite email format 
<input type="number"/>
type=url 

formName.inputFieldName.$pristine, if changed then equal to true else false 
formName.inputFieldName.$valid, $invalid, $error 

- css i angualr 
.ng-pristine{}
.ng-dirty{}
.ng-valid{}
.ng-invalid{}

$parsers, $formatters 当ng-mode中的值变化时会依次调用这两个方法


# 指令简介
- built-in directive is start with ng such as ng-app 
angular.module("my-module", []).directive("mydirective", function(){
    return {
    
    };
});

directive return the object contain the function and property definitions for the custom directive object 


# 内置命令
- similar to the html attribute but start with ng 
- basic 
ng-href 
ng-src 
ng-disabled
ng-checked
ng-readonly 
ng-selected
ng-class 
ng-style
 
- bool 
ng-disabled 
ng-readonly
ng-checked

- sub scope in directive
    + ng-app, rootScope
    + ng-controller add a sub scope 
    + ng-include, will compile a external html snippet 
    + ng-swith-when on="propertyName" use together to display different view base on different property value 
    + ng-if, if false then angularjs will remove the dom element 
    + ng-repeat, work with $index, $last, $first, $middle, $even, $odd 
    + ng-init, use to define the scope status 
    + ng-bind, similar to {{}}
    + ng-cloak, use ng-bind to avoid render blink, will hide the element till render completed 
    + ng-bind-template, use to bind multiple expression in view "{{exp0}} {{exp1}}"
    + ng-mode, used to bind the input, select, text area or custom form element control to their current $scope property 
    + ng-show/hide 
    + ng-change, will evalue the expression value whenever a relative propety changed, should used with ng-mode 
    <input type="text" ng-model="equation.x" ng-change="change()" />
    + ng-form, use to nested form in another form 
    ng-submit
    ng-click 
    
    + ng-click 
    + ng-select, used to bind <select> element could use with ng-mode and ng-options 
    + ng-class 
    + ng-attr-(suffix)
    
    angularjs will automatic search the {{}} expression and automatic register the expression 
    

# 指令详解
- define 
angular.module("module", []).directive('my-directive', function($timeout, user-define-service){

    return {
        ...
    };
});

the $compile service will use the return object to interactive with DOM reference the directive
- directive propoerties 
restrict:string
priority:number
terminal:bool 
tempalte:string or temlate func(elem, attrs){}
tempalteUrl:string 
scope:bool or object 
transclude:bool 
controller: string or function(scope, elem, attrs, transclude, otherInjecttables){}
require:string 
link:function(scope, elem, attrs){}
compile:function(elem, attrs, transclude){
    return {
        pre:function(){},
        post:function(){}
    };
    
    //or
    return function postLink(...){};
}

if the scope is set to {} then the scope inside the directive could not access the outside scope 

binding strategy 
use @ or @attr, binding local scope with DOM property 
use = to dual-binding 
use & or &attr

transclude, true use to let access outside scope and also support the template element to access the outside scope. is the function used to manipulate the DOM 

- angularjs life cycle 
    + compile, angualrjs will compile all the html element 
    + link function could operate the DOM 
    
- ngModel supply a low level api to access the data 

- directive could be used to 
    + custom render 
    + custom validate 
    
# AngularJS模块加载 
- configure 
angular.module('myApp', []).config(function($provide){

});

- execute use run function on the return module object 

# multiple view and router 
- angualrjs support use the $routeProvider to call the router 
- router, angualrjs use when and otherwise functions to define the router 
angular.module('custom-module', []).config(
['$routeProvider', function($routeProvider){
    $routeProvider.when('/',
                        {
                            templateUrl: 'views/home.html',
                            controller: 'homeController'
                        });
}]);

the when method could be called multiple times 

- a complex route strategy should contain a filter to redirect all the accident url to a specific url 
- route property 
controller 
tempalte 
templateUrl 
resolve, angular will inject all the element in the list into controller 
redirectTo
reloadOnSearch 
$routeParams, contain the paramter k/v in url 
$location service to provide url parser it is a wrapper to the window.location object 

- route mode
    + hashbang, url start with # 
    
    + html5 module 
    
- route event 
$routeChangeStart
$routeChangeSuccess 
$routeChangeError 

use on method on these event service to book the event 

# 依赖注入











Php manual=Mehdi Achour;Note=Erxin

# Preface 

# introduction 
- what is php 
PHP (recursive acronym for PHP: Hypertext Preprocessor），can be embeded into html 

<?php
            echo "Hi, I'm a PHP script!";
?>

- what can php do? 
    + server side script 
    collect data, generate dynamic html, send receive cookies etc 
    
    + command line scripting, executed on *nix or linux, or task scheduler on windows 
    
    + writing desktop app, php gtk 
    
    + wide range of database support, PDO, ODBC, cURL, sockets
    http://php.net/manual/en/book.pdo.php
    http://php.net/manual/en/book.uodbc.php
    http://php.net/manual/en/book.curl.php
    http://php.net/manual/en/book.sockets.php
    
- php extension list 
http://php.net/manual/en/extensions.alphabetical.php

example, xdebug 
https://xdebug.org/

- HHVM
open source virtual machine designed for executing programs written in Hack and PHP. used just-in time compilation 
https://github.com/facebook/hhvm

- download window php interpretor 
http://windows.php.net/download


# Getting started 
- a simple tutorial 
- what do I need 
apache 
php 
mysql 

reference, http://php.net/manual/en/install.php

reference wamp amp packages, https://en.wikipedia.org/wiki/List_of_Apache%E2%80%93MySQL%E2%80%93PHP_packages

- your first php enabled page 
phpinfo();

- predefined variables 
Superglobals — Superglobals are built-in variables that are always available in all scopes
$GLOBALS — References all variables available in global scope
$_SERVER — Server and execution environment information
$_GET — HTTP GET variables
$_POST — HTTP POST variables
$_FILES — HTTP File Upload variables
$_REQUEST — HTTP Request variables
$_SESSION — Session variables
$_ENV — Environment variables
$_COOKIE — HTTP Cookies
$php_errormsg — The previous error message
$HTTP_RAW_POST_DATA — Raw POST data
$http_response_header — HTTP response headers
$argc — The number of arguments passed to script
$argv — Array of arguments passed to script

- dealing with forms 
    + print variable from forms 
    <form action="action.php" method="post">
     <p>Your name: <input type="text" name="name" /></p>
     <p>Your age: <input type="text" name="age" /></p>
     <p><input type="submit" /></p>
    </form>
    
    
    Hi <?php echo htmlspecialchars($_POST['name']); ?>.
    You are <?php echo (int)$_POST['age']; ?> years old.

    htmlspecialchars() makes sure any characters that are special in html are properly encoded

# Installation and configuration 
- reference 
http://php.net/manual/en/install.php

different os 

    + installation on cloud 
    http://php.net/manual/en/install.cloud.azure.php
    http://php.net/manual/en/install.cloud.ec2.php
    
    + fastcgi process manager fpm 
    http://php.net/manual/en/install.fpm.php
    
    + install pecl extensions 
    http://php.net/manual/en/install.pecl.php
   
- runtime configuration 
    + the configuration file, The configuration file (php.ini) is read when PHP starts up.
        search order 
        * SAPI module specific location
        * registry, s of PHP 5.2.0, the location of the php.ini file can be set for different versions of PHP. The following registry keys are examined in order: [HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z], [HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y] and [HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x]
        
        * [HKEY_LOCAL_MACHINE\SOFTWARE\PHP], value of IniFilePath (Windows only).
        * current working dir 
        * web server's directory for SAPI or directory of php 
        * window dir (c:\windows/winnt)
    + .user.ini files, In addition to the main php.ini file, PHP scans for INI files in each directory, starting with the directory of the requested PHP file, and working its way up to the current document root 
    
    + where a configuration setting may be set 
     For example, some settings may be set within a PHP script using ini_set()
     
     For example, the output_buffering setting is PHP_INI_PERDIR therefore it may not be set using ini_set(). However, the display_errors directive is PHP_INI_ALL therefore it may be set anywhere, including with ini_set().
     
     PHP_INI_USER	Entry can be set in user scripts (like with ini_set()) or in the Windows registry. Since PHP 5.3, entry can be set in .user.ini
    PHP_INI_PERDIR	Entry can be set in php.ini, .htaccess, httpd.conf or .user.ini (since PHP 5.3)
    PHP_INI_SYSTEM	Entry can be set in php.ini or httpd.conf
    PHP_INI_ALL	Entry can be set anywhere
    
    + how to change configuration settings 
    When using PHP as an Apache module, you can also change the configuration settings using directives in Apache configuration files (e.g. httpd.conf) and .htaccess files.You will need "AllowOverride Options" or "AllowOverride All" privileges to do so.

    For a listing of which directives are PHP_INI_ALL, PHP_INI_PERDIR, or PHP_INI_SYSTEM, have a look at the List of php.ini directives appendix
    
    + changing php configuration via windows registry 
    When running PHP on Windows, the configuration values can be modified on a per-directory basis using the Windows registry. The configuration values are stored in the registry key HKLM\SOFTWARE\PHP\Per Directory Values, in the sub-keys corresponding to the path names. 
    
    
# Language reference 
## basic syntax 
- php tags 
<?php[whitespace] ... ?>

If a file is pure PHP code, it is preferable to omit the PHP closing tag at the end of the file. This prevents accidental whitespace or new lines being added after the PHP closing tag

- escaping from html 
Everything outside of a pair of opening and closing tags is ignored by the PHP parser which allows PHP files to have mixed content

    + advance escape 
<?php if ($expression == true): ?>
  This will show if the expression is true.
<?php else: ?>
  Otherwise this will show.
<?php endif; ?>

    + asp style tags are not recommanded 
 Two of these, <?php ?> and <script language="php"> </script>, are always available. There is also the short echo tag <?= ?>, which is always available in PHP 5.4.0 and later.

The other two are short tags and ASP style tags. As such, while some people find short tags and ASP style tags convenient

    + contrl the tag style in php.ini 
Short tags (example three) are only available when they are enabled via the short_open_tag php.ini
ASP style tags (example five) are only available when they are enabled via the asp_tags php.ini

- instruction separation

The closing tag of a block of PHP code automatically implies a semicolon; 

in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files

- comments 
<?php
    echo 'This is a test'; // This is a one-line c++ style comment
    /* This is a multi line comment
       yet another line of comment */
    echo 'This is yet another test';
    echo 'One Final Test'; # This is a one-line shell-style comment
?>

## Types 
- example 
<?php
$a_bool = TRUE;   // a boolean
$a_str  = "foo";  // a string
$a_str2 = 'foo';  // a string
$an_int = 12;     // an integer

echo gettype($a_bool); // prints out:  boolean
echo gettype($a_str);  // prints out:  string

// If this is an integer, increment it by four
if (is_int($an_int)) {
    $an_int += 4;
}

// If $a_bool is a string, print it out
// (does not print out anything)
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>

- boolean 
$isTrue = True;

    + convert to boolean 
    To explicitly convert a value to boolean, use the (bool) or (boolean) casts. 
    
    + values are consider false 
the boolean FALSE itself
the integer 0 (zero)
the float 0.0 (zero)
the empty string, and the string "0"
an array with zero elements
the special type NULL (including unset variables)
SimpleXML objects created from empty tags    

    + value consider to true, 
   Every other value is considered TRUE (including any resource and NAN)
- integer  can be specified in decimal (base 10), hexadecimal (base 16 0x1234), octal (base 8, 0123) or binary (base 2 0b1234) notation, optionally preceded by a sign (- or +).

    + about two billion is the usual value (that's 32 bits signed). 64-bit platforms usually have a maximum value of about 9E18, except on Windows prior to PHP 7, where it was always 32 bit. PHP does not support unsigned integers. Integer size can be determined using the constant PHP_INT_SIZE
    
    Prior to PHP 7, if an invalid digit was given in an octal integer (i.e. 8 or 9), the rest of the number was ignored
    
    + To explicitly convert a value to integer, use either the (int) or (integer) casts. However, in most cases the cast is not needed, since a value will be automatically converted if an operator, function or control structure requires an integer argument. intval()
    
    + If a resource is converted to an integer, then the result will be the unique resource number assigned to the resource by PHP at runtime
    
    If the float is beyond the boundaries of integer (usually +/- 2.15e+9 = 2^31 on 32-bit platforms and +/- 9.22e+18 = 2^63 on 64-bit platforms other than Windows), the result is undefined, 
    
Never cast an unknown fraction to integer, as this can sometimes lead to unexpected results.
<?php
echo (int) ( (0.1+0.7) * 10 ); // echoes 7!
?>
    
- float aka double 
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;

    + compare float numbers 
    testing floating point values for equality is problematic, due to the way that they are represented internally. However, there are ways to make comparisons of floating point values that work around these limitations.
    
    $a and $b are equal to 5 digits of precision.
<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if(abs($a-$b) < $epsilon) {
    echo "true";
}
?>
    
    + NaN, Some numeric operations can result in a value represented by the constant NAN. This result represents an undefined or unrepresentable value in floating-point calculations. 
    
    Any loose or strict comparisons of this value against any other value, including itself, but except TRUE, will have a result of FALSE.
    
    + floating point precision 
    This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8,
    
    + reference 
    http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
- string 
    + php only support 256 character set 
    
    + syntax 
        * single quoted string, no furture interpretation 
        echo 'this is a string';
        
        // Outputs: You deleted C:\*.*?
        echo 'You deleted C:\\*.*?';

        // Outputs: You deleted C:\*.*?
        echo 'You deleted C:\*.*?';

        // Outputs: This will not expand: \n a newline
        echo 'This will not expand: \n a newline';

        // Outputs: Variables do not $expand $either
        echo 'Variables do not $expand $either';
        
        * double quoted string 
        php will interpret the following escape sequences for special characters, The most important feature of double-quoted strings is the fact that variable names will be expanded.
        \n	linefeed (LF or 0x0A (10) in ASCII)
        \r	carriage return (CR or 0x0D (13) in ASCII)
        \t	horizontal tab (HT or 0x09 (9) in ASCII)
        \v	vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5)
        \e	escape (ESC or 0x1B (27) in ASCII) (since PHP 5.4.4)
        \f	form feed (FF or 0x0C (12) in ASCII) (since PHP 5.2.5)
        \\	backslash
        \$	dollar sign
        \"	double-quote
        \[0-7]{1,3}	the sequence of characters matching the regular expression is a character in octal notation, which silently overflows to fit in a byte (e.g. "\400" === "\000")
        \x[0-9A-Fa-f]{1,2}	the sequence of characters matching the regular expression is a character in hexadecimal notation
        \u{[0-9A-Fa-f]+}	the sequence of characters matching the regular expression is a Unicode codepoint, which will be output to the string as that codepoint's UTF-8 representation (added in PHP 7.0.0)      

        * A third way to delimit strings is the heredoc syntax: <<<. After this operator, an identifier is provided, then a newline. The string itself follows, and then the same identifier again to close the quotation.
        
<?php
class foo {
    public $bar = <<<"EOT" //optional close with double quote 
bar
    EOT;//error 
}
// Identifier must not be indented
?>

        * nowdoc the variable will not be interpret
        A nowdoc is identified with the same <<< sequence used for heredocs, but the identifier which follows is enclosed in single quotes, e.g. <<<'EOT'
        
    + variable parsing 
        * simple syntax, If a dollar sign ($) is encountered, the parser will greedily take as many tokens as possible to form a valid variable name.
        $variable_name 
        * complex syntax, curly syntax 
        ${variable_name}
        
        It is also possible to access class properties using variables within strings using this syntax.
        echo "{$foo->{$baz[1]}}\n";
        
         Functions, method calls, static class variables, and class constants inside {$} work since PHP 5. However, the value accessed will be interpreted as the name of a variable in the scope in which the string is defined. 
         class beers {
            const softdrink = 'rootbeer';
            public static $ale = 'ipa';
        }
        $rootbeer = 'A & W';
        $ipa = 'Alexander Keith\'s';
        // This works; outputs: I'd like an A & W
        echo "I'd like an {${beers::softdrink}}\n";
        // This works too; outputs: I'd like an Alexander Keith's
        echo "I'd like an {${beers::$ale}}\n";
        
    + Accessing variables of other types (not including arrays or objects implementing the appropriate interfaces) using [] or {} silently returns NULL.
    
    + convert to string 
    value converted to a string using strval(). 
    
    a boolean TRUE is converted to string "1", false is "", which allowed convert back and forth 
    
    The decimal point character is defined in the script's locale (category LC_NUMERIC).
    
    Arrays are always converted to the string "Array"; because of this, echo and print can not by themselves show the contents of an array.
    
    in order to convert objects to string magic method __toString must be used
    
    NULL is always convert to an empty string 
         
    See the functions print_r() and var_dump() for more effective means of inspecting the contents of these types(array, object or resource)
    
    serialize php object to string by serialize() function 
    
    If the string does not contain any of the characters '.', 'e', or 'E' and the numeric value fits into integer type limits otherwise convert to float 
    
    If the string starts with valid numeric data, this will be the value used. Otherwise, the value will be 0 (zero).
    
    $foo = 1 + "10.5";                // $foo is float (11.5)
    $foo = 1 + "-1.3e3";              // $foo is float (-1299)
    $foo = 1 + "bob-1.3e3";           // $foo is integer (1)
    $foo = 1 + "bob3";                // $foo is integer (1)
    $foo = 1 + "10 Small Pigs";       // $foo is integer (11)
    $foo = 4 + "10.2 Little Piggies"; // $foo is float (14.2)
    $foo = "10.0 pigs " + 1;          // $foo is float (11)
    $foo = "10.0 pigs " + 1.0;        // $foo is float (11) 
    
    Use the ord() and chr() functions to convert between ASCII codes and characters.
    
    + details of the string type 
    The string in PHP is implemented as an array of bytes such as network socket – will still return strings.
    
    string will be encoded in whatever fashion it is encoded in the script file. 
        * Some functions assume that the string is encoded in some (any) single-byte encoding, but they do not need to interpret those bytes as specific characters. 
        * Other functions are passed the encoding of the string, possibly they also assume a default
        * Others use the current locale (see setlocale()), but operate byte-by-byte. This is the case of strcasecmp(), strtoupper() and ucfirst(). they can be used with syngle byte encoding 
        * they may just assume the string is using a specific encoding, usually UTF-8. 
- array, An array in PHP is actually an ordered map. 
    + it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary,
    * An array can be created using the array() language construct. 
array(
    key  => value,
    key2 => value2,
    key3 => value3,
    ...
);

// as of PHP 5.4
$array = [
    "foo" => "bar",
    "bar" => "foo",
];
    + key cast will occur 
        * Strings containing valid decimal integers, unless the number is preceded by a + sign, will be cast to the integer type.
        * Floats are also cast to integers,
        * Bools are cast to integers
        * Null will be cast to the empty string 
        * Arrays and objects can not be used as keys
        
    + key is optional,  If it is not specified, PHP will use the increment of the largest previously used integer key.
    $array = array("foo", "bar", "hello", "world");//zero based index 
    
    $array = array(
         "a",
         "b",
    6 => "c",
         "d",
    );
    
    + array access, accessed using the array[key] syntax.
<?php
function getArray() {
    return array(1, 2, 3);
}

// on PHP 5.4
$secondElement = getArray()[1];

// previously
$tmp = getArray();
$secondElement = $tmp[1];

// or
list(, $secondElement) = getArray();

access an array key which has not been defined is the same as accessing any other undefined variable: an E_NOTICE-level error message will be issued, and the result will be NULL.

    + creating/modifying with square bracket
    This is done by assigning values to the array, specifying the key in brackets. The key can also be omitted, resulting in an empty pair of brackets ([]).
    
    $arr[key] = value;
    $arr[] = value;
    
    To change a certain value, assign a new value to that element using its key. To remove a key/value pair, call the unset() function on it.
    
    
    + remove element from array 
    To remove a key/value pair, call the unset() function on it.
    unset($arr[5]);
    
// Create a simple array.
$array = array(1, 2, 3, 4, 5);
print_r($array);

// Now delete every item, but leave the array itself intact:
foreach ($array as $i => $value) {
    unset($array[$i]);
}
print_r($array);

// Append an item (note that the new key is 5, instead of 0).
$array[] = 6;
print_r($array);

// Re-index:
$array = array_values($array);
$array[] = 7;
print_r($array);

output:
Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
)
Array
(
)
Array
(
    [5] => 6
)
Array
(
    [0] => 6
    [1] => 7
)
    + can be reindexed using the array_values() function.
    + Always use quotes around a string literal array index. For example, $foo['bar'] is correct, while $foo[bar] is not. 

    + For any of the types integer, float, string, boolean and resource, converting a value to an array results in an array 
    
    If an object is converted to an array, the result is an array whose elements are the object's properties. The keys are the member variable names, with a few notable exceptions: integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have null bytes on either side
    
    class A {
        private $A; // This will become '\0A\0A'
    }

    class B extends A {
        private $A; // This will become '\0B\0A'
        public $AA; // This will become 'AA'
    }

    var_dump((array) new B());
    The above will appear to have two keys named 'AA', although one of them is actually named '\0A\0A'.
    
    converting Null to array get empty array 
    
    + comparing, It is possible to compare arrays with the array_diff() function and with array operators.
    
    + reference operator to copy an array by reference. assignment always involves value copying 
    <?php
    $arr1 = array(2, 3);
    $arr2 = $arr1;
    $arr2[] = 4; // $arr2 is changed,
                 // $arr1 is still array(2, 3)
                 
    $arr3 = &$arr1;
    $arr3[] = 4; // now $arr1 and $arr3 are the same
    ?>
    
    + short array sort($files);
    
    + changing element in loop 
    foreach ($colors as &$color) {
        $color = strtoupper($color);
    }
    
- object 
- callable 
- iterable 
- resource 
- null 
- mixed
- number 
- callback aka callable 
array|object 
- void 
- pseudo-variable $....
- convert variable types 
forcibly convert a variable to a certain type, either cast the variable or use the settype() function on it.















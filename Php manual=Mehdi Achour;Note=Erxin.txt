Php manual=Mehdi Achour;Note=Erxin

# Preface 

# introduction 
- what is php 
PHP (recursive acronym for PHP: Hypertext Preprocessor），can be embeded into html 

<?php
            echo "Hi, I'm a PHP script!";
?>

- what can php do? 
    + server side script 
    collect data, generate dynamic html, send receive cookies etc 
    
    + command line scripting, executed on *nix or linux, or task scheduler on windows 
    
    + writing desktop app, php gtk 
    
    + wide range of database support, PDO, ODBC, cURL, sockets
    http://php.net/manual/en/book.pdo.php
    http://php.net/manual/en/book.uodbc.php
    http://php.net/manual/en/book.curl.php
    http://php.net/manual/en/book.sockets.php
    
- php extension list 
http://php.net/manual/en/extensions.alphabetical.php

example, xdebug 
https://xdebug.org/

- HHVM
open source virtual machine designed for executing programs written in Hack and PHP. used just-in time compilation 
https://github.com/facebook/hhvm

- download window php interpretor 
http://windows.php.net/download


# Getting started 
- a simple tutorial 
- what do I need 
apache 
php 
mysql 

reference, http://php.net/manual/en/install.php

reference wamp amp packages, https://en.wikipedia.org/wiki/List_of_Apache%E2%80%93MySQL%E2%80%93PHP_packages

- your first php enabled page 
phpinfo();

- predefined variables 
Superglobals — Superglobals are built-in variables that are always available in all scopes
$GLOBALS — References all variables available in global scope
$_SERVER — Server and execution environment information
$_GET — HTTP GET variables
$_POST — HTTP POST variables
$_FILES — HTTP File Upload variables
$_REQUEST — HTTP Request variables
$_SESSION — Session variables
$_ENV — Environment variables
$_COOKIE — HTTP Cookies
$php_errormsg — The previous error message
$HTTP_RAW_POST_DATA — Raw POST data
$http_response_header — HTTP response headers
$argc — The number of arguments passed to script
$argv — Array of arguments passed to script

- dealing with forms 
    + print variable from forms 
    <form action="action.php" method="post">
     <p>Your name: <input type="text" name="name" /></p>
     <p>Your age: <input type="text" name="age" /></p>
     <p><input type="submit" /></p>
    </form>
    
    
    Hi <?php echo htmlspecialchars($_POST['name']); ?>.
    You are <?php echo (int)$_POST['age']; ?> years old.

    htmlspecialchars() makes sure any characters that are special in html are properly encoded

# Installation and configuration 
- reference 
http://php.net/manual/en/install.php

different os 

    + installation on cloud 
    http://php.net/manual/en/install.cloud.azure.php
    http://php.net/manual/en/install.cloud.ec2.php
    
    + fastcgi process manager fpm 
    http://php.net/manual/en/install.fpm.php
    
    + install pecl extensions 
    http://php.net/manual/en/install.pecl.php
   
- runtime configuration 
    + the configuration file, The configuration file (php.ini) is read when PHP starts up.
        search order 
        * SAPI module specific location
        * registry, s of PHP 5.2.0, the location of the php.ini file can be set for different versions of PHP. The following registry keys are examined in order: [HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z], [HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y] and [HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x]
        
        * [HKEY_LOCAL_MACHINE\SOFTWARE\PHP], value of IniFilePath (Windows only).
        * current working dir 
        * web server's directory for SAPI or directory of php 
        * window dir (c:\windows/winnt)
    + .user.ini files, In addition to the main php.ini file, PHP scans for INI files in each directory, starting with the directory of the requested PHP file, and working its way up to the current document root 
    
    + where a configuration setting may be set 
     For example, some settings may be set within a PHP script using ini_set()
     
     For example, the output_buffering setting is PHP_INI_PERDIR therefore it may not be set using ini_set(). However, the display_errors directive is PHP_INI_ALL therefore it may be set anywhere, including with ini_set().
     
     PHP_INI_USER	Entry can be set in user scripts (like with ini_set()) or in the Windows registry. Since PHP 5.3, entry can be set in .user.ini
    PHP_INI_PERDIR	Entry can be set in php.ini, .htaccess, httpd.conf or .user.ini (since PHP 5.3)
    PHP_INI_SYSTEM	Entry can be set in php.ini or httpd.conf
    PHP_INI_ALL	Entry can be set anywhere
    
    + how to change configuration settings 
    When using PHP as an Apache module, you can also change the configuration settings using directives in Apache configuration files (e.g. httpd.conf) and .htaccess files.You will need "AllowOverride Options" or "AllowOverride All" privileges to do so.

    For a listing of which directives are PHP_INI_ALL, PHP_INI_PERDIR, or PHP_INI_SYSTEM, have a look at the List of php.ini directives appendix
    
    + changing php configuration via windows registry 
    When running PHP on Windows, the configuration values can be modified on a per-directory basis using the Windows registry. The configuration values are stored in the registry key HKLM\SOFTWARE\PHP\Per Directory Values, in the sub-keys corresponding to the path names. 
    
- install php on window 
    + reference 
    http://php.net/manual/en/install.windows.php
    + requirements 
    php 7.0+, crt 14  https://www.microsoft.com/en-us/download/details.aspx?id=48145
    
    + pecl extensions are pre-built for windows and available from 
    http://windows.php.net/downloads/pecl/releases/
    
    + php installer tools on windows 
    Microsoft's Web Platform Installer (WebPI).
    XAMPP
    WAMPP
    bitnami, https://bitnami.com/stack/wamp
    
    + recommended configuration 
    Opcache, compiles and optimizes php scripts and caches them in memory 
        * in php.ini 
        zend_extension=php_opcache.dll
        opcache.enable=On
        opcache.cli_enable=On
    
        * WinCache for iis . especially if in a shared whosting environment or using networked file storage(NAS)
        http://pecl.php.net/package/WinCache, download and copy to php extension dir 
        
        setting in php.ini 
        extension=php_wincache.dll
        wincache.fcenabled=1
        wincache.ocenabled=1

        * IIS configuration 
        In IIS Manager, Install FastCGI module and add a handler mapping for `.php` to the path to PHP-CGI.exe
        
        use the APPCMD command line tool to script IIS configuration
        
        * database 
        PHP includes mysqli and pdo_mysql extensions.
        mysql https://dev.mysql.com/downloads/windows/
        
    + manual php installation on windows 
        * reference 
        http://php.net/manual/en/install.windows.manual.php
        http://php.net/manual/en/install.windows.legacy.index.php#install.windows.legacy.iis7
        * choose web server 
        iis, add server role 
        
        * command line to configure iis and php 
        @echo off

        REM download .ZIP file of PHP build from http://windows.php.net/downloads/
        REM
        REM path to directory you decompressed PHP .ZIP file into
        set phpdir=c:\php
        set phppath=php-5.6.19-nts-Win32-VC11-x86

        REM Clear current PHP handlers
        %windir%\system32\inetsrv\appcmd clear config /section:system.webServer/fastCGI
        %windir%\system32\inetsrv\appcmd set config /section:system.webServer/handlers /-[name='PHP_via_FastCGI']

        REM Set up the PHP handler
        %windir%\system32\inetsrv\appcmd set config /section:system.webServer/fastCGI /+[fullPath='%phpdir%\%phppath%\php-cgi.exe']
        %windir%\system32\inetsrv\appcmd set config /section:system.webServer/handlers /+[name='PHP_via_FastCGI',path='*.php',verb='*',modules='FastCgiModule',scriptProcessor='%phpdir%\%phppath%\php-cgi.exe',resourceType='Unspecified']
        %windir%\system32\inetsrv\appcmd set config /section:system.webServer/handlers /accessPolicy:Read,Script

        REM Configure FastCGI Variables
        %windir%\system32\inetsrv\appcmd set config -section:system.webServer/fastCgi /[fullPath='%phpdir%\%phppath%\php-cgi.exe'].instanceMaxRequests:10000
        %windir%\system32\inetsrv\appcmd.exe set config -section:system.webServer/fastCgi /+"[fullPath='%phpdir%\%phppath%\php-cgi.exe'].environmentVariables.[name='PHP_FCGI_MAX_REQUESTS',value='10000']"
        %windir%\system32\inetsrv\appcmd.exe set config -section:system.webServer/fastCgi /+"[fullPath='%phpdir%\%phppath%\php-cgi.exe'].environmentVariables.[name='PHPRC',value='%phpdir%\%phppath%\php.ini']"
        
        * configuration for iis 7.0 and later
        window server 2008 r2+ http://php.net/manual/en/install.windows.legacy.index.php#install.windows.legacy.iis7
        
        enable fastCGI support in IIS 
            start menu -> run -> CompMgmtLauncher 
            add role iis and enable CGI 
            
        configure iis to process php requests 
            download php http://windows.php.net/download/
            Thread-Safe(TS) - use for single process web serves, like Apache with mod_php

            Non-Thread-Safe(NTS) - use for IIS and other FastCGI web servers (Apache with mod_fastcgi) and recommended for command-line scripts

            x86 - production use of PHP 5.5 or 5.6 or 7.0.

            x64 - production use of PHP 7.0+ unless its a 32-bit only version of Windows. 5.5 and 5.6 x64 are expiremental.
            
            configure php.ini 
            fastcgi.impersonate = 1
            fastcgi.logging = 0
            cgi.fix_pathinfo=1
            cgi.force_redirect = 0
            
            configure iis manager user interface to create a handler mapping for php 
            run -> inetmgr 
            select server node in connections tree 
            feature view page open the handler mappings feature 
            actions pane click "add module mapping..."
            add module mapping dialog enter the following 
                request path: *.php 
                module: FastCgiModule 
                executable: c:\[path to php installation]\php-cgi.exe 
                name: PHP_via_FastCGI
            click request restrictions button and then configure the mapping to invoke handler only if request is mapped to a file or a folder 
            
            configure iis with command for handler mapping for php 
            %windir%\system32\inetsrv\appcmd set config /section:system.webServer/fastCGI ^/+[fullPath='c:\PHP\php-cgi.exe']
            
            createting handler mapping for php request 
            %windir%\system32\inetsrv\appcmd set config /section:system.webServer/handlers ^
            /+[name='PHP_via_FastCGI', path='*.php',verb='*',modules='FastCgiModule',^
            scriptProcessor='c:\PHP\php-cgi.exe',resourceType='Either']
            
        impersonation and file system access 
        
- install php on azure app services 
http://php.net/manual/en/install.cloud.azure.php

- install on old window 98 etc 
http://php.net/manual/en/install.windows.legacy.index.php#install.windows.legacy.commandline
    
# Language reference 
## basic syntax 
- php tags 
<?php[whitespace] ... ?>

If a file is pure PHP code, it is preferable to omit the PHP closing tag at the end of the file. This prevents accidental whitespace or new lines being added after the PHP closing tag

- escaping from html 
Everything outside of a pair of opening and closing tags is ignored by the PHP parser which allows PHP files to have mixed content

    + advance escape 
<?php if ($expression == true): ?>
  This will show if the expression is true.
<?php else: ?>
  Otherwise this will show.
<?php endif; ?>

    + asp style tags are not recommanded 
 Two of these, <?php ?> and <script language="php"> </script>, are always available. There is also the short echo tag <?= ?>, which is always available in PHP 5.4.0 and later.

The other two are short tags and ASP style tags. As such, while some people find short tags and ASP style tags convenient

    + contrl the tag style in php.ini 
Short tags (example three) are only available when they are enabled via the short_open_tag php.ini
ASP style tags (example five) are only available when they are enabled via the asp_tags php.ini

- instruction separation

The closing tag of a block of PHP code automatically implies a semicolon; 

in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files

- comments 
<?php
    echo 'This is a test'; // This is a one-line c++ style comment
    /* This is a multi line comment
       yet another line of comment */
    echo 'This is yet another test';
    echo 'One Final Test'; # This is a one-line shell-style comment
?>

## Types 
- example 
<?php
$a_bool = TRUE;   // a boolean
$a_str  = "foo";  // a string
$a_str2 = 'foo';  // a string
$an_int = 12;     // an integer

echo gettype($a_bool); // prints out:  boolean
echo gettype($a_str);  // prints out:  string

// If this is an integer, increment it by four
if (is_int($an_int)) {
    $an_int += 4;
}

// If $a_bool is a string, print it out
// (does not print out anything)
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>

- boolean 
$isTrue = True;

    + convert to boolean 
    To explicitly convert a value to boolean, use the (bool) or (boolean) casts. 
    
    + values are consider false 
the boolean FALSE itself
the integer 0 (zero)
the float 0.0 (zero)
the empty string, and the string "0"
an array with zero elements
the special type NULL (including unset variables)
SimpleXML objects created from empty tags    

    + value consider to true, 
   Every other value is considered TRUE (including any resource and NAN)
- integer  can be specified in decimal (base 10), hexadecimal (base 16 0x1234), octal (base 8, 0123) or binary (base 2 0b1234) notation, optionally preceded by a sign (- or +).

    + about two billion is the usual value (that's 32 bits signed). 64-bit platforms usually have a maximum value of about 9E18, except on Windows prior to PHP 7, where it was always 32 bit. PHP does not support unsigned integers. Integer size can be determined using the constant PHP_INT_SIZE
    
    Prior to PHP 7, if an invalid digit was given in an octal integer (i.e. 8 or 9), the rest of the number was ignored
    
    + To explicitly convert a value to integer, use either the (int) or (integer) casts. However, in most cases the cast is not needed, since a value will be automatically converted if an operator, function or control structure requires an integer argument. intval()
    
    + If a resource is converted to an integer, then the result will be the unique resource number assigned to the resource by PHP at runtime
    
    If the float is beyond the boundaries of integer (usually +/- 2.15e+9 = 2^31 on 32-bit platforms and +/- 9.22e+18 = 2^63 on 64-bit platforms other than Windows), the result is undefined, 
    
Never cast an unknown fraction to integer, as this can sometimes lead to unexpected results.
<?php
echo (int) ( (0.1+0.7) * 10 ); // echoes 7!
?>
    
- float aka double 
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;

    + compare float numbers 
    testing floating point values for equality is problematic, due to the way that they are represented internally. However, there are ways to make comparisons of floating point values that work around these limitations.
    
    $a and $b are equal to 5 digits of precision.
<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if(abs($a-$b) < $epsilon) {
    echo "true";
}
?>
    
    + NaN, Some numeric operations can result in a value represented by the constant NAN. This result represents an undefined or unrepresentable value in floating-point calculations. 
    
    Any loose or strict comparisons of this value against any other value, including itself, but except TRUE, will have a result of FALSE.
    
    + floating point precision 
    This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8,
    
    + reference 
    http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
- string 
    + php only support 256 character set 
    
    + syntax 
        * single quoted string, no furture interpretation 
        echo 'this is a string';
        
        // Outputs: You deleted C:\*.*?
        echo 'You deleted C:\\*.*?';

        // Outputs: You deleted C:\*.*?
        echo 'You deleted C:\*.*?';

        // Outputs: This will not expand: \n a newline
        echo 'This will not expand: \n a newline';

        // Outputs: Variables do not $expand $either
        echo 'Variables do not $expand $either';
        
        * double quoted string 
        php will interpret the following escape sequences for special characters, The most important feature of double-quoted strings is the fact that variable names will be expanded.
        \n	linefeed (LF or 0x0A (10) in ASCII)
        \r	carriage return (CR or 0x0D (13) in ASCII)
        \t	horizontal tab (HT or 0x09 (9) in ASCII)
        \v	vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5)
        \e	escape (ESC or 0x1B (27) in ASCII) (since PHP 5.4.4)
        \f	form feed (FF or 0x0C (12) in ASCII) (since PHP 5.2.5)
        \\	backslash
        \$	dollar sign
        \"	double-quote
        \[0-7]{1,3}	the sequence of characters matching the regular expression is a character in octal notation, which silently overflows to fit in a byte (e.g. "\400" === "\000")
        \x[0-9A-Fa-f]{1,2}	the sequence of characters matching the regular expression is a character in hexadecimal notation
        \u{[0-9A-Fa-f]+}	the sequence of characters matching the regular expression is a Unicode codepoint, which will be output to the string as that codepoint's UTF-8 representation (added in PHP 7.0.0)      

        * A third way to delimit strings is the heredoc syntax: <<<. After this operator, an identifier is provided, then a newline. The string itself follows, and then the same identifier again to close the quotation.
        
<?php
class foo {
    public $bar = <<<"EOT" //optional close with double quote 
bar
    EOT;//error 
}
// Identifier must not be indented
?>

        * nowdoc the variable will not be interpret
        A nowdoc is identified with the same <<< sequence used for heredocs, but the identifier which follows is enclosed in single quotes, e.g. <<<'EOT'
        
    + variable parsing 
        * simple syntax, If a dollar sign ($) is encountered, the parser will greedily take as many tokens as possible to form a valid variable name.
        $variable_name 
        * complex syntax, curly syntax 
        ${variable_name}
        
        It is also possible to access class properties using variables within strings using this syntax.
        echo "{$foo->{$baz[1]}}\n";
        
         Functions, method calls, static class variables, and class constants inside {$} work since PHP 5. However, the value accessed will be interpreted as the name of a variable in the scope in which the string is defined. 
         class beers {
            const softdrink = 'rootbeer';
            public static $ale = 'ipa';
        }
        $rootbeer = 'A & W';
        $ipa = 'Alexander Keith\'s';
        // This works; outputs: I'd like an A & W
        echo "I'd like an {${beers::softdrink}}\n";
        // This works too; outputs: I'd like an Alexander Keith's
        echo "I'd like an {${beers::$ale}}\n";
        
    + Accessing variables of other types (not including arrays or objects implementing the appropriate interfaces) using [] or {} silently returns NULL.
    
    + convert to string 
    value converted to a string using strval(). 
    
    a boolean TRUE is converted to string "1", false is "", which allowed convert back and forth 
    
    The decimal point character is defined in the script's locale (category LC_NUMERIC).
    
    Arrays are always converted to the string "Array"; because of this, echo and print can not by themselves show the contents of an array.
    
    in order to convert objects to string magic method __toString must be used
    
    NULL is always convert to an empty string 
         
    See the functions print_r() and var_dump() for more effective means of inspecting the contents of these types(array, object or resource)
    
    serialize php object to string by serialize() function 
    
    If the string does not contain any of the characters '.', 'e', or 'E' and the numeric value fits into integer type limits otherwise convert to float 
    
    If the string starts with valid numeric data, this will be the value used. Otherwise, the value will be 0 (zero).
    
    $foo = 1 + "10.5";                // $foo is float (11.5)
    $foo = 1 + "-1.3e3";              // $foo is float (-1299)
    $foo = 1 + "bob-1.3e3";           // $foo is integer (1)
    $foo = 1 + "bob3";                // $foo is integer (1)
    $foo = 1 + "10 Small Pigs";       // $foo is integer (11)
    $foo = 4 + "10.2 Little Piggies"; // $foo is float (14.2)
    $foo = "10.0 pigs " + 1;          // $foo is float (11)
    $foo = "10.0 pigs " + 1.0;        // $foo is float (11) 
    
    Use the ord() and chr() functions to convert between ASCII codes and characters.
    
    + details of the string type 
    The string in PHP is implemented as an array of bytes such as network socket – will still return strings.
    
    string will be encoded in whatever fashion it is encoded in the script file. 
        * Some functions assume that the string is encoded in some (any) single-byte encoding, but they do not need to interpret those bytes as specific characters. 
        * Other functions are passed the encoding of the string, possibly they also assume a default
        * Others use the current locale (see setlocale()), but operate byte-by-byte. This is the case of strcasecmp(), strtoupper() and ucfirst(). they can be used with syngle byte encoding 
        * they may just assume the string is using a specific encoding, usually UTF-8. 
- array, An array in PHP is actually an ordered map. 
    + it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary,
    * An array can be created using the array() language construct. 
array(
    key  => value,
    key2 => value2,
    key3 => value3,
    ...
);

// as of PHP 5.4
$array = [
    "foo" => "bar",
    "bar" => "foo",
];
    + key cast will occur 
        * Strings containing valid decimal integers, unless the number is preceded by a + sign, will be cast to the integer type.
        * Floats are also cast to integers,
        * Bools are cast to integers
        * Null will be cast to the empty string 
        * Arrays and objects can not be used as keys
        
    + key is optional,  If it is not specified, PHP will use the increment of the largest previously used integer key.
    $array = array("foo", "bar", "hello", "world");//zero based index 
    
    $array = array(
         "a",
         "b",
    6 => "c",
         "d",
    );
    
    + array access, accessed using the array[key] syntax.
<?php
function getArray() {
    return array(1, 2, 3);
}

// on PHP 5.4
$secondElement = getArray()[1];

// previously
$tmp = getArray();
$secondElement = $tmp[1];

// or
list(, $secondElement) = getArray();

access an array key which has not been defined is the same as accessing any other undefined variable: an E_NOTICE-level error message will be issued, and the result will be NULL.

    + creating/modifying with square bracket
    This is done by assigning values to the array, specifying the key in brackets. The key can also be omitted, resulting in an empty pair of brackets ([]).
    
    $arr[key] = value;
    $arr[] = value;
    
    To change a certain value, assign a new value to that element using its key. To remove a key/value pair, call the unset() function on it.
    
    
    + remove element from array 
    To remove a key/value pair, call the unset() function on it.
    unset($arr[5]);
    
// Create a simple array.
$array = array(1, 2, 3, 4, 5);
print_r($array);

// Now delete every item, but leave the array itself intact:
foreach ($array as $i => $value) {
    unset($array[$i]);
}
print_r($array);

// Append an item (note that the new key is 5, instead of 0).
$array[] = 6;
print_r($array);

// Re-index:
$array = array_values($array);
$array[] = 7;
print_r($array);

output:
Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
)
Array
(
)
Array
(
    [5] => 6
)
Array
(
    [0] => 6
    [1] => 7
)
    + can be reindexed using the array_values() function.
    + Always use quotes around a string literal array index. For example, $foo['bar'] is correct, while $foo[bar] is not. 

    + For any of the types integer, float, string, boolean and resource, converting a value to an array results in an array 
    
    If an object is converted to an array, the result is an array whose elements are the object's properties. The keys are the member variable names, with a few notable exceptions: integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have null bytes on either side
    
    class A {
        private $A; // This will become '\0A\0A'
    }

    class B extends A {
        private $A; // This will become '\0B\0A'
        public $AA; // This will become 'AA'
    }

    var_dump((array) new B());
    The above will appear to have two keys named 'AA', although one of them is actually named '\0A\0A'.
    
    converting Null to array get empty array 
    
    + comparing, It is possible to compare arrays with the array_diff() function and with array operators.
    
    + reference operator to copy an array by reference. assignment always involves value copying 
    <?php
    $arr1 = array(2, 3);
    $arr2 = $arr1;
    $arr2[] = 4; // $arr2 is changed,
                 // $arr1 is still array(2, 3)
                 
    $arr3 = &$arr1;
    $arr3[] = 4; // now $arr1 and $arr3 are the same
    ?>
    
    + short array sort($files);
    
    + changing element in loop 
    foreach ($colors as &$color) {
        $color = strtoupper($color);
    }
    + useful function 
    unset() removing keys from an array. be aware that the array will not be reindexed if a true "remove and shift" behavior is desired, reindexed array with array_values() function 
    
    // Show all errors
    error_reporting(E_ALL);
    
    $arr = array('fruit' => 'apple', 'veggie' => 'carrot');
    //assigned to a constant named fruit.
    define('fruit', 'veggie');
    // The following is okay, as it's inside a string. Constants are not looked for
    // within strings, so no E_NOTICE occurs here
    print "Hello $arr[fruit]";      // Hello apple
    // With one exception: braces surrounding arrays within strings allows constants
    // to be interpreted
    print "Hello {$arr[fruit]}";    // Hello carrot
    print "Hello {$arr['fruit']}";  // Hello apple
    
    + convert to array 
    If an object is converted to an array, the result is an array whose elements are the object's properties.
    
    integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have null bytes on either side
    class A {
        private $A; // This will become '\0A\0A'
    }

    class B extends A {
        private $A; // This will become '\0B\0A'
        public $AA; // This will become 'AA'
    }
    
    + change array element by pass reference 
    foreach ($colors as &$color) {
        $color = strtoupper($color);
    }
    unset($color); /* ensure that following writes to
    $color will not modify the last array element */

    + fill in items from a directory 
    // fill an array with all items from a directory
    $handle = opendir('.');
    while (false !== ($file = readdir($handle))) {
        $files[] = $file;
    }
    closedir($handle);
- iterable 
iterable is a pseudo-type introduced in php 7.1. it accepts any array or object implementing the traversable interface. be used with foreach and yield from within a generator 

function foo(iterable $iterable) {
    foreach ($iterable as $value) {
        // ...
    } 
}

    + iterable parameter 
function foo(iterable $iterable = []) {
    // ...
}

    + iterable return value 
function bar(): iterable {
    return [1, 2, 3];
}

    + generator 
function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}

    + iterable type variable 
interface Example {
    public function method(array $array): iterable;
}

class ExampleImplementation implements Example {
    public function method(iterable $iterable): array {
        // Parameter broadened and return type narrowed.
    }
}

- object 
    + create a new object use the new statement to instantiate a class 
class foo
{
    function do_foo()
    {
        echo "Doing foo."; 
    }
}

$bar = new foo;
$bar->do_foo();
    + converting to object 
    object -> object unchange 
    other type -> object a new instance of the stdClass built-in class is created 
    NULL -> object, new instance will be empty 
    array -> object properties named by keys. numeric keys will be only accessible by iterated 
    
    $obj = (object) array('1' => 'foo');
    var_dump(isset($obj->{'1'})); // outputs 'bool(false)'
    var_dump(key($obj)); // outputs 'int(1)'
    
    + any other value a member value named scalar will contain the value 
    $object = (object) 'ciao';
    echo $object->scalar; //'ciao'
    
- resource 
a special variable, holding a reference to an external resource. get_resource_type() 
    + converting to resource 
    resource hold opened files, database connections, image canvas etc 
    other type convert resource is not needed 
    + auto free resource. persistent dabase links are an exception to this rule. they are not destroyed by the garbage collector. 
- NULL 
represent no value. NULL is the only possbile valueo f type null 
    + value consider to be null 
t has been assigned the constant NULL.

it has not been set to any value yet.

it has been unset().
    + syntax 
$var = NULL;   
    + empty array is converted to null by non-strict equal '==' comparison. Use is_null() or '===' if there is possible of getting empty array.

    $a = array(); 

    $a == null  <== return true
    $a === null <== return false 
    is_null($a) <== return false 
- callable, callbacks 
callable type hint as of php5.4 not only could be a function but also could be a object 

Some functions like call_user_func() or usort() accept user-defined callback functions as a parameter.

A PHP function is passed by its name as a string. Any built-in or user-defined function can be used, except language constructs such as: array(), echo, empty(), eval(), exit(), isset(), list(), print or unset().

A method of an instantiated object is passed as an array containing an object at index 0 and the method name at index 1. Accessing protected and private methods from within a class is allowed.

Static class methods can also be passed without instantiating an object of that class by passing the class name instead of an object at index 0. or ClassName::methodName 5.3+

use defined function and anonymous functions are also ok

examples:
<?php

// An example callback function
function my_callback_function() {
    echo 'hello world!';
}

// An example callback method
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// Type 1: Simple callback
call_user_func('my_callback_function');

// Type 2: Static class method call
call_user_func(array('MyClass', 'myCallbackMethod'));

// Type 3: Object method call
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Type 4: Static class method call (As of PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Type 5: Relative static class method call (As of PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A

// Type 6: Objects implementing __invoke can be used as callables (since PHP 5.3)
class C {
    public function __invoke($name) {
        echo 'Hello ', $name, "\n";
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>

// Our closure
$double = function($a) {
    return $a * 2;
};

// This is our range of numbers
$numbers = range(1, 5);

// Use the closure as a callback here to
// double the size of each element in our
// range
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);

    + Callbacks registered with functions such as call_user_func() and call_user_func_array() will not be called if there is an uncaught exception thrown in a previous callback.
    
    + calling callbacks as variable 
A note on differences when calling callbacks as "variable functions" without the use of call_user_func() (e.g. "<?php $callback = 'printf'; $callback('Hello World!') ?>"):

    Using the name of a function as string has worked since at least 4.3.0
    Calling anonymous functions and invokable objects has worked since 5.3.0
    Using the array structure [$object, 'method'] has worked since 5.4.0
- Pseudo-types and avraibles used in this document 
- convert variable types 
    + mixed indicates that a parameter may accept multiple (but not necessarily all) types.
    getype() accept all types 
    str_replace() will accept strings and arrays 
    
    + number intecate integer or float 
    + callback callable type 
    + array|object indicates that a parameter can be either array or object
    + void as a return type means that the return value is useless 
    + $... in function prototypes means and so on. means take endless number of arguments 
    
- forcibly convert a variable to a certain type, either cast the variable or use the settype() function on it.
- type juggling
    + auto type converson in php variable name 
    + auto type conversion * number to float 
    + force type conversion with settype() function 
    + type case is similar to C 
    $foo = 10;
    $bar = (boolean) $foo;

(int), (integer) - cast to integer
(bool), (boolean) - cast to boolean
(float), (double), (real) - cast to float
(string) - cast to string
(array) - cast to array
(object) - cast to object
(unset) - cast to NULL (PHP 5)

    + casting literal string to binary strings 
$binary = (binary) $string;
$binary = b"binary string";

    + check string is numeric by 
    is_numeric()
    
    + converting to boolean 
the boolean FALSE itself  
  the integer 0 (zero)  
  the float 0.0 (zero)  
  the empty string, and the string "0"  
  an array with zero elements  
  the special type NULL (including unset variables)  
 SimpleXML objects created from empty tags 
    
    + PHP type comparison tables
        * Simply doing if ($x) while $x is undefined will generate an error of level E_NOTICE. Instead, consider using empty() or isset() and/or initialize your variables
        * Some numeric operations can result in a value represented by the constant NAN. Any loose or strict comparisons of this value against any other value, including itself, but except TRUE, will have a result of FALSE.
        * HTML Forms do not pass integers, floats, or booleans; they pass strings. To find out if a string is numeric, you may use is_numeric(). 
        
    + comparisons of $x with php functions 
Comparisons of $x with PHP functions
Expression          gettype()   empty() is_null()   isset() boolean : if($x)
$x = "";            string      TRUE    FALSE       TRUE    FALSE 
$x = null;          NULL        TRUE    TRUE        FALSE   FALSE 
var $x;             NULL        TRUE    TRUE        FALSE   FALSE 
$x is undefined     NULL        TRUE    TRUE        FALSE   FALSE 
$x = array();       array       TRUE    FALSE       TRUE    FALSE 
$x = array('a', 'b'); array     FALSE   FALSE       TRUE    TRUE 
$x = false;         boolean     TRUE    FALSE       TRUE    FALSE 
$x = true;          boolean     FALSE   FALSE       TRUE    TRUE 
$x = 1;             integer     FALSE   FALSE       TRUE    TRUE 
$x = 42;            integer     FALSE   FALSE       TRUE    TRUE 
$x = 0;             integer     TRUE    FALSE       TRUE    FALSE 
$x = -1;            integer     FALSE   FALSE       TRUE    TRUE 
$x = "1";           string      FALSE   FALSE       TRUE    TRUE 
$x = "0";           string      TRUE    FALSE       TRUE    FALSE 
$x = "-1";          string      FALSE   FALSE       TRUE    TRUE 
$x = "php";         string      FALSE   FALSE       TRUE    TRUE 
$x = "true";        string      FALSE   FALSE       TRUE    TRUE 
$x = "false";       string      FALSE   FALSE       TRUE    TRUE 


Loose comparisons with ==
TRUE    FALSE   1   0   -1  "1" "0" "-1"    NULL    array() "php"   ""
TRUE TRUE FALSE TRUE FALSE TRUE TRUE FALSE TRUE FALSE FALSE TRUE FALSE 
FALSE FALSE TRUE FALSE TRUE FALSE FALSE TRUE FALSE TRUE TRUE FALSE TRUE 
1 TRUE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE 
0 FALSE TRUE FALSE TRUE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE 
-1 TRUE FALSE FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE 
"1" TRUE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE 
"0" FALSE TRUE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE 
"-1" TRUE FALSE FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE 
NULL FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE TRUE TRUE FALSE TRUE 
array() FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE 
"php" TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE 
"" FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE 

Strict comparisons with ===
TRUE    FALSE   1   0   -1  "1" "0" "-1"    NULL    array() "php"   ""
TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 
FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 
1 FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 
0 FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 
-1 FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 
"1" FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE 
"0" FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE 
"-1" FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE 
NULL FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE 
array() FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE 
"php" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE 
"" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE 



## Variables 
- variable start with $, case-sensitive 
- $this is a special variable that can't be assigned.
- basics 
    + By default, variables are always assigned by value.
    + assign value by reference, prepend with an ampersand(&) to the beginning 
$foo = 'Bob';              // Assign the value 'Bob' to $foo
$bar = &$foo;              // Reference $foo via $bar.
$bar = "My name is $bar";  // Alter $bar...
echo $bar;
echo $foo;                 // $foo is altered too.

only named variable could be assigned by reference 

    + isset() language construct can be used to detect if a variable has been already initialized.
    
- predefined variables 
Superglobals — Superglobals are built-in variables that are always available in all scopes
$GLOBALS — References all variables available in global scope
$_SERVER — Server and execution environment information
$_GET — HTTP GET variables
$_POST — HTTP POST variables
$_FILES — HTTP File Upload variables
$_REQUEST — HTTP Request variables
$_SESSION — Session variables
$_ENV — Environment variables
$_COOKIE — HTTP Cookies
$php_errormsg — The previous error message
$HTTP_RAW_POST_DATA — Raw POST data
$http_response_header — HTTP response headers
$argc — The number of arguments passed to script
$argv — Array of arguments passed to script
    + super global arrays are built-in variables that are always available in all scopes 
$GLOBALS
$_SERVER
$_GET
$_POST
$_FILES
$_COOKIE
$_SESSION
$_REQUEST
$_ENV


    + $_SERVER['PHP_SELF'] can include arbitrary user input. The documentation should be updated to reflect this.
    
- variable scope, is the context within which it is defined 
    + the scope is the context within which it is defined. all php variables only have a single scope. This single scope included and required files as well 
    <?php 
    $a = 1;
    include 'b.inc';
    ?>
    
    
    + variable reference inside a function is by default limited to the local function scope 
$a = 1; /* global scope */ 

function test()
{ 
    echo $a; /* reference to local scope variable */ 
} 

it will ouput nothong which is different from C; php have to explicit claim reference global variable 

    + global keyword
$a = 1;
$b = 2;

function Sum()
{
    global $a, $b;

    $b = $a + $b;
} 

second way to access global variale is use the $GLOBALS array 
    + Notice how $GLOBALS exists in any scope, this is because $GLOBALS is a superglobal.
    
    + using static variables 
    A static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope. 
    
<?php
function test()
{
    static $a = 0;
    echo $a;
    $a++;
}
?> 
    
    + references with global and static varialbes, a true global variable imported inside a function scope with the global statement actually creates a reference to the global variable
    
function test_global_ref() {
    global $obj;
    $obj = &new stdclass;
}

function test_global_noref() {
    global $obj;
    $obj = new stdclass;
}

test_global_ref();
var_dump($obj);
test_global_noref();
var_dump($obj);
    + output 

NULL
object(stdClass)(0) {
}

    + static statement, references are not stored statically 
function &get_instance_ref() {
    static $obj;

    echo 'Static object: ';
    var_dump($obj);
    if (!isset($obj)) {
        // Assign a reference to the static variable
        $obj = &new stdclass;
    }
    $obj->property++;
    return $obj;
}

function &get_instance_noref() {
    static $obj;

    echo 'Static object: ';
    var_dump($obj);
    if (!isset($obj)) {
        // Assign the object to the static variable
        $obj = new stdclass;
    }
    $obj->property++;
    return $obj;
}

$obj1 = get_instance_ref();
$still_obj1 = get_instance_ref();
echo "\n";
$obj2 = get_instance_noref();
$still_obj2 = get_instance_noref();

    + output 
Static object: NULL
Static object: NULL

Static object: NULL
Static object: object(stdClass)(1) {
["property"]=>
int(1)
}

when assigning a reference to a static variable, it's not remembered when you call the &get_instance_ref() function a second time. 

    + static class method variable, these are class-methods. Having an object is just a collection of properties, the functions remain at the class. So if you declare a variable as static inside a function, it's static for the whole class and all of its instances, not for each object
class sample_class
{
  public function func_having_static_var($x = NULL)
  {
    static $var = 0;
    if ($x === NULL)
    { return $var; }
    $var = $x;
  }
}

$a = new sample_class();
$b = new sample_class();

echo $a->func_having_static_var()."\n";
echo $b->func_having_static_var()."\n";
// this will output (as expected):
//  0
//  0

$a->func_having_static_var(3);

echo $a->func_having_static_var()."\n";
echo $b->func_having_static_var()."\n";
// this will output:
//  3
//  3
// maybe you expected:
//  3
//  0
- variable variables, takes the value of a variable and treats that as the name of a variable with two dollar signs. like a c pointer 
<?php 
$var_name = 'value';
$$vv = 'var_name';

    + variable variables with arrays, you have to resolve an ambiguity problem. That is, if you write $$a[1] then the parser needs to know if you meant to use $a[1] as a variable, or if you wanted $$a as the variable and then the [1] index from that variable. The syntax for resolving this ambiguity is: ${$a[1]} for the first case and ${$a}[1] for the second. 
    
    + Class properties may also be accessed using variable property names. The variable property name will be resolved within the scope from which the call is made. For instance, if you have an expression such as $foo->$bar, then the local scope will be examined for $bar and its value will be used as the name of the property of $foo
    $foo->$bar 
    
    + Curly braces may also be used, to clearly delimit the property name. 
<?php
class foo {
    var $bar = 'I am bar.';
    var $arr = array('I am A.', 'I am B.', 'I am C.');
    var $r   = 'I am r.';
}

$foo = new foo();
$bar = 'bar';
$baz = array('foo', 'bar', 'baz', 'quux');
echo $foo->$bar . "\n";
echo $foo->{$baz[1]} . "\n";

$start = 'b';
$end   = 'ar';
echo $foo->{$start . $end} . "\n";

$arr = 'arr';
echo $foo->{$arr[1]} . "\n";

?> 

- variables from external sources 
    + html forms, GET and POST 
    
    when a form is submitted to a php script the information from that form is automatically made avaliable to the script 
    
    <form action="foo.php" method="post">
        Name:  <input type="text" name="username" /><br />
        Email: <input type="text" name="email" /><br />
        <input type="submit" name="submit" value="Submit me!" />
    </form>
    
    //access data from a POST html form 
    <?php
        echo $_POST['username'];
        echo $_REQUEST['username'];
    ?> 
    
    + Using a GET form is similar except you'll use the appropriate GET predefined variable instead. GET also applies to the QUERY_STRING (the information after the '?' in a URL).
    
    + Dots and spaces in variable names are converted to underscores. For example <input name="a.b" /> becomes $_REQUEST["a_b"]. 
    
    + MORE complex form example 
<?php
if ($_POST) {
    echo '<pre>';
    echo htmlspecialchars(print_r($_POST, true));
    echo '</pre>';
}
?>
<form action="" method="post">
    Name:  <input type="text" name="personal[name]" /><br />
    Email: <input type="text" name="personal[email]" /><br />
    Beer: <br />
    <select multiple name="beer[]">
        <option value="warthog">Warthog</option>
        <option value="guinness">Guinness</option>
        <option value="stuttgarter">Stuttgarter Schwabenbräu</option>
    </select><br />
    <input type="submit" value="submit me!" />
</form> 

//post to the current file 

    + image submit variable names 

    When submitting a form, it is possible to use an image instead of the standard submit button with a tag like: 

    <input type="image" src="image.gif" name="sub" />

    When the user clicks somewhere on the image, the accompanying form will be transmitted to the server with two additional variables, sub_x and sub_y.

    + HTTP cookies, You can set cookies using the setcookie() function. Cookies are part of the HTTP header, so the SetCookie function must be called before any output is sent to the browser.
    
    This is the same restriction as for the header() function. Cookie data is then available in the appropriate cookie data arrays such as $_COOKIE as well in $_REQUEST 
    

<?php
if (isset($_COOKIE['count'])) {
    $count = $_COOKIE['count'] + 1;
} else {
    $count = 1;
}
setcookie('count', $count, time()+3600);
setcookie("Cart[$count]", $item, time()+3600);
?> 
    
    + determining variable types,  PHP includes several functions which find out what type a variable is, such as: gettype(), is_array(), is_float(), is_int(), is_object(), and is_string(). 
    
    
    
# Constants 
-  While define() allows a constant to be defined to an arbitrary expression, the const keyword has restrictions as outlined in the next paragraph

You can also use the function constant() to read a constant's value 

Use get_defined_constants() to get a list of all defined constants

-  Constants and (global) variables are in a different namespace

- difference between constant and variable 
    + Constants do not have a dollar sign ($) before them
    + Constants may be defined and accessed anywhere without regard to variable scoping rules; 
    + Constants can not be redefined or undefined once they have been set;
    + Constants may only evaluate to scalar values
    
- magic constants, these constants are created by various extensions, they will be present when those extensions are loaded 

__LINE__, line that's used on your script 
__FILE__
__DIR__, equal to dirname(__FILE__)
__FUNCTION__
__CLASS__
__TRAIT__
__METHOD__
__NAMESPACE__, the name of the current namespace 
ClassName::class, fully qualified class name 

- expressions， anything that has a value 

most basic form of expressions are constants and variables 


# Operators 
- operators can be grouped into logical operator, increment operator, arithmetical operator, ternary operator 

- operator precedence 

Associativity
Operators
Additional Information
non-associative clone new  clone and new 
left    [ array() 
right   ** arithmetic 
right   ++ -- ~ (int) (float) (string) (array) (object) (bool) @  types and increment/decrement  
non-associative instanceof types  
right   ! logical  
left    * / %  arithmetic  
left    + - .  arithmetic and string 
left    << >>  bitwise  
non-associative < <= > >=  comparison  
non-associative == != === !== <> <=>  comparison  
left    & bitwise and references 
left    ^ bitwise  
left    | bitwise  
left    && logical  
left    || logical  
right   ?? comparison  
left    ? : ternary  
right   = += -= *= **= /= .= %= &= |= ^= <<= >>=  assignment  
left    and logical  
left    xor logical  
left    or logical  

- arithmetic operators 
+$a         Identity Conversion of $a to int or float as appropriate.  
-$a         Negation Opposite of $a. 
$a + $b     Addition Sum of $a and $b. 
$a - $b     Subtraction Difference of $a and $b. 
$a * $b     Multiplication Product of $a and $b. 
$a / $b     Division Quotient of $a and $b. 
$a % $b     Modulo Remainder of $a divided by $b. 
$a ** $b    Exponentiation Result of raising $a to the $b'th power. Introduced in PHP 5.6. 

- assignment operators, The value of an assignment expression is the value assigned. That is, the value of "$a = 3" is 3


$a = ($b = 4) + 5; // $a is equal to 9 now, and $b has been set to 4.

the assignment copied the original to the new one. assign object is assigned by  reference in php5+, to assign by value required to used clone keyword 

- assignment by reference, if the right expression is reference then an error will be occoured 
$a = 3;
$b = &$a;

the new operator returns a reference automatically

- bitwise operators, evaluation and manipulation of specifc bits within an integer 
$a & $b     And Bits that are set in both $a and $b are set. 
$a | $b     Or (inclusive or) Bits that are set in either $a or $b are set. 
$a ^ $b     Xor (exclusive or) Bits that are set in $a or $b but not both are set.  
~ $a        Not Bits that are set in $a are not set, and vice versa.  
$a << $b    Shift left Shift the bits of $a $b steps to the left (each step means "multiply by two")  
$a >> $b    Shift right Shift the bits of $a $b steps to the right (each step means "divide by two")  

If both operands for the &, | and ^ operators are strings, then the operation will be performed on the ASCII values 

result for the << and >> operators are always treated as integers. 

- comparison operators 
$a == $b    Equal TRUE if $a is equal to $b after type juggling. 
$a === $b   Identical TRUE if $a is equal to $b, and they are of the same type.  
$a != $b    Not equal TRUE if $a is not equal to $b after type juggling. 
$a <> $b    Not equal TRUE if $a is not equal to $b after type juggling. 
$a !== $b   Not identical TRUE if $a is not equal to $b, or they are not of the same type.  
$a < $b     Less than TRUE if $a is strictly less than $b. 
$a > $b     Greater than TRUE if $a is strictly greater than $b. 
$a <= $b    Less than or equal to  TRUE if $a is less than or equal to $b. 
$a >= $b    Greater than or equal to  TRUE if $a is greater than or equal to $b. 
$a <=> $b   Spaceship An integer less than, equal to, or greater than zero when $a is respectively less than, equal to, or greater than $b. Available as of PHP 7.  


null or string  string Convert NULL to "", numerical or lexical comparison 
bool or null    anything Convert both sides to bool, FALSE < TRUE 
object object   Built-in classes can define its own comparison, different classes are uncomparable, same class - compare properties the same way as arrays (PHP 4), PHP 5 has its own explanation  
string, resource or number string, resource or number Translate strings and resources to numbers, usual math 
array array     Array with fewer members is smaller, if key from operand 1 is not found in operand 2 then arrays are uncomparable, otherwise - compare value by value (see following example) 
object anything object is always greater 
array anything  array is always greater 

- error control operators 
the at sign (@). When prepended to an expression in PHP, any error messages that might be generated by that expression will be ignored. 

set custom error handler function with set_error_handler() then it will still get called, but this custom error handler can (and should) call error_reporting() which will return 0 when the call that triggered the error was preceded by an @. 

If the track_errors  feature is enabled, any error message generated by the expression will be saved in the variable $php_errormsg.
<?php 

/* Intentional file error */
$my_file = @file ('non_existent_file') or
    die ("Failed opening file: error was '$php_errormsg'");

// this works for any expression, not just functions:
$value = @$cache[$key];
// will not issue a notice if the index $key doesn't exist.

?>

    + The @-operator works only on expressions. A simple rule of thumb is: if you can take the value of something, you can prepend the @ operator to it

    You cannot prepend it to function or class definitions, or conditional structures such as if and foreach, and so forth. 
    
    + Currently the "@" error-control operator prefix will even disable error reporting for critical errors that will terminate script execution. the script will die right there with no indication as to why. 
    
- Execution operators, PHP supports one execution operator: backticks (``). Note that these are not single-quotes! PHP will attempt to execute the contents of the backticks as a shell command; the output will be returned 
    
- incrementing/decrementing operators 
++$a Pre-increment Increments $a by one, then returns $a. 
$a++ Post-increment Returns $a, then increments $a by one. 
--$a Pre-decrement Decrements $a by one, then returns $a. 
$a-- Post-decrement Returns $a, then decrements $a by one. 

PHP and Perl $a = 'Z'; $a++; turns $a into 'AA', while in C a = 'Z'; a++; turns a into '[' (ASCII value of 'Z' is 90, ASCII value of '[' is 91). Incrementing/decrementing other character variables has no effect, the original string is unchanged. 
    
- logical operators 
$a and $b   And TRUE if both $a and $b are TRUE. 
$a or $b    Or TRUE if either $a or $b is TRUE. 
$a xor $b   Xor TRUE if either $a or $b is TRUE, but not both. 
! $a        Not TRUE if $a is not TRUE. 
$a && $b    And TRUE if both $a and $b are TRUE. 
$a || $b    Or TRUE if either $a or $b is TRUE. 

- string operators 
    + The first is the concatenation operator ('.'), which returns the concatenation of its right and left arguments.
    
    + The second is the concatenating assignment operator ('.='), which appends the argument on the right side to the argument on the left side.
        
- array operators 
$a + $b     Union Union of $a and $b. 
$a == $b    Equality TRUE if $a and $b have the same key/value pairs. 
$a === $b   Identity TRUE if $a and $b have the same key/value pairs in the same order and of the same types. 
$a != $b    Inequality TRUE if $a is not equal to $b. 
$a <> $b    Inequality TRUE if $a is not equal to $b. 
$a !== $b   Non-identity TRUE if $a is not identical to $ 

- type operators, determine whether a PHP variable is an instantiated object of a certain class: 

var_dump(!($a instanceof stdClass));


# Control structures 
- . A statement can be an assignment, a function call, a loop, a conditional statement or even a statement that does nothing (an empty statement). Statements usually end with a semicolon.

if(condition){
}
elseif(condition){
}
else{
}

- alternative syntax for control structures in php 4+ 
if, while, for, foreach, and switch. In each case, the basic form of the alternate syntax is to change the opening brace to a colon (:) and the closing brace to endif;, endwhile;, endfor;, endforeach;, or endswitch;, respectively. 

Any output (including whitespace) between a switch statement and the first case will result in a syntax error
<?php switch ($foo): ?>
    <?php case 1: ?>
    ...
<?php endswitch ?> 

- while 
- do while 
do{

}while(condition);

- for 
for (expr1; expr2; expr3)
    statement
    
- foreach 
foreach (array_expression as $value)
    statement
foreach (array_expression as $key => $value)
    statement
    
- break 

<?php
$arr = array('one', 'two', 'three', 'four', 'stop', 'five');
while (list(, $val) = each($arr)) {
    if ($val == 'stop') {
        break;    /* You could also write 'break 1;' here. */
    }
    echo "$val<br />\n";
}

/* Using the optional argument. */

$i = 0;
while (++$i) {
    switch ($i) {
    case 5:
        echo "At 5<br />\n";
        break 1;  /* Exit only the switch. */
    case 10:
        echo "At 10; quitting<br />\n";
        break 2;  /* Exit the switch and the while. */
    default:
        break;
    }
}
?> 

- continue 
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // skip even members
        continue;
    }
    do_something_odd($value);
}

- switch 
switch ($i) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;
    case 2:
        echo "i equals 2";
        break;
}

- declare 

The declare construct is used to set execution directives for a block of code. The syntax of declare is similar to the syntax of other flow control constructs: 

declare (directive)
    statement

    + Currently only three directives are recognized: the ticks directive (See below for more information on the ticks directive), the encoding directive (See below for more information on the encoding directive) and the strict_types directive 
    
    + ticks, A tick is an event that occurs for every N low-level tickable statements executed by the parser within the declare block
// these are the same:

// you can use this:
declare(ticks=1) {
    // entire script here
}

// or you can use this:
declare(ticks=1);
// entire script here

The event(s) that occur on each tick are specified using the register_tick_function().
    
        * Example 
declare(ticks=1);

// A function called on each tick event
function tick_handler()
{
    echo "tick_handler() called\n";
}

register_tick_function('tick_handler');

    + declare encoding 
<?php
declare(encoding='ISO-8859-1');
// code here
?> 

When combined with namespaces, the only legal syntax for declare is declare(encoding='...'); where ... is the encoding value. declare(encoding='...') {} will result in a parse error when combined with namespaces. 

The encoding declare value is ignored in PHP 5.3 unless php is compiled with --enable-zend-multibyte. 

    +  In strict mode, only a variable of exact type of the type declaration will be accepted, or a TypeError will be thrown. 
        
- return, If called from the global scope, then execution of the current script file is ended. If the current script file was included or required, then control is passed back to the calling file. Furthermore, if the current script file was included, then the value given to return will be returned as the value of the include call

If the current script file was named by the auto_prepend_file or auto_append_file configuration options in php.ini, then that script file's execution is ended. 

You should never use parentheses around your return variable when returning by reference, as this will not work. You can only return variables by reference
    
- require/require, require is identical to include except upon failure it will also produce a fatal E_COMPILE_ERROR level error
 include only emits a warning (E_WARNING) which allows the script to continue. 
    
the include_path specified. If the file isn't found in the include_path, include will finally check in the calling script's own directory and the current working directory before failing
    
whether absolute (starting with a drive letter or \ on Windows, or / on Unix/Linux systems) or relative to the current directory (starting with . or ..) 

- require_once php will make sure the code is imported only once 
- include_once, will not be included again, and include_once returns TRUE. As the name suggests, the file will be included just once. 

- goto,  The target label must be within the same file and context, meaning that you cannot jump out of a function or method, nor can you jump into one. You also cannot jump into any sort of loop or switch structure. You may jump out of these, and a common use is to use a goto in place of a multi-level break.

<?php
for($i=0,$j=50; $i<100; $i++) {
  while($j--) {
    if($j==17) goto end; 
  }  
}
echo "i = $i";
end:
echo 'j hit 17';
?> 


# Functions 
- user defined functions 
function foo($arg_1, $arg_2, /* ..., */ $arg_n)
{
    echo "Example function.\n";
    return $retval;
}

Functions need not be defined before they are referenced, except when a function is conditionally defined as shown in the two examples below. 

Both variable number of arguments and default arguments are supported in functions. See also the function references for func_num_args(), func_get_arg(), and func_get_args() for more information. 

- function arguments, which is a comma-delimited list of expressions. The arguments are evaluated from left to right. 

function takes_array($input)
{
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}

by default function argument is passing by value; prepend an ampersand (&) to pass by reference 

    + default argument value 

function makecoffee($type = "cappuccino")
{
    return "Making a cup of $type.\n";
}
- returning values 
function &returns_reference()
{
    return $someref;
}

$newref =& returns_reference();


return by value 
function square($num)
{
    return $num * $num;
}
echo square(4);   // outputs '16'.


    + use strict types 
declare(strict_types=1);

function sum($a, $b): int {
    return $a + $b;
}

var_dump(sum(1, 2));
var_dump(sum(1, 2.5)); //error return none integer type 

- variable functions 
    +  if a variable name has parentheses appended to it, PHP will look for a function with the same name as whatever the variable evaluates
    
function foo() {
    echo "In foo()<br />\n";
}

function bar($arg = '')
{
    echo "In bar(); argument was '$arg'.<br />\n";
}

// This is a wrapper function around echo
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // This calls foo()

$func = 'bar';
$func('test');  // This calls bar()

$func = 'echoit';
$func('test');  // This calls echoit()

    + used with class instance 
class Foo
{
    function Variable()
    {
        $name = 'Bar';
        $this->$name(); // This calls the Bar() method
    }
    
    function Bar()
    {
        echo "This is Bar";
    }
}

$foo = new Foo();
$funcname = "Variable";
$foo->$funcname();  // This calls $foo->Variable()

    + with static property 
<?php
class Foo
{
    static $variable = 'static property';
    static function Variable()
    {
        echo 'Method Variable called';
    }
}

echo Foo::$variable; // This prints 'static property'. It does need a $variable in this scope.
$variable = "Variable";
Foo::$variable();  // This calls $foo->Variable() reading $variable in this scope.

?> 

    + use array variable to call function from class 
<?php
class Foo
{
    static function bar()
    {
        echo "bar\n";
    }
    function baz()
    {
        echo "baz\n";
    }
}

$func = array("Foo", "bar");
$func(); // prints "bar"
$func = array(new Foo, "baz");
$func(); // prints "baz"
$func = "Foo::bar";
$func(); // prints "bar" as of PHP 7.0.0; prior, it raised a fatal error
?> 

- internal functions 
    + built-in 
    + some of the internal function required to load some extensions 
    
- anonymous functions 
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');
// outputs helloWorld

    + auto binding function 
class Test
{
    public function testing()
    {
        return function() {
            var_dump($this);
        };
    }
}

$object = new Test;
$function = $object->testing();
$function();

    +  This prevents them from having the current class automatically bound to them.


# Classes and objects 
- introduction 
    + php support visibility, abstract and final classes and methods, additional magic methods, interfaces, cloning and typehinting. 
    
- the basics 
class SimpleClass
{
    // property declaration
    public $var = 'a default value';

    // method declaration
    public function displayVar() {
        echo $this->var;
    }
}

    + $this is a reference to the calling object

    + To create an instance of a class, the new keyword must be used.

    + In the class context, it is possible to create a new object by new self and new parent. 
    + create new objects 
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

    + Class properties and methods live in separate "namespaces", so it is possible to have a property and a method with the same name. 
    
class Foo
{
    public $bar = 'property';
    
    public function bar() {
        return 'method';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL; 

The above example will output:

property
method

    + calling an anonymous function which has been assigned to a property is not directly possible. 
    
    + calling an anonymous function stored in a property 
class Foo
{
    public $bar;
    
    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

// as of PHP 5.3.0:
$func = $obj->bar;
echo $func(), PHP_EOL;

// alternatively, as of PHP 7.0.0:
echo ($obj->bar)(), PHP_EOL; 

    + extends, class can inherit the methods and properties of another class by using the keyword extends. It is not possible to extend multiple classes; a class can only inherit from one base class
    
    + the parent class has defined a method as final, that method may not be overridden. It is possible to access the overridden methods or static properties by referencing them with parent::. 
    
<?php
class ExtendClass extends SimpleClass
{
    // Redefine the parent method
    function displayVar()
    {
        echo "Extending class\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?> 

    +  class keyword is also used for class name resolution. You can get a string containing the fully qualified name of the ClassName class by using ClassName::class. 
    
    this is usefuly with namespaced classes 
    
<?php
namespace NS {
    class ClassName {
    }
    
    echo ClassName::class;
}
?>  

The above example will output:

NS\ClassName

- properties,  You may also see them referred to using other terms such as "attributes" or "fields", but for the purposes of this reference we will use "properties". They are defined by using one of the keywords public, protected, or private,

non-static properties may be accessed by using -> (Object Operator): $this->property (where property is the name of the property). Static properties are accessed by using the :: (Double Colon): self::$property

The pseudo-variable $this is available inside any class method when that method is called from within an object context. $this is a reference to the calling object


- class constants, don't use $ symbol 
class MyClass
{
    public const CONSTANT = 'constant value';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MyClass::CONSTANT . "\n";

- autoloading classes,  The spl_autoload_register() function registers any number of autoloaders, enabling for classes and interfaces to be automatically loaded if they are currently not defined


<?php
spl_autoload_register(function ($class_name) {
    include $class_name . '.php';
});

$obj  = new MyClass1();
$obj2 = new MyClass2(); 
?> 

- constructors and destructors 
    + constructor 
void __construct ([ mixed $args = "" [, $... ]] )

Parent constructors are not called implicitly if the child class defines a constructor. In order to run a parent constructor, a call to parent::__construct() within the child constructor is required. 

<?php
class BaseClass {
   function __construct() {
       print "In BaseClass constructor\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "In SubClass constructor\n";
   }
}

class OtherSubClass extends BaseClass {
    // inherits BaseClass's constructor
}

// In BaseClass constructor
$obj = new BaseClass();

// In BaseClass constructor
// In SubClass constructor
$obj = new SubClass();

// In BaseClass constructor
$obj = new OtherSubClass();
?> 

    + destructor, will be called as soon as there are no other references to a particular object 
    
void __destruct ( void );

<?php
class MyDestructableClass {
   function __construct() {
       print "In constructor\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Destroying " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?> 

The destructor will be called even if script execution is stopped using exit(). Calling exit() in a destructor will prevent the remaining shutdown routines from executing

- visibility, Class properties must be defined as public, private, or protected. If declared using var, the property will be defined as public. 

    + method also could be add visibility
    
    + constant visiblity 
class MyClass
{
    // Declare a public constant
    public const MY_PUBLIC = 'public';

    // Declare a protected constant
    protected const MY_PROTECTED = 'protected';

    // Declare a private constant
    private const MY_PRIVATE = 'private';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

- Use $this to refer to the current object. Use self to refer to the current class. In other words, use $this->member for non-static members, use self::$member for static members.

- object inheritance, Unless autoloading is used, then classes must be defined before they are used. If a class extends another, then the parent class must be declared before the child class structure.

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }
    
    public function printPHP()
    {
        echo 'PHP is great.' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

- scope resolution operator ::
class MyClass {
    const CONST_VALUE = 'A constant value';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE; // As of PHP 5.3.0

echo MyClass::CONST_VALUE;

    + calling a parent's method 
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Override parent's definition
    public function myFunc()
    {
        // But still call the parent function
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?> 

- static keyword 



# Namespace 
# Errors 
# Exceptions 
# Generators 
# Reference explained 
# Predefined variables 
# Predefined exceptions 
# Predefined interfaces and classes 
# Context options and parameters 
# Supported protocols and wrappers 
    
    
# Security 
- introduction 
- general considerations 
- installed as cgi binary 
    + possible attacks
    only public files served 
    using cgi.force_redirect 
    setting doc_root or user_dir 
    php parser outside of web tree 
- installed as an apache module 
- session security 
- file system security 
null types related issues 

- database security 
    + designning databases 
    + connecting to database 
    + encrypted storage model 
    + sql injection 
- error reporting 
- using register globals 
- user submitted data 
- magic quotes 
    + what are magic quotes 
    + why did we use magic quotes 
    + why not to use magic quotes 
    + disabling magic quotes 
- hiding php 
- keeping current 

# Features 
- http authentication with php 
- cookies 
- sessions 
- dealing with xforms 
- handling file uploads 
    + post method uploads 
    + error messages explained 
    + common pitfalls 
    + uploading multiple files 
    + PUT method support 
- using remote files 
- connection handling 
- persistent databse connections 
- safe mode 
    + security and safe mode 
    + functions restricted/disabled by safe mode 
- command line usage 
    + introduction 
    + differences t o other SAPIs
    + options 
    + usage 
    + i/o streams 
    + interactive shell 
    + built-in web server 
    + ini settings 
- garbage collection 
    + reference counting basiscs 
    + collecting cycles 
    + performance considerations 
- dtrace dynamic tracing 
    + introduction to php and dtrace 
    + using php and dtrace 
    + using systemTap with php dtrace static probes 


## Function reference 
- affecting php's behaviour
 APC, alternative php cache 
    
APCu, apc user cache 

APD, advanced php debugger 

bcompiler, php byte code compiler 

BLENC, blenc blowfish encoder for php source scripts 

Error Handling, error handling and logging 

htscanner, htaccess like support for all SAPIs 

included, inclusion hierarchy viewer 

Memtrack

OPcache

Output Control, output 

Php options/info 

runkit 

scream, break the silence operator 

uopz 

Weakref, weak reference 

WinCache, windows cache for php 

Xhprof, hierarchical profiler 

- Audio formats manipulation 
ID3 — ID3 Tags
KTaglib
oggvorbis — OGG/Vorbis
OpenAL — OpenAL Audio Bindings

- authentication service 
KADM5 — Kerberos V
Radius

- command line specific extensions 
Ncurses — Ncurses Terminal Screen Control
Newt
Readline — GNU Readline

- compression and archive extensions 
Bzip2
LZF
Phar
Rar — Rar Archiving
Zip
Zlib — Zlib Compression

- credit card processing 
MCVE — MCVE (Monetra) Payment

- cryptograhy extensions 
Crack — Cracklib
CSPRNG
Hash — HASH Message Digest Framework
Mcrypt
Mhash
OpenSSL
Password Hashing

- database extensions 
Abstraction Layers
Vendor Specific Database Extensions

- data and time related extensions 
Calendar
Date/Time — Date and Time
HRTime — High resolution timing

- file system related extensions 
Direct IO
Directories
Fileinfo — File Information
Filesystem
Inotify
Mimetype
Proctitle
xattr
xdiff

- human language and character encoding support 
Enchant — Enchant spelling library
FriBiDi
Gender — Determine gender of firstnames
Gettext
iconv
intl — Internationalization Functions
Multibyte String
Pspell
Recode — GNU Recode

- image processing and generation 
Cairo
Exif — Exchangeable image information
GD — Image Processing and GD
Gmagick
ImageMagick — Image Processing (ImageMagick)

- mail related  extensions 
Cyrus — Cyrus IMAP administration
IMAP — IMAP, POP3 and NNTP
Mail
Mailparse
vpopmail

- mathenmatical extensions 
BC Math — BCMath Arbitrary Precision Mathematics
GMP — GNU Multiple Precision
Lapack
Math — Mathematical Functions
Statistics
Trader — Technical Analysis for Traders

- non-text mime output 
FDF — Forms Data Format
GnuPG — GNU Privacy Guard
haru — Haru PDF
Ming — Ming (flash)
PDF
PS — PostScript document creation
RPM Reader — RPM Header Reading

- process control extensions 
Eio
Ev
Expect
Libevent
PCNTL — Process Control
POSIX
Program execution — System program execution
pthreads
Semaphore — Semaphore, Shared Memory and IPC
Shared Memory
Sync

- other basic extensions 
GeoIP — Geo IP Location
FANN — FANN (Fast Artificial Neural Network)
JSON — JavaScript Object Notation
Judy — Judy Arrays
Lua
Misc. — Miscellaneous Functions
Parsekit
SPL — Standard PHP Library (SPL)
SPL Types — SPL Type Handling
Streams
Tidy
Tokenizer
URLs
V8js — V8 Javascript Engine Integration
Yaml — YAML Data Serialization
Yaf — Yet Another Framework
Taint

- other services 
chdb — Constant hash database
cURL — Client URL Library
Event
FAM — File Alteration Monitor
FTP
Gearman
Gopher — Net Gopher
Gupnp
Hyperwave API
LDAP — Lightweight Directory Access Protocol
Memcache
Memcached
mqseries
Network
RRD — RRDtool
SAM — Simple Asynchronous Messaging
SNMP
Sockets
SSH2 — Secure Shell2
Stomp — Stomp Client
SVM — Support Vector Machine
SVN — Subversion
TCP — TCP Wrappers
Varnish
YAZ
YP/NIS
0MQ messaging — ZMQ
ZooKeeper

- search engine extensions 
mnoGoSearch
Solr — Apache Solr
Sphinx — Sphinx Client
Swish — Swish Indexing

- server specific extensions 
Apache
FastCGI Process Manager
IIS — IIS Administration
NSAPI

- sessions extensions 
Msession — Mohawk Software Session Handler Functions
Sessions — Session Handling
Session PgSQL — PostgreSQL Session Save Handler

- text processing 
BBCode — Bulletin Board Code
PCRE — Regular Expressions (Perl-Compatible)
POSIX Regex — Regular Expression (POSIX Extended)
ssdeep — ssdeep Fuzzy Hashing
Strings

- variable and type related extensions 
Arrays
Classes/Objects — Class/Object Information
Classkit
Ctype — Character type checking
Data Structures
Filter — Data Filtering
Function Handling
Quickhash
Reflection
Variable handling

- web services 
OAuth
SCA
SOAP
Yar — Yet Another RPC Framework
XML-RPC

- window only extensions 
COM — COM and .Net (Windows)
win32ps
win32service

- xml manipulation 
DOM — Document Object Model
libxml
SDO — Service Data Objects
SDO-DAS-Relational — SDO Relational Data Access Service
SDO DAS XML — SDO XML Data Access Service
SimpleXML
WDDX
XMLDiff — XML diff and merge
XML Parser
XMLReader
XMLWriter
XSL

- gui extension 
UI 


## Php at the core:  a hacker's guide 
- reference 
http://php.net/manual/en/internals2.php

## Appendices 
- reference 
http://php.net/manual/en/appendices.php

### Standard php library (SPL)
- reference 
http://php.net/manual/en/book.spl.php


































Deep Learning from Scratch=Seth Weidman;Note=Erxin

# Preface 
- what is neural network 

A neural network is a mathematical function that takes in inputs and produces outputs.

A neural network is a computational graph through which multidimensional arrays flow.

A neural network is made up of layers, each of which can be thought of as having a number of “neurons.”

A neural network is a universal function approximator that can in theory represent the solution to any supervised learning problem.


# Foundations
- numpy 

a = np.array([[1,2,3],
              [4,5,6]])
              
def operation(x1: ndarray, x2: ndarray) -> ndarray:
    pass 
    
- transposing 

np.transpose(ndarray, (1, 0))

- derivatives 

math, This limit can be approximated numerically by setting a very small value for Δ, such as 0.001, so we can compute the derivative

dfdu(a)=limΔ→0f(a+Δ)−f(a−Δ)2×Δ

dfdu(a)=f(a+0.001)−f(a−0.001)0.002

- diagrams 

using callable to restrict the type of function 
```
from typing import Callable

def deriv(func: Callable[[ndarray], ndarray],
          input_: ndarray,
          delta: float = 0.001) -> ndarray:
    '''
    Evaluates the derivative of a function "func" at every element in the
    "input_" array.
    '''
    return (func(input_ + delta) - func(input_ - delta)) / (2 * delta)
```

- nested function 

def chain_length_2(chain: Chain,
                   a: ndarray) -> ndarray:
    '''
    Evaluates two functions in a row, in a "Chain".
    '''
    assert len(chain) == 2, \
    "Length of input 'chain' should be 2"

    f1 = chain[0]
    f2 = chain[1]

    return f2(f1(x))
















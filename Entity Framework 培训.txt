Entity Framework 培训，2011，May 9 = Teacher Chen;
环境Visual studio 2010, Sql server Express Northwind

I.复习Ado.net内建类型，经典数据库访问方法
connection
command->dataReader( Executereader, ExecuteXmlreader)->Forward
													   
		dataAdapter->Fill->DataSet->DataTable->DataView,DataColumn, DataRow, DataKey
					submitChange->Insert,Added; Updata, Modified; Delete, removed;
		DataProvider->ODBC, OLE DB, SQL Client, Oracle Client, MySql Client
		Enterprise library -> Data Access Application Block用于转换不同的数据库的访问
		
II.Ado.net Entity Framework, 是一个简化Ado.net设计过程的框架语言
.net 3.5开始之后提供，微软官方的ORM框架；Object RelationShip Mapping
主要的目的，简化和规范数据访问操作，提供更好的数据访问层抽象

1.mdf, ldf有两个数据库文件，只要将两个文件拖到sql server项目中

Sql server, 一个物理机器上最多可以装16个实例
Instance(实例)
	default instance 访问方法直接通过机器名或IP地址，端口1433
	named instance 端口可以是动态的，也可以是静态指定，访问需要指定实例名称
		server\dataBaseInstance
	Sql Server Browser服务，用来解析多个实例，定位到有关的端口，在UDP 1434监听 sqlclient
配置服务sql server 服务工具 sql server configuration manager 

sql native client 是2005开始之后有的技术，专门的访问sql server的API，在其之前是使用oledb或odbc，不再基于mdac组件，Microsoft data access component, 是基于COM组件的，容易引起版本冲突问题；
增加了别名(aliase)机制
访问access还是需要使用OLEDB，JET引擎
之前在OLEDB或ODBC可以使用数据源来访问数据库，在控制面板中使用，可以将其配置从注册表导出，之后在目标机器上导入即可简化配置过程；DSN， Data source name;在control panel->administrator tool->data source(odbc)

EntityFrameworkVisualizer.dll增加SQL语句调试的方法检查,可以添加visual 2010插件目录
c:\document\visual 2010\addOnFolder\

LINQ, Language Integrated query
linq->provider->linq to entities->ado.net entity framework
				linq to sql 早于ado.net entity framework只针对sql server
				linq to xml 针对xml文件的读写
				linq to object 是通用的技术，对数组和集合进行处理
				linq to database 对ado.net的一个扩展，提供四个方法，对table和row的扩展
				
ado.net data service, 是一个WCF服务，RESTful, authentication; 大大简化了数据访问层的设计，配合ADO.NET entities framework
添加服务，是*.svc.cs文件，可以直接用改变地址的方式提供服务器的数据访问
visual studio 2010 建立web  application 添加 wcf 服务，建立entity model模型
实现了RESTful的规范，使用浏览器访问地址来访问服务器数据，并不是所有的linq语法都支持；关键字可以用$符号开头的

wpf, silverlight

RIA service: rich internet application, silverlight 的专用服务
domainService, 只能用于silverlight并简化编程, 访问数据库是异步的，这个是与WPF应用程序的区别；访问时无需创建引用，直接使用；
sync Framework，用于offline的编程模型，用于客户端不是经常在线。实现
				sqlce <===> sql server数据的同步, sqlce是sql 嵌入式版本
				sqlce (sql server compact edition) 无需引擎，语法同sql server与access不同
				文件同步，以前微软的产品live mesh来同步，服务器网络的同步，免费办是5GB
				web Rss Feed同步
				local database cache, 数据库文件是sdf
				默认的冲突检测机制是以服务器为基准，冲突检测要在agent同步
web plantform installer 在网上可以找到，微软专门用于平台插件管理的工具
				
选择策略
新系统：内部使用，推荐直接使用ado.net entity framework, linq to sql,不涉及到分布开发
外部使用的系统，有的员工经常不在公司内，Sync framework最适合个人使用的情况，LINQ to xml
与第三方分享的数据，ADO.NET Data Service, 可以在一定意义上保证安全
silverlight开发，使用RIA service

Entity Model, 三种模型，两种策略，四个文件
三种模型，概念模型，逻辑模型，物理模型
概念模型，只关注业务需求，定义业务实体，描述属性
逻辑模型，与某个特定的数据库产品产生关系设计表和字段，数据库开发人员做的
物理模型，与数据库存储有关的设计，分区/索引，数据库管理员做的
；
两种策略，dataBase-first 先有一个数据库，然后导出概念模型（在这个基础上还可以修改）
		  model first 模型先行，然后可以生成数据库（生成逻辑模型），使用的时候要特别注意反向生成数据库的时的目标数据库，注意脚本的use aimDataBase语句。避免删错数据库数据
；
概念模型中的数据类型只有常用类型，满足SQL标准，但不基于某种数据库的类型；根据visual studio 2010来生成模型

四个文件
*.edmx, xml for entity data model，包含三个主要的section，最终都会编译为资源文件的
	CSDL content, Conceptual Schema definition language,对应概念模型
	SSDL content, Storage Schema Definition language，对应逻辑模型
	C-S mapping content, Conceptual-Storage Mapping
编译后三个部分分成三个文件存储在exe的resource目录中，将三个文件提取到exe文件中可以提高程序的映射；在编译的时候可以修改模型的属性将三个文件保存到exe外，以提高灵活性

entity model中的相关5中内部元素：业务实体，关联，复杂类型，继承，存储过程；
业务实体，至少有一个或多个属性，通常用一个主键，如果没有，则只可以查询；对应一个本地类，entityObject, 多个属性;
关联，多个实体之间的关系，association, 一般指的就是数据库中的引用约束，
复杂类型，可以将多个数据属性合并成一个新属性，易于使用，分为属性的类型与名称，类型是实际表中属性的合并，名称是新的属性名
继承，Inheritance，单表继承，多表继承；单表继承，继承后使用时使用一个标志位来进行标记区分；多表继承，分别进行存储
存储过程，可以导入存储过程，可以在模型编辑窗口点击右键选择model browser

WCF中DataContract可以序列化

IL spy用来反编译.NET程序，reflactor 已经商业化了

使用entity model 进行数据库查询，使用LINQ to Entities, 使用entity sql, 使用storage, Entities Client

问题
sql server 服务器默认实例名称不能更改，取代方法最好采用起别名的方式。非官方方法需要修改很多注册表内容
sync framework同步时的冲突检测策略有三种，client win, fire evetn, server win

实现间断性访问
sync framework->provider->local, sqlCeClientSyncProvider
						  remote, DbServerSyncProvider
                agent用来负责调用两个provider
linq to xml
可以新建类并重写对应的方法来实现

ObjectStateManager维护context状态->ObjectContext有一个唯一的实例
数据库对象状态控制，使用objectStateManager,有detach, attach与数据库断开或链接修改
attach状态的好处是可以进行更新和删除，是默认对象的载入状态，是tracking状态，相对来说detach要更加节省空间与维护成本
ObjectQuery，分为三步， 第一步，创建entities 对象；第二步，创建object query; 第三步 做查询； 第四步， 新增对象； 第五步， 更新对象； 第六步，删除对象；第七保存更改 设置objectQuery选项,MergeOption.AppendOnly中没有的对象构造出来，追加到ctx中，用objectStateManager去管理；客户端AppendOnly中的重复对象不会在内存中重新构造
mergeOption.Appendonly
mergeOption.OverRideChanges
mergeOption.PreserveChanges
MergeOption.Notracking, 意思是所有的对象不需要objectStateManage做tracking,适合于仅作查询的情况
第四步，对于服务端有默认值的时候可以不设置，但新值只有在saveChanges之后才可以读取
如果有关联的属性，可以同时直接建立，对于自增对象可以调用其对象本身的方法增加关联
第五步，更新对象
var customer = query.FirstOrDefault(c=>c.Customer == "ABCDE");
或者objCtx.TryGetObjectByKe() 方法取得对象
之后可以直接使用 custmer对象操作修改，其对象的状态会变为 modified，可以从objectStateManager
第六步，删除对象
删除可以直接调用delete方法，可以使用query.toList().ForEach((c)=>ctx.DeleteObject(c));
也可以直接执行SQL语句，objCtx.ExecuteStoreCommand("storeFunction");并不取回任何对象
相对使用导入的stroreFunction可以返回结果集objCtx.ExecuteFunction<Type>(params)为指定的type
第七步，保存更改
objCtx.SaveChange([param])

Entity model的并发控制
使用异常处理来完成并发检测与控制

事务处理，保证操作的原子性，完整性，可重复性ACID
1. 隐式事务， 某些语句本身就是一个事务，不需要明确去启动事务
2. 显式事务， 需要Begin tran, commit tran, rollback tran, 协调多个update语句
3. 分布式事务， 相对本地事务而言的概念，通常是针对不同的数据库之间的操作协调
ado.net entity framwork中的objectContex对象，saveChanges方法，本身是有一个事务，不需要声明
分布式事务，必须启用服务distributed transaction coordinator,可以实现多个数据上下文，或数据上下文与文件的回滚，协调统一；只有对应的objTran.Complete()成功才成公
control panel-> administrator tool ->component services 可以查看当前运行的所有需要处理的事务，进行事务的处理
如果在事务处理的时候不需要太多的锁，则可以使用transactionOptions类来定义锁级别
数据库启用快照隔离来减少事务锁，需要服务器与程序都需要开启snapshot

优化
1.不做事务跟踪，mergeOption.notracking
2.使用查询编译（这是提高LINQ语法编译成lambda表达式,进而编译成sql语句的速度）
var query2 = ctx.customers.where(c=>c.country == "usa")
static func<>(param)定义西方法，不允许任何函数卡禅

视图是ADO.net entity 的一个特殊对象
手工方式
推荐在设计时生成视图，生成视图的工作是无法避免的
生成方式， EDMGEN.EXE
先生成视图来提高速度
在VS, prompt命令行下输入
 edmgen.exe /mode:viewGeneration /inssdel:northwind.ssdl /inmsl:northwind.msl /incsdl:Northwind.csdl /outviews: northwind.views.cs
 VS 2010开始提供新的代码生成方式，T4规范 text template transformation toolkit
 适合于代码很有规律，自动生成
 <#@ #>声明
 <# #>内部为可执行的C#代码
 <#= #>用于输出
 <#+ #>生成代码时可以引用的方法
 使用方法类似与ASP的编码
 
 限制返回对象数
 行的赛选，firstOrDefault, skip, take
 列的赛选，动态构造类型，只取某几个列
 可以减少取得数据的大小
 
 objectContext的范围要设置合理的声明周期
 不建议scope太宽，优先考虑，快速打开链接，用完之后立即销毁；
 objectContext会根据connection provider自动决定是否使用连接池
 可以自己创建connection对象，并手工指定entity 对象的connection属性，在构造函数中指定

 plan-old CLR object, poco,原生态的CLR对象，纯净的实体类，便于数据库对象的复用
 使用POCO将实体类与项目分离出来，之后将分离出来的实体类汇总到一起
 1.剪切 生成的*.TT文件到一个新的项目中
 2.修改TT文件
 
 使用TcpTrace来监控访问的数据包
 
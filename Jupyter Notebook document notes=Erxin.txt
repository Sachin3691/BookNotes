Jupyter Notebook document notes=Erxin

# Reference 
- https://jupyter-notebook.readthedocs.io/en/stable/
- document list 
http://jupyter.org/documentation
- official website 
http://jupyter.org/index.html
- github 
https://github.com/jupyter/help

# Introduction 
- jupyter combines two components 
a web application for output 
notebook documents, a representation of all content visible in the web application 

- main features of web application 
    + syntax 
    + execute code from browser 
    + display result, html, latex, png, svg etc 
    + editing for rich text using markdown, markup language 
    + using latex and rendered natively by MathJax 

- notebook documents, These documents are internally JSON files and are saved with the .ipynb extension. JSON is a plain text format and can be version controlled and shared 

any .ipynb notebook document available from a public URL can be shared via the Jupyter Notebook Viewer (nbviewer).
- starting t he jupyter notebook 
$ jupyter notebook
This will print some information about the notebook server in your terminal, including the URL of the web application (by default, http://localhost:8888

- specify port 
$ jupyter notebook --port 9999

- without browser 
$ jupyter notebook --no-browser

- get notebook options 
$ jupyter notebook --help


# Migrate from ipython notebook 
- configuration files 

IPython location	 	                                    Jupyter location
~/.ipython/profile_default/static/custom	            →	~/.jupyter/custom
~/.ipython/profile_default/ipython_notebook_config.py	→	~/.jupyter/jupyter_notebook_config.py
~/.ipython/profile_default/ipython_nbconvert_config.py	→	~/.jupyter/jupyter_nbconvert_config.py
~/.ipython/profile_default/ipython_qtconsole_config.py	→	~/.jupyter/jupyter_qtconsole_config.py
~/.ipython/profile_default/ipython_console_config.py	→	~/.jupyter/jupyter_console_config.py

- data files location 
In IPython 3, data files lived in ~/.ipython.

In Jupyter, data files use platform-appropriate locations:

OS X: ~/Library/Jupyter
Windows: the location specified in %APPDATA% environment variable
Elsewhere, $XDG_DATA_HOME is respected, with the default of ~/.local/share/jupyter

JUPYTER_DATA_DIR environment variable can be used to set a location explicitly

- ipython have profiles, jupyter doesn't have 
- changing jupyter configuration director 
JUPYTER_CONFIG_DIR = ./jupyter_config 
$ juypter notebook 

change configure file 
$ jupyter notebook --config=/path/cnofig 

- more details reference 
https://jupyter.readthedocs.io/en/latest/migrating.html


# Architecture guide 
- how ipython and jupyter notebook work 
- terminal ipython ,  This model is often called a REPL, or Read-Eval-Print-Loop.
- the ipython kernel 
the Notebook, the Qt console, ipython console in the terminal, and third party interfaces —- use the IPython Kernel. The IPython Kernel is a separate process which is responsible for running user code, and things like computing possible completions. 

the notebook or the qt console, communicate with the ipython kernel using JSON messages sent over ZeroMQ 

A kernel process can be connected to more than one frontend simultaneously. 

Wrapper kernel are easier to write for languages have good python wrappers 

    + reference to making kernels for jupyter
    https://jupyter-client.readthedocs.io/en/latest/kernels.html#kernels
    
- notebooks. sent from your browser to the notebook server 

user <=>browser <=http websockets=>notebook server <=> kernel 
                                    |
                                    V 
                                    notebook file 
                                    
- exporting notebooks to other formats, html, LaTex, or reStructuredText 
- parallel computing framework, ipython.parallel 
https://ipyparallel.readthedocs.io/en/latest/
                                

# Notebook narratives 
- narrative examples 
    + using the notebook for data exploration
    + using extensions and widgets 
    + using nbconvert for code execution and workflow 
    + using nbconvert for publishing 
    + using multiple language kernels 

- jupyter for data science 
python, ipython 
R, IRkernel, IRdisplay, repr, Julia, Bash 

- reference interesting jupyter notebooks 
https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks

This page is a curated collection of Jupyter/IPython notebooks that are notable. Feel free to add new content here, but please try to only include links to notebooks that include interesting visual or technical content;


# matplotlib 2d and 3d plotting in python 
- reference 
http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb

- two ways to use matplotlib 
    + easy 
    from pylat import * 
    
    + tidy way 
    import matplotlib 
    import matplotlib.pyplot as plt 
    
    improt numpy as np 
    
- matlab like API 
from pylab import * 
x = np.linespace(0, 5, 10)
y = x**2 
figure()
plot(x, y, 'r')
xlabel('x')
ylabel('y')
title('title')
show()

- matplotlib object oriented API 
fig = plt.figure()

axes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1)

axes.plot(x, y, 'r')

axes.set_xlabel('x')
axes.set_ylabel('y')
axes.set_title('title');

    + add sub figure into main figure 
fig = plt.figure()

axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes
axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes

axes1.plot(x, y, 'r')
axes1.set_xlabel('x')
axes1.set_ylabel('y')
axes1.set_title('title')

axes2.plot(y, x, 'g')
axes2.set_xlabel('y')
axes2.set_ylabel('x')
axes2.set_title('insert title');

fig.savefig("filename.png", dpi=200)

- add legend 
ax.legend(loc=0) # let matplotlib decide the optimal location
ax.legend(loc=1) # upper right corner
ax.legend(loc=2) # upper left corner
ax.legend(loc=3) # lower left corner
ax.legend(loc=4) # lower right corner

- matplotlib support LaTex in legend 
Matplotlib has great support for LaTeX. All we need to do is to use dollar signs encapsulate LaTeX in any text (legend, title, label, etc.). For example, "$y=x^3$".

- placement of ticks and custom tick labels 
fig, ax = plt.subplots(figsize=(10, 4))

ax.plot(x, x**2, x, x**3, lw=2)

ax.set_xticks([1, 2, 3, 4, 5])
ax.set_xticklabels([r'$\alpha$', r'$\beta$', r'$\gamma$', r'$\delta$', r'$\epsilon$'], fontsize=18)

yticks = [0, 50, 100, 150]
ax.set_yticks(yticks)
ax.set_yticklabels(["$%.1f$" % y for y in yticks], fontsize=18); # use LaTeX formatted labels

- label spacing 
matplotlib.rcParams['xtick.major.pad'] = 5
matplotlib.rcParams['ytick.major.pad'] = 5

fig, ax = plt.subplots(1, 1)
      
ax.plot(x, x**2, x, np.exp(x))
ax.set_yticks([0, 50, 100, 150])

ax.set_title("label and axis spacing")

ax.xaxis.labelpad = 5
ax.yaxis.labelpad = 5

ax.set_xlabel("x")
ax.set_ylabel("y")

- grid on for axis  
axes[0].plot(x, x**2, x, x**3, lw=2)
axes[0].grid(True)

axes[1].plot(x, x**2, x, x**3, lw=2)
axes[1].grid(color='b', alpha=0.5, linestyle='dashed', linewidth=0.5)

- axis spines 
fig, ax = plt.subplots(figsize=(6,2))

ax.spines['bottom'].set_color('blue')
ax.spines['top'].set_color('blue')

ax.spines['left'].set_color('red')
ax.spines['left'].set_linewidth(2)

ax.spines['right'].set_color("none")
ax.yaxis.tick_left() # only ticks on the left side

- twin axes 
fig, ax1 = plt.subplots()

ax1.plot(x, x**2, lw=2, color="blue")
ax1.set_ylabel(r"area $(m^2)$", fontsize=18, color="blue")
for label in ax1.get_yticklabels():
    label.set_color("blue")
    
ax2 = ax1.twinx()
ax2.plot(x, x**3, lw=2, color="red")
ax2.set_ylabel(r"volume $(m^3)$", fontsize=18, color="red")
for label in ax2.get_yticklabels():
    label.set_color("red")

- other styles 
fig, axes = plt.subplots(1, 4, figsize=(12,3))

axes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx)))
axes[0].set_title("scatter")

axes[1].step(n, n**2, lw=2)
axes[1].set_title("step")

axes[2].bar(n, n**2, align="center", width=0.5, alpha=0.5)
axes[2].set_title("bar")

axes[3].fill_between(x, x**2, x**3, color="green", alpha=0.5);
axes[3].set_title("fill_between");

- multiple subplots 
fig = plt.figure()
ax1 = plt.subplot2grid((3,3), (0,0), colspan=3)
ax2 = plt.subplot2grid((3,3), (1,0), colspan=2)
ax3 = plt.subplot2grid((3,3), (1,2), rowspan=2)
ax4 = plt.subplot2grid((3,3), (2,0))
ax5 = plt.subplot2grid((3,3), (2,1))
fig.tight_layout()

- colormap and contour figures 
alpha = 0.7
phi_ext = 2 * np.pi * 0.5

def flux_qubit_potential(phi_m, phi_p):
    return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)
phi_m = np.linspace(0, 2*np.pi, 100)
phi_p = np.linspace(0, 2*np.pi, 100)
X,Y = np.meshgrid(phi_p, phi_m)
Z = flux_qubit_potential(X, Y).T

- contour 
fig, ax = plt.subplots()

cnt = ax.contour(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])

- 3d figures 
fig = plt.figure(figsize=(14,6))

ax = fig.add_subplot(1, 2, 1, projection='3d')

p = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

ax = fig.add_subplot(1, 2, 2, projection='3d')
p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=matplotlib.cm.coolwarm, linewidth=0, antialiased=False)
cb = fig.colorbar(p, shrink=0.5)

    + wire-frame plot 
g = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1, 1, 1, projection='3d')

p = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)

    + countour plots with projections 
fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1,1,1, projection='3d')

ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
cset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=matplotlib.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=matplotlib.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=matplotlib.cm.coolwarm)

ax.set_xlim3d(-np.pi, 2*np.pi);
ax.set_ylim3d(0, 3*np.pi);
ax.set_zlim3d(-np.pi, 2*np.pi);

- change the view angle 
ax.view_init(70, 30)

- support animations, With the FuncAnimation function we can generate a movie file from sequences of figures. The function takes the following arguments: fig, a figure canvas, func, a function that we provide which updates the figure, init_func, a function we provide to setup the figure, frame, the number of frames to generate, and blit

from matplotlib import animation

def init():
    # setup figure

def update(frame_counter):
    # update figure for new frame

anim = animation.FuncAnimation(fig, update, init_func=init, frames=200, blit=True)

anim.save('animation.mp4', fps=30) # fps = frames per second

- backends, Matplotlib has a number of "backends" which are responsible for rendering graphs. The different backends are able to generate graphics with different formats and display/event loops

matplotlib.rcsetup.all_backends 

    + generating SVG with the svg backend 
import matplotlib
matplotlib.use('svg')
import matplotlib.pylab as plt
import numpy
from IPython.display import Image, SVG

fig, ax = plt.subplots()
t = numpy.linspace(0, 10, 100)
ax.plot(t, numpy.cos(t)*numpy.sin(t))
plt.savefig("test.svg")

SVG(filename="test.svg")

- ipython notebook inline backend 
To activate this backend, somewhere in the beginning on the notebook, we add:

%matplotlib inline

It is also possible to activate inline matplotlib plotting with:

%pylab inline

    + %pylab inline imports a number of packages 
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

    + %config to update settings in InlineBackend. For example, we can switch to SVG figures or higher resolution figures with either:

%config InlineBackend.figure_format='svg'
%config InlineBackend.figure_format='retina'

- references 
http://www.matplotlib.org - The project web page for matplotlib.
https://github.com/matplotlib/matplotlib - The source code for matplotlib.
http://matplotlib.org/gallery.html - A large gallery showcaseing various types of plots matplotlib can create. Highly recommended!
http://www.loria.fr/~rougier/teaching/matplotlib - A good matplotlib tutorial.
http://scipy-lectures.github.io/matplotlib/matplotlib.html - Another good matplotlib reference


# IPython 
- reference from readthedocs.io 
http://ipython.readthedocs.io/en/stable/
- installation, confgiruation and usage 
    + how do i decide which packages I need? 
    https://jupyter.readthedocs.io/en/latest/projects/content-projects.html
    
    jupyter, try and play 
    jupyterHub, notebooks for team class or group 
    nbconvert, convert my notebook file to another format 
    other kernel, install a language kernel, using another language 
    widgets extenstions dashboard help,  customize notebook


- Updating jupyter notebook 

$ pip3 install -U jupyter 

- jupyter command 
-h, --help
Show help information, including available subcommands.

--config-dir
Show the location of the config directory.

--data-dir
Show the location of the data directory.

--runtime-dir
Show the location of the data directory.

--paths
Show all Jupyter directories and search paths.

--json
Print directories and search paths in machine-readable JSON format.

- common directories and file locations 
JUPYTER_CONFIG_DIR for config file location

JUPYTER_PATH for datafile directory locations, Set this environment variable to provide extra directories for the data search path. JUPYTER_PATH should contain a series of directories, separated by os.pathsep (; on Windows, : on Unix)

JUPYTER_RUNTIME_DIR for runtime file location


# Jupyter's Common configuration approach 
- summary 
    + common jupyter configuration system, by default is ~/.jupyter 
    + kernel configuration directories will be separate for each different kernel 
    
- The python config file 
    + create default config 
    $ jupyter {application} --generate-config 
    
    jupyter_application_config.py
    + configure class attributes like 
    c.NotebookApp.port 8754 

- Every configurable value can also be set from the command line
$ jupyter notebook --NotebookApp.port = 8754

- get help from 
jupyter {application} --help       # Just the short options
jupyter {application} --help-all   # Includes options without short n


# Jupyter user interfaces 
- jupyter notebook, web-based app combine live-code with narrative text quations and visualizations 
- jupyter console, terminal based console 
- jupyter QtConsole, interactive computing with rich output 
- kernels 
    + ipython 
    + ipywidgets 
    + ipyparallel 

- formatting and conversion 
nbconvert, convert dynamic notebooks to static formats such as HTML, markdown, LaTeX/PDF, and reStrucuredText. https://nbconvert.readthedocs.io/en/latest/

nbformat, work with notebook documents programmatically. https://nbformat.readthedocs.io/en/latest/

- Education
nbgrader tools for managing, https://nbgrader.readthedocs.io/en/stable/











    




















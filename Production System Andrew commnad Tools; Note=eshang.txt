Production System Andrew commnad Tools; Note=eshang

:reference
>Tools path in the module 

:Environment
>add path
c\Program Files\ruby\Scite
W:\PCBASE\MODULIB\Utilities.001

:Using Production Tools Steps
>start vc command line prompt
>change current working path
    -selmc machineName
>compile machine
    -mccmd compile
>generate configuration
    -mccmd generate_configuration
    -mccmd generate_configuration > redirectDoc
>generate configuration asseblies
    -mccmd generate_configuration_assembles >
>mtu
    -mtun2w
    -mtu.err is the output file
    if got error rerun the reinstallhklibraries.bat to reinstall the dll
>run the machine
    -runmc to run the machine
>edit module
    -emod moduleName
>module syntac check 
    -mccmd check_module moduleName
>screen changing just need generate the configuration
    -mccmd genereate_configuration
    -mccmd genereate_configuration_assembli
    es
    mcCmdExecute.bat
    
:PPT faster development
>SelMc.bat
selects a machine and sets environment variables so you don't need to specify the machine again for other machine related commands.
also changes the command prompt and the title of the comman command prompt window to the machine S/N.
e.g.: selmc _ate910
>CDMc.bat
changes to the root of the machine folder for the currently selected machine.
e.g.: cdmc
>CDMod.bat
changes to the root of a specified module.
e.g.: cdmod utilities.001
>eMc.bat
edits the relevant configuration and log files for the currently selected machine.
e.g.: emc
>eMod.bat
edits the DSL and MAN file for the specified module.
e.g.: emod domainmodelclamp.005
>McCmd.bat
runs the specified command in the DSL compiler McCmd for the selected machine.
e.g.: mccmd generate_configuration
e.g.: mccmd generate_configuration_assemblies
>MTUn2w.bat
runs MTU NetworkToWorkstation for the currently selected machine.
e.g.: mtun2w
>RunMc.bat
runs the currently selected machines from your local drive (i.e., you have to run MTUn2wfirst).
e.g.: runmc

:Macors
In Codewright:
Record: Edit | Record (<F7>)
Play: Edit | Playback (<F8>)
In Visual Studio:
Record: Tools | Macros | Record TemporaryMacro
Play: <Ctrl><Shift>p
Demo:
Run check_module on all modules for a machine.

:Run test from the command line prompt
frees up Visual Studio so you can keep working.
switch to DslLib folder and run test, e.g.:
ts_All
run one test at a time:
ruby <test file> –n <test name>
<test name> can be a RegEx, e.g.:
ruby tc_Machine –n /test_.*syntax.*/

:Run one test from within VS so it can be debugged:
edit DslLib.stproj.
insert the command line arguments to use when running that file, for example, change:
	<Ruby Include="tc_Machine.rb" />
to:
	<Ruby Include="tc_Machine.rb">
      <Arguments>–n /test_.*syntax.*/</Arguments>
    </Ruby>
remember to remove the arguments when done (otherwise the other tests will not be run).


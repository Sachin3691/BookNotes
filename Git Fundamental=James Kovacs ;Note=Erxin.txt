Git Fundamental=James Kovacs ;Note=Erxin

# History of version control
- first generation
    + single file
    + not networking
    + SCCS, RCS
- second generation
    + multi-file
    + centralized
    + CVS, VSS, SVN TFS, Perforce
- Third Generation
    + Changesets
    + Distributed
    + Git, Hg, Bazaar, BitKeeper
    
# Advantages of DVCs
- Different topologies
    + centralized
    + hierarchical
    sub-system repositories are periodically merged into a main repositories
    + distributed
    developers push changes to their own repository
    project maintainers pull changes into the official repository
- backup are easy, each clone is a full backup
- advantages of DVCs
    + reliable branching/merging
        * feature branches
        * always work under version control
        * applying fixes to different branches 
    + full local history
        * compute repository statistics
        * analyze regressions
    + new ideas
        * deployment
        git push heroku prod_branch
    
- created by Linux Torvalds
- prompted by linux-BitKeeper separation
- written in Perl and CVS
- runs on linux, OS X, windows and many other operating systems
- design goals
spped, simplicity, strong branch/merge support, distributed, scales well for large projects
- installing
    + windows
    msysGit, http://msysgit.github.com
    git for window, http://git-scm.com/
    + msysGit
    enable true type
    enable unit tool in window command prompt
    
    + create a repository in a folder
    $ git --version 
    check git version
    
    $ git init
    init repository at current version, then the git is works on the current window system
- Configuring Git
    + system-level configuration
    $ git config --system
    stored in /etc/gitconfig or c:\program files(x86)
    git\etc\gitconfig
    
    + user-level configuration
    git config --global
    stored in ~/.gitconfig or c:\users\<name>\.git.config
    
    + repository-level configuration
    git config 
    stored in .git/config in each repo

- configure git
check the user configure
$ git config --global --list

create user global configure
$ git config --global user.name <name>
$ git config --global user.email <email>
$ git config --global core.editor <editor>
$ git config --global help.autocorrect 1
$ git config --global color.ui auto
$ git config --global core.autocrlf true, crlf care return line feed options(true|false|input)
    + true, for automatic change return line works for windows
    + false, do nothing, for only doing one platform developments
    + input, convert during input but don't do back out, suggest for mac and linux 
refences document
http://git-scm.com/documentation

the configuration is hierarchy

# Working locally with Git
- Creating a local repository, adding files, and committing
- create repository
$ git init
- add files 
copy the files into git repository, the file status will become to untrack, use git status to check it.
$ git status 

add untrack file into git repository
$ git add filename

commit changes
$ git commit 
$ git commit -m <comments>

check the log
$ git log

check diff between two commit
$ git diff <commit_number>..<commit_number>
$ git diff HEAD~1..HEAD
$ git diff HEAD~1..

HEAD~# means the commit till the one to the head

- add all updated file into commit queue, the files must be tracked 
$ git all -u

add all file included untracked files
$ git all -U

- Staging changes as multiple commits
all changed files should be added into the commit queue in each change
for example, changed two files. these two could be add and commit separately
- Deleting and renaming files
delete a file and use
$ git all -u 
to add deleted files into queue

- revert to previous version
$ git checkout specify <files>

the modified changed will be lost

reset all changes for revert bunch of changes file 
git reset --hard

- undoing/redoing changes in the repository
$ git reset --soft HEAD~1
revert the previous changes status and all changes to the next head will be added into the commit queue 

- cleaning the working copy, remove unnecessary files 
$ git clean -n
will display the result of clean operation

$ git clean -f 
do the operation 
- ignoring files with .gitignore
    + ignore log directory
    /log
    log/
    /log/*.txt
    
# Working Remotely with Git
- Overview
- Cloning a Remote Repository
    + from a web server such as github
    $ git clone url
    
    view check in log and show each check in in one line
    $ git log --oneline
    
    
- Basic Repository Statics
wc is the bash command to word count
$ git log --oneline | wc -l

show log with graph to show branch merge
$ git log --oneline --graph

show short log
$ git log --format=short 
$ git shortlogs
- Viewing Commmits
check last commit
$ git show HEAD

$ git show HEAD~1

display the remote repository information
$ git remote
$ git remote -v

- git protocols
http/https use 80/443, https://github.com/jquery/jquery.git, read-write password for auth firewall friendly

git 9418 git:/github.com/jquery/jquery.git, read-only anonymous only

ssh 22 git@github.com:jquery/jquery.git read-write SSH keys for auth

file n/a  /user/james/code/jquery
- check git config
cat .git/config

display remote branches
$ git branch -r

check tag
$ git tag
- fetching from a remote
check remote repository
$ git remote -v

somebody send a pull request
$ git remote add origin https://github.com..

git fetch will pull all the changes from the remote repository
$ git fetch

merge remote repistory into local branch
$ git merge origin/master 

- pulling from a remote
$ git branch -r
$ git pull

$ git branch --set-upstream-to master origin/master
$ git pull origin/master

- pushing to a remote repository
commit changes with common, the changes not include add files
$ git commit -am "messgae"

remote remote repository
$ git remote rm origin

re add remote repository
$ git remote add origin git@github.com/...

- creating and verifying tags
tag a repository
$ git tag v1.0

check a tag
$ git tag

add a annotation with a tag
$ git tag -a

sign a tag, to ensure certain commit by a person, with digital signature
$ git tag -s v1.0_signed

verify tag
$ git tag -v v1.0

- pushing tags to a remote
will update remote repository
$ git push

by default git will not push tags to remote repository
$ git push --tags


# Branching, Merging and Rebasing with Git
- Visualizing branches
display current log in oneline
$ git log --graph --oneline

display include tag, decorate in one line
$ git log --graph --oneline --all --decorate

add alias name for git
$ git config --global alias.lga "log --graph --online --all --decorate"
$ git lga

- creating local branches
$ git branch feature1

branch is labels for a specify hash commit, after changes the branch name just like tag will move to point other change in 

- difference between branches and tags
branches is just like a dynamic tag will shift will commit, the tag is a friendly name for specify check in hash code

create fix branches
$ git branch branch_name hash_checkin

switch to a branch
$ git checkout branch_name

delete a branch
$ git branch -d/-D branch_name

switch and add a branch
$ git checkout -b branch_name

- recovering deleted commits
get reference has pointed to the log
$ git reflog

check the relative branch checkin
$ git branch branch_name hash_code

by default git only track 30 days of checkin log

- stashing changes
the changes will be saved but not check in
$ git stash

do anything then

switch back to the saved file by
$ git stash apply

check stash list
$ git stash list

reset the changes
$ git reset --hard HEAD

remote a stash, remote the first stash changes
$ git stash pop, pop the top stash list and apply the changes
$ git stash drop, delete the first stash 

pop the stash and save it as branch
$ git stash branch branch_name

- merging branches
merge branch
$ git merge branch_name

remote merged branches
$ git branch -d branch_name

merge two branches
$ git merge branch0 branch1

use merge tool to merge conflict
$ git mergetool

show the difference between cached with merged file
$ git diff --cached
- KDiff3, it's a three way merge tool, beyond compare also a merge tool
- rebasing changes
rebase current branch with specify branch 
$ git rebase branch_name

if there is a conflict, use the merge tool solve the conflict and use 
$ git rebase --continue
- cherry-picking changes
allow pick a changes and apply the changes without merge or rebase the branch
$ git cherry-pick hash_checkin

the cherry pick changes will keep track till the branch merge or rebase. The changes will not be do repeated

- create a remote branch
$ git fetch origin master

push changes
$ git push server branch
if the branch name doesn't exist in the remote server, the branch will be created
- deleting a remote branch
push remote branch
$ git push origin v1.0_fixes:give_remote_branch_name

if ignore the give_remote_branch_name git will use the local v1.0_fixes branch name

delete a branch name
$ git push origin :remote_branch_name
this will remote the branch remote_branch from the server


# git with visual studio
- DVCS, distributed version control systems
- centralized 
    + master repository
    + commits affect everyone immediately
    + centralized check-in/check-out
    VSS & TFS prior to 2010
    always connect to server before editing
    limited offline support
- centralized edit/commit
    + TFS 2010 & Above, SVN
    + connect to the server when chagnes are ready
    + better offline support
    + no offline access to history
- check out model, offline works is hard for TFS
- edit and commit model
    + change the client workspace to connect to local TFS repository
    + this will allow version control system works offline
- DVCS
    + full local copy (including history)
    + changesets are shared between peers
    + everyone has a backup
    + full offline support
    + no locking support
    + initial setup may take longer
- git workflow
    + switching between branches
    by checkout command, the checkout branch become HEAD

    + shared repository, get changes from remote repository
    pull
    make change at local
    commit locally to local repository
    possibly branch and merge locally
    pull(resolve conflicts)
    push
- add http proxy for git
set environment variable, %HTTP_PROXY% and use set global proxy for git
$git config --global http.proxy %HTTP_PROXY%
编译原理=Alfred V.Aho;Note = eshang

语言处理器
解释器，interpreter
字节码，bytecode
即时编译器，just in time
预处理器，prefprocessor
汇编语言易于输出与调试，由汇编器assembler处理，重定位机器代码
连接程序，linker，一个文件中的代码可能指向另一个文件中的位置，解决外部内存地址问题
加载器，loader，把所有可执行的文件放入内存中
；
java 是混合编译器，先编译，后解释
源程序->翻译器->中间程序->虚拟机->输出
                输入
语言处理系统
源程序->预处理->编译器->汇编器->连接器/加载器->目标机器代码
            经过预处理的
                    目标汇编程序
                           可重定位机器代码
                                    目标机器代码
                                ->库文件，可重定位文件对象    
;
；
编译器结构
分析，analysis，把源程序分为多个组成要素
    符号表，symbol table
综合，synthesis，根据中间表和符号表中的信息来构造用户期待的目标程序
    步骤，phase
；
词法分析，lexical analysis或扫描，scanning
将源程序的字节流转换为有意义的词素，lexeme，词法分析器产生如下形式的此法单元，token
<token-name, attribute-value>
第一个分量是由词法分析步骤使用的抽象符号
第二个分量是指向符号表中关于这个词法单元的条目
;
语法分析，syntax analysis，或解析parsing
语法树，syntax tree，每个内部节点表示一个运算
；
语义分析，semantic analyzer，检查源程序是否和语义定义语义一致
类型检查，type checking，检查每个运算符是否具有匹配的运算分量
自动类型转换，coercion
；
中间代码生成，把源程序翻译成目标代码的过程中，生成低级别或者类机械语言的表示，例如三地址代码，three-address code，每个指令具有三个运算符，每个运算变量都像一个寄存器
；
代码优化，试图改进中间代码，便于生成更好的目标代码
；
代码生成，注意寄存器存储分配等重要问题
；
符号表管理，记录源程序中使用额变量的名字，收集每个名字的各种属性
；
将多个步骤组合成趟pass
可以把前端不同的目标机后端整合，使得生成的中间代码相同
；
一切操作都是为了更好的翻译为汇编代码
；
；
编译器构造工具，成功的工具都能隐藏生成算法的细节
语法分析器的生成器
扫描器的生成器
词法制导的翻译引擎
代码生成的生成器
数据流分析引擎
编译器构造工具集
；
；
程序设计语言发展历程
语言带分类
1.机械语言
2.汇编
3.fortran，cobol，c，lisp，c++，c#，java
4.为特定应用设计的，nomad，sql，postscript用于排版
5.基于逻辑和约束的语言，prolog，ops5
；
第二种分类完成计算机任务的语言
强制性，imperative，声明式declarative
；
冯诺依曼语言，von Neumann language
面向对象语言，object-oriented language
脚本语言，scripting language
；
；
只有杠杆作用越大回报才越大
；
；
构建编译器的相关科学
建模，有穷状态系统自动机与正则表达式
代码优化，图，矩阵，线性规划
充分的验证与评价功能
    优化必须是正确的
    必须能够改善很多程序的性能
    优化的时间在合理范围内
    工程方面的工作必须是可管理的
第一个目标是正确性
第二个目标是提高很多程序的性能
第三个目标是保证编译时间短
第四保证编译器的维护与设计费用是可管理的
；
；
编译技术的应用
高级程序设计语言的实现
；
面向对象
数据抽象、特征继承
；
针对计算机体系结构的优化
并行、内存层次结构，由几层不同速度的内存组成
VLIW(Very Long Instruction Word), 非常长指令字
;
新计算机体系结构的设计
RISC，Reduced Instruction-Set Computer，精简指令集
CISC，Complex Instruction-Set Computer，复杂指令集
专用体系结构
数据流机器
向量机
VLIW，非常长指令字机器
SIMD，单指令，多数据处理器列阵
心动列阵，systolic array
共享内存的多处理器
分布是内存的多处理器
；
程序翻译
二进制翻译，把一个机器的二进制变成另一个机器的二进制代码
硬件整合，大部分软件硬件都是由高级语言描述的，硬件设计高级语言，Veilog与VHDL(Very high-speed integrated circuit Hardware Description Language), RTL(Register Transfer Level)寄存器传输层。硬件合成工具将RTL描述翻译成门电路，再被翻译成晶体管，最后生成物理布局
数据查询解释器，SQL，structured query language，结构化查询语言
编译然后模拟
软件生产率工具，错误检查，代码分析等
类型检查，泛型signature
边界检查，缓冲区溢出
内存管理工具
；
；
程序设计语言基础
静态，动态的区别
静态，如果语言使用的策略支持编译器静态决定某个问题，static
动态，程序运行时编译器决定某个问题, dynamic policy
;
编译时,compile time
运行时,run time
作用域,scope
静态作用域, staic scope
词法作用域, lexical scope
;
类定义和static关键字，是编译器确定用于存放被声明变量的内存位置的名字
；
环境与状态
环境，environmnet，是一个名字到存储位置的映射，C中的左值
状态，state，是一个内存位置到它们的值的映射，C中把左值映射到它们响应的右值
一般来说，环境与状态的映射是动态的，C中先声明后使用就是这个原因
；
静态作用域与块结构
块，block，{}来定义
标示符，identifier，是一个字符串，用来标识一个实体
变量，指向内存中的某个特定位置
块结构，block structure，块间的嵌套
函数，一定会返回值，C中void作为返回空来替代过程
过程，不返回任何值
方法，在Java中，效果与函数相同，但是方法一定在某一个类中
封装，encapsulation
声明，告诉我们事物的类型
定义，告诉我们他们的值
C++中一个雷的定义可能和她的部分或全部方法的定义分离，由于public，private，protected
；
动态作用域，依赖于一个或多个只有在程序执行时刻才能知道的因素，它就是动态的。对一个名字指向最近被调用但是还没有终止且声明了名字的过程中的声明。
动态作用域对多太过程是必不可少的
静态作用域与动态作用域的比较，动态规则处理时间的方式类似于静态作用域处理空间的方式，静态作用域让我们寻找位于内层的包含变量使用位置的单元；




























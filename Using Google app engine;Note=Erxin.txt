Using Google app engine=Charles Severance;Note=Erxin

# Preface
- it's free for moderate levels of use, every person with a gmail account can have a number of free applications
- author's website
http://www.dr-chuck.com
- comments and questions
http://www.oreilly.com/catalog/9780596800697
    
# Programming on the web
- what is google app engine
- what is a cloud, is a word of technical to ignoring all the complex internal details
- *.yaml, is Yet Another Markup language
- the simplest app engine application
    + file explain
    app.yaml, describe your application to App engine
        application: ae-00-trivial
        version: 1
        runtime: python
        api_version: 1
        handlers:
        - url: /.* 
        script: index.py
    the wildcard matching any string of characters so as to route all the incoming document requests to program named index.py
    index.py, is the consists of three python codes
        print 'Content-Type: text/plain'
        print ''
        print 'Hello there Chuck'

# introduce html and css
- validate html
http://validator.w3.org/check
- install firefox web developer add-on

# Python programming
- very fit for data manipulation
- the essence of programming
    + sequential steps
    + conditional steps
    + repeated steps
    + stored and reused steps
    + variable and expression
    
# sending data to your application
- making an http request
http://www.dr-chuck.com/page.htm
protocl host            document
- hacking the http protocol
- use the telnet command built into most operating systems
telnet url port
- the http protocol standards
http://www.ietf.org
the internet engineering task force is the standards organization responsible for the creation and maintenance of these internet standards
    + the IETF standards are called Requests for Comments or RFCs.
    engineers produce a straw man standard and request that the rest of the IETF review the documents and provide any comments on how the standard should be fixed and/or improved.
- write a guess number game with app engine
import sys
print 'Content-Type: text/html'
print ''
print '<pre>'
# Read the form input which is a single line
# guess=25
guess = -1
data = sys.stdin.read()
# print data
try:
    guess = int(data[data.find('=')+1:])
except:
    guess = -1
print 'Your guess is', guess
answer = 42
if guess < answer :
    print 'Your guess is too low'
if guess == answer:
    print 'Congratulations!'
if guess > answer :
    print 'Your guess is too high'
print '</pre>'
print '''
    <form method="post" action="/">
    Enter Guess: <input type="text" name="guess"><br>
    <input type="submit">
    </form>
    '''   
not works
- the environment variables
SERVER_SOFTWARE, SERVER_NAME, REQUEST_METHOD, HTTP_USER_AGENT    
- webpage to teach Common Gateway interface
  http://hoohoo.ncsa.uiuc.edu/cgi/in.html. 
  
# the app engine webapp framework 
- high level web application
import webapp2
class MainHandler(webapp2.RequestHandler):
    def get(self):
        self.response.write('Hello world! Updated')
app = webapp2.WSGIApplication([
    ('/', MainHandler)], debug=True)
- explain the codes
the get method will be automatic called
also could be added with post method
- assume that application experiences a high level of traffic, the framework could construct many copy of the handlers
- simple guess number program implement with high level api
import webapp2
class MainHandler(webapp2.RequestHandler):
    def get(self):
        self.response.write('Good luck')
        self.response.write(formstr)
        
    def post(self):
        strguess = self.request.get('guess')
        self.response.write('receive guess number %s' % strguess)
        self.response.write(formstr)

app = webapp2.WSGIApplication([
    ('/', MainHandler)], debug=True)
- the return value is a string
- Web server logs
import logging

# templates
- the default template syntax used by google engine is django
<p>{{ hint }}</p>
<form method="post" action="/">
<p>Enter Guess: <input type="text" name="guess"/></p>
<p><input type="submit"></p>
</form>
- put templates in to a directory named template
- using the template
from google.appengine.ext.webapp import template
class MainHandler(webapp.RequestHandler):
def get(self):
    temp = os.path.join(
    os.path.dirname(__file__),
    'templates/index.htm')
    outstr = template.render(
        temp,
        {'hint': 'Good luck!'})
    self.response.out.write(outstr)
- create a static folder to contain the static files of the server
- retrieve the document string from the incoming request using self.request.path
- extending base templates
    + create a common template for the same contents of each pages
    {% extends "_base.htm" %}
    {% block bodycontent %}
        <h2>App Engine:About</h2>
        <p>
        Welcome to the site dedicated to learning google app engine
        </p>
    {% endblock %}
    this page starts with the text contained in the file _base.htm. We are starting with _base.htm and then extending it.
    The second line says, “When you find an area marked as the bodycontent block in the _base.htm file, replace that block with the text in between the  block and endblock template commands.”
- conditional processing templates, the template 
    + get request path
    path = self.request.path
    + update the template with the path value
    outstr = template.render(temp, { 'path': path })
    + change the template to use the path variable to render the content
    <ul>
    <li><a href="sites.htm"
        {% ifequal path '/sites.htm' %}
        class="selected"
        {% endifequal %}
    >Sites</a></li>
    <li><a href="topics.htm"
        {% ifequal path '/topics.htm' %}
        class="selected"
        {% endifequal %}
    >Topics</a></li>
    </ul>
- replacing more than one block in the base template
- extending application
    + add login page
    + normal navigate to a url in browser will generate a get event
    + the form could do a post event
    + update the app.yaml file to add a new get and post login page handler
        /login, LoginHandler
        - url: /static
            static_dir: static
        - url: /.*
            script: index.py
    # add handler
    def main():
        application = webapp.WSGIApplication([
        ('/login', LoginHandler),
        ('/.*', MainHandler)],
        debug=True)
    + create cancel button
    <input type="submit" value="Cancel" 
    onclick="window.location='/'; return false;"/>
    return false;in the code snippet is to make sure that the form data is not submitted when the Cancel button is clicked.
    + variable passed into the template
    {% if error %}
    <p>
    {{ error }}
    </p>
    {% endif %}
- logging in and out using sessions 
    + add some pre build software 
    + try django
- update the webpage after user login

# app engine datastore
- the data is store in the google datastore
http://labs.google.com/papers/bigtable.html
- the MVC pattern
    + mode will be save in datastore
    + view, html and css
    + controller, sequencing and decision making
- use the datastore
from google.appengine.ext import db
- define a mode for user
# A Model for a User
class User(db.Model):
    account = db.StringProperty()
    password = db.StringProperty()
    name = db.StringProperty()
- check user is exist in the datastore
    # Check whether the user already exists
    que = db.Query(User)
    que = que.filter('account =',acct)
    results = que.fetch(limit=1)
    if len(results) > 0 :
    doRender(
    self,
    'applyscreen.htm',
    {'error' : 'Account Already Exists'} )
    return
    # Create the User object and log the user in
    newuser = User(name=name, account=acct, password=pw);
    newuser.put();
    self.session['username'] = acct
- caution
To be more robust, we should enclose the put()in a try/exceptblock, in case there is a problem with inserting the object. Also there is a “race condition” whereby an object might get inserted during the very short time between when we do the check and when we actually insert the object.  
- the datastore could be viewed by the google app engine development console
- terminology, different types of keys
    + logical key, something up from outside world, usually unique for a model
    + primary key, some random number or string assigned by the database
    + reference, a field in one model that points to the primary key of another model
- add reference property to ChatMessage data model
class ChatMessage(db.Model):
    user = db.ReferenceProperty()
    text = db.StringProperty()
    created = db.DateTimeProperty(auto_now=True)
- interactions between models
    + when insert an object the framework assigns a primary key to the object in the datastore
    + when you store an object using put(), the key is returned to you when the put() is complete
    + when app engine notices that we are using one field often than the others for lookups, the datastore may build an index to make those lookups perform faster
- query the datastore and set the order
que = db.Query(ChatMessage).order('-created');
- use for statement in template 
    {% for chat in chat_list %}
        <p>
        {{ chat.text }} ({{chat.user.account}})
        {{ chat.created|date:"D d M Y" }}
        </p>
    {% endfor %}
    
# javascript, jquery and ajax
- jquery
http://www.jquery.com
- use jquery ajax to update the content of the chatMessage. Add a get respond handler and return a fragment of html code of the current message
add ajax request to the html file to asynchronously updating a div using ajax
<div id="chatcontent">
    Loading...
</div>
<script>
    function updateMsg() {
    $.ajax({
        url: "/messages",
        cache: false,
        success: function(html){
        $("#chatcontent").html(html);
        }
        });
        setTimeout('updateMsg()', 4000);
    }
    updateMsg();
</script>

# running your application on the google infrastructure 
- app engine developer's site
http://appengine.google.com
- creating an application on app engine
    + currently free account support 10 app
    + google don't allow application to deleted
    + steps to create a app
        * app id must be unique
        * app title
        * authentication mode, will decide whether your app is avaliable to the public
    + application id is named as 
    appid.appspot.com
    + create a application from the app engine webpage
- uploading your application
    + using app engine sdk
    + using appcfg.py which is located at the google app engine install dir
    appcfg.py script saves authentication cookies, which allows you to issue repeated commands without logging in each time. You can use the --no-cookies option to disable this behavior
- google app engine will record all the deployed version of the app in the versions 
- support adding Collaborators to develop a project

# memory cache
- use distributed memory cache for storage
- rules of memory cache
    + nothing in the memory cache is guarenteed
    + need to indicate how long the data should be save in the cache
    + if the app need memory it will throw enough cache data even the data is in the save period
    + there is one memory cache shared across app instances
    + memory caches operates like a gigantic distributed python dictionary, each item in the cache have a unique key
    + each item has an expiration time
- using the memory cache
from google.appengine.api import memcache
x = memcache.get("1234")
y = { 'a': 'hello', 'b': 'world' }
memcache.add("7890", y, 3600)
memcache.replace("7890"), new_value, 3600)
- using the app console to examine the memory cache
run the local app console, http://localhost:8080/_ah/admin
the interactive console is used to run a snippet of code within your running application
the app console have a datastore viewer and a memory cache viewer
use the hit rate to check how often your data stored in the cache is being reused
- use case of memory cache
    + reduce the resource consumed, such as read hard disk times
    + pre render the entire web page
    + free session implementation
    http://www.google.com/p/gaeutilities
- our session class is all about dictionaries, session class code paths
    + have a cookie and a session
    + have a cookie but no matching session, create new session
    + no cookie set, create new session
- use the Cookie.SimpleCookie class to check the session cookie
import Cookie

string_cookie = os.environ.get('HTTP_COOKIE', '')
self.cookie = Cookie.SimpleCookie()
self.cookie.load(string_cookie)
self.cookie.get(COOKIE_NAME) will return the value or None
self.cookie[COOKIE_NAME].value








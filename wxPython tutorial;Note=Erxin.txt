wxPython tutorial;Note=Erxin

:wxpython advanced
>All programming language raite
http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html
>wxPython contains five modules
	- windows
	- gdi
	- core
	- misc, contains class for logging, application configuration, system setting...
	- controls
>wxPython is a c++ wrapper over a c++ gui api called wxWidgets, is not a native api
>Top level widgets
	- wx.PopupWindow
	- wx.ScrolledWindow
	- wx.Frame
	- wx.MDIParentFrame
	- wx.MDIChildFrame
	- wx.Dialog
>containers
	- wx.ScrolledWindow
	- wx.Panel
	- wx.SplitterWindow
	- wx.Notebook
>Dynamic Widgets
toggleButton, checkbox, textCtrl, spinCtrl, comboBox, bitmapButton, slider, choice, radioButton, button, scrolllBar, grid, radioBox, spinButton, listBox
>Static widgets, display information and can't edited by user
staticBitmap, staticBox, gauge, staticText, staticline
>other widgets
toolbar, menubar, statusbar
>inheritance of a button
wx.object->wxEvtHandler->wx.Window->wx.control->wx.button
>all widgets that appear on the screen are windows, therefor they inherit from wx.Window
>color, caret, cursor are not window.
>not all widget are controls. Controls are the widgets place on the containers
>two kinds of wx
	- win32 unicode
	- win32 ansi
>install on linux, Ubuntu, install synaptic package manager called python-wxgtkx.x

:first steps
>simple example
import wx
app = wx.App()			##each application must have one app object
frame = wx.Frame(none, -1, 'simple.py') ##important container
frame.show()
app.MainLoop()
>Frame is a important container and it's the top container which means it have no parent.
	- it can contain any window
	- consist with
		* title bar(op), borders(op) and a central container area
	- parameters
	wx.Frame(wx.Window parent, int id=-1, string title='', wx.Point pos = wx.Defaul wx.Size size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE, string name = "f)
		* wx.default_frame_style is a set of default flags
	- inherit from frame to custom window
	- resize window
		* in constructor
		* frame.SetSize()
	- set position of the window
		* in constructor
		* use these property methods
		Move(wx.Point point) 		move a window to the given position
		MoveXY(int x, int y)		move a window to the given position
		SetPosition(wx.Point point)	set the position of a window
		SetDimensions(wx.Point point, wx.Size size) set the position and the size of a window
	- max, min, centra the window
	Maximize(), Minimize(), Centre()
	- ShowModal(), will show modal window
>Widgets communicate, use obj.Bind(event, functionHandler, sourceObjId)
	- create all widgets in same class
	- create widgetsin different class, in this situation need to get the reference by hierarchy
	newObj = wx.Ojb()
	curObj.some_widget = custom_obj(newObj)
	anotherObj.some_widget = custom_obj(newObj)
>Menu, use three wx widgets
	- explain
	Menubar, Menu, MenuItem
	Menubar.Append(MenuObj)
	Menu.Append(MenuItem)
	- ex.
	in custom class frame init method
	file = wx.Menu()
	## id, name, short help string display in status bar
	file.Append(-1, 'quit', 'quit application') 
	menubar = wx.MenuBar()
	menubar.Append(file, '&file')
	self.SetMenuBar(menubar)
	self.Show()
	- docable menubar
	menubar = wx.Menubar(wx.MB_DOCKABLE)
	- icons, shortcut, events
		* icons, menuObj.SetBitMap(wx.Bitmap(image_path))
		* event, self.Bind(wx.EVT_MENU, self.OnQuit, id=1)
		* shortcut, &Name, '&' is specify the accelerate key. menu name 'name\tshort cut'
		ex. '&Quit\tCtrl+Q'
	- submenu and menu seperator
		* add submenu
			- objMenu.Append(id, menu_text)
			- menu_item = wx.MenuItem(menuObj, ID, menu_text)
		* add seperator
		menuObj.AppendSeperator()
	- event binding
	self.bind(event_id, function_name, menu_id)
	- various menu items
	normal text, check item, radio item
		* add check item
		menuObj.Check(id, is_checked)
		* append different kinds of menu item
		menuObj.Append(id, menu_text, help_text, kind)
		kind, is define the kind of current append item
			wx.ITEM_NORMAL, wx.ITEM_CHECK, wx.ITEM_RADIO
	- content menu(pop up menu)
		* add parent right button event handler
		self.bind(wx.Evt_right_down, methodName)
		wx.NewId(), will get a random id
		* call the pop up menu method
		def OnRightDown(self, event):
			self.PopupMenu(menuObj, event.GetPosition)
>Toolbars, a quick access to the most frequent use commands
	- create a toolbar
	toolbarObj = frameObj.CreateToolbar()
	toolbarObj.AddLabelTool(wx.ID_EXIT, '', wx.Bitmap(image_path))
	toolbarObj.Realize()
	- we could create multiple toolbars and place them into a formater, such as vbox
	- we could add sperator as menu
>layout manangement in wxPython
	- absolute positioning
	panel = wx.Panel(parent, id)
	wx.WidetClass(parent, id, pos=(top, left), size(width, height))
	- sizers
		* wx.BoxSizer, wx.StaticBoxSizer, wx.GridSizer, wx.FlexGridSizer, wx.GridBagSizer
		* the wx.Frame class have a default built-in sizer. when there is only one child the child will occupies all the space if the frame is not given borders, menu, toolbar and statubar
		* wx.BoxSizer, could put several widgets into a row or a column
		box = wx.BoxSizer(interger orient) #wx.VERTICAL, wx.HORIZONTAL
		box.Add(window, proportion, flag, border)
		we could control the border of the widgets by flags
		wx.LEFT | wx.RIGHT | wx.BOTTOM | wx.TOP | wx.ALL
		vbox = wx.BoxSizer(wx.VERTICAL)
		vbox.Add(midPan, 1, wx.EXPAND | wx.ALL, 20)
		* we could also use other flags such as wx.Align_XXX and wx.EXPAND
	- grid sizer
	wx.GridSizer(int rows=1, int cols=0, int vgap=0, int hgap=0)
	grid sizer could add many items together when it's inited
	gd = wx.GridSizer(4, 4, 3, 3)
	gd.AddMany([obj0, obj1,...])
	all the cells are in same size
	- flex grid sizer, heigh and width are flexible
	wx.FlexGridSizer(int rows=1, int cols=0, int vgap=0, int hgap=0)
	fgs.AddGrowableRow(2, 1)	#when window resize the specify row/col will change
	fgs.AddGrowableCol(1, 1)
	be sure to set the widgets in side with style wx.EXPAND
	- grid bag sizer, enable explicit positioning and allowed span row/col
	wx.GridBagSizer(integer vgap, integer hgap)
	Add(self, item, tuple pos, tuple span=wx.DefaultSpan, integer flag=0, integer border=0, userData)
	AddGrowableRow(integer row/col)
>wx.ListBox
>wx.ComboBox

:Events in wx.Python
>App.MainLoop(), is wait event happen
>Event is a piece of application-level information
>A dispatcher is a process maps events to event handler
>Event object is a object associated with the event
>Bind event
	- ex. wxWidgetObj.Bind(wx.EventType, functionName)
	- defination
	Bind(event, handler, source=None, id=wx.ID_ANY, id2=wx.ID_ANY)
		* event, event type
		* handler
		* source, is used to differentiate between the same event from different widgets
		* id, is used to differentiate between multiple items, such as buttons
		* id2, is used to bind a handler to range of ids
>Unbind(), is the reverse method of Bind()	
>Stop processing a event, used to call Veto()
	- to destroy a window(which derive from a frame) we must call Destroy()
	- NOTE, do not call the close() method to end a application, this will lead to a endless cycle
>Event propagation
	- Event propagation is travelling events from child widgets to parent and so on
	- there are two kinds of events
		* command event, do propagation
		* basic event, do not propagation
	- event handler, by default event is catched is stop propagation, to continue propagation we need to call Skip() method
>The default event id will give the control an default appearance on the the application running platform
    
:Window identifiers
>windows identifiers are integers that uniquely determine the window
>three ways to create window id
	- let the system generate, automatic create id are always negative
	wx.ID_ANY
	- use standard identifer, when ever possible should use the standard identifer. it will provide some standard graphics of behaviour on some platforms
	such as linux will give default icons to the standard identifer
	- create by yourself
>get the widget id
wxObj.GetId()
>miscellaneous events
	- focus event
	wx.EVT_SET_FOCUS, wx.EVT_KILL_FOCUS
	- scroll event
	event.GetSize(), wx.EVT_SIZE
	- paint event
	wx.EVT_PAINT
	- key event
	wx.EVT_KEY_DOWN, wx.EVT_KEY_UP, wx.EVT_KEY_CHAR
	event.GetKeyCode()
	all the keys are define in the wx module. such as wx.WXK_ESCAPE
	
:wx dialog
>simple message box
wx.MessageBox(text, title)
>timer call
wx.FutureCall(delay_ms, callback)
>predefine dialogs
	- wx.MessageDialog(parent, message, caption, long style=wx.OK|wx.CANCEL|wx.CENTRE, wx.Point pos)
	- about dialog
>the common way to define widgets on a window
	panel = wx.Panel(parent, id)
	sizer = wx.SomeSizer(...)
	grid = wx.GrideSizer(...)
	content_widget = wx.widget(parent, id, message)
	grid.Add(content-widget) or sizer.AddMany(content_widget,...)
	sizer.Add(grid, ...)
	panel.SetSizer(sizer)
>about dialog
	- place in the misc module contains two object
	wx.AboutDialogInfo(), wx.AboutBox(wx.AboutInfo info)
>custom dialog
wx.Dialog, could define a class and inherite from dialog
dialogObj.ShowModal()

:Core Widgets
>wx.Button, wx.ToggleButton, wx.BitmapButton, wxStaticLine, wx.StaticText, wx.StaticBox, wx.ComboBox, wx.CheckBox, wx.StatusBar, wx.RadioButton, wx.Gauge, wx.Slider, wx.SpinCtrl, wx.SplitterWindow, wx.ScrolledWindow, wx.Notebook, wx.Panel
>button
	- styles
	wx.BU_LEFT, wx.BU_TOP, wx.BU_RIGHT, wx.BU_BOTTOM, wx.BU_EXACTFIT, wx.NO_BORDER
>random, 随机数生成器, python的
>create function
wx.Object(parent, id, text, size)
>bitmap button, use bitmap obj to display button image
>boxsizer could set empty size between contains object
someSizer.Add(size, proportion), if propertion equal to 1 means it will automatic ground when window resize
>static line
	- style
	wx.LI_HORIZONTAL, wx.LI_VERTICAL
>static test, one or more lines of readonly text
	- style
	wx.ALIGN_RIGHT, wx.ALIGN_LEFT, wx.ALIGN_CENTER, wx.ST_NO_AUTORESIZE
>static box, is a kind of decorator widget, the widgets contain in static box  is siblings not child. It must be create before the widgets it contains.
>combo box
	- style
	wx.CB_DROPDOWN, wx.CB_READONLY, wx.CB_SORT
	- ex.
	wx.ComboBox(self, id, pos, size, choices, style)
	objCombo.GetSelection()
>check box
>status bar
>radio button, a group of radio buttons is defined by having the first radio button in the group contain the wx.RB_GROUP style, all the radio buttons define after will be added into the group
	- style
	wx.RB_GROUP, wx.RB_SINGLE, wx.CB_SORT
>gauge, use to display process status and length
	- style
	wx.GA_HORIZONTAL, wx.GA_VERTICAL
	- ex
	wx.Gauge(parent, id, maxValue, size)
>slider, simple handle, could use choose value
	- styles
	wx.SL_HORIZONTAL, wx.SL_VERTICAL, wx.SL_LEFT...
>list box, wx.ListBox
>spin control, use to increment and decrement a value, with up and down arrow
wx.SpinCtrl
>splitter window, use to split the main area of application
wx.SplitterWindow(parent, id)
splitterObj.SplitVertically(container0, container1), the container could be panel
>scrolled window
	- wx.ScrolledWindow(parent), the parent could be frame
	  scrolledWindowObj.SetScrollbars(...)
	  sw.Scroll(...)
	- wx.Image, use to convert image into bmp
>note book, this widgets joins multiple windows with corresponding tabs
	- tab position style
	wx.NB_LEFT, wx.NB_RIGHT, wx.NB_TOP, wx.NB_BOTTOM
	add wx.lib.sheet into note book
	wx.NoteBook(parent, id, style)
	nb.sheet# = sheetObj
>panel, is a basic parent widget
wx.Panel(parent, id, size, style)

:advanced widgets in wxpython
>pyGTK, is c based GTK toolkit
>wx.python widgets are writen in cpp
>dynamic language
	- if we need a quick solution or we need an application, that will change rapidly over a short period of time, dynamic languages are superior to compiled language
	- resource intensive application, games, high quality multimedia app, there is no competition to cpp
>list box, max elements number is 2k
	- wx.ListBox(parent, id, pos, size, list, style, validator, name)
	- append(), delete() methods
>html window
	- wx.html.HtmlWindow
	- some functions
	setBackgroundColour(wx.RED)
	setStandardFonts()
	setPage(page) #page is a html string
	- create help window
	wx.SplitterWindow, wx.html.HtmlWindow
>list control, support multiple columns
	- wx.ListCtrl
	- mixins, are classes that further enhance the functionality of a wx.listCtrl
	wx.ColumnSorterMixin, wx.ListCtrlAutoWidthMixin, wx.ListCtrlSelectionManagerMixin, wx.TextEditMixin, wx.CheckListMixin
	- use mixin
	from wx.lib.mixins.listctrl import ListCtrlAutoWidthMixin
	derive a class from listCtrl and init the mix in
	class custom_listctrl(wx.ListCtrl, wx.ListCtrlAutoWidthMixin):
		def __init__(self, ...):
			wx.ListCtrl.__init__(self, ...)
			wx.ListCtrlAutoWidthMixin.__init__(self)

:Drag and drop in wxPython
>python have two predefine data targets, could derive from these two classes
wx.TextDropTarget, wx.FileDropTarget
	- custom text drop target
	class custom_text_drop(wx.TextDropTarget):
		def __init__(self, object):
			wx.TextDropTarget.__init__(self)
			self.object = object  #the aim drop object
			
		def OnDropText(self, x, y, data):
			self.object.InsertStringItem(0, data)
	- custom file drop target
	class custom_file_drop(wx.FileDropTarget):
		def __init__(self, window):
			wx.FileDropTarget.__init__(self)
			self.window = window
			
		def OnDropFiles(self, x, y, filenames):
			for name in filenames:
				do_somet_thing
				
:Internationlization
>Unicode, there are two build of wx.Python, ansi and unicode version
>define python unicode string
u'\u####\u####...'
	- unicode takes 16 bit and ansi use 8 bit
>#!/user/bin/python, use in unix system
>local, is an object defines user's language, country, number format, letter format, currency format
[language[_territory][.codeset][@modifier]]		
	- ex.
	import local
	local.setlocal(local.LC_ALL, '')
	local.setlocal(local.LC_ALL, ('de_DE', 'UTF8'))
	#it will influence the time formate and the currence
	tm = time.localtime()
	str_tm_date = time.strftime('%x', tm)
	str_tm = time.strftime('%X', tm)
	cur = local.currency(10000)
>world time, wx.DateTime object is used to deal vs different time zone
	wx.DateTime.GMT_9, tokyo time
	wx.DateTime.MSD, mosco
	wx.DateTime.CEST, budapest
	wx.DateTime.EDT, new york
>font, wx.Font()
>sorting, local also affect the string sorting way
	str_collection.sort()
    words.sort( lambda a,b: locale.strcoll(a, b) )
>Simple Translation example, programmer has two options, either to use the GNU gettext or use the wxPython catalogs
    + code example
    #!/usr/bin/python
    import wx
    class Translation(wx.Frame):
        def __init__(self, parent, id, title):
            wx.Frame.__init__(self, parent, id, title, size=(220, 100))
            panel = wx.Panel(self, -1)
            mylocale = wx.Locale()
            mylocale.AddCatalogLookupPathPrefix('.')
            mylocale.AddCatalog('simple_de')
            _ = wx.GetTranslation
            wx.StaticText(panel, -1, _("hello"), (10, 10))
            #wx.StaticText(panel, -1, wx.GetTranslation('hello'), (10, 10))
            self.Centre()
            self.Show(True)
    app = wx.App()
    Translation(None, -1, 'Translation')
    app.MainLoop()
    + next create a PO file for the translator
    pygettext -o simple_de.po simple.py
    check the gnu gettext manual for detail of pygettext method
    + add content for the simple_de.po file
    #: simple.py:17
    msgid "hello"
    msgstr "Grüß Gott"
    + next, create a binary message catalog
    msgfmt --output-file simple_de.mo simple_de.po
    
: Databases
- relational database model, RDBMS
    + commercial 
    oracle, sybase, ms sql, access
    + opensource
    mysql, postgreSql, firebird, sqlite

: Creating custom widget
- create a widget from ground up, put a wx.Panel on the bottom of the window and draw the entire widget manually
#!/usr/bin/python
# burning.py
import wx
class Widget(wx.Panel):
    def __init__(self, parent, id):
        wx.Panel.__init__(self, parent, id, size=(-1, 30), style=wx.SUNKEN_BORDER)
        self.parent = parent
        self.font = wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
        wx.FONTWEIGHT_NORMAL, False, 'Courier 10 Pitch')
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        
    def OnPaint(self, event):
        num = range(75, 700, 75)
        dc = wx.PaintDC(self)
        dc.SetFont(self.font)
        w, h = self.GetSize()
        self.cw = self.parent.GetParent().cw
        step = int(round(w / 10.0))
        j = 0
        till = (w / 750.0) * self.cw
        full = (w / 750.0) * 700
        if self.cw >= 700:
            dc.SetPen(wx.Pen('#FFFFB8'))
            dc.SetBrush(wx.Brush('#FFFFB8'))
            dc.DrawRectangle(0, 0, full, 30)
            dc.SetPen(wx.Pen('#ffafaf'))
            dc.SetBrush(wx.Brush('#ffafaf'))
            dc.DrawRectangle(full, 0, till-full, 30)
        else:
            dc.SetPen(wx.Pen('#FFFFB8'))
            dc.SetBrush(wx.Brush('#FFFFB8'))
            dc.DrawRectangle(0, 0, till, 30)
            dc.SetPen(wx.Pen('#5C5142'))
        for i in range(step, 10*step, step):
            dc.DrawLine(i, 0, i, 6)
            width, height = dc.GetTextExtent(str(num[j]))
            dc.DrawText(str(num[j]), i-width/2, 8)
            j = j + 1
        
    def OnSize(self, event):
        self.Refresh()
- GDI, graphics device interface
wxBufferedDC, wxBufferedPaintDC, wxPostScriptDC, wxMemeoryDC, wxPrinterDC, wxScreenDC, wxClientDC, wxPaintDC, wxWindowDC
    + wx.ScreenDC is used to draw anywhere on the screen
    + wx.WindowDC is used to pain on the whole window(window only)
    + wx.ClientDC is used to draw on the client area of a window
    + wx.PaintDC is used to draw on the client too but need to combine with wx.PaintEvent bu wx.ClientDC doesn't need to
    + wx.MemoryDC is used to draw graphics on the bitmap
    + wx.PostScriptDC is used to write a postscript files on any platform
    + wx.PrinterDC is used to access printer
- wx.FutrueCall, used to call a method with a delay timer
- create a custom line class with wx.ClientDC
class Line(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(250, 150))
        wx.FutureCall(2000, self.DrawLine)
        self.Centre()
        self.Show(True)
    def DrawLine(self):
        dc = wx.ClientDC(self)
        dc.DrawLine(50, 60, 190, 60)
the futurecall method is used to make sure the line is drawed after the window is created
- create a custom line with wx.PaintDC
class Line(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(250, 150))
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Centre()
        self.Show(True)
    def OnPaint(self, event):
        dc = wx.PaintDC(self)
        dc.DrawLine(50, 60, 190, 60)
- wx.Pen is an elementary graphics object
    + creator
    wx.Pen(wx.Colour colour, width=1, style=wx.SOLID)
    + styles
    wx.SOLID, wx.DOT, wx.LONG_DASH, wx.SHORT_DASH, wx.DOT_DASH, wx.TRANSPARENT
    + usage
    call the setpen method of dc
    draw some elements by the dc
    + example
    dc.SetPen(wx.Pen('#4c4c4c', 1, wx.SOLID))
    dc.DrawRectangle(123,342,1234)
    + joins and caps, additional two parameters
        * draw the lines, define how lines will be drawn when they joins
        wx.JOIN_MITER, wx.JOIN_BEVEL, wx.JOIN_ROUND
        * caps define how the end of line will be drawn
        wx.CAP_ROUND, wx.CAP_PROJECTING, wx.CAP_BUTT
- gradients, is used to simulate lights and shadows
    GradientFillLinear(wx.Rect rect, wx.Colour initialColour, wx.Colour de)
    dc.GradientFillLinear((20, 20, 180, 40), '#ffec00', '#000000')
- wx.Brush is used to paint the background of graphics shapes such as rectangle, ellipses or polygons
    + styles
    wx.SOLID, wx.STIPPLE, wx.BDIAGONAL_HATCH, wx.CROSSDIAG_HATCH, wx.CROSS_HATCH, wx.HORIZONTAL_HATCH, wx.VERTICAL_HATCH, wx.TRANSPARENT
    + create brush from bitmap
    wx.Brush BrushFromBitmap(wx.Bitmap stppleBitmap)
- basic primitives
    + Point, a dot on the window
    dc.DrawPoint
    + Cross Hair, a vertical and horizontal line of the window it is center on the given points
    dc.DrawCrossHair
    + Check mark
    dc.DrawCheckMark
    + Shapes, Ellipse, RoundedRectangle, Arc, Polygon, Rectangle, Spline, Lines, Circles
    + Regions, device context can be divided into several parts called regions, a region can be of any shape, with Intersect, Substract and Xor operations can be creat complex regions, regions are used for outlining, filling or clipping
        * create a rectangular region
        wx.Region(int x=0, int y=0, int width=0, int height=0)
        * create with a list of points
        wx.RegionFromPoints(list points, int fillStyle=wx.WINDING_RULE)
        * create a polygonal regions, the fill style can be wx.WINDOING_RULE, WXOODEVEN_RULE
        wx.RegionFromBitmap(wx.Bitmap bmp)
    + Regions example
        * dc.SetDeviceOrigin method creates a new beginning of the coordinate system
    + Clipping, is restricting drawing to a certain area, the clipping region must be destroy after used
        * improve performance
        * restrict drawing to a certain region
        * example
        def OnPaint(self, event):
            dc = wx.PaintDC(self)
            dc.SetPen(wx.Pen('#424242'))
            size_x, size_y = self.GetClientSizeTuple()
            dc.SetDeviceOrigin(size_x/2, size_y/2)
            points = (((0, 85), (75, 75), (100, 10), (125, 75), (200, 85),
            (150, 125), (160, 190), (100, 150), (40, 190), (50, 125)))
            region = wx.RegionFromPoints(points)
            dc.SetClippingRegionAsRegion(region)
            radius = hypot(size_x/2, size_y/2) # get the hypotenuse of a triangles
            angle = 0
            while (angle < 2*pi):
                x = radius*cos(angle)
                y = radius*sin(angle)
                dc.DrawLinePoint((0, 0), (x, y))
                angle = angle + 2*pi/360
            dc.DestroyClippingRegion()
    + Operations over regions, use four set operations, Union, Intersect, Substract and Xor
    region1 = wx.Region(100, 20, 50, 50)
    region2 = wx.Region(110, 40, 50, 50)
    region1.IntersectRegion(region2)
    rect = region1.GetBox()
    dc.SetClippingRegionAsRegion(region1)
    dc.SetBrush(wx.Brush('#ff0000'))
    dc.DrawRectangleRect(rect)
    dc.DestroyClippingRegion()
    + logic and device units, we draw text or ggeometrical primitives on the client area, we position them using logical units
        * the mapping modle of the device is a way how to convert logical units to device units
        wx.MM_TEXT, 1 pixel
        wx.MM_METRIC 1 millimeter
        wx.MM_LOMETRIC 1/10 of a millimeter
        wx.MM_POINTS 1 point, 1/72 of an inch
        wx.MM_TWIPS 1/20 of a point or 1/1440 of an inch
        * setting the mapping mode
        SetMapMode(int mode)
        GeetTextExtent() method returns the width and the height of the text
    + charts
    dc.SetAxisOrientation(bool xLeftRight, bool yBottomUp)
    + custom window shape and use the bitmap region
    class Note(wx.Frame):
        def __init__(self, parent, id, title):
            wx.Frame.__init__(self, parent, id, title,
            style=wx.FRAME_SHAPED |
            wx.SIMPLE_BORDER |
            wx.FRAME_NO_TASKBAR)
            self.font = wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
            wx.FONTWEIGHT_BOLD, False, 'Comic Sans MS')
            self.bitmap = wx.Bitmap('note.png', wx.BITMAP_TYPE_PNG)
            self.cross = wx.Bitmap('cross.png', wx.BITMAP_TYPE_PNG)
            w = self.bitmap.GetWidth()
            h = self.bitmap.GetHeight()
            self.SetClientSize((w, h))
            if wx.Platform == '__WXGTK__':
                self.Bind(wx.EVT_WINDOW_CREATE, self.SetNoteShape)
            else: self.SetNoteShape()
            
            self.Bind(wx.EVT_PAINT, self.OnPaint)
            self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
            self.Bind(wx.EVT_MOTION, self.OnMouseMove)
            self.bitmapRegion = wx.RegionFromBitmap(self.bitmap)
            self.crossRegion = wx.RegionFromBitmap(self.cross)
            self.bitmapRegion.IntersectRegion(self.crossRegion)
            self.bitmapRegion.Offset(170, 10)
            dc = wx.ClientDC(self)
            dc.DrawBitmap(self.bitmap, 0, 0, True)
            self.PositionTopRight()
            self.Show(True)
        def PositionTopRight(self):
            disx, disy = wx.GetDisplaySize()
            x, y = self.GetSize()
            self.Move((disx-x, 0))
        def SetNoteShape(self, *event):
            region = wx.RegionFromBitmap(self.bitmap)
            self.SetShape(region)
        def OnLeftDown(self, event):
            pos = event.GetPosition()
            if self.bitmapRegion.ContainsPoint(pos):
            self.Close()
            x, y = self.ClientToScreen(event.GetPosition())
            ox, oy = self.GetPosition()
            dx = x - ox
            dy = y - oy
            self.delta = ((dx, dy))
        def OnMouseMove(self, event):
            if event.Dragging() and event.LeftIsDown():
                x, y = self.ClientToScreen(event.GetPosition())
                fp = (x - self.delta[0], y - self.delta[1])
                self.Move(fp)
        def OnPaint(self, event):
            dc = wx.PaintDC(self)
            dc.SetFont(self.font)
            dc.SetTextForeground('WHITE')
            dc.DrawBitmap(self.bitmap, 0, 0, True)
            dc.DrawBitmap(self.cross, 170, 10, True)
            dc.DrawText('- Go shopping', 20, 20)
            dc.DrawText('- Make a phone call', 20, 50)
            dc.DrawText('- Write an email', 20, 80)
            
# Tips and tricks
- interactive button
wx.EVT_ENTER_WINDOW, wx.EVT_LEAVE_WINDOW
- Isabelle, when encounter error change the background of status bar to red and display the error message instead of pop up a error message. Use a wx.Timer to refresh the background to blink the status bar
self.statusbar = self.CreateStatusBar()
self.statusbar.SetBackgroundColor('RED')
self.statusbar.Refresh()
- wx.Config class is a helper class to config wx application
self.cfg = wx.Config('myconfig')
if self.cfg.Exists('width'):
w, h = self.cfg.ReadInt('width'), self.cfg.ReadInt('height')
else:
(w, h) = (250, 250)
wx.Frame.__init__(self, parent, id, title, size=(w, h))
self.cfg.WriteInt("width", self.sc1.GetValue())
self.cfg.WriteInt("height", self.sc2.GetValue())
self.statusbar.SetStatusText('Configuration saved, %s ' % wx.
- mouse gesture, wx.lib.gestures 
    + all avaliable gestures
    L, left
    R, right
    U, up
    D, down
    7, northwest
    9, northeast
    1, southwest
    3, southeast
    + mouse gesture trigger example 'RDLU', mouse square flags are
    wx.MOUSE_BTN_LEFT, wx.MOUSE_BTN_MIDDLE, wx.MOUSE_BTN_RIGHT
    + example
    import wx.lib.gestures as gest
    mg = gest.MouseGestures(panel, True, wx.MOUSE_BTN_LEFT)
    mg.SetGesturePen(wx.Colour(255, 0, 0), 2)
    mg.SetGesturesVisible(True)
    mg.AddGesture('DR', self.OnDownRight)
    
    
    
    
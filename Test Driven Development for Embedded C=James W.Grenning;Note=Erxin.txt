Test Driven Development for Embedded C=James W.Grenning;Note=Erxin

# Preface
- Jack Ganssle, is a well-known embedded guru, TDD is a one way and effective way
- TDD benefits
fewer bugs
less debug time
fewer side effect defects
documentation that does not lie 
peace of mind 
improve design 
progress monitor 
fun and rewarding 

reduce risk by verifying production code 
reduce the number of long target compile link and upload cycles 
reduce debug time 
isolate hardware/software interaction issues 
improve software design through the decoupling 


# Test-driving tools and conventions 
- what is a unit test harness 
a common language to express test cases 
a common language to express expected results 
access to the features of the production code programming 
a place to collection all the unit test cases 
a mechanism to run the test cases 
a concise report of the test suit 
a detailed report of any test failures 

- test sprintf() test cases in unity 
TEST(sprintf, NoFormatOperations)
{
    char output[5];
    TEST_ASSERT_EQUAL(3, sprintf(output, "hey"));
    TEST_ASSERT_EQUAL_STRING("hey", output);
}
The TEST_ASSERT_EQUAL( ) macro compares two integers
TEST_ASSERT_EQUAL_STRING( ) compares two null-terminated stringsc

- test fixture in unity 

TEST_GROUP(sprintf);

static char output[100];
static const char * expected;

TEST_SETUP(sprintf)
{
    memset(output, 0xaa, sizeof output);
    expected = "";
}

TEST_TEAR_DOWN(sprintf)
{
}

static void expect(const char * s)
{
    expected = s;
}

static void given(int charsWritten)
{
    TEST_ASSERT_EQUAL(strlen(expected), charsWritten);
    TEST_ASSERT_EQUAL_STRING(expected, output);
    TEST_ASSERT_BYTES_EQUAL(0xaa, output[strlen(expected) + 1]);
}

the shared data items defined after the TEST_GROUP() are initialized by TEST_SETUP()
the file scope helper function expect and given help keep the sprintf test clean and low on duplication 

TEST(sprintf, NoFormatOperations)
{
    expect("hey");
    given(sprintf(output, "hey"));
}

TEST(sprintf, Inserting)
{
    expect("hey");
    given(sprintf(output, "hello %s\n", "World");
}

- install unity test
TEST_GROUP_RUNNER(), go in the file with tests or a separate file 

#include "unity_fixture.h"

TEST_GROUP_RUNNER(sprintf)
{
    RUN_TEST_CASE(sprintf, NoFormatOperations);
    RUN_TEST_CASE(sprintf, InsertString);
}

essentially the RUN_GROUP_RUNNER() calls the function bodies associated with each of these macros 
TEST_SETUP(sprintf);
TEST(sprintf, NoFormatOperations);
TEST_TEAR_DOWN(sprintf);

TEST_SETUP(sprintf);
TEST(sprintf, InsertString);
TEST_TEAR_DOWN(sprintf);

test code, unity test main() looks like this 
static void RunAllTests(void)
{
    RUN_TEST_GROUP(sprintf);
}

int main(int argc, char* argv[])
{
    return UnityMain(argc, argv, RunAllTests);
}


 






























Secure Coding in C and C++, Second Edition=Robert C;Note=Erxin

# Preface
- CERT was formed by the Defense Advanced Research Projects Agency (DARPA) in November 1988 

http://www.cert.org/stats/cert_stats.html

https://www.sei.cmu.edu/
The Software Engineering Institute (SEI) at Carnegie Mellon University is a Federally Funded Research and Development Center (FFRDC)—a nonprofit, public–private partnership that conducts research for the United States government

http://www.mitre.org

Open Learning Initiative (OLI) at https://oli.cmu.edu/


# Running and Scissors 
- to live without evil belongs only to the gods 
- The Last Stage of Delirium (LSD) Research Group discovered a buffer overflow vulnerability in RPC
- Blaster is an aggressive worm that propagates via TCP/IP, exploiting a vulnerability in the DCOM RPC interface of Windows. When Blaster executes, it checks to see if the computer is already infected and if the worm is running.

- vulnerability allows an attacker to run arbitrary code with local system 

    1. Remote procedure call (RPC) is an interprocess communication mechanism that allows a program running on one computer to execute code on a remote system. 
    
    2. www.microsoft.com/technet/security/bulletin/MS03-026.mspx.
    
    3. http://www.kb.cert.org/vuls/id/568148
    
    4. http://www.cert.org/advisories/CA-2003-16.html.
    Blaster is an aggressive worm that propagates via TCP/IP, exploiting a vulnerability in the DCOM RPC interface of Windows. 
    
    Flawed logic exploited by the W32.Blaster.Worm
    
    5.  SYN flooding is a method that the user of a hostile client program can use to conduct a DoS attack on a computer server. The hostile client repeatedly sends SYN (synchronization) packets to every port on the server, using fake IP addresses.
    
- gauging the threat 
- security data 

report vulnerability data.10. See www.kb.cert.org/vuls.

- terms 

A mitigation is a solution for a software flaw or a workaround that can be applied to prevent exploitation of a vulnerability.

Vulnerabilities in software are subject to exploitation. Exploits can take many forms, including worms, viruses, and trojans.

vulnerable to attack when the program’s input data

A security policy is a set of rules and practices that are normally applied by system and network administrators 

- The C programming language is intended to be a lightweight language with a small footprint. This characteristic of C leads to vulnerabilities when programmers fail to implement required logic because they assume it is handled by C 
 
- spirit of C 
trust the programmer 
don't prevent the programmer from doing what needs to be done 
keep the language small and simple 
provide only one way to do an operation 
make it fast event it is not guaranteed to be portable 

    + local 
 
- Java’s ability to operate with applications and libraries written in other languages using the Java Native Interface (JNI) allows systems to be composed using both Java and C or C++ components
 
- gcc, http://gcc.gnu.org/c99status.html 
 
 
# Strings
- character strings 

 on an architecture (such as x86-32) where sizeof(int) == 4 and sizeof(int *) == 4, the expression sizeof(array) / sizeof(array[0]) evaluates to 1

- UTF-8 decoders are sometimes a security hole. In some circumstances, an attacker can exploit an incautious UTF-8 decoder by sending it an octet sequence that is not permitted by the UTF-8 syntax.

- wide strings, A wide string is a contiguous sequence of wide characters terminated by and including the first null wide character.

- string literals, A wide string literal is the same, except prefixed by the letter L, as in L"xyz".

"a" "b" L"c"
"a" L"b" "c"
L"a" "b" L"c"
L"a" L"b" L"c"

//is equivalent to 
L"abc"

mbstowcs() (multibyte string to wide-character string) function with an implementation-defined current locale. The value of a string literal containing a character or escape sequence not represented in the execution character set is implementation defined.

- strings in c++

string is a typedef for the template specialization basic_string<char>.

wstring is a typedef for the template specialization basic_string<wchar_t>.

basic_string literals. A string literal such as "abc" is a static null-terminated byte string.

    + compiling at high warning levels 
    
    
- int, The int type is used for data that could be either EOF (a negative value) or character data interpreted as unsigned char to prevent sign extension and then converted to int.

Consequently, fgetc(), getc(), getchar(), fgetwc(), getwc(), and getwchar() return int.

- unsigned char, The unsigned char type is useful when the object being manipulated might be of any type, and it is necessary to access all bits of that object

- wchar_t,  Wide characters are used for natural-language character data.

size 

count 

length 

    + incorrectly used to determine the size of a wide-character string 
    
1  wchar_t wide_str1[] = L"0123456789";
2  wchar_t *wide_str2 = (wchar_t *)malloc(strlen(wide_str1) + 1);
3  if (wide_str2 == NULL) {
4    /* handle error */
5  }
6  /* ... */
7  free(wide_str2);
8  wide_str2 = NULL;

        * corrected
        
01  wchar_t wide_str1[] = L"0123456789";
02  wchar_t *wide_str2 = (wchar_t *)malloc(
03    (wcslen(wide_str1) + 1) * sizeof(wchar_t)
04  );
05  if (wide_str2 == NULL) {
06    /* handle error */
07  }
08  /* ... */
09  free(wide_str2);
10  wide_str2 = NULL;

- common string manipulation errors 
    + improperly bounded string copies 

01  #include <stdio.h>
02  #include <stdlib.h>
03
04  void get_y_or_n(void) {
05    char response[8];
06    puts("Continue? [y] n: ");
07    gets(response);
08    if (response[0] == 'n')
09      exit(0);
10    return;
11  }

        * gets has been deprecateed and removed from c11. gets provide no way to specify a limit on the number of characters to reds 
        
01  char *gets(char *dest) {
02    int c = getchar();
03    char *p = dest;
04    while (c != EOF && c != '\n') {
05      *p++ = c;
06      c = getchar();
07    }
08    *p = '\0';
09    return dest;
10  }

    + copying and concatenating strings 
    
1  int main(int argc, char *argv[]) {
2      /* ...*/
3  }

1  int main(int argc, char *argv[]) {
2    /* ... */
3    char prog_name[128];
4    strcpy(prog_name, argv[0]);
5    /* ... */
6  }

The POSIX strdup() function can also be used to copy the string.

- off-by-one errors 

01  #include <string.h>
02  #include <stdio.h>
03  #include <stdlib.h>
04
05  int main(void) {
06    char s1[] = "012345678";
07    char s2[] = "0123456789";
08    char *dest;
09    int i;
10
11    strcpy_s(s1, sizeof(s2), s2);
12    dest = (char *)malloc(strlen(s1));
13    for (i=1; i <= 11; i++) {
14      dest[i] = s1[i];
15    }
16    dest[i] = '\0';
17    printf("dest = %s", dest);
18    /* ... */;
19  }









 
 
    
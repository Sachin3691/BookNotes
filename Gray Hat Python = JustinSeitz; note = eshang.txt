Gray Hat Python = JustinSeitz; note = eshang

ctypes, 模块允许调用动态链接库，对python进行C扩展

动态链接库
windows  下为dll, dynamic link libraries
linux 下位so, shared objects

ctypes, 模块下载入动态库的三种方法
cdll(), 载入使用standard cdecl 调用约定
windll(), 使用stdcal, 是window 的调用方式
oledll, 同windll(),但具有返回错误代码 hresult, 用于接收COM返回值
；
函数的调用方式的区别
cdecl 调用约定，函数参数的压栈顺序为从右至左
C 语法定义
int functionName( p0, p1, p2 );
对应X86汇编
push p2
push p1
push p0
call functionName
add esp, 12  //由于有三个参数，每个参数的地址指针占用4字节，所以偏移量为12
；
stdcall 调用约定
push p2
push p1
push p0
call functionName
这种情况下， stdcall的函数负责清空参数内存
所有函数的返回值存放在EAX中
；
ctypes 调用windows lib

import ctypes
msvcrt = cdll.msvcrt
msvcrt.printf("out put"); //C printf function
;
ctypes 调用linux lib

import ctypes
libc = cdll("libc.so.6")
libc.printf("...")

ctypes的类型对应C类型
C							python							ctypes
char 						1-character string				c_char
wchar_t						1-character Unicode string 		c_wchar
char 						int/long 						c_byte
char 						int/long 						c_ubyte
short 						int/long 						c_short
unsigned short 				int/long 						c_ushort
int 						int/long 						C_int
unsigned int 				int/long 						c_uint
long 						int/long 						c_long
unsigned long 				int/long 						c_ulong
long long 					int/long 						c_longlong
unsigned long long 			int/long 						c_ulonglong
float 						float 							c_float
double 						float 							c_double
char * (NULL terminated) 	string or none 					c_char_p
wchar_t * (NULL terminated) unicode or none 				c_wchar_p
void * 						int/long or none 				c_void_p
;
每一个ctypes下得类型都是一个类，使用是调用构造函数












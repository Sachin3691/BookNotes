How google test software=James Whittaker;Note=Erxin

# 关于本书
- 好的测试开发工程师,自动化测试可以独立运行不需要干预

# 序言
- 软件发展之快, 让测试知识与书籍过时的非常快,2-3年之前前沿的测试技术就可能过时
- google有200名开发的时候, 只有去去3名测试,开发自己开始写测试.处于创业阶段必须勇于冒险快速前进
- 当公司变大后必须保证产品质量的时候,增加必要的测试人员,推行单元测试,鼓励开发把测试作为优先级高的事情去做

在公司每周五的啤酒狂欢时颁发奖品来刺激开发完成单元测试

- 但是仅仅做单元测试时不够的,会使得测试代码冗长和开发代码一样难于维护, 这时需要加入集成化测试,系统测试,安装测试,性能测试,界面测试

- 完备的测试不会使得一个坏点子变为好产品, 但是测试不当会把一个本来有机会成功的产品扼杀或者拖慢这个产品迭代的速度

- 在出书的时候引入杰出贡献者的访谈, 避免独揽所有荣誉
- 一个团队能够编写出高质量软件的唯一途径是全体成员共同对质量负责
- 招聘具备开发能力的测试人员很难, 找到懂测试的开发人员更难
- 打造一个生产线式的可重复的技术工厂的开发和测试实践
- 当尝试新思想与技术时,如果违背了当然人们的习惯就会收到一致反对. 但主管说了一句话, "这里是google, 如果你有想法, 尽管去做就是"
- 测试开发, 必须会编程, 能实现工具, 平台和测试自动化
- 测试人员面对的测试问题无法独立解决,把测试和开发割裂开来看成两个独立环节时错误的
- 测试团队更名为"Engineer Productivity" 更多的谈论的是生产力, 开发人员负责测试, 开发人员负责质量, 生产力团队负责帮助开发搞定这两项任务

- 测试总监, 软件快速开发和部署的架构师


# Google软件测试介绍
- 工程生产力部门横跨开发测试人员,为他么提供工具的开发,产品发布和各种级别的测试,从单元到探索性级别的测试

谷歌测试团队归属于一个工程生产力的中心组织部门

    + reference blog 
    http://googletesting.blogspot.com/2011/01/how-google-tests-software.html
    
    + 不要招太多的测试人员
    + 每个写代码的开发者本身就是测试者
    + 与功能相比,产品的质量和稳定性更重要, 追求100%的测试覆盖率
    + 质量不等于测试, 当把开发和测试放到一起, 就像搅拌机里混合搅拌那样, 直到不能区分彼此的时候你就得到了质量
    + 没有人比实际写代码的人更适合找bug
    
    
- 质量不等于测试
- 角色
    + 解铃还须系铃人, you build it, you break it, you fix it 
    + 软件开发工程师 SWE, software engineer, 是开发,工作是实现最总用户所使用的功能代码,他们创建文档,选择最优的数据结构和整体框架,包括测试驱动的设计,单元测试,参与构建各种大小规模的测试等
    + 软件测试开发工程师 SET, software engineer in test, 也是一个开发角色,重心在于可测试行和基础框架上, SET是SWE的合作伙伴, SWE侧重于功能与性能, SET侧重于质量与功能覆盖
    + 测试工程师TE,test engineer, 是一个和SET关系密切的角色,把用户放在第一位来思考,代表用户的利益.TE会模拟用户使用场景与自动化脚本的实现. 对SWE与SET编写的测试进行分类,驱动测试执行,在项目的最后阶段推进产品发布,TE是真正的产品专家,质量顾问和风险分析师,有手动有自动TE 
    
    + SET负责提供测试支持,利用测试框架(stubs,mock,fake etc.)是的SWE能自己测试他们的功能.多数测试代码由SWE完成. SET保证功能模块的可测试性
    
    SET让开发人员容易编写测试代码, TE扮演双重角色,确认开发是否测试工作做的好,当单元测试基本没有问题的时候要转变思路, 从用户的角度思考问题全方位的对产品开展测试
    功能
    性能
    安全
    国际化
    体验beta
    与用户交流等
    
- 组织结构
    + 测试是独立存在的部门,横跨个个产品专注领域,测试以租借的方式进入产品团队,去做提高质量的工作,如寻找测试不足与缺陷率数据

    + TE的借调模式可以让SET和TE保持新鲜感并且总是很忙碌,另外可以保证一个好的测试想法可以快速在公司蔓延
    
    例如,谷歌规定如果一个测试人员在一个项目上工作18个月之后可以无理由自愿地转岗到其他产品
    
- 爬,走,跑
    + 谷歌常在最初的版本里只包含基本的功能,然后在后续的快速迭代中得到内部外部的反馈,并且在每次迭代中都非常重视质量.一个产品要经历
    金丝雀版本(每日),开发版(每周),测试版(每月),beta或者正式发布(由稳定的测试版本演变而来)
    
- 测试类型
    + 谷歌使用,小型测试,中型测试,大型测试这样的称谓而非代码测试,集成测试,系统测试等
    
    + 小型测试一般为代码测试,由SWE实现,少量SET,TE不参与,使用mock,fake
    + 中型使用自动化实现,重点在于测试功能临界区之间的交互,独立模块开发完后SET会驱动测试的实现与运行,SWE会深度参与,一起编码调式与维护.测试失败时SWE自觉查看分析原因. 如果自动化难度大或者项目刚起步TE会手动运行部分测试
    + 大型测试, 涵盖三个或三个以上功能模块,使用真实用户使用场景和实际用户数据,一般小号数小时或者更长时间运行.关注
    模块集成,倾向于结果驱动
    自动化测试及探索测试
    去解决产品运行方式是否与用户期望相同
    + 能够自动化的就应该自动化
    + 手动测试需要把每一步记录下来, 一时利于再次测试, 另外便于将来转化为自动化测试
    + 自动化测试会给最后一个提交者发邮件并开一个bug记录对应的问题,将自动化做到力争克服人类智慧的最后一寸


# 软件测试开发工程师
- 理想情况下的完美开发过程
- 测试先行, 设计一些边界场景测试用例, 数据取值范围从极大到极小,与功能代码存放在一起,最有资格的编写的就是写功能代码的人

这是一个通话般的开发过程, 一个工程师要即想着如何构建,另一边又要想着如何破坏

- 谷歌将这两种工作分开分配给不同的人, 功能开发人员在编写功能代码的时候测试开发编写测试代码,并增加了第三种角色,一个真正关心用户的人,用户开发人员,user developer, 在谷歌就是TE, TE会在整个测试工作的过程中指导SWE的测试开发,SWE也会重度参与测试


## SET的工作, The life of an SET, The life of * 是谷歌内部系列课程
- 开发和测试流程
    + 测试由整个工程团队负责,每个团队工作略有叠加
    + 公用的代码库,和谐的工程工具,公司范围内的资源共享
    + 工程师维护代码库遵循规则
    所有工程师必须复用已存在的库,除非由极特殊需求
    考虑公共代码的可读性,文档,容易找到
    必须尽可能被复用,相对独立
    所有依赖必须明确指出,不可被忽视
    如果由工程师重构了代码库,并且所有依赖项目成功迁移到新库上,则其他工程师可以送出"同僚奖金"作为感谢
    重视代码审核, 公共模块代码必须经过审核, 代码可读性审核, 委员会办法良好可读性证书
    共享代码库中的代码具有更高的测试要求
    
    + 工程师带电脑与产品环境相近, CPU与OS变化尽量小.如果一个bug再测试机上出现那么再开发机上也应该可以复现
    
    + 平台依赖代码强制要求使用公共底层库,每种编程语言使用统一的编译器,保持简单一致
    + build系统有同意的打包规范,包括便宜与打包过程
        * 针对某个服务再一个或多个源代码文件中编写一类或一系列功能函数,并保证所有代码可以编译通过
        * 打包系统与项目的编程语言无关
        * 把服务的构建目标设定为公共库
        * 通过调用这个库的方式编写一套单元测试用例, 外部重要依赖通过mock模拟实现, 测试关注的代码路径, 使用常用的参数测试对应的函数
        * 要求运行静态代码分析工具,确保遵守统一的代码风格及扫描常见问题
        * 提交代码申请代码审核,然后运行所有的单元测试
        
    测试驱动开发意味这先开发mock
    
    + 一个SWE负责对应一个service 库,这样方便并行开发, service接口会在早期定义并做虚假实现
    
    + SET 的参与, 系统搭建时需要指出那些需要小型测试,并开始早期的大规模集成测试,运行每个单独库的小型测试
    
    一段时间后小型测试会成为回归测试的一部分, SET是核心参与者, 再开发人员不知道那些地方需要单元测试的时候指出
    
    编写许多mock,fake工具
    
- SET究竟是谁
    + 工程师角色,编程
    + 使测试富有效率,手动+探索测试,记录流程以备后期自动化测试
    + SET招聘要求与SWE要求一样,而且增加了额外考核, 需要了解如何测试他们的代码
    + 理想情况, 开发人员可以写测试, 测试人员可以写代码
    
- 项目的早期阶段
    + 产品初期工程师只会投入20%时间,且没有任何官方资源投入
    + 产品初期没有测试资源
    + SET如果早期介入也不是做测试, 而是做开发
    + SWE从模块角度提供最优方案
    + SET从整个产品角度提供宏观视角
    + 项目的开始主要的精力是设计文档再逐步加入工程师
- 设计文档
    + 文档需要技术负责人的审核
    + 文档是项目的路标
    + 文档进入尾声则项目正式进入实施
    + SET在初期就加入了
        * 熟悉了解负责的系统设计
        * 早期提出建议反馈在文档和代码里
        * 作为第一个审阅所有设计文档的人
        * 对SET来说也是一个非常好的机会建立与SWE的沟通
    + 文档的审阅
    完整性
    正确性
    一致性
    设计 
    接口与协议
    测试
    
- 接口与协议
    + Google protocol buffer语言, 是开源的 
    http://code.google.com/apis/protocolbuffers 
    
    与编程无关
    
    + SET对protocol buffer代码比较系统全面的审查, SET是第一个实现所有接口和协议的人, 系统搭建之前, 集成测试依赖于这些实现
    
    SET对接口做了mock和fake
    
- 自动化计划
    + 自动化投入的越多, 维护成文也越大, 系统升级则整个自动化也就更加不稳定
    + SET 首先把容易出错的接口做隔离, 创建mock和fake
    + 构建轻量级自动化框架, 
- 可测试性
    + SWE 和SET紧密的工作在一起
    + SET 编写测试框架, SWE使用
    + SET 也做一些维护工作
    + SET 保证可测试性, 扮演一个质量顾问角色, 提供程序接口和代码风格方面的建议.保证单元测试
    + check list是更新列表, 会经过自动化代码风格,分析的审查
    + 提交队列主要功能是保持build的绿色并且所有的测试都是再干净的环境中进行的
    + 单元测试展板与持续集成, 避免单元测试全部通过但再大规模集成测试之前无法发现模块间的错误
    
    TAP, test automation program
    

- SET的工作流程,一个实例 
- 测试执行, 自动化不只是自动化测试的执行,包含
    + 编写测试框架
    + 执行
    + 分析
    + 存储
    + 报告
    + 编写好的自动化框架将交给谷歌的测试执行框架来运行
    
- 测试大小的定义
    + 单元测试负责独立的代码段
    + 小型测试, 验证一个代码单元的功能, 只涉及一个函数
    + 中型测试, 验证两个或者多个模块之间的交互, 谷歌之外被称为集成测试. 鼓励使用mock来解决对外部服务的依赖 
    
    + 大型测试, 谷歌之外称为系统测试. 可能会依赖外部资源, 数据库, 文件系统, 网路服务等
    
- 测试规模在共享测试平台中的使用
    + 使用Google测试执行平台运行的一些通用任务
        
    编译运行所有小型测试, 并快速知道结果
    只有native代码变动才编译
    测试覆盖率
    每次提交都运行小型测试
    团队希望每周得到代码覆盖率,以及变化
    运行框架会根据测试的标签自动选择运行与否
    支持并发测试
    超时时间
    
    
    + 不同测试的单个测试用例目标和限制
                小型测试    中型      大型      超大
    时间目标        10ms    1s      尽可能     尽可能
    强制时间        1分      5分      15分     1小时
    
    + 资源限制
    资源          小型      中型      大型    
    网络服务        模拟      本地      是 
    数据库         模拟      是       是 
    文件访问        模拟      是       是 
    用户界面        模拟      不鼓励     是 
    系统调用        否       不鼓励     是 
    多线程         不鼓励     是       是 
    睡眠状态        否       是       是 
    系统属性        否       是       是 
    
- 测试规模的益处 
    + 大型 
    最根本最重要的, 考虑外部系统存在的时候是如何工作的 
    对外部系统的依赖是的工程本身受影响, 引来不确定性
    难于寻找失败原因
    准备工作耗时 
    大型测试是高层次的操作, 需要走到特定代码区域是不切实际的
    
    + 中型测试 
    不需要mock, 不受运行时限制, 是到大型的过度
    可以频繁运行 
    可以再标准开发环境中, 便于开发直接运行
    依赖外部系统, 引来不确定性
    没有小型测试快
    
    + 小型 
    代码清晰干净 
    代码变更可以立即运行
    所有环境均可可靠运行
    容易调试
    fake与mock有时候并不容易完成
    没有外部耦合, 几乎没有不确定性
    
    + 小型测试带来优秀的代码质量, 良好的异常处理, 优雅的错误报告, 大型测试带来整体产品质量和数据验证
    
    不同测试的代码覆盖率体现了产品功能验证的好坏
    
    经验法则: 70%是小型测试, 20%是中型测试, 10%是大型测试
    
- 测试运行要求
    + 每个测试和其他测试之间都是独立的, 能够以任意顺序执行
    + 测试不做任何持久化方面的工作, 每次重新运行状态都是一样的
    + 对持续集成做了优化, 利用依赖分析技术寻找所有可能受影响的模块, 针对一个代码变更只运行受影响的模块的测试
    
- 测试认证
    + 测试认证最初以竞赛的方式进行, 为项目的wiki提供不同的level的标签
    + 最初的认证是0, 到5
    
        * 0级别, 无测试
        * 1级别, 
        使用测试覆盖率工具
        使用持续集成
        测试分级为小, 中, 大型 
        明确标记非确定性测试(结果不确定的用例)
        创建冒烟测试集合 
        
        * 2级别
        如果有测试运行结果为红, 就不会做发布
        每次代码提交前都会通过冒烟测试
        各种测试的整体征粮覆盖率要求大于50% 
        小型测试的增量覆盖率大于10% 
        每个功能特性至少有一个与之对应的集成测试用例 
        
        * 3级别
        所有重要代码都经过测试
        小型测试增量覆盖率大于50% 
        新增功能都要经过集成测试验证
        
        * 4级别
        提交任何新代码都自动做冒烟测试
        冒烟测试必须再30分内完成
        没有不确定性测试
        总体测试覆盖率不小于40% 
        小型测试代码覆盖率不小于25% 
        所有总要功能都应该被集成测试验证
        
        * 5级 
        每个总要缺陷修复都要增加一个测试用例与之对应
        积极使用任何代码分析工具
        工体测试覆盖率不低于60% 
        小型测试的代码覆盖率不小于40% 
        
    + 团队之间相互学习, 让测试级别高的团队分享经验,让他们能够向测试级别低的团队做炫耀
    + 开发人员报名成为测试认证教练从而指导更多的人参加测试
    
- 与测试认证的创始人的访谈
    + 改变企业文化, 把测试工作变为每个功能开发人员的职责
    + 提高测试作为团队的绩效 objectives and key results
    + SWE开始会认为测试计划太难, 从容易达成的目标做起, 一步一步实现
    + ToTT, test on the toilet, http://googletesting.blogspot.com
    + 最难克服的问题, 惯性, 没有测试时间, 测试被当作其他开发人员的问题, 是测试团队的问题
    + 测试认证计划的三大障碍, 对测试感兴趣, 几乎没有冗余代码, 有一个测试战神即对测试足够了解的人
    
    + 首先是一批试点团队, 他们对测试特别友好, ToTT来宣传测试计划
    + 每当团队达到新的测试级别的时候我们都给予奖励, 每个团队展示他们的魔法球(表示构建状态的发光球), 一个漂亮的星球大战图豆头工具包 
    
    更多的人称为测试认证教练
    
    + 每个团队的测试情况可能不同, 不要一刀切
    
- SET的招聘
    + 编程能力很强的程序员
    + 很强的测试者 
    + 不仅可以看到局部, 而且可以看到整体
    + 看到原型或者API的时候可以想到各种代码来破坏这段代码
    + 面试重点, 候选人如何思索问题的解决方案, 而不是解决方案本身的实现上有多么高雅 
    + 优秀的SET再面对拙劣的API定义的情况下, 测试过程中也会把这个API定义变得漂亮一些
    输入类型
    函数命名 
    返回类型
    风险参数
    边界情况
    标准库是否已经涵盖
    扩展性
    复用性
    安全性
    考虑性能与优化
    
    + 测试方式
    特定输入
    用真实的数据做测试
    并发
    重复循环调用
    
    + 也许一个候选人不适合SET, 因为没有很好的编码能力, 但是并不认为他不适合作为一个TE 
    
- 与工具开发工程师Ted Mao的访谈
    + 测试框架隐藏的细节再调试bug的时候可能需要工程师了解这些内容. 这就需要建立一种平衡

- 与WebDriver的创作者Simon Stewart的对话


# 测试工程师
- TE的重点在于评估对用户的影响以及软件产品整体目标上的风险. 
- 一种面向用户的测试角色, user-developer 用户开发者 
- 为项目投入的TE数量代表产品的价值
    + 当前软件的弱点在哪
    + 安全可靠隐私性能全球化等问题
    + 能与其他产品互操作么
    + 发生问题如何诊断
    + 主要用户场景是否正常
    + TE找出产品敏感的地方
    + TE需要分享测试方法
    + TE职责
    风险与测试计划
    评审需求, 设计, 代码和测试
    探索式测试
    用户场景
    编写测试用例
    执行测试用例
    众包?crowdsourcing, 把过去由员工执行的工作任务, 以自由自愿的形式外包给非特定的
    统计
    用户反馈
- 测试工程师的工作
    + 测试计划
    代码是项目过程中产生的最重要的文档
    测试文档是所有测试产物中生命周期最短的
    测试用例是应该保留的
    及时更新
    描述软件的目标和卖点 
    描述软件的结构,组件和功能名称
    描述软件的功能和操作
    不必花过多时间撰写, 必须随时可以修改
    描述比必须要测试的关键节点
    关键描述测试进展与覆盖率
    
    ACC, attribute component capability, 特质, 组件, 能力的指导原则来定制测试计划
    避免散漫的文字
    不必推销
    简洁
    不要放不重要, 无法执行的条目
    指导计划者的思路
    最终结果应该是测试用例, 应可以清楚的指导测试用例的编写
    
    特质说明了产品的特色, 如果不能快速的列出自己一个产品的特质说明你还不够足够了解它 
    组件是构成系统的模块, 例如在线购物商店和购物车, 是构成系统的模块, 组件是架构图里的大框架, 经常出现在bug库里的标签里
    ACC过程要求快速行动, 动态迭代,漏掉的特质可以再罗列组件时被发现
    能力, 系统再用户指令之下完成的动作, 能力是系统再用户的指令之下完成的动作, 能力的重要特点是可测试性, 记检测再制定指令下系统是否完成了对应的任务
    
    + GTA中风险发生频率由4个预定义值, google test analytics
    罕见, rarely
    少见, seldom
    偶尔, occasionally
    常见, often, 特性使用量大, 复杂度高, 问题频发
    最小, 用户甚至不会注意到的问题
    一些, 可能会打扰用户, 但是重试或者恢复机制可以解决
    最大, 永久性故障
    项目经理, 喜欢使得软件能从竞争对手中脱颖而出
    销售人员, 吸引客户, 有卖点拉风的功能感兴趣
    总监和VP, 关注有别于竞争对手的特性
    
    
    + 风险
    风险分析, 是一个独立的领域, wiki risk management methodology, 是一个进一步学习的起点
    
        * 指南
        对于任何再GTA 矩阵中显示为高风险的能力和特质编写特定的user story, 用例并由针对性的测试指导
        认真了解之前已经完成的测试, 评估级别
        分析每个高危的特质能力相关的bug, 保证都有回归测试
        思索高风险区域, 咨询可能的回滚和恢复机制
        引入尽可能多的相关各方
    
    + 测试用例的生命周期
        * 电子表格和文本文档是保存测试用例的常用工具
        * google 实现了test scribe中测试用例, 具有严格的语法模板
        * 统计手工测试量
        * 统计bug比例
    
    + bug的生命周期
        * 为了跟踪bug, 谷歌实现了Buganizer
        bug优先级
        层次结构
        跟踪一组
        登陆验证
        全文搜索变更历史
        bug的缺省设置
        
        * 谷歌的bug字段,很少有必填的,根据team组织调整
        assigned to 
        cc 
        attachments 
        blocking 
        depends on 
        changed 
        changelists 
        component 
        created 
        found in, version number 
        last modifeid 
        notes 
        priority
        reported by 
        resolution severity, s0, s1, -> s5, s0 is the highest 
        status, new, assigned, accepted the dev have accepted, fix later, will not fix, fixed, verifier assigned, verified 
        summary 
        targeted to 
        type, bug, feature request, customer issue, internal cleanup, process 
        verified in 
        verifier 
        how to reproduce
        
    + TE的招聘
    关注用户
    技术人
    再系统级别和端到端的视角上理解产品
    
        * 面试风格
        SET 的要求面
        降低编程能力要求
        混合模型
        
        * 举例来说,一个输入框,测试文本中大写字母A的数量并显示, 列举需要的测试用例
        直接列举用例的往往是危险信号,说明他们还没有充分思考这个问题
        
        更好的问题是
        大小写?
        只支持英文?
        编码格式?
        计算完成后文本会清除么?
        多次按下会发生什么?
        
        接下来是如何组织测试计划,上述问题的典型列表如下
        banana, 3 
        A and a, 1 
        "", 0 
        Null, 0 
        AA aa, 2 
        b, 0 
        aba, 2 
        bab, 1 
        space/tabs etc 
        长字符串不包含A 
        长字符串包含A 
        {java/c/HTML/JavaScript}:N A 出现的个数
        
        更好的问题:
        质疑界面外观, 风格是否统一, 是否支持视力困难的人
        文本框太小
        一个应用可以再一个服务器运行多个实例 
        数据会被记录么
        建议使用真实数据用数据字典测试
        计算足够快么
        页面入口如何找到
        html和javascript是否会破坏页面渲染
        尝试复制和粘贴字符
        意识到URL-encode HTTP GET 传输, 意识到长字符串会被截断
        考虑其他语言中的A
        用脚本创建有趣的排列组合和字符串特征和长度, 自动生成测试用例
        
    + Google的测试领导和管理工作
    技术负责人, tech lead, 大型项目的大型团队里, 里面有大量的SET 和TE, 一般不管人, 为团队中其他人提供技术支持
    技术主管, tech lead manager, TLM, TL同时为经理时
    测试工程经理, test engineering manager
    测试总监, 跨越多个产品,负责整体的测试工作,推动战略性的有时时转型的技术架构或测试方法的实施,经常与业界同行交流分享,一般有40-70名下属
    资深技术总监,senior test director, 只有一个, 保证公司层面统一的职责描述,招聘,外部沟通和总的测试战略. 日常工作分享最佳实践, 建立和推动新的大动作, 如全局构建,测试基础平台,静态分析, 以及跨越不同产品用户和代码库的测试活动
    
    技术型, 测试经理, 测试主管的定位时技术型人才,不要比其他人更懂产品,更懂客户
    协商, 不可能什么都测
    外部沟通, 安排外包测试事宜,组织与外部同行的交流
    战略性举措,那些事情别人做不了我们能做?
    绩效考评,谷歌人需要定制比本身预期更高的目标,鼓励员工跨岗位流动
    
    + 维护模式的测试 Maintenance mode testing
        + shipping early and often, and failing fast 
        + 当一个项目人财不愁, 那它的测试总是不是最精简和优化的
        + 进入维护模式前
        解决所有困难问题
        即使一个小型的负责端测试的自动化测试集,也会以近乎为零的成本提供长期的保证
        留下一份how to文档, 减少接手维护的人以及自己的时间成本
        确保有一个问题解决通道, escalation path, 愿意承担一些责任
        时刻准备返回项目
    + 淘汰手工测试用例的方针 
        * 总是通过测试, 淘汰
        * 确保正确理解测试意图
        * 释放出来的时间用于自动化测试
        * 发生过误报或者行为反常的测试    
    
    + 质量机器人, Quality bot实验
        * 理想中的收索引擎正像一台自动化打分机
        * 爬取指定URL 
        * 索引
        * 排序
        * 可视化对比结果页面
    + BITE 实验, browser integrated test environment, 浏览器环境集成测试
    RPF, record replay framework 
    
    避免查看应用的DOM和在发生变化时重新计算元素的xpath的痛苦,RPF时先去检测html元素的所有属性及其父子关系,回访的时候首选精确匹配,找不到则找近视匹配,如果匹配在容差范围内则继续到下一步简单的介绍一条警告,更新脚本内容
    
    BITE项目已经开源
    
    + Google test analytics 
        * 电子表格格式不统一
        * 不同团队的透明性差
        * 分线分析成本高
        * GTA用于解决以上问题
    
    + 零成本测试流程
    成本几乎为零
    瞬间可以得到结果
    极少或者无需人工干预
    非常灵活
    
    + 外部供应商 

- Google Docs测试工程师Lindsay Webster访谈
    + 只有熟悉了团队的全貌才能有效开展工作
    + 消化文档
    + 检查应用代码库
    + 审评自动化测试
    + 测试本身就是一种项目, 对不同的开发工程可以使用相同的解决项目流程, 做多了自然熟练
    + 让人们去尝试, 让人们去犯错
    + 给并不不是十分足够的时间, 充分发挥人们的主观能动性
- YouTube测试工程师Apple Chow访谈


# 测试工程经理
- 测试经理的工作
    + TE, 测试工程师
    + SET, 测试开发工程师 
    + 测试工程经理, test engineerring manager TEM, 负责所有支持的团队用于联系起TE与SET, 需要具备TE, SET的技能外还要具有管理能力
    
    + 成为优秀的测试工程经理
        * 了解你的产品, 对自己负责的产品了如指掌
        * 知人善用
        * 测试经理有职责优化整个过程, 需相互交流互相分享经验
                
- 获得项目和人员
    + 18个月自由选择项目
    + 新员工的技能与项目所需技能的匹配程度
    + 个人意愿
    + 项目需要
    + 过往分配记录
- 影响力
    + 工程师的级别越高对他的影响力期望越高
    + google对工程师最好的褒奖就是你赞赏他的影响力
    + 优秀的测试经理特别是经验丰富的人绝不会把自己限制在自己的产品范围内
    
- Gmail测试经理Ankit Mehta访谈
    + 管理下属与其他人沟通是一种干扰, 两个办法
        * 开发工程师和测试工程师团队沟通过程中好多事情可以做, 选择留下一部分自己来完成
        
        * 想做技术工作, 尽量排除管理方面带来的干扰. 每周投入一两天做开发,从开发的角度体验现在的系统测试过程. 
        * 人员配置决不妥协, 宁缺毋滥, 20%探索性测试, 30%关注产品整体测试, 50%做自动化测试和工具
        
        * 四大主线
        系统
        框架
        应用
        市场
- Android测试工程经理Hung Dang访谈 
- Chrome测试工程经理Joel Hynoski访谈
- 测试总监, 自由度非常高
- 搜索和地理信息测试总监Shelton Mar的访谈
    + 必须将测试推到上游, 测试需要非常强的工程师
    + 让整个团队为交付质量负责, 开发+测试
    + 理解系统的关键问题
    对搜索来说是性能
    对新闻来说是时效
    对地图来说是综合和完整性
    对系统基础架构来说,数据完整性对存储最总要, 可扩展性对网络系统最总要,利用率对任务管理系统最总要
    
- 工程工具总监Ashish Kumar的访谈
    + 收纳一个工具到中央工具库的标准
    必须对生产力有极大帮助
    必须对大部分工程师都适用 
    
- 印度Google测试总监Sujay Sahni访谈
- 工程经理Brad Green访谈
- James Whittaker访谈


# Google软件测试改进
- 测试去中心化,已经融入每个团队
- Goolge流程中的致命缺陷
    + 测试不是开发的权杖
    
- SET的未来, 就是开发, 用开发的标准来衡量, 资历尚浅或者刚毕业的学生是测试开发最好的起点, 可以总览整个项目, 从中理解测试的重要性和学习如何开发. 由于测试代码不发布所以也不会影响整个项目. 这是一种简单的方式, 更好的方式是测试智能分配到个个层级的工程师中

谷歌有一个可靠性服务计划(SRE), 称为质控使命,工程师完成6个月的SRE计划后可以获得一笔客观的现金奖励
- TE的未来
    + 转型成测试设计, 规划测试范围, 风险热图
    + 测试工程师会转变成安全工程师这样的专家角色

- 测试总监和测试经理的未来
- 未来的测试基础设施


# Chrome OS的测试计划
- 测试主题概述
    + 基于风险
    + 自动化硬件测试组合
    + 支持快速迭代
    + 开放测试用例和工具
    + chrome OS的主要浏览器平台
    + 测试提供数据
    + 可测试性和乘数效应
    
- 风险分析
    + 保证产品的质量和风险被周知
    + 保证测试团队始终仅关注最高投资回报率的任务ROI 
    + 保证存在一个质量和数据评估框架, 能够随着产品的演进和新数据的引入对新的质量和风险数据进行评估
    
- 每次构建版本的基线测试
    + 冒烟测试, P0自动化
    + 性能测试
- 最新可测试版本(Last Known Good, LKG)的每日测试
    + 一系列功能验收测试的手工执行,例如限定每天在一种类型的硬件上执行
    + 功能回归测试自动测试执行
    + 每日build上滚动式的持续执行web应用程序的测试(含手动+自动)
    + 滚动式压力测试, 可靠性测试, 稳定性测试
    
- 发布版本测试
    + 负责前100名站点在chrome os上进行验证, 也就是验证90%用户有效
    + 场景验证
    + P0 bug验证, 已被修改的P0 bug, 验证80%自上次发布版本记录的优先级为P1的bug
    + 全面压力与稳定性测试
    + 手工测试用例

- 手工测试与自动化测试
    + 自动化无法取代手工测试的方面
    用户体验
    
- 开发和测试的质量关注点
    + 开发, 丰富的单元测试
    + 测试团队, 端到端的测试和集成测试场景
    
- 发布通道
    + 大量部署前在真实环境中测试
- 用户输入
- 测试用例库 
- 测试仪表盘
- 虚拟化
- 性能测试
- 压力,尝试运行和稳定性测试
- 测试执行框架Autotest
- OEM厂商
- 硬件试验田
- 端到端自动化测试集群
- 测试浏览器的应用管理器
- 浏览器的可测试性
- 时间线
- 主要的测试驱动力
- 相关文档


# Chome的漫游测试
- 购物漫游
- 学生漫游
- 国际长途电话漫游
- 地标漫游
- 通宵漫游
- 公务漫游测试
- 危险地漫游测试
- 个性化漫游测试


# 有关工具和代码的博客文章
- 使用BITE从bug和冗余的工作中解脱出来
- 发布QualityBot
http://googletesting.blogspot.com/2011/10/unleash-qualitybots.html 
- RPF:Google的录制回放框架
http://googletesting.blogspot.com/2011/11/rpf-googles-record-playbackframework.html 
- Google测试分析系统(Google Test Analytics), 开源了
http://googletesting.blogspot.com/2011/10/google-test-analytics-now-inopen.html 
    












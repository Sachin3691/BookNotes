Quick python book

# Starting out
- about python 
- what python doesn't do as well 
	+ isn't the fastest language
	
	+ python doesn't have the most libraries 
	c, java and perl 
	
	+ doesn't have much mobible support 
	
	+ python doesn't use multiple processors well 
	
	
# Getting started 
- install 
- anaconda 


# Quick python overview 
- operator 
	+ similar to C
	+ with / 1 results in a float (new in Python 3.x), and division of integers with // 2 results in truncation. 
	+ complex number 
	>>> (3+2j) ** (2+ 3j)
	
- list, tuple, strings '', "", ''' ''', dictionary, sets
- file object
- control flow 
if expression:
	pass 
else:
	pass 
	
while expression:
	pass 
	
for x in collection:
	pass 
	
- function definition 
def foo(*args, **kwarsg):
	pass 
	
- exception, Exception class

try:
	pass 
except Exception as e:
	pass 
except Exception1 as e1:
	pass 
else:
	pass 
finally:
	pass 
	
- context handling with 
with open(...) as f:
	for line in f:
		print(f)

//equal to 
filename = "myfile.txt"
try:
    f = open(filename, "r")
    for line in f:
        print(f)
except Exception as e:
    raise e
finally:
    f.close()

- module creation 

- oop 
class Name(parent):
	pass 
	
	
# The absolute basics 
- written as an integer—0, –11, +33, 123456—and has unlimited range
- build in function 
- advanced numeric functions 
- None value 
- get input from user 
>>> age = int(input("Age?"))


# List, tuples and sets 
- array, A typed array module available in Python provides arrays based on C data types. Information on its use can be found in the Python Library Reference.
- one-element tuples need a comma 
(a, )


# Strings 
- numeric 
>>> '\155' == 'm'

>>> '\x6D'
'm'

- named format 
>>> num_dict = {'e': 2.718, 'pi': 3.14159}
>>> print("%(pi).2f - %(pi).4f - %(e).2f" % num_dict)
3.14 - 3.1416 - 2.72















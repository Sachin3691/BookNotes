Quick python book

# Starting out
- about python 
- what python doesn't do as well 
	+ isn't the fastest language
	
	+ python doesn't have the most libraries 
	c, java and perl 
	
	+ doesn't have much mobible support 
	
	+ python doesn't use multiple processors well 
	
	
# Getting started 
- install 
- anaconda 


# Quick python overview 
- operator 
	+ similar to C
	+ with / 1 results in a float (new in Python 3.x), and division of integers with // 2 results in truncation. 
	+ complex number 
	>>> (3+2j) ** (2+ 3j)
	
- list, tuple, strings '', "", ''' ''', dictionary, sets
- file object
- control flow 
if expression:
	pass 
else:
	pass 
	
while expression:
	pass 
	
for x in collection:
	pass 
	
- function definition 
def foo(*args, **kwarsg):
	pass 
	
- exception, Exception class

try:
	pass 
except Exception as e:
	pass 
except Exception1 as e1:
	pass 
else:
	pass 
finally:
	pass 
	
- context handling with 
with open(...) as f:
	for line in f:
		print(f)

//equal to 
filename = "myfile.txt"
try:
    f = open(filename, "r")
    for line in f:
        print(f)
except Exception as e:
    raise e
finally:
    f.close()

- module creation 

- oop 
class Name(parent):
	pass 
	
	
# The absolute basics 
- written as an integer—0, –11, +33, 123456—and has unlimited range
- build in function 
- advanced numeric functions 
- None value 
- get input from user 
>>> age = int(input("Age?"))


# List, tuples and sets 
- array, A typed array module available in Python provides arrays based on C data types. Information on its use can be found in the Python Library Reference.
- one-element tuples need a comma 
(a, )


# Strings 
- numeric 
>>> '\155' == 'm'

>>> '\x6D'
'm'

- named format 
>>> num_dict = {'e': 2.718, 'pi': 3.14159}
>>> print("%(pi).2f - %(pi).4f - %(e).2f" % num_dict)
3.14 - 3.1416 - 2.72


# Dictionary
- {}

>>> english_to_french = {'red': 'rouge', 'blue': 'bleu', 'green': 'vert'}


# Control flow
- while 
while condition:
    body
else:
    post-code
    
- if else 

if condition1:
    body1
elif condition2:
    body2
elif condition3:
    body3
.
.
.
elif condition(n-1):
    body(n-1)



else:
    body(n)
    
- for loop 
for item in sequence:
    body
else:
    post-code
    
- break and continue 
- enumerate function 
x = [1, 3, -7, 4, 9, -5, 4]
for i, n in enumerate(x):                                1
    if n < 0:                                            2
        print("Found a negative number at index ", i)    3

- generator expression 

>>> x_squared = (item * item for item in x)

- outermost level of indentation 
>>> x = 1
>>> if x == 1:
...    y = 2
...    if v > 0:
...        z = 2
...        v = 0
...
>>> x = 2


# Function 
- example 
def fact(n):
    """Return the factorial of the given number."""
    r = 1
    while n > 0:
        r = r * n
        n = n - 1
    return r
    
- lambda 
lambda parameter1, parameter2, . . .: expression

- generator function 
>>> def four():
...     x = 0                                1
...     while x < 4:
...         print("in generator, x =", x)
...         yield x                          2
...         x += 1                           3
...

>>> def subgen(x):
...     for i in range(x):
...         yield i
...
>>> def gen(y):
...     yield from subgen(y)
...
>>> for q in gen(6):
...     print(q)
...

- decorator function 
>>> def decorate(func):
...     print("in decorate function, decorating", func.__name__)     1
...     def wrapper_func(*args):
...         print("Executing", func.__name__)
...         return func(*args)
...     return wrapper_func                                          2
...
>>> @decorate                                                        3
... def myfunction(parameter):
...     print(parameter)


# Modules and scoping rules 
-  reload in the section on the importlib module in the Python Language Reference, found at https://docs.python.org/3/reference/import.html in this page’s importlib section, to find the details. 

- module search path 
>>> import sys
>>> sys.path
_list of directories in the search path_

- where to place your module 
programs can use the modules you coded, you need to:

Place your modules in one of the directories that Python normally searches for modules.
Place all the modules used by a Python program in the same directory as the program.
Create a directory (or directories) to hold your modules, and modify the sys .path variable so that it includes this new directory (or directories).

- private names _name
- python name spaces 

in Python, it has three namespaces: local, global, and built-in (see figure 10.2). 

>>> locals()
{'__builtins__': <module 'builtins' (built-in)>, '__name__': '__main__',
 '__doc__': None, '__package__': None}
>>> globals()
{'__builtins__': <module 'builtins' (built-in)>, '__name__': '__main__',
 '__doc__': None, '__package__': None}>>>
 
  __builtins__ module
  

# Python programs 
# Using filesystem 
# Reading and writing files 
# Exceptions 
# Classes and object-oriented programming 
# Regular expressions 
# Date types as objects 




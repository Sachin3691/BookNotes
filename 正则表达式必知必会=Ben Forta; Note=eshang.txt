正则表达式必知必会=Ben Forta; Note=eshang

\, 用于转义字符开头，所有特殊字符

[], 一个匹配集合, 例如[Aa] 匹配a 或 A

., 匹配任意一个字符，x表示某个字符是常值,使用：x.

-, 在方括号内表示一个范围，例如 [0-9], 方括号外无特殊含义无需转意直接使用

^, 非操作, 用于方括号内

\d, 匹配任意一个数字

\D, 匹配任意一个非数字, 同 [^0-9]

[\b] 回退(并删除)一个字符(Backspace键)
\f, 换页
\n, 换行
\r, 回车
\t, TAB键
\v, 垂直制表

windows下换行符是\r\n
linux/unix 是 \n\n

\w, 任意一个字母、数字、下划线字符
\W, 任意非字母、数字、下划线字符

\s, 任意空格，等价于[\f\n\r\t\v]
\S, 非空白字符，等价于[^\f\n\r\t\v]

\xXX, 匹配十六进制数字对应的ASCII字符
\0XX, 匹配八进制数字对应的ASCII字符

POSIX字符类，并不是所有正则表达式编辑器都支持，一下只是一些方法的简写
[:alnum:], 任意一个字母或数字, 等价于[a-zA-Z0-9]
[:alpha:], 任意一个字母, [a-zA-Z]
[:blank:], 空格或制表符[\t ]  t后有一个空格
[:digit:], 任何一个数字[0-9]
[:graph:], 和[:print:]一样，但不包括空格
[:lower:], 任何一个小写字母，等价于[a-z]
[:print:], 任何一个可打印字符
[:punct:], 既不属于[:alnum:]也不属于[:cntrl:]的任何一个字符
[:space:], 任何一个空白字符，包括[^\f\n\r\t\v ] v后有空格
[:upper:], 任何一个大写字母[A-Z]
[:xdigit:], 任何一个十六进制数[a-fA-F0-9]
所有字符要放到方括号中

+, 在表达时候表示匹配一个或多个字符 例如 \w+, [0-9]+, 而[0-9+]表示匹配数字与加号，匹配本身的时候需要使用转义\+

*, 匹配零个或多个

?, 匹配零个或一个

{start, [end]}, 设置重复出现的次数，{3}, {3,4}, {3, }, 分别表示三次，三到四次， 大于等于三次

/, 必须使用转意来显示\/表示显示\

*?, 表示懒惰匹配，也就是只匹配第一次出现的
*, 表示匹配最大值也就是匹配最后一次出现的
+?, {n,}?, 均表示懒惰匹配

\b, 单词边界，只匹配位置并不匹配字符，也就是\bchar\b，实际匹配四个字符，char 并且是独立的单词

^, 在非[]内，并且在一组字符串开头的时候表示匹配字符串的开头
$, 表示匹配字符串结尾

(?m), 分行匹配模式,这时 ^或$不止匹配开头或结尾而且匹配换行符的开头结尾
(?m)\s*//.*$

浏览器中HTML常用的符号&nbsp;, 是non-breaking space的缩写

子表达式，就是将一组字符或表达式作为一个元素来看，例如搜索
&nbsp;* 则*只与;匹配，而我们希望与整个&nbsp;匹配，使用子表达式可以解决这个问题
(&nbsp;)*

|, 是或的含义，两个并列的表达式满足其中一个
由内向外分析嵌套表达式，不是从头开始看
(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|25[0-5]))
匹配IPV4的IP地址

回溯匹配，允许正则表达式引用之前表达式中定义的子表达式
[ ]+(\w+)[ ]+\1
其中\1回溯引用(\w+)，以上的表达式用于匹配重复输入的单词
不同的语言在实现回溯引用的时候语法差异较大，例如
javaScript, macromedia, coldFusion, vi  使用 \表示回溯，\与$组合实现替换时例外
.net 正则表达式将返回一个对象，对象的groups属性包含所有的匹配, C#中 match.groups[1]对应第一个匹配
php将匹配返回到一个4matches数组
\0，表示整个正则表达式
；
回溯可以用于正则表达式的替换，例如查找指定文件中的所有邮件地址并替换为超级链接，就可以使用回溯引用之前找到的内容
;
大小写转换, 可以将正则表达式找到的文本回溯后进行大小写转换，使用如下控制符
\E, 结束\L或\U
\l, 把下一个字符转换为小写
\L, 把\L到\E之间的字母全部替换为小写
\u, 把下一个字母转换为大写
\U, 把\U到\E之间的字母全部转换为大写
(<Hh]1>)(.*?)(</[Hh]1>)
替换为
$1\U$2\E$3
作用是将标题1的内容全部变为大写

前后查找，用于只筛选匹配表达式的一部分。例如上例选择标题，但标签不是想要的内容，这时就需要使用前后查。前后查找用于标记位置
(?=...), 向前查找，以?=开头的子表达式，需要匹配的文本跟在后面
;
.+(?=:) 对 http://WWW.FORTA.COM/
匹配
http
也就是说只匹配子表达式:指定的位置之前
;
(?<=), 向后查找
;
对前后查找取非
(?=), 向前
(?!), 负向前查找，指向前查找与给定不匹配的字符
(?<=), 向后
(?<!), 负向后

嵌入条件，部分正则表达式编译器没有实现该功能
(, 显示需要转义
?= 条件满足执行前句
?<



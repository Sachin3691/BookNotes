Pointers on C=Kenneth A.Reek;Note=Erxin

# 介绍

# 基本概念
- 环境
cross compiler, compile on one machine and execute on another 

# 数据
- 变量范围
limits.h 标准头文件中定义

字符, SCHAR_MIN, SCHAR_MAX UCHAR_MAX
短整型, SHRT_MIN, SHRT_MAX USHRT_MAX 
整型, INIT_MIN INT_MAX UINT_MAX 
长整型, LONG_MIN LONG_MAX UNLONG_MAX

- 枚举 
enum name{ type0, type1, type#, ...};

- typedef, instead of #define. for example for define pointer 
typedef int_p int* 

int_p a, b;

#define int_p int* 

will get error 

- 链接属性， internal, external, none
none, 总是被当作单独的个体
internal, 同一个源文件内是表示一个个体
external, 不论在那个文件中都表示同一个个体

static type will be change default link property to internal 
explict mark with extern will set variable to external 

- l-value, r-value 
l-value, is the value can be write at the left side of equal sign 
r-value, is the value can be write at the right side of equal sign 


# 指针
- * and & is operator, * is used to get value from a given pointer type, & is used to get address from a given value 
- indirect access, access a pointer's pointed address is called indirection or dereferencing the pointer 
*pointer 

- operation on pointer will base on the type of the pointer 

# 函数
- function prototype, definition in one line 
int find_int(int key);

- variable parameter list 

stdarg, macro 
stdarg.h 

va_list, var_start, var_arg, var_end. we could define a va_list variable to work with these three macro 

va_start is used to init the va_list variable 

float
average(int n_values, ...)
{
    va_list var_arg;
    int count;
    float sum = 0;
    
    va_start(var_arg, n_values);
    
    for (count = 0; count < n_values; count+= 1)
    {
        sum += va_arg(var_arg, int);
    }
    
    va_end(var_arg);
    return sum/n_values;
}

va_arg, this macro accept two arguments, first is a va_list variable and next is the type of the varaible parameters 

the disadvantage is 
    + can't check the real passed arguments number 
    + can check the argument type 
the char, short and float type will pass as int or double type value in va_arg 


# 数组
- pointer may faster in some condition compare to the index. expecially in for or while loop and move step by step 

- storage sequence, change the right index first and save to memory 

matrix[1][5]

equal to 

*(*(matrix+1)+5)

- point to array
int (*p)[10];

p is pointed to a 10 elements int array, when you add one to p it will first adjust base on the 10 int value and then add the addtional one 

- init multiple dimenson array 
int matrix[1][2] = {1, 1};

we could also add the brace for each dimenson


# 字符串
- string.h 
char *strerror(int error_number), convert a error code to a discription 

- memory operation 
memcpy 
memmove 
memcmp
memchr 
memset 

- string 
it is a array of char ends with a total zero bits symbol NUL 

- error example 
if(strlen(x) >= strlen(y))...

is not equal to 
if(strlen(x) - strlen(y)) >= 0)...

because strlen return a size_t which is unsign int so unsign int minors unsign int will never less than zero 

- warning in strncpy 
if the given length is equal to the string lenght the copied string will not end with NUL!!!


# Struct and Union 
- define struct 
struct tag 
{
    memeber-list;
}variable-list;

struct tag var0;

or 
typedef struct 
{
}tag;

tag var0;

- compiler will save the struct member side by side. if only requred to fit for boundary setting then compile may use addtional free space to fill the external space between members 

sizeof operator will get the size of a struct include the required boundary alignment requires bits 
get the off set of a struct member by 

offsetof(type, member), macro 

example 
offset(struct ABC, b);

- 位段, a struct member define with end colon. it must be the types int, unsign int or signed int. explicit define bit member is a good idea 
struct CHAR{
    unsigned ch: 7;
    unsigned font: 6;
    unsigned size: 19;
};

- union, all the member are align at the same position in memory, but you can't save the different member at the same time 
union{
    float f;
    int i;
}fi;

fi.f = 3.14159;

to unit a union the value and type must be asign to the first member of a union 
fi v = {5.1};


# 动态内存分配
-































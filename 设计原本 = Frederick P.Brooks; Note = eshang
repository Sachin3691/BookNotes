设计原本 = Frederick P.Brooks; Note = eshang

模型概览
目标、必要条件、效用函数、约束、资源分配、预算和关键预算、设计树
回溯，预感，直觉，审美等一些列方法来选择设计方式

通常不知晓设计树的样子，一边设计一边探索

重视纸张上的设计草图，便于与其他人沟通和发挥自己的想象力

需求分析时注意从第一线用户的手中取得使用与需求信息。不要从他们的领队或委员会中取得信息

也许应该进行增量设计，增量完善软件。在软件设置初始阶段只是完成最基本的功能需求与架构，在架构预留出充分的扩充空间。在软件交付初期使用的过程中逐步增加需求
将工程分阶段完成

在设计之初不要家丁客户配合，架构师工作认真，承包方按照需求完成工作，所有项目成员沟通彻底。
应该当建立明确的书面合同与协议

一种合同模型

团队设计师现在标准，但是很多伟大的设计师由一个人或2个人紧密合作来实现的。婚姻是一个很了不起的发明

许多人手会让工作变的轻松——通常如此
许多人手会让工作变的更多——总是如此

设计的概念完整性是最终目标，对等的成员协商是膨胀的产品的经典做法，没人敢对其他人的建议说不。

如果一个架构师不能承担一个项目的设计的话，那么一个用户也不能保证恩能够学会软件的使用

设计团队必须保证每个成员都有充分的时间探索自己好奇的问题

每个人分别提出多种设计方案，然后开会讨论进行融合
；
产品设计方案战斗
两个团队分别对产品进行不同的设计
；
重视两人设计团队，两人设计团队具有天然的自组织性，便于沟通协调

设计过后找使用者等团队对设计进行复查

分布式开发的原因：
分布在各地的技术专家
不能移动的天才设计人员
分公司之间对的政策和工作的划分

注重沟通，面对面是最好的选择，可以使用文档共享电话，视频会议等在一定程度上进行替代

视频电话会议原则：
面试陌生的应聘者，选择最终人选时；
问题对一个或多个参与者来说至关重要；
当一方参与者很不安；
组织文化或国际文化非常不同时；

理解有两种形式：直觉与推演，无论哪一种都需要知识作为后盾

软件的迭代测试以及大量的模拟实验的必要性

真理来源于错误而非混乱

每个设计决策都是以设计者对用例与用户的假设作为指导的，但事实上无论怎么样模拟都不能完全复制出用户的想法

找出有限资源，合理分配有限资源的使用，尝试使用替代资源

英国教堂的圣坛必须面向西方

在设计中约束越多对设计者挑战愈大，但相对来说设计越容易，而没有约束的需求是最难的
作为普通的设计，没有约束很容易完成，但是如果想要做的优秀则非常的难，因为没有约束就等于没有衡量的准绳，这就是通用设计的难点
所以在设计之前要尽可能找到更多的约束来辅助设计决策

编程语言是为了简化程序员编写与阅读代码的工作量，简约很重要
；
结构清晰
；
正交性原则，不要将独立的东西连接起来
；
适宜性，不要引入无形的东西
；
普遍性，不要限制固有的东西
；
一致性
；
设计者在大范围的宏观与围观决策中获得了一定程度的一致性，我们说它具有了清晰的风格

设计者应该充分的了解范本，理解它的优点与缺陷，工程与工艺不同，没有缘由的革新必然带来意外后果，掌握了前辈的设计风格是具备了创意的基础
任何设计领域都不允许懒惰，自满，它们是创意的大敌

linux与unix系统与windows的区别是它们的大部分使用者就是设计者

注意设计者与使用者的分离
补救：
用户体验场景；
通过增量式设计、增量式交付与用户密切交互；
并发工程，促进设计者与使用者交互；
设计者的教育；

软件设计时注意动作与动词的对应，每个操作的名字很重要

产品过程：
产品定义；
市场预测；
成本估算；
价格预估；

提高设计实践的水平

卓越的设计来自于卓越的设计师
卓越的设计需要大胆的领导者，他们要求创新
信任一名主设计师来完成设计，主设计师的职位上与项目经理是平等的，虽然它手下只有几个助手
保证主设计师不受项目之外观察者的影响，防止经理分散，他必须得到他想要的工具和帮助

每个超出一般水平的人都接受两种教育，一种来自他的老师，另一种来自他们自己，后一种也更重要

经理招募设计师经常以自己的工作标准来招募，忽略性格内向，说话慢，尤其是不合常规的人，但优秀的设计师往往可能就来自这样的人

有前途的人才很早被发现和追踪，组织为他们指派领导者。注意培养非管理型技术领导者
很强的主动措施才能给他们同样的威望，同样的办公室，同样的人员支持。管理者也是人，容易从内心深处认为他们的任务比设计更难，更重要，需要小心评估和如何发扬创造性和创新性
；
规划不同的工作经理
；
规划离开组织机构去休假
；
防止让卓越的设计师去做管理
；
保护优秀的设计师不受管理者的干扰，平庸的经理可能扼杀设计师的创造性，不能意识到团队中的宝石，高级管理曾的任务必须积极改变一线经理，最好是提升他们对自己才能和特殊角色的看法

设计项目应该考虑的问题
准备一本记事本；
从指定的项目中导出尽可能多得约束条件；
那些是列入预算的物品？如何管理这些物品？
如何满足那些必要条件？是显示还是隐式的？
如何判断两个设计那个更好？
是否使用CAD软件，在不同阶段使用时的优缺点？
如何推进设计，分析设计日志，勾勒出设计轨迹
评估：设计中有那些优点，那些不足？
；
设计的亮点与特点；
设计背景；
目标；
机会；设计完成项目时外部与内部条件，市场的需求等机会的总结。
约束条件；
设计决定；
设计之后与设计之前的改动对比；
里程碑事件；促进团队的融合与信心的建立；
框架和结构完成，第一次使用时的设计改动；
评估；
学到的经验总结；
	仔细询问架构师设计师的工作，询问理由，最尽职的设计师也会犯错；
	有效仔细的检查；
	考虑所有维护方面的策略。任何成功的设计都需要维护很长时间；
；
新增设计需求的补充
设计特点和亮点；
背景介绍
目标
设计决定和迭代
构建期间的改动
评估，成功与为解决的问题
新共功能
学到的经验总结
；
由约束条件得到的关键问题的推理解决方案















Firefox project document;Note=Erxin

# Getting involved with mozilla 
- reference 
https://www.joshmatthews.net/blog/2010/03/getting-involve-with-mozilla/

# Developer guide 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

# Build firefox for different versions 
- https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial

# Mozilla build reference 
https://wiki.mozilla.org/MozillaBuild

# How mozilla's build system works 
+ reference https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works
- mach build to build the tree is sufficient to work with the source tree 
- phases
    + system detection and validation
    + preparation of the build backend 
    + invokation of the build backend 
    
- phase 1, configure 
    + centers around the configure script generated configure.in which is written in M4(http://www.seindal.dk/rene/gnu/) and process using autoconfig 2.13(http://www.gnu.org/software/autoconf/) 
    
    + The primary output of the configure script is an executable file in the object directory called config.status. It is written in python instead of a normal shell script 
    
- phase2, build backend preparation and the build definition 
config.status is charged with the task of tell a tool how to build the tree 

build system definition consist of various moz.build files in the tree 

- phase3, invokation of the build backend, make consuming makefiles. non-mkae build backends such as Tup or Visual studio 

The main moz.build file defines the tiers and directories in them. In reality, the main moz.build files includes other moz.build files such as /toolkit/toolkit.mozbuild

- recursive make backend 
Each tier consists of 3 sub-tiers: export, libs, and tools. This roughly correspond to the actions of pre-build, main-build, and post-build. 

- moz.build files 
moz.build files are how each part of the source tree defines how it is integrated with the build system.
    
An individual moz.build file is actually a Python script. However, they are unlike most Python scripts you will ever see. The execution environment is highly controlled so moz.build files can only perform a limited set of operations

moz.build UPPERCASE Variables and Functions
sandbox.py contains code for a generic Python sandbox. 
reader.py contains the code that defines the actual moz.build sandbox

- build libraries 
    + components are shared libraries 
    + non component sahred libraries  such as libxpcom, libmozjs 
    + static libraries, used as intermediate steps to build a shared library 
    
# Configure build options 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options


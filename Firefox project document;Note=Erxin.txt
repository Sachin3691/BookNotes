Firefox project document;Note=Erxin

# Getting involved with mozilla 
- reference 
https://www.joshmatthews.net/blog/2010/03/getting-involve-with-mozilla/

# Developer guide, contain all information for firefox developers 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

# Build firefox for different versions 
- https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial

# Mozilla build reference 
https://wiki.mozilla.org/MozillaBuild

# How mozilla's build system works 
+ reference https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works
- mach build to build the tree is sufficient to work with the source tree 
- phases
    + system detection and validation
    + preparation of the build backend 
    + invokation of the build backend 
    
- phase 1, configure 
    + centers around the configure script generated configure.in which is written in M4(http://www.seindal.dk/rene/gnu/) and process using autoconfig 2.13(http://www.gnu.org/software/autoconf/) 
    
    + The primary output of the configure script is an executable file in the object directory called config.status. It is written in python instead of a normal shell script 
    
- phase2, build backend preparation and the build definition 
config.status is charged with the task of tell a tool how to build the tree 

build system definition consist of various moz.build files in the tree 

- phase3, invokation of the build backend, make consuming makefiles. non-mkae build backends such as Tup or Visual studio 

The main moz.build file defines the tiers and directories in them. In reality, the main moz.build files includes other moz.build files such as /toolkit/toolkit.mozbuild

- recursive make backend 
Each tier consists of 3 sub-tiers: export, libs, and tools. This roughly correspond to the actions of pre-build, main-build, and post-build. 

- moz.build files 
moz.build files are how each part of the source tree defines how it is integrated with the build system.
    
An individual moz.build file is actually a Python script. However, they are unlike most Python scripts you will ever see. The execution environment is highly controlled so moz.build files can only perform a limited set of operations

moz.build UPPERCASE Variables and Functions
sandbox.py contains code for a generic Python sandbox. 
reader.py contains the code that defines the actual moz.build sandbox

- build libraries 
    + components are shared libraries 
    + non component sahred libraries  such as libxpcom, libmozjs 
    + static libraries, used as intermediate steps to build a shared library 
    
# Configure build options 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options

# Developer guide, all the required development document index 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

- view firefox source code online
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Viewing_and_searching_Mozilla_source_code_online

https://dxr.mozilla.org/mozilla-central/source/


# Source code directory structure 
- working with mozilla source code 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code

- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Directory_structure

- explains the folders which could not directly get the meaning from the names 
caps, capability-based web page security management 
chrome, chrome registry which seamonkey still uses rdf/chrome 
config, build relative 
docshell, main object managing things related to a document window. Each frame has its own docshell. it is the outermost layer of the embedding API used to embed a Gecko browser into an application 

dom, idl definitions of the interfaces defined
     connection between javascript and the implementation of DOM objects that are specific both to javascript and to DOM. binding between XPCOM and javascript live in js/src/xpconnect/ 
     implementation of a few of the core "DOM level 0" objects such as window, window navigator, window.location etc 
     
editor, html editor 
embedding, support embed Gecko in app 
extension, extend mozilla features 
extension/pref
gfx, interfaces that abstract the capability of platform specific graphics toolkits
gradle, related to JVM build system 
hal, platform specific functions such as sensor info, memory info, android alarm etc 
image, image render 
intl, l10n 
ipc, container for implementation of IPC 
js,  js/src, javascript engine known as SpiderMonkey 
     js/jsd, javascript debugging library 
     js/xpconnect/, support code for calling between js and cpp 
layout, render UI such as css xul etc 
media, sources of media libraries 
mfbt, impelmentation of weakptr 
mobile 
module, compression/archiving, math etc 
mozglue, low-level functionality including dynamic link for android, dll block list etc 
netwerk, networking library 
nsprpub, netscape portable runtime, abstraction layer to things like threads, file i/o, and socket 
parser, parse xml/html 
probes, related to dtrace 
python, cross module python code 
rdf, RDF handling APIs, Resource Description Framework (RDF) is a family of specifications for a metadata model that is often implemented as an application of XML
services, accounts and sync 
servo, parallel browser engine project, https://servo.org/; https://www.rust-lang.org/en-US/index.html
storage, xpcom wrapper for sqlite 
taskcluster, scripts and code to automatically build and test Mozilla trees for the continuous integration and release process 
testing, common testing tools for mozilla codebase 
third_party, vendored dependencies maintained outside of mozilla 
toolkit, shared with different products such as thunderbird etc. contains front-end components 
         toolkit/mozapps/extensions/test/xpinstall, contain codes to build xpi install 
tools, optionally build, used for debugging 
uriloader/prefetch, prefetch documents in order to have them cached for faster loading 
view, cross-platform painting, scrolling, event handling, z-ordering, and opacity will be obsolete 
widget, operation system specific widget 
xpcom
xpfe, cross platform front end, the seamonkey frontend, contains the xul files for the browser interface, common files used by the other parts of the mozilla suite. XBL files for the parts of the XUL language 


# Firefox project policies settings 
http://www-archive.mozilla.org/projects/security/components/ConfigPolicy.html


# Firefox irc channel 
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Getting_Started_with_IRC


# Firefox enable file url access
user_pref("capability.policy.policynames", "localfilelinks");
user_pref("capability.policy.localfilelinks.sites", "http://www.example.com");
user_pref("capability.policy.localfilelinks.checkloaduri.enabled", "allAccess");

http://kb.mozillazine.org/Links_to_local_pages_do_not_work
https://stackoverflow.com/questions/5317834/workaround-for-href-file-in-firefox


# Decode *.rsa file for firefox extension
- with python 3.5 install pyasn1 library 
>>> from pyasn1.codec.der import decoder
>>> buf = open(r'path-to-*.rsa', 'rb').read()
>>> decoder.decode(buf)

https://www.di-mgt.com.au/how-mozilla-signs-addons.html


# Firefox official build download 
http://ftp.mozilla.org/pub/firefox/tinderbox-builds/
http://ftp.mozilla.org/pub/firefox/

# Using the mozilla symbol server 
https://developer.mozilla.org/en-US/docs/Mozilla/Using_the_Mozilla_symbol_server
- download symbol with windbg 
SRV*c:\symcache\*http://msdl.microsoft.com/download/symbols;SRV*c:\symcache\*https://symbols.mozilla.org/


# Understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports

# Firefox enable legacy extension by 
about:config -> extensions.legacy.enabled -> true

# DOM VK event list
https://www.w3.org/TR/2000/WD-DOM-Level-3-Events-20000901/events.html

# Firefox cross domain issue 
- nsnetutil.cpp 
NS_HasBeenCrossOrigin

- nscontentsecuritymanager.cpp 
rv = CheckCHannel(aChannel); 
doContentSecurityCheck+0x86


# Firefox crash 
- file xmlhttprequestmainthread.cpp 
xul!mozilla::dom::XMLHttpRequestMainThread::DispatchToMainThread

- debug minidump 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_a_minidump

- understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports

# Contribute to Firefox project 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Introduction


# Firefox developer tool 
http://firefox-dev.tools/


# Firefox javascript engine spider monkey 
- spidermonkey 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey

- gc rooting guide 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/GC_Rooting_Guide

- hacking tips 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips


# Firefox developer tools document including debugger API for client and server 
http://docs.firefox-dev.tools/


# script security checks 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Gecko/Script_security#Security_checks

- frame script 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Frame_script_environment

- compartment, Gecko guarantees that JavaScript code running in a given compartment is only allowed to access objects in the same compartment. When code from compartment A tries to access an object in compartment B, Gecko gives it a cross-compartment wrapper.

- Whenever cross-compartment access happens, the wrappers enable us to implement the appropriate security policy. Because the wrapper we choose is specific to the relationship between the two compartments, the security policy it implements can be static: when the caller uses the wrapper

- cross process object wrapper 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Cross_Process_Object_Wrappers

- message manager 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Message_Manager/Message_manager_overview


# Mozilla build system introduction 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works

- moz.build file variable and functions 
https://hg.mozilla.org/mozilla-central/file/default/python/mozbuild/mozbuild/frontend/context.py

- build with debug symbol 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Building_Firefox_with_Debug_Symbols


# XUL interface 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/XUL_Reference

- browser 
gBrowser.selectedBrowser is a browser object 
    
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/browser
    

# Firefox webextension implementation path in the repository 
..\mozilla-release\toolkit\components\extensions    

# Webdriver base API implementation location 
d:\mozilla-source\mozilla-release\testing\marionette

# JavaScript compartment
- spider monkey compartements 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Compartments

An object in one compartment cannot touch an object in another compartment, except through a cross-compartment wrapper.

SpiderMonkey tracks the creation of these cross-compartment wrappers and thus it knows at all times what objects from a compartment are kept alive by outside references 


# Firefox browser startup process 
- call stacks 
ntdll!NtWaitForAlertByThreadId+0x14
ntdll!RtlSleepConditionVariableSRW+0xf9
KERNELBASE!SleepConditionVariableSRW+0x28
mozglue!mozilla::detail::ConditionVariableImpl::wait+0x3e [z:\mozilla-release\mozglue\misc\conditionvariable_windows.cpp @ 58]
xul!mozilla::CondVar::Wait+0x38 [z:\mozilla-release\obj-x86_64-pc-mingw32\dist\include\mozilla\condvar.h @ 69]
xul!mozilla::Monitor::Wait+0x22 [z:\mozilla-release\obj-x86_64-pc-mingw32\dist\include\mozilla\monitor.h @ 41]
xul!mozilla::ipc::MessageChannel::WaitForSyncNotify+0x10a [z:\mozilla-release\ipc\glue\windowsmessageloop.cpp @ 1047]
xul!mozilla::ipc::MessageChannel::Send+0xb7f [z:\mozilla-release\ipc\glue\messagechannel.cpp @ 1466]
xul!mozilla::layers::PAPZCTreeManagerChild::SendTransformEventRefPoint+0x173 [z:\mozilla-release\obj-x86_64-pc-mingw32\ipc\ipdl\papzctreemanagerchild.cpp @ 838]
xul!mozilla::layers::APZCTreeManagerChild::TransformEventRefPoint+0x33 [z:\mozilla-release\gfx\layers\ipc\apzctreemanagerchild.cpp @ 215]
xul!mozilla::layers::IAPZCTreeManager::ReceiveInputEvent+0x650 [z:\mozilla-release\gfx\layers\apz\public\iapzctreemanager.cpp @ 154]
xul!nsBaseWidget::DispatchInputEvent+0x8b [z:\mozilla-release\widget\nsbasewidget.cpp @ 1171]
xul!mozilla::widget::TextEventDispatcher::DispatchInputEvent+0x8b [z:\mozilla-release\widget\texteventdispatcher.cpp @ 214]
xul!mozilla::widget::TextEventDispatcher::DispatchKeyboardEventInternal+0x48b [z:\mozilla-release\widget\texteventdispatcher.cpp @ 593]
xul!mozilla::widget::TextEventDispatcher::DispatchKeyboardEvent+0x48 [z:\mozilla-release\widget\texteventdispatcher.cpp @ 450]
xul!mozilla::widget::NativeKey::HandleKeyDownMessage+0x4a9 [z:\mozilla-release\widget\windows\keyboardlayout.cpp @ 2327]
xul!nsWindow::ProcessKeyDownMessage+0x8f [z:\mozilla-release\widget\windows\nswindow.cpp @ 6432]
xul!nsWindow::ProcessMessage+0x13a4 [z:\mozilla-release\widget\windows\nswindow.cpp @ 5470]
xul!nsWindow::WindowProcInternal+0x1f9 [z:\mozilla-release\widget\windows\nswindow.cpp @ 4933]
xul!CallWindowProcCrashProtected+0x2f [z:\mozilla-release\xpcom\base\nscrashonexception.cpp @ 35]
xul!nsWindow::WindowProc+0x51 [z:\mozilla-release\widget\windows\nswindow.cpp @ 4886]
USER32!UserCallWinProcCheckWow+0x280
USER32!DispatchMessageWorker+0x19f
xul!nsAppShell::ProcessNextNativeEvent+0x1a7 [z:\mozilla-release\widget\windows\nsappshell.cpp @ 394]
xul!nsBaseAppShell::DoProcessNextNativeEvent+0x44 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 138]
xul!nsBaseAppShell::OnProcessNextEvent+0x1c7 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 289]
xul!nsThread::ProcessNextEvent+0x23f [z:\mozilla-release\xpcom\threads\nsthread.cpp @ 1359]
xul!NS_ProcessNextEvent+0x5a [z:\mozilla-release\xpcom\threads\nsthreadutils.cpp @ 475]
xul!mozilla::ipc::MessagePump::Run+0x1e7 [z:\mozilla-release\ipc\glue\messagepump.cpp @ 125]
xul!MessageLoop::RunInternal+0x3d [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 239]
xul!MessageLoop::RunHandler+0x3b [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 232]
xul!MessageLoop::Run+0x22 [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 212]
xul!nsBaseAppShell::Run+0x49 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 158]
xul!nsAppShell::Run+0x29 [z:\mozilla-release\widget\windows\nsappshell.cpp @ 271]
xul!nsAppStartup::Run+0x56 [z:\mozilla-release\toolkit\components\startup\nsappstartup.cpp @ 283]
xul!XREMain::XRE_mainRun+0x15c1 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4567]
xul!XREMain::XRE_main+0xb40 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4747]
xul!XRE_main+0x52 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4842]
xul!mozilla::BootstrapImpl::XRE_main+0x2a [z:\mozilla-release\toolkit\xre\bootstrap.cpp @ 46]
firefox!do_main+0x31d [z:\mozilla-release\browser\app\nsbrowserapp.cpp @ 237]
firefox!NS_internal_main+0x1fe [z:\mozilla-release\browser\app\nsbrowserapp.cpp @ 309]
firefox!wmain+0x1b7 [z:\mozilla-release\toolkit\xre\nswindowswmain.cpp @ 115]
firefox!invoke_main+0x22 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 90]
firefox!__scrt_common_main_seh+0x11d [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 283]
KERNEL32!BaseThreadInitThunk+0x14
ntdll!RtlUserThreadStart+0x21

- app startup idl definition 
d:\mozilla-source\mozilla-release\toolkit\components\startup

- start up folder 
d:\mozilla-source\mozilla-release\toolkit\xre
XUL Runtime Environment


# Change firefox execute mode 
- multiprocess 
const char* kAccessibilityLastRunDatePref = "accessibility.lastLoadDate";
const char* kAccessibilityLoadedLastSessionPref = "accessibility.loadedInLastSession";

set the value to recent 7 days accessibility.lastLoadDate

const char* kForceEnableE10sPref = "browser.tabs.remote.force-enable";
const char* kForceDisableE10sPref = "browser.tabs.remote.force-disable";

bool optInPref = Preferences::GetBool("browser.tabs.remote.autostart", false);
bool trialPref = Preferences::GetBool("browser.tabs.remote.autostart.2", false);
bool prefEnabled = optInPref || trialPref;
int status;
if (optInPref) {
    status = kE10sEnabledByUser;
} else if (trialPref) {
    status = kE10sEnabledByDefault;
} else {
    status = kE10sDisabledByUser;
}
- e10s 
https://wiki.mozilla.org/Electrolysis

# Open Firefox trouble shooting page 
- about:support 

# RAII-style class for make sure release the mutex 
https://gist.github.com/trojanfoe/7134404


# Headless mode Firefox 
- example 
https://github.com/mdn/headless-examples

- articles 
https://intoli.com/blog/running-selenium-with-headless-firefox/

- doc 
https://developer.mozilla.org/en-US/Firefox/Headless_mode


# Firefox get scriptable top 
- nsGlobalWindow.cpp 
nsPIDOMWindowOuter*
nsGlobalWindow::GetScriptableTop()

# cross domain breakpoint settings window.frames[0].addEventListener 
- check window 
 1 e 00007ffb`3988db6e [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 5035]    0001 (0001)  0:**** xul!nsGlobalWindow::GetFrames+0xe
 2 e 00007ffb`3987ce58 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 10370]    0001 (0001)  0:**** xul!nsGlobalWindow::AddEventListener+0x18
 3 e 00007ffb`39319af8 [z:\mozilla-release\caps\nsscriptsecuritymanager.cpp @ 509]    0001 (0001)  0:**** xul!nsScriptSecurityManager::CheckSameOriginURI+0x18
 4 e 00007ffb`39892360 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4069]    0001 (0001)  0:**** xul!nsGlobalWindow::GetPrincipal
 5 e 00007ffb`3c17604a [z:\mozilla-release\docshell\base\nsdocshell.cpp @ 13677]    0001 (0001)  0:**** xul!nsDocShell::GetTopFrameElement+0x1a
 7 e 00007ffb`39892383 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4072]    0001 (0001)  0:**** xul!nsGlobalWindow::GetPrincipal+0x23


- call stacks 
00 00000094`affe79d0 00007ffb`399d51a8 xul!nsGlobalWindow::GetPrincipal+0x23 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4072]
01 00000094`affe7a30 00007ffb`399d20a6 xul!OldBindingConstructorEnabled+0x78 [z:\mozilla-release\dom\base\nsdomclassinfo.cpp @ 1582]
02 00000094`affe7a70 00007ffb`398919a2 xul!nsWindowSH::NameStructEnabled+0x66 [z:\mozilla-release\dom\base\nsdomclassinfo.cpp @ 1610]
03 00000094`affe7ab0 00007ffb`39f4e58f xul!nsGlobalWindow::GetOwnPropertyNames+0x172 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 5158]
04 00000094`affe7b80 00007ffb`3c7802b0 xul!mozilla::dom::WindowBinding::_enumerate+0x11f [z:\mozilla-release\obj-x86_64-pc-mingw32\dom\bindings\windowbinding.cpp @ 16615]
05 00000094`affe7c00 00007ffb`3c7962bb xul!EnumerateExtraProperties+0xa0 [z:\mozilla-release\js\src\jsiter.cpp @ 130]
06 00000094`affe7d10 00007ffb`3c786466 xul!Snapshot+0x20b [z:\mozilla-release\js\src\jsiter.cpp @ 367]
07 00000094`affe8010 00007ffb`3cb854bc xul!js::GetPropertyKeys+0x36 [z:\mozilla-release\js\src\jsiter.cpp @ 468]
08 00000094`affe8040 00007ffb`398b3a79 xul!js::Wrapper::ownPropertyKeys+0xac [z:\mozilla-release\js\src\proxy\wrapper.cpp @ 65]
09 00000094`affe80b0 00007ffb`3cb84272 xul!nsOuterWindowProxy::ownPropertyKeys+0x99 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 1268]
0a 00000094`affe8170 00007ffb`3c796599 xul!js::Proxy::ownPropertyKeys+0x102 [z:\mozilla-release\js\src\proxy\proxy.cpp @ 150]
0b 00000094`affe81f0 00007ffb`3c786466 xul!Snapshot+0x4e9 [z:\mozilla-release\js\src\jsiter.cpp @ 389]
0c 00000094`affe84f0 00007ffb`3c8f0448 xul!js::GetPropertyKeys+0x36 [z:\mozilla-release\js\src\jsiter.cpp @ 468]
0d 00000094`affe8520 00007ffb`3c8b8941 xul!js::DebuggerObject::getOwnPropertyNames+0xd8 [z:\mozilla-release\js\src\vm\debugger.cpp @ 10591]
0e 00000094`affe8650 00007ffb`3cb8cfe3 xul!js::DebuggerObject::getOwnPropertyNamesMethod+0x141 [z:\mozilla-release\js\src\vm\debugger.cpp @ 9711]
0f 00000094`affe8790 00007ffb`3cd69074 xul!js::CallJSNative+0x63 [z:\mozilla-release\js\src\jscntxtinlines.h @ 293]
10 00000094`affe87e0 00007ffb`3cd68d7d xul!js::InternalCallOrConstruct+0x2e4 [z:\mozilla-release\js\src\vm\interpreter.cpp @ 470]
11 00000094`affe88d0 00007ffb`3cd64075 xul!InternalCall+0x13d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 516]
12 00000094`affe8940 00007ffb`3cb7d43f xul!js::Call+0x55 [z:\mozilla-release\js\src\vm\interpreter.cpp @ 534]
13 00000094`affe8980 00007ffb`3cb6d39c xul!js::Wrapper::call+0x15f [z:\mozilla-release\js\src\proxy\wrapper.cpp @ 166]
14 00000094`affe8aa0 00007ffb`3cb7cc3d xul!js::CrossCompartmentWrapper::call+0x1bc [z:\mozilla-release\js\src\proxy\crosscompartmentwrapper.cpp @ 353]
15 00000094`affe8b50 00007ffb`3cb85c78 xul!js::Proxy::call+0xfd [z:\mozilla-release\js\src\proxy\proxy.cpp @ 479]
16 00000094`affe8bd0 00007ffb`3cb8cfe3 xul!js::proxy_Call+0x88 [z:\mozilla-release\js\src\proxy\proxy.cpp @ 739]
17 00000094`affe8c50 00007ffb`3cd68f1b xul!js::CallJSNative+0x63 [z:\mozilla-release\js\src\jscntxtinlines.h @ 293]
18 00000094`affe8ca0 00007ffb`3cd68d7d xul!js::InternalCallOrConstruct+0x18b [z:\mozilla-release\js\src\vm\interpreter.cpp @ 452]
19 00000094`affe8d90 00007ffb`3cd6418d xul!InternalCall+0x13d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 516]
1a 00000094`affe8e00 00007ffb`3cf17c57 xul!js::CallFromStack+0x1d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 522]
1b 00000094`affe8e30 00000157`e3286a2e xul!js::jit::DoCallFallback+0x5e7 [z:\mozilla-release\js\src\jit\baselineic.cpp @ 2453]


# Content process preference 
- The list of preference sent to the content process 
d:\mozilla-source\mozilla-release\dom\ipc\ContentPrefs.cpp


# file url access control 
- nsScriptSecurityManager.cpp 
const nsTArray<nsCOMPtr<nsIURI>>&
nsScriptSecurityManager::EnsureFileURIWhitelist()


# All the browser preferences location 
- reference 
d:\mozilla-source\mozilla-release\browser\components\preferences

in the XUL location 

D:\mozilla-source\mozilla-release\extensions\pref\autoconfig\src\prefcalls.js

# Performance measurement 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance


# Firefox telementry which is used to collect usage data for FF and send to mozilla 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Adding_a_new_Telemetry_probe
about:telementry

# Get firefox crash reports 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting
about:crashes


# Mozilla source tree documentation 
- reference 
https://firefox-source-docs.mozilla.org/


# Send a FF patch 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/How_to_Submit_a_Patch


# Editor configuration 
- reference 
https://developer.mozilla.org/en-US/docs/Developer_Guide/Editor_Configuration


# document to introduce hacking mozilla 
https://developer.mozilla.org/en-US/docs/Mozilla/An_introduction_to_hacking_Mozilla


# debug FF property, evaluate property value in windbg 
?? &((*(name.ptr))->d.inlineStorageLatin1)


# debug breakpoints 
- condition breakpoints 
.if(@@c++((*(name.ptr))->d.inlineStorageLatin1[0] == 'a'&& (*(name.ptr))->d.inlineStorageLatin1[1] == 'd' && (*(name.ptr))->d.inlineStorageLatin1[2] == 'd' && (*(name.ptr))->d.inlineStorageLatin1[3] == 'E')){.echo break when access addEventListener!!!;}.else{gc;}

    + new condition 
    
        * set breakpoint to 
4 e 00007ff9`aa2dfbc8 [z:\mozilla-release\js\src\jsobj.h @ 852]    0001 (0001)  0:**** xul!js::GetProperty+0x18 "$$<f:\\break.txt"

//reduce ambiguous
bp `jsobj.h:852` "$$<f:\\break.txt"

    
        * condition 
.if(@@c++((name->d).inlineStorageLatin1[0] == 'a'&& (name->d).inlineStorageLatin1[1] == 'd' && (name->d).inlineStorageLatin1[2] == 'd' && (name->d).inlineStorageLatin1[3] == 'E')){.echo break when access addEventListener!!!;}.else{gc;}

- breakpoints 
 0 d 00007ff9`aa2e750b     0001 (0001)  0:**** xul!js::LookupName+0x1b "$$<f:\\break.txt"
 1 d 00000000`00000000     0001 (0001)  0:**** 
 2 e 00007ff9`a6cd5898     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x258
 3 e 00007ff9`a6d43660     0001 (0001)  0:**** xul!xpc::SandboxProxyHandler::has+0x90
 4 e 00007ff9`a6cd577c     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x13c
 5 e 00007ff9`a6cd59a0     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x360
 9 d 00007ff9`a6ccf2b0     0001 (0001)  0:**** xul!xpc::XrayWrapper<js::CrossCompartmentWrapper,xpc::OpaqueXrayTraits>::get
10 d 00007ff9`a6d435d0     0001 (0001)  0:**** xul!xpc::SandboxProxyHandler::has

- find issue type is 
class xpc::XrayWrapper<js::CrossCompartmentWrapper,xpc::JSXrayTraits>

- get system principle from js 
let systemPrincipal = Cc["@mozilla.org/systemprincipal;1"]
    .createInstance(Ci.nsIPrincipal);
    
let sandbox = new Cu.Sandbox([content], {
      sandboxPrototype: content,
      sandboxName: "browser-api-execute-script",
      allowWaivers: true,
      wantXrays: true,
      sameZoneAs: content
    });
    
Services.scriptSecurityManager.getSystemPrincipal()

    let sandbox
      = Cu.Sandbox(CC("@mozilla.org/systemprincipal;1", "nsIPrincipal")(),
                   {wantGlobalProperties: ["indexedDB"]});
                   
CompartmentPrivateCompartmentPrivate* priv = CompartmentPrivate::Get(CurrentGlobalOrNull(cx));                   


# CSP string directives in content script 
- reference in source code 
D:\mozilla-source\mozilla-release\dom\security\nsCSPUtils.h

# FF security sandbox implementation location 
D:\mozilla-source\mozilla-release\security\sandbox


# FF SpiderMonkey JavaScript Engine API reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_reference

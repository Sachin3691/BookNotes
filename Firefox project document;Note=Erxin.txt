Firefox project document;Note=Erxin

# Mozilla document portal 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla

- create sandboxed http connection which don't affect the user's cookie 
https://developer.mozilla.org/en-US/docs/Mozilla/Creating_sandboxed_HTTP_connections

- debugging 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging

- Gecko, layout engine 
https://developer.mozilla.org/en-US/docs/Mozilla/Gecko


# Command line options 
https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options


# Getting involved with mozilla 
- reference 
https://www.joshmatthews.net/blog/2010/03/getting-involve-with-mozilla/


# Developer guide, contain all information for firefox developers 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide


# Build firefox for different versions 
- https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial


# Mozilla build reference 
https://wiki.mozilla.org/MozillaBuild


# How mozilla's build system works 
+ reference https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works
- mach build to build the tree is sufficient to work with the source tree 
- phases
    + system detection and validation
    + preparation of the build backend 
    + invokation of the build backend 
    
- phase 1, configure 
    + centers around the configure script generated configure.in which is written in M4(http://www.seindal.dk/rene/gnu/) and process using autoconfig 2.13(http://www.gnu.org/software/autoconf/) 
    
    + The primary output of the configure script is an executable file in the object directory called config.status. It is written in python instead of a normal shell script 
    
- phase2, build backend preparation and the build definition 
config.status is charged with the task of tell a tool how to build the tree 

build system definition consist of various moz.build files in the tree 

- phase3, invokation of the build backend, make consuming makefiles. non-mkae build backends such as Tup or Visual studio 

The main moz.build file defines the tiers and directories in them. In reality, the main moz.build files includes other moz.build files such as /toolkit/toolkit.mozbuild

- recursive make backend 
Each tier consists of 3 sub-tiers: export, libs, and tools. This roughly correspond to the actions of pre-build, main-build, and post-build. 

- moz.build files 
moz.build files are how each part of the source tree defines how it is integrated with the build system.
    
An individual moz.build file is actually a Python script. However, they are unlike most Python scripts you will ever see. The execution environment is highly controlled so moz.build files can only perform a limited set of operations

moz.build UPPERCASE Variables and Functions
sandbox.py contains code for a generic Python sandbox. 
reader.py contains the code that defines the actual moz.build sandbox

- build libraries 
    + components are shared libraries 
    + non component sahred libraries  such as libxpcom, libmozjs 
    + static libraries, used as intermediate steps to build a shared library 
    
    
# Configure build options 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options
- two types of options 
mk_add_options passed to client.mk 
ac_add_options passed to configure 



# Developer guide, all the required development document index 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

- view firefox source code online
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Viewing_and_searching_Mozilla_source_code_online

https://dxr.mozilla.org/mozilla-central/source/


# Source code directory structure 
- working with mozilla source code 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code

- update code 
$ hg pull -u

- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Directory_structure

- explains the folders which could not directly get the meaning from the names 
caps, capability-based web page security management 
chrome, chrome registry which seamonkey still uses rdf/chrome 
config, build relative 
docshell, main object managing things related to a document window. Each frame has its own docshell. it is the outermost layer of the embedding API used to embed a Gecko browser into an application 

dom, idl definitions of the interfaces defined
     connection between javascript and the implementation of DOM objects that are specific both to javascript and to DOM. binding between XPCOM and javascript live in js/src/xpconnect/ 
     implementation of a few of the core "DOM level 0" objects such as window, window navigator, window.location etc 
     
editor, html editor 
embedding, support embed Gecko in app 
extension, extend mozilla features 
extension/pref
gfx, interfaces that abstract the capability of platform specific graphics toolkits
gradle, related to JVM build system 
hal, platform specific functions such as sensor info, memory info, android alarm etc 
image, image render 
intl, l10n 
ipc, container for implementation of IPC 
js,  js/src, javascript engine known as SpiderMonkey 
     js/jsd, javascript debugging library 
     js/xpconnect/, support code for calling between js and cpp 
layout, render UI such as css xul etc 
media, sources of media libraries 
mfbt, impelmentation of weakptr 
mobile 
module, compression/archiving, math etc 
mozglue, low-level functionality including dynamic link for android, dll block list etc 
netwerk, networking library 
nsprpub, netscape portable runtime, abstraction layer to things like threads, file i/o, and socket 
parser, parse xml/html 
probes, related to dtrace 
python, cross module python code 
rdf, RDF handling APIs, Resource Description Framework (RDF) is a family of specifications for a metadata model that is often implemented as an application of XML
services, accounts and sync 
servo, parallel browser engine project, https://servo.org/; https://www.rust-lang.org/en-US/index.html
storage, xpcom wrapper for sqlite 
taskcluster, scripts and code to automatically build and test Mozilla trees for the continuous integration and release process 
testing, common testing tools for mozilla codebase 
third_party, vendored dependencies maintained outside of mozilla 
toolkit, shared with different products such as thunderbird etc. contains front-end components 
         toolkit/mozapps/extensions/test/xpinstall, contain codes to build xpi install 
tools, optionally build, used for debugging 
uriloader/prefetch, prefetch documents in order to have them cached for faster loading 
view, cross-platform painting, scrolling, event handling, z-ordering, and opacity will be obsolete 
widget, operation system specific widget 
xpcom
xpfe, cross platform front end, the seamonkey frontend, contains the xul files for the browser interface, common files used by the other parts of the mozilla suite. XBL files for the parts of the XUL language 


# Firefox project policies settings 
http://www-archive.mozilla.org/projects/security/components/ConfigPolicy.html


# Firefox irc channel 
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Getting_Started_with_IRC
https://wiki.mozilla.org/IRC


# Firefox enable file url access
user_pref("capability.policy.policynames", "localfilelinks");
user_pref("capability.policy.localfilelinks.sites", "http://www.example.com");
user_pref("capability.policy.localfilelinks.checkloaduri.enabled", "allAccess");

http://kb.mozillazine.org/Links_to_local_pages_do_not_work
https://stackoverflow.com/questions/5317834/workaround-for-href-file-in-firefox


# Decode *.rsa file for firefox extension
- with python 3.5 install pyasn1 library 
>>> from pyasn1.codec.der import decoder
>>> buf = open(r'path-to-*.rsa', 'rb').read()
>>> decoder.decode(buf)

https://www.di-mgt.com.au/how-mozilla-signs-addons.html


# Firefox official build download 
http://ftp.mozilla.org/pub/firefox/tinderbox-builds/
http://ftp.mozilla.org/pub/firefox/


# Using the mozilla symbol server 
https://developer.mozilla.org/en-US/docs/Mozilla/Using_the_Mozilla_symbol_server
- download symbol with windbg 
SRV*c:\symcache\*http://msdl.microsoft.com/download/symbols;SRV*c:\symcache\*https://symbols.mozilla.org/


# Understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports


# Firefox enable legacy extension by 
about:config -> extensions.legacy.enabled -> true


# DOM VK event list
https://www.w3.org/TR/2000/WD-DOM-Level-3-Events-20000901/events.html


# Firefox cross domain issue 
- nsnetutil.cpp 
NS_HasBeenCrossOrigin


- nscontentsecuritymanager.cpp 
rv = CheckCHannel(aChannel); 
doContentSecurityCheck+0x86


# Firefox crash 
- file xmlhttprequestmainthread.cpp 
xul!mozilla::dom::XMLHttpRequestMainThread::DispatchToMainThread

- debug minidump 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_a_minidump

- understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports


# Contribute to Firefox project 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Introduction

good search tasks portal for different skills 
https://codetribute.mozilla.org/


# Firefox developer tool 
http://firefox-dev.tools/


# Firefox javascript engine spider monkey 
- spidermonkey 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey

- gc rooting guide 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/GC_Rooting_Guide

- hacking tips 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips


# Firefox developer tools document including debugger API for client and server 
http://docs.firefox-dev.tools/


# script security checks 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Gecko/Script_security#Security_checks
https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy

- frame script 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Frame_script_environment

- compartment, Gecko guarantees that JavaScript code running in a given compartment is only allowed to access objects in the same compartment. When code from compartment A tries to access an object in compartment B, Gecko gives it a cross-compartment wrapper.

- Whenever cross-compartment access happens, the wrappers enable us to implement the appropriate security policy. Because the wrapper we choose is specific to the relationship between the two compartments, the security policy it implements can be static: when the caller uses the wrapper

- cross process object wrapper 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Cross_Process_Object_Wrappers

- message manager 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Message_Manager/Message_manager_overview


# Mozilla build system introduction 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works

- configure.in, is written in M4. (http://www.seindal.dk/rene/gnu/) uasing autoconfig 2.13 to create configure script 

config.status of mozilla is written in python not bash 
    data structure contains output of configure 
    backend is a tool used to build the tree. 
    
- phases 
system detection and validation 
preparation of build backend 
invocation of build backend 
    + phase 1, configure with confg.status 
    + phase 2 build backend and build definition with moz.build 
    + phase 3 invocation of the build backend 
    
- recursive make backend is the tried-and-true backend used to build the tree  

- moz.build file variable and functions 
https://hg.mozilla.org/mozilla-central/file/default/python/mozbuild/mozbuild/frontend/context.py

- build with debug symbol 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Building_Firefox_with_Debug_Symbols


# XUL interface 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/XUL_Reference

- browser 
gBrowser.selectedBrowser is a browser object 
    
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/browser
    

# Firefox webextension implementation path in the repository 
..\mozilla-release\toolkit\components\extensions  
..\mozilla-release\browser\components\extensions\ext-windows.js  


# Webdriver base API implementation location 
d:\mozilla-source\mozilla-release\testing\marionette


# Document for marionette
https://firefox-source-docs.mozilla.org/testing/marionette/marionette/index.html


# JavaScript compartment
- spider monkey compartments 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Compartments

An object in one compartment cannot touch an object in another compartment, except through a cross-compartment wrapper.

SpiderMonkey tracks the creation of these cross-compartment wrappers and thus it knows at all times what objects from a compartment are kept alive by outside references 


# Firefox browser startup process 
- call stacks 
ntdll!NtWaitForAlertByThreadId+0x14
ntdll!RtlSleepConditionVariableSRW+0xf9
KERNELBASE!SleepConditionVariableSRW+0x28
mozglue!mozilla::detail::ConditionVariableImpl::wait+0x3e [z:\mozilla-release\mozglue\misc\conditionvariable_windows.cpp @ 58]
xul!mozilla::CondVar::Wait+0x38 [z:\mozilla-release\obj-x86_64-pc-mingw32\dist\include\mozilla\condvar.h @ 69]
xul!mozilla::Monitor::Wait+0x22 [z:\mozilla-release\obj-x86_64-pc-mingw32\dist\include\mozilla\monitor.h @ 41]
xul!mozilla::ipc::MessageChannel::WaitForSyncNotify+0x10a [z:\mozilla-release\ipc\glue\windowsmessageloop.cpp @ 1047]
xul!mozilla::ipc::MessageChannel::Send+0xb7f [z:\mozilla-release\ipc\glue\messagechannel.cpp @ 1466]
xul!mozilla::layers::PAPZCTreeManagerChild::SendTransformEventRefPoint+0x173 [z:\mozilla-release\obj-x86_64-pc-mingw32\ipc\ipdl\papzctreemanagerchild.cpp @ 838]
xul!mozilla::layers::APZCTreeManagerChild::TransformEventRefPoint+0x33 [z:\mozilla-release\gfx\layers\ipc\apzctreemanagerchild.cpp @ 215]
xul!mozilla::layers::IAPZCTreeManager::ReceiveInputEvent+0x650 [z:\mozilla-release\gfx\layers\apz\public\iapzctreemanager.cpp @ 154]
xul!nsBaseWidget::DispatchInputEvent+0x8b [z:\mozilla-release\widget\nsbasewidget.cpp @ 1171]
xul!mozilla::widget::TextEventDispatcher::DispatchInputEvent+0x8b [z:\mozilla-release\widget\texteventdispatcher.cpp @ 214]
xul!mozilla::widget::TextEventDispatcher::DispatchKeyboardEventInternal+0x48b [z:\mozilla-release\widget\texteventdispatcher.cpp @ 593]
xul!mozilla::widget::TextEventDispatcher::DispatchKeyboardEvent+0x48 [z:\mozilla-release\widget\texteventdispatcher.cpp @ 450]
xul!mozilla::widget::NativeKey::HandleKeyDownMessage+0x4a9 [z:\mozilla-release\widget\windows\keyboardlayout.cpp @ 2327]
xul!nsWindow::ProcessKeyDownMessage+0x8f [z:\mozilla-release\widget\windows\nswindow.cpp @ 6432]
xul!nsWindow::ProcessMessage+0x13a4 [z:\mozilla-release\widget\windows\nswindow.cpp @ 5470]
xul!nsWindow::WindowProcInternal+0x1f9 [z:\mozilla-release\widget\windows\nswindow.cpp @ 4933]
xul!CallWindowProcCrashProtected+0x2f [z:\mozilla-release\xpcom\base\nscrashonexception.cpp @ 35]
xul!nsWindow::WindowProc+0x51 [z:\mozilla-release\widget\windows\nswindow.cpp @ 4886]
USER32!UserCallWinProcCheckWow+0x280
USER32!DispatchMessageWorker+0x19f
xul!nsAppShell::ProcessNextNativeEvent+0x1a7 [z:\mozilla-release\widget\windows\nsappshell.cpp @ 394]
xul!nsBaseAppShell::DoProcessNextNativeEvent+0x44 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 138]
xul!nsBaseAppShell::OnProcessNextEvent+0x1c7 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 289]
xul!nsThread::ProcessNextEvent+0x23f [z:\mozilla-release\xpcom\threads\nsthread.cpp @ 1359]
xul!NS_ProcessNextEvent+0x5a [z:\mozilla-release\xpcom\threads\nsthreadutils.cpp @ 475]
xul!mozilla::ipc::MessagePump::Run+0x1e7 [z:\mozilla-release\ipc\glue\messagepump.cpp @ 125]
xul!MessageLoop::RunInternal+0x3d [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 239]
xul!MessageLoop::RunHandler+0x3b [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 232]
xul!MessageLoop::Run+0x22 [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 212]
xul!nsBaseAppShell::Run+0x49 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 158]
xul!nsAppShell::Run+0x29 [z:\mozilla-release\widget\windows\nsappshell.cpp @ 271]
xul!nsAppStartup::Run+0x56 [z:\mozilla-release\toolkit\components\startup\nsappstartup.cpp @ 283]
xul!XREMain::XRE_mainRun+0x15c1 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4567]
xul!XREMain::XRE_main+0xb40 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4747]
xul!XRE_main+0x52 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4842]
xul!mozilla::BootstrapImpl::XRE_main+0x2a [z:\mozilla-release\toolkit\xre\bootstrap.cpp @ 46]
firefox!do_main+0x31d [z:\mozilla-release\browser\app\nsbrowserapp.cpp @ 237]
firefox!NS_internal_main+0x1fe [z:\mozilla-release\browser\app\nsbrowserapp.cpp @ 309]
firefox!wmain+0x1b7 [z:\mozilla-release\toolkit\xre\nswindowswmain.cpp @ 115]
firefox!invoke_main+0x22 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 90]
firefox!__scrt_common_main_seh+0x11d [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 283]
KERNEL32!BaseThreadInitThunk+0x14
ntdll!RtlUserThreadStart+0x21

- app startup idl definition 
d:\mozilla-source\mozilla-release\toolkit\components\startup

- start up folder 
d:\mozilla-source\mozilla-release\toolkit\xre
XUL Runtime Environment


# Change firefox execute mode 
- multiprocess 
const char* kAccessibilityLastRunDatePref = "accessibility.lastLoadDate";
const char* kAccessibilityLoadedLastSessionPref = "accessibility.loadedInLastSession";

set the value to recent 7 days accessibility.lastLoadDate

const char* kForceEnableE10sPref = "browser.tabs.remote.force-enable";
const char* kForceDisableE10sPref = "browser.tabs.remote.force-disable";

bool optInPref = Preferences::GetBool("browser.tabs.remote.autostart", false);
bool trialPref = Preferences::GetBool("browser.tabs.remote.autostart.2", false);
bool prefEnabled = optInPref || trialPref;
int status;
if (optInPref) {
    status = kE10sEnabledByUser;
} else if (trialPref) {
    status = kE10sEnabledByDefault;
} else {
    status = kE10sDisabledByUser;
}
- e10s 
https://wiki.mozilla.org/Electrolysis


# Open Firefox trouble shooting page 
- about:support 


# RAII-style class for make sure release the mutex 
https://gist.github.com/trojanfoe/7134404


# Headless mode Firefox 
- example 
https://github.com/mdn/headless-examples

- articles 
https://intoli.com/blog/running-selenium-with-headless-firefox/

- doc 
https://developer.mozilla.org/en-US/Firefox/Headless_mode

- add environment variable 
MOZ_HEADLESS set to 1 or true 

- add command line argument -headless 


# Firefox get scriptable top 
- nsGlobalWindow.cpp 
nsPIDOMWindowOuter*
nsGlobalWindow::GetScriptableTop()


# cross domain breakpoint settings window.frames[0].addEventListener 
- check window 
 1 e 00007ffb`3988db6e [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 5035]    0001 (0001)  0:**** xul!nsGlobalWindow::GetFrames+0xe
 2 e 00007ffb`3987ce58 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 10370]    0001 (0001)  0:**** xul!nsGlobalWindow::AddEventListener+0x18
 3 e 00007ffb`39319af8 [z:\mozilla-release\caps\nsscriptsecuritymanager.cpp @ 509]    0001 (0001)  0:**** xul!nsScriptSecurityManager::CheckSameOriginURI+0x18
 4 e 00007ffb`39892360 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4069]    0001 (0001)  0:**** xul!nsGlobalWindow::GetPrincipal
 5 e 00007ffb`3c17604a [z:\mozilla-release\docshell\base\nsdocshell.cpp @ 13677]    0001 (0001)  0:**** xul!nsDocShell::GetTopFrameElement+0x1a
 7 e 00007ffb`39892383 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4072]    0001 (0001)  0:**** xul!nsGlobalWindow::GetPrincipal+0x23


- call stacks 
00 00000094`affe79d0 00007ffb`399d51a8 xul!nsGlobalWindow::GetPrincipal+0x23 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4072]
01 00000094`affe7a30 00007ffb`399d20a6 xul!OldBindingConstructorEnabled+0x78 [z:\mozilla-release\dom\base\nsdomclassinfo.cpp @ 1582]
02 00000094`affe7a70 00007ffb`398919a2 xul!nsWindowSH::NameStructEnabled+0x66 [z:\mozilla-release\dom\base\nsdomclassinfo.cpp @ 1610]
03 00000094`affe7ab0 00007ffb`39f4e58f xul!nsGlobalWindow::GetOwnPropertyNames+0x172 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 5158]
04 00000094`affe7b80 00007ffb`3c7802b0 xul!mozilla::dom::WindowBinding::_enumerate+0x11f [z:\mozilla-release\obj-x86_64-pc-mingw32\dom\bindings\windowbinding.cpp @ 16615]
05 00000094`affe7c00 00007ffb`3c7962bb xul!EnumerateExtraProperties+0xa0 [z:\mozilla-release\js\src\jsiter.cpp @ 130]
06 00000094`affe7d10 00007ffb`3c786466 xul!Snapshot+0x20b [z:\mozilla-release\js\src\jsiter.cpp @ 367]
07 00000094`affe8010 00007ffb`3cb854bc xul!js::GetPropertyKeys+0x36 [z:\mozilla-release\js\src\jsiter.cpp @ 468]
08 00000094`affe8040 00007ffb`398b3a79 xul!js::Wrapper::ownPropertyKeys+0xac [z:\mozilla-release\js\src\proxy\wrapper.cpp @ 65]
09 00000094`affe80b0 00007ffb`3cb84272 xul!nsOuterWindowProxy::ownPropertyKeys+0x99 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 1268]
0a 00000094`affe8170 00007ffb`3c796599 xul!js::Proxy::ownPropertyKeys+0x102 [z:\mozilla-release\js\src\proxy\proxy.cpp @ 150]
0b 00000094`affe81f0 00007ffb`3c786466 xul!Snapshot+0x4e9 [z:\mozilla-release\js\src\jsiter.cpp @ 389]
0c 00000094`affe84f0 00007ffb`3c8f0448 xul!js::GetPropertyKeys+0x36 [z:\mozilla-release\js\src\jsiter.cpp @ 468]
0d 00000094`affe8520 00007ffb`3c8b8941 xul!js::DebuggerObject::getOwnPropertyNames+0xd8 [z:\mozilla-release\js\src\vm\debugger.cpp @ 10591]
0e 00000094`affe8650 00007ffb`3cb8cfe3 xul!js::DebuggerObject::getOwnPropertyNamesMethod+0x141 [z:\mozilla-release\js\src\vm\debugger.cpp @ 9711]
0f 00000094`affe8790 00007ffb`3cd69074 xul!js::CallJSNative+0x63 [z:\mozilla-release\js\src\jscntxtinlines.h @ 293]
10 00000094`affe87e0 00007ffb`3cd68d7d xul!js::InternalCallOrConstruct+0x2e4 [z:\mozilla-release\js\src\vm\interpreter.cpp @ 470]
11 00000094`affe88d0 00007ffb`3cd64075 xul!InternalCall+0x13d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 516]
12 00000094`affe8940 00007ffb`3cb7d43f xul!js::Call+0x55 [z:\mozilla-release\js\src\vm\interpreter.cpp @ 534]
13 00000094`affe8980 00007ffb`3cb6d39c xul!js::Wrapper::call+0x15f [z:\mozilla-release\js\src\proxy\wrapper.cpp @ 166]
14 00000094`affe8aa0 00007ffb`3cb7cc3d xul!js::CrossCompartmentWrapper::call+0x1bc [z:\mozilla-release\js\src\proxy\crosscompartmentwrapper.cpp @ 353]
15 00000094`affe8b50 00007ffb`3cb85c78 xul!js::Proxy::call+0xfd [z:\mozilla-release\js\src\proxy\proxy.cpp @ 479]
16 00000094`affe8bd0 00007ffb`3cb8cfe3 xul!js::proxy_Call+0x88 [z:\mozilla-release\js\src\proxy\proxy.cpp @ 739]
17 00000094`affe8c50 00007ffb`3cd68f1b xul!js::CallJSNative+0x63 [z:\mozilla-release\js\src\jscntxtinlines.h @ 293]
18 00000094`affe8ca0 00007ffb`3cd68d7d xul!js::InternalCallOrConstruct+0x18b [z:\mozilla-release\js\src\vm\interpreter.cpp @ 452]
19 00000094`affe8d90 00007ffb`3cd6418d xul!InternalCall+0x13d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 516]
1a 00000094`affe8e00 00007ffb`3cf17c57 xul!js::CallFromStack+0x1d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 522]
1b 00000094`affe8e30 00000157`e3286a2e xul!js::jit::DoCallFallback+0x5e7 [z:\mozilla-release\js\src\jit\baselineic.cpp @ 2453]


# Content process preference 
- The list of preference sent to the content process 
d:\mozilla-source\mozilla-release\dom\ipc\ContentPrefs.cpp
D:\mozilla-source\mozilla-release\modules\libpref\prefapi.cpp


# file url access control 
- nsScriptSecurityManager.cpp 
const nsTArray<nsCOMPtr<nsIURI>>&
nsScriptSecurityManager::EnsureFileURIWhitelist()


# All the browser preferences location 
- reference 
d:\mozilla-source\mozilla-release\browser\components\preferences

in the XUL location 

D:\mozilla-source\mozilla-release\extensions\pref\autoconfig\src\prefcalls.js


# Performance measurement 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance
- profiler 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Reporting_a_Performance_Problem

    + setup profiler extension 
    https://perf-html.io/
    
    + capture and share a profile 



# Firefox telementry which is used to collect usage data for FF and send to mozilla 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Adding_a_new_Telemetry_probe
about:telementry


# Get firefox crash reports 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting
about:crashes


# Mozilla source tree documentation 
- reference 
https://firefox-source-docs.mozilla.org/


# Send a FF patch 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/How_to_Submit_a_Patch


# Editor configuration 
- reference 
https://developer.mozilla.org/en-US/docs/Developer_Guide/Editor_Configuration


# document to introduce hacking mozilla 
https://developer.mozilla.org/en-US/docs/Mozilla/An_introduction_to_hacking_Mozilla


# debug FF property, evaluate property value in windbg 
?? &((*(name.ptr))->d.inlineStorageLatin1)


# debug breakpoints 
- condition breakpoints 
.if(@@c++((*(name.ptr))->d.inlineStorageLatin1[0] == 'a'&& (*(name.ptr))->d.inlineStorageLatin1[1] == 'd' && (*(name.ptr))->d.inlineStorageLatin1[2] == 'd' && (*(name.ptr))->d.inlineStorageLatin1[3] == 'E')){.echo break when access addEventListener!!!;}.else{gc;}

    + new condition 
    
        * set breakpoint to 
4 e 00007ff9`aa2dfbc8 [z:\mozilla-release\js\src\jsobj.h @ 852]    0001 (0001)  0:**** xul!js::GetProperty+0x18 "$$<f:\\break.txt"

//reduce ambiguous
bp `jsobj.h:852` "$$<f:\\break.txt"

    
        * condition 
.if(@@c++((name->d).inlineStorageLatin1[0] == 'a'&& (name->d).inlineStorageLatin1[1] == 'd' && (name->d).inlineStorageLatin1[2] == 'd' && (name->d).inlineStorageLatin1[3] == 'E')){.echo break when access addEventListener!!!;}.else{gc;}

- breakpoints 
 0 d 00007ff9`aa2e750b     0001 (0001)  0:**** xul!js::LookupName+0x1b "$$<f:\\break.txt"
 1 d 00000000`00000000     0001 (0001)  0:**** 
 2 e 00007ff9`a6cd5898     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x258
 3 e 00007ff9`a6d43660     0001 (0001)  0:**** xul!xpc::SandboxProxyHandler::has+0x90
 4 e 00007ff9`a6cd577c     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x13c
 5 e 00007ff9`a6cd59a0     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x360
 9 d 00007ff9`a6ccf2b0     0001 (0001)  0:**** xul!xpc::XrayWrapper<js::CrossCompartmentWrapper,xpc::OpaqueXrayTraits>::get
10 d 00007ff9`a6d435d0     0001 (0001)  0:**** xul!xpc::SandboxProxyHandler::has

- find issue type is 
class xpc::XrayWrapper<js::CrossCompartmentWrapper,xpc::JSXrayTraits>

- get system principle from js 
let systemPrincipal = Cc["@mozilla.org/systemprincipal;1"]
    .createInstance(Ci.nsIPrincipal);
    
let sandbox = new Cu.Sandbox([content], {
      sandboxPrototype: content,
      sandboxName: "browser-api-execute-script",
      allowWaivers: true,
      wantXrays: true,
      sameZoneAs: content
    });
    
Services.scriptSecurityManager.getSystemPrincipal()

    let sandbox
      = Cu.Sandbox(CC("@mozilla.org/systemprincipal;1", "nsIPrincipal")(),
                   {wantGlobalProperties: ["indexedDB"]});
                   
CompartmentPrivateCompartmentPrivate* priv = CompartmentPrivate::Get(CurrentGlobalOrNull(cx));                   


# CSP string directives in content script 
- reference in source code 
D:\mozilla-source\mozilla-release\dom\security\nsCSPUtils.h


# FF security sandbox implementation location 
D:\mozilla-source\mozilla-release\security\sandbox


# FF SpiderMonkey JavaScript Engine API reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_reference


# Mozilla test codebase 
D:\mozilla-source\mozilla-release\testing


# Mozilla fundamental types 
D:\mozilla-source\mozilla-release\mfbt


# Webdriver geckodriver 
D:\mozilla-source\mozilla-release\testing\geckodriver


# preference all path 
- all preference setting location 
D:\mozilla-source\mozilla-release\modules\libpref\init\all.js
D:\mozilla-source\mozilla-release\browser\app\profile\firefox.js

// Whether Xrays expose properties from the named properties object (aka global
// scope polluter).  Values are:
//   0 = properties exposed on Xrays
//   1 = properties exposed on Xrays, except in web extension content scripts.
//   2 = properties not exposed on xrays
pref("dom.allow_named_properties_object_for_xrays", 1);

// Turn off interprocess security checks. Needed to run xpcshell tests.
pref("network.disable.ipc.security", false);

// Limit the absolute number of http connections.
// Note: the socket transport service will clamp the number below this if the OS
// cannot allocate that many FDs
#ifdef ANDROID
pref("network.http.max-connections", 256);
#else
pref("network.http.max-connections", 900);
#endif

// If NOT connecting via a proxy, then
// a new connection will only be attempted if the number of active persistent
// connections to the server is less then max-persistent-connections-per-server.
pref("network.http.max-persistent-connections-per-server", 6);

// Number of connections that we can open beyond the standard parallelism limit defined
// by max-persistent-connections-per-server/-proxy to handle urgent-start marked requests
pref("network.http.max-urgent-start-excessive-connections-per-host", 3);


# Multiple process Firefox overview 
- introduction 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox
    + message manager 
    + OMTC, off main thread compositing, use a place holder for help sharing the structure and share the big data in background with shared memory or GPU memory for rendering purpose 
    + CPOW 
    + frame script 
    + interprocess communication with chrome IPC libraries 
    + cross process API 

- reference 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Technical_overview


# Mozilla IPDL introduction 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/IPDL/Tutorial
- inter process communication protocol definition language 


# Mozilla Framework Based on Templates (MFBT)
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/MFBT

- the folder is mfbt/ in the source tree 
- Functionality 
    + types and type manipulation 
    StandardInteger.h, implements <stdint.h> 
    
    Types.h, includes StandardInteger.h and further provides size_t 
    
    CheckedInt.h implement checked integers, behave like integer but safely check for integer overflow and divide by zero 
    
    FloatingPoint.h, provide various operations for examining and working upon double precision floating point values 
    
    + Core 
    Types.h further provides macros to define imported and exported C symbols 
    
    Attributes.h implements various function and class attribute macros 
    
    Likely.h, provide MOZ_LIKELY and MOZ_UNLIKELY marcros to annotate conditions with their expected truthiness 
    
    - Util.h, implements various other bits of usefuly functionally. 
    
    - debugging 
    Assertions.h 
    GuardObjects.h 
    
    + Data structure 
    LinkedList.h 
    RangePtr.h 
    RefPtr.h 
    Scoped.h 
    ThreadLocal.h 

    
# JavaScript code module reference such as Services 
https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules


# ipdl tutorial which contain in mozilla source 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/IPDL/Tutorial

- introduction 
All messages for multi-process plugins and tabs in Firefox are declared in the IPDL language.

    + messages are sent between parent and a child end points, called actors. An IPDL protocol declares how actors communicate:
    
- parent/child actors 
                Parent              Child 
IPC tabs        chrome process      Content process 
IPC plugins     content process     plugin process

- The IPDL compiler generates several C++ headers from each IPDL protocol. This generated code manages the details of the underlying communication layer (sockets and pipes)

    + example 
async protocol PPlugin
{
//two message can be sent from the parent to the child 
child:
  Init(nsCString pluginPath);
  Shutdown();

//one method could be sent from the child to parent 
parent:
  Ready();
};

    + generated header content 
class PPluginParent
{
public:
  bool SendInit(const nsCString& pluginPath) {
    // generated code to send an Init() message
  }

  bool SendShutdown() {
    // generated code to send a Shutdown() message
  }

protected:
  /**
   * A subclass of PPluginParent must implement this method to handle the Ready() message.
   */
  bool RecvReady() = 0;
};

class PPluginChild
{
protected:
  bool RecvInit(const nsCString& pluginPath) = 0;
  bool RecvShutdown() = 0;

public:
  bool SendReady() {
    // generated code to send a Ready() message
  }
};
    + implement the parent 
class PluginChild : public PPluginChild
{
protected:
  void RecvInit(const nsCString& pluginPath) {
    mPluginLibrary = PR_LoadLibrary(pluginPath.get());
    SendReady();
  }
  void RecvShutdown() {
    PR_UnloadLibrary(mPluginLibrary);
  }

private:
  PRLibrary* mPluginLibrary;
};

- Because protocol messages are represented as C++ methods, it's easy to forget that they are in fact asynchronous messages: by default the C++ method will return immediately, before the message has been delivered.

- each message type includes a "direction" which specifies whether the message can be sent from parent to child, from child to parent or both ways 

child: from parent to child 
parent: from child to parent 
both: both way 

    + example 
// PDirection.ipdl
async protocol PDirection
{
child:
  Foo();  // can be sent from-parent-to-child
parent:
  Bar();  // can be sent from-child-to-parent
both:
  Baz();  // can be sent both ways
};

- parameters, Message declarations allow any number of parameters. Parameters specify data that are sent with the message. Their values are serialized by the sender and deserialized by the receiver

- custom primitive types, When you need to send data of a type other than one built into IPDL, you can add a using declaration in an IPDL specification.
using mozilla::plugins::NPRemoteEvent;

sync protocol PPluginInstance
{
child:
  HandleEvent(NPRemoteEvent);
};

- unions
    + support declaring discriminated unions 
using struct mozilla::void_t from "ipc/IPCMessageUtils.h";

union Variant
{
  void_t;
  bool;
  int;
  double;
  nsCString;
  PPluginScriptableObject;
};

    + will generated 
struct Variant
{
  enum Type {
    Tvoid_t, Tbool, Tint, Tdouble, TnsCString, TPPlugionScriptableObject
  };
  Type type();
  void_t& get_void_t();
  bool& get_bool();
  int& get_int();
  double& get_double();
  nsCString& get_nsCString();
  PPluginScriptableObject* get_PPluginScriptableObject();
};

- structs 
- array 
- synchronous and RPC messaging 
But what if we wanted to wait until the message was handled, or get return values from a message?

In IPDL, there are three different semantics:
1.asynchronous semantics; the sender is not blocked.
2.Wait until the receiver acknowledges that it received the message. We call this synchronous semantics, as the sender blocks until the receiver receives the message and sends back a reply. The message may have return values.
3.rpc semantics are a variation on synchronous semantics, see below.

protocol PPluginInstance
{
child:
    sync Init() returns (bool windowless, bool ok);
};

    + the C++ method names for synchronous and RPC messages are different
            sender              receiver 
async/sync  SendMessageName     RecvMessageName 
rpc         CallMessageName     AnswerMessageName 

- message semantics strength, sync is stronger than async 
sync protocol xx
{
}

- "RPC" stands for "remote procedure call," and this third semantics models procedure call semantics. A quick summary of the difference between RPC and sync semantics is that RPC allows "re-entrant" message handlers

    + example,  "CallMeCallYou()" RPC interface, and the parent offers a "CallYou()" RPC interface. The rpc qualifiers mean that if the parent calls "CallMeCallYou()" on the child actor, then the child actor, while servicing this call, is allowed to call back into the parent actor's "CallYou()" message.
    
rpc protocol Example {
child:
    rpc CallMeCallYou() returns (int rv);

parent:
    rpc CallYou() returns (int rv);
};

Please don't use RPC semantics. RPC semantics exists mainly to support remoting plugins (NPAPI), where we have no choice.

Chrome to content calls (for IPC tabs) must only use async semantics

- Message delivery order, Delivery is "in-order", that is, messages are delivered to the receiver in the order that they are sent, regardless of the messages' semantics

- A sub-protocol is bound to a "manager" which tracks its lifetime and acts as a factory. A protocol hierarchy begins with a single top-level protocol from which all subprotocol actors are eventually created. In Mozilla there are two main top-level protocols: 

PPluginModule for remote plugins 
PContent for remote tabs.

    + example extends the toplevel plugin protocol to manage plugin instances.
include protocol PPluginInstance;

rpc protocol PPlugin
{
    manages PPluginInstance;
child:
    rpc Init(nsCString pluginPath) returns (bool ok);
    rpc PPluginInstance(nsCString type, nsCString[] args) returns (int rv);
};

// ----- file PPluginInstance.ipdl

include protocol PPlugin;

rpc protocol PPluginInstance
{
    manager PPlugin;
child:
    rpc __delete__();
    SetSize(int width, int height);
};
    
__delete__ is a built-in construct, and is the only IPDL message which does not require an overridden implementation 

AllocPProtocol and DeallocPProtocol are a matched pair of functions. The typical implementation of these functions uses `new` and `delete

    + sub protocol deletion
// --- PExample.ipdl
include protocol PSubExample;

async protocol PExample
{
    manages PSubExample;

parent:
    PChild();
};

// --- PSubExample.ipdl
include protocol PExample;

async protocol PSubExample
{
    manager PExample;

child:
    __delete__();
};

//call 
aPSubExampleParent->Send__delete__();

//will trigger 
PSubExampleParent::ActorDestroy(Deletion)
/* Deletion is an enumerated value indicating
   that the destruction was intentional */
PExampleParent::DeallocPSubExample()1234
PSubExampleChild::Recv__delete__()
PSubExampleChild::ActorDestroy(Deletion)
PExampleChild::DeallocPSubExample()

- [not completed]


# Firefox tab container 
- introduction 
https://www.ghacks.net/2016/06/15/firefox-container-tab/
- wiki 
https://wiki.mozilla.org/Security/Contextual_Identity_Project/Containers
- support document 
https://support.mozilla.org/en-US/kb/containers


# Record and replay Firefox bugs 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Record_and_Replay_Debugging_Firefox
https://rr-project.org/


# Principals
- Create system principal in JS 
CC("@mozilla.org/systemprincipal;1", "nsIPrincipal")()
- waive xray 
Cu.waiveXrays(Cu.Sandbox(null).eval(`
    Object.defineProperty({}, "bar", {
      get: function() { return "bar"; },
      configurable: true,
      enumerable: true
    });
  `));
  
var sb = cu.Sandbox(["http://www.example.com",
                     "http://localhost:4444/redirect",
                     "http://localhost:4444/simple",
                     "http://localhost:4446/redirect"],


# Add log to webextension implementation 
Components.utils.import("resource://gre/modules/Log.jsm");
let log = Log.repository.getLogger("TruClient.Debug");
log.level = Log.Level.Debug;
log.addAppender(new Log.ConsoleAppender(new Log.BasicFormatter()));
let _info = log.info;
let _error = log.error;
log.info = (...args)=>{
  _info.call(log, '[truclient.ext] ', ...args);
};
log.error = (...args)=>{
  _error.call(log, '[truclient.ext]', ...args);
};


# Firefox source code search tool DXR 
- reference 
https://dxr.readthedocs.io/en/latest/use.html#highlighting

- Getting started
    + get the source 
    + if your project is implemented with compiled language, tell DXR how to build it 
    + run 
    $ dxr index 
    to index your code 
    + run 
    $ dxr serve 
    to present a web-based search interface 
    
- download dxr 
git clone https://github.com/mozilla/dxr.git

- booting and building 
    + using homebrw pacakage manager like mac, run dxr on virtualbox, install docker; docker-compose; and. <--and is a tool name 
    
    + on mac 
    $ brew install docker docker-compose docker-machine
    
    + on linux 
    $ docker-machine create --driver virtualbox --virtualbox-disk-size 50000 --virtualbox-cpu-count 2 --virtualbox-memory 512 default
    eval "$(docker-machine env default)"
    
    $ docker-machine start default 
    $ eval "$(docker-machine env default)"
    
    $ make docker_stop 
    $ make shell 
    $ make test 
    
- configuration 
...
- Deployment
- Use 
    + using keyword search. In Firefox and mozilla suite you specify keywords for bookmarks by filling in the "keyword" field in bookmark's properties 
    
    replace the keyword to url 
    
    http://kb.mozillazine.org/Using_keyword_searches
    
    default keywords 
    google 
    quote, dictionary.com 
    wp, wikipedia 
    slang, urban dictionary 
    ::, mozillaZineKB
    
    add a bookmark name and keyword.

    You can also create it manually:

    Do a search on the site you want to add a quicksearch to.
    Bookmark the page you are brought to (the results page).
    Open the Properties dialog for your new bookmark.
    In your bookmark’s URL (the Location field), find and replace what you searched for with %s (If it does not appear, you cannot use a quicksearch here)
    Add a keyword
    Difference between (small s) %s and (Capital S) %S

    (small s): %s will have additional substitution replacements: # by %23, % by %25, / by %2F, and @ by %40.
    (Capital S): %S will not have substitutions and allow use of C++ in a Google search, allow use of @ in an email substitution, allow use of a fragment-id in a url substitution index.html#example2, and use of a directory as in code/example2.txt.
    
    + querying
    filtered terms are structured as <filter name>:<argument>
    callers:frobulate 
    var:num_caribou 
    
    Text terms: just bare text and do simple substring match 
    hello 
    three independent words 
    
    + quoting, singles can contain doubles, doubles can contain singles 
    a phrase with a space: "hello, world"
    quotes in a plain text search, taken as literals since they're not leading: id="whatShouldIDoContent"
    double quotes inside single quotes as a filter argument: regexp:'"wh(at|y)'
    Blackslash escaping "I don't \"belive\" in fairies"
    
    + highlighting 
    single click to select it 
    single click then shift click, to select range 
    control-or command click, add to the set of highlighted lines 
    control-or command then shift-click 
- Development 


# Firefox XBL scope 
- XBL scope 
a raw XBL scope object corresponding to contentScope, which must
 be an object whose global is a DOM window. It is not wrapped into cx->compartment, so be sure to enter its compartment before doing anything meaningful.

- reference 
D:\mozilla-source\mozilla-release\js\xpconnect\src\xpcpublic.h


# Exception capture points 
// All of the exceptions thrown into JS from this file go through here.
// That makes this a nice place to set a breakpoint.
D:\mozilla-source\mozilla-release\js\xpconnect\src\XPCWrappedNativeJSOps.cpp


# Firefox webextension webrequest relative APIs. We could also expose other http relative property for har file generation 
const OPTIONAL_PROPERTIES = [
  "requestHeaders", "responseHeaders", "statusCode", "statusLine", "error", "redirectUrl",
  "requestBody", "scheme", "realm", "isProxy", "challenger", "proxyInfo", "ip", "frameAncestors",
];


# Firefox about protocol 
https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/The_about_protocol    
    
    
# Execute mach bootstrap with error 
- message 

If filing a bug, please include the full output of mach, including this error
message.

The details of the failure are as follows:

CalledProcessError: Command '[u'c:\\Users\\shanger.CORPDOM\\.cargo\\bin\\rustc.exe', u'--version']' returned non-zero exit status 1

    + reason: rust execute error 
error: no default toolchain configured    
    
    + resolve, update rust configuration 
rustup install stable
rustup default stable


# Automatic test 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Automated_testing


# Firefox developer tools 
- reference 
https://docs.firefox-dev.tools/

- get a bugzilla account 
https://bugzilla.mozilla.org/

- install mercurial 
    + repo 
    https://hg.mozilla.org/mozilla-central/
    
    + install 
    mac install 
    $ brew install mercurial 
    
    linux 
    $ apt-get install mercurial 
    
- build and run locally 
    + build requirement reference 
    https://developer.mozilla.org/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build
    
    + download dependency 
$ mach bootstrap 

    + create .mozconfig file then 
$ mach configure 
$ mach build 

- run firefox 
$ mach run 

- rebuilding 
$ mach build faster 

to only build changed files 

    + start from scratch 
$ mach clobber 

add to .mozconfig to enable automatic clobber 
// Automatically clobber when an incremental build is not possible
mk_add_options AUTOCLOBBER=1

- build with artifact builds, if you don't change c/c++ code then you could use artifact build 
ac_add_options --enable-artifact-builds

mk_add_options MOZ_OBJDIR=./objdir-frontend
    
- modified JS file doesn't required build. just run 
$ mach run 
    
- setup development profile 
$ ./mach run -P development

- enable additional logging 
browser.dom.window.dump.enabled	true	Adds global dump function to log strings to stdout
devtools.console.stdout.chrome	true	Allows console API to write to stdout when used by chrome content
devtools.console.stdout.content	true	Allows console API to write to stdout when used by content
devtools.debugger.log (*)	true	Dump packets sent over remote debugging protocol to stdout.
devtools.dump.emit (*)	true	Log event notifications from the EventEmitter class
(found at devtools/shared/event-emitter.js).
    
- remote debugging protocol, RDP 
https://docs.firefox-dev.tools/backend/protocol.html

- source code search engine 
http://searchfox.org/mozilla-central/source (update frequently)
http://dxr.mozilla.org/mozilla-central/source/ (less often)
    
- investigating performance issues 
https://docs.firefox-dev.tools/contributing/performance.html
    + profile code 
    https://developer.mozilla.org/docs/Mozilla/Performance/Reporting_a_Performance_Problem
    
    profile document, https://perf-html.io/docs/#/
    
    project page, https://github.com/devtools-html/perf.html

- writing efficient react code 
https://docs.firefox-dev.tools/contributing/react-performance-tips.html

- always measure before optimizing 
https://docs.firefox-dev.tools/contributing/performance.html

- run tests 
./mach test devtools/path/to/test.js

 number of tests which are related to the bug you're fixing
 
./mach test devtools/path/to/test-thing-*.js

- install eslint 
./mach eslint setup 

- run performance tests 
./mach try -b o -p linux64 -u none -t damp-e10s --rebuild-talos 5 --artifact

- Frontend end 
    + panel svgs 
    + react 
    guidlines 
    + redux 
    guidlelines 
    + telemetry 
    
- backend 
    + remote debugging protocol 
    + client api 
    + debugger api 
    + backward compatibility 
    + actors 
    
- gitbook use markdown style to build document 
https://github.com/GitbookIO/gitbook


# Understand profiles, and profiling firefox 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Profiling_with_the_Built-in_Profiler#Understanding_Profiles
- profiling firefox startup and shutdown 
https://perf-html.io/docs/#/./guide-startup-shutdown


# Manually build symbols 
In the past you had to need to run mach build symbols manually


# Investigate website and browser performance 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance

- using xperf which is in MS performance toolkit to test firefox performance 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Profiling_with_Xperf


# Firefox project release note 
https://developer.mozilla.org/zh-CN/docs/Mozilla/Firefox/Releases/65


# Mozilla source tree document 
- reference 
https://firefox-source-docs.mozilla.org/index.html

- talos test 
https://wiki.mozilla.org/Performance_sheriffing/Talos/Tests
https://wiki.mozilla.org/Performance_sheriffing/Talos/Running


# Firefox built-in extension 
- saved location 
./browser/extensions 

devtools.aboutdebugging.showSystemAddons;false

- after build 
These get placed into the features directory of the application directory at build time.

- moz.build files 
As mentioned above, moz.build files are Python scripts. However, they are executed in a special Python sandbox

The execution sandbox treats all UPPERCASE variables specially. Any UPPERCASE variable must be known to the sandbox before the script executes.

the directory separate (UNIX-style paths) and * and ** used to denote wildcard matching

    + predefined symbols in the build file 
    https://firefox-source-docs.mozilla.org/build/buildsystem/mozbuild-symbols.html
    
    
# Web technology for developers 
- reference 
https://developer.mozilla.org/en-US/docs/Web

    + xpath 
    https://developer.mozilla.org/en-US/docs/Web/XPath
   
   
# Multiprocess Firefox 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Multiprocess_Firefox

- XPCOM 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide

- WebIDL 
https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings

- Security 
https://developer.mozilla.org/en-US/docs/Security/Firefox_Security_Basics_For_Developers

- WebExtension API documents in repo 
.\mozilla-release\toolkit\components\extensions\docs

reference document
https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/index.html

- New webextension API task list 
https://bugzilla.mozilla.org/buglist.cgi?bug_status=UNCONFIRMED&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED&product=WebExtensions&resolution=---&status_whiteboard=[design-decision-approved]&status_whiteboard_type=allwordssubstr

- cross process communication, requires parameters should support structured clone 
https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm


# WebExtension  API development 
- reference 
https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/index.html


# High level turn feature on and off 
- features gates 
https://firefox-source-docs.mozilla.org/toolkit/components/featuregates/featuregates/index.html

    
# Setup firefox debugging environment 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_Mozilla_with_gdb    


# Firefox create XPCOM 
- references 
http://www.iosart.com/firefox/xpcom/
https://developer.mozilla.org/zh-CN/docs/Mozilla/Tech/XPCOM

- python xpcom 
http://books.mozdev.org/html/mozilla-chp-8-sect-2.html

    + tell python where to find PyXPCOM library 
    http://pyxpcomext.mozdev.org/
    
    then you could import the xpcom from python 
    
    import xpcom 
    
    + defining the interface with *.idl 
    
    #include "nsISupports.idl"
    [scriptable, uuid(2b324e9d-a322-44a7-bd6e-0d8c83d94883)]
    interface nsIPySimple : nsISupports
    {
        attribute string yourName;
        void write( );
        void change(in string aValue);
    };
    
    + registering the interface. in the components directory execute 
    
    ../xpidl -m typelib -w -v -I /usr/share/idl/mozilla/ nsIPySimple.idl
    
    you must point to the idl directory as part of your mozilla build 
    
    xpidl.exe -m typelib -w -v -I C:\source\mozilla\obj-i686-pc-mingw32\dist\idl foo.idl
    
    xpidl will then create nsIPySimple.xpt, which should be placed correctly (e.g., in the 'components' directory).
    
    + implement the component with "py_simple.py"
    
    from xpcom import components, verbose

    class PySimple: #PythonTestComponent
        _com_interfaces_ = components.interfaces.nsIPySimple
        _reg_clsid_ = "{c456ceb5-f142-40a8-becc-764911bc8ca5}"
        _reg_contractid_ = "@mozilla.org/PySimple;1"
        def __init__(self):
            self.yourName = "a default name" # or mName ?

        def __del__(self):
            if verbose:
                print "PySimple: __del__ method called - object is destructing"

        def write(self):
            print self.yourName

        def change(self, newName):
            self.yourName = newName
    
    To register the component, touch the .autoreg (a hidden file) in the bin directory, or delete xpti.dat. Then, the next time Mozilla starts, it will rebuild the index of components, including any new one in the 'components' directory.
    
    + generate implementation templates from the *.xpt file. after register the interface we could use xpt.py to generate the template  
    $ cd c:\mozilla\bin\python\xpcom
    $ python xpt.py nsISample
    
    will 

- Creating Applications with Mozilla!
http://books.mozdev.org/html/
    + mozilla as a platform 
    + XUL 
    + CSS 
    + Packaging and Installing 
    + Extend the UI with XBL 
    + XPCOM 
    + XUL templates 
    + RDF, RDF tools and the content model 
    + localization 
    + remote applications 
    + getting and building the mozilla source 
    + development tools 
    + programmer's reference 
    + references 
    xul 
    name specification 
    examples 

- xptcall exists for two reasons:

To support invoking arbitrary methods on XPCOM interfaces.
To support dynamically impersonating any XPCOM interface.

- Create XPCOM with Visual Studio 

To make the project, you start with a standard multi-thread DLL project. Then make the following tweaks:

Add "..\gecko-sdk\include" to Additional Include Directories
Add "..\gecko-sdk\lib" to Additional Library Directories
Add "nspr4.lib xpcom.lib xpcomglue_s.lib" to Additional Dependencies
Add "XP_WIN;XP_WIN32″ to Preprocessor Definitions
Turn off precompiled headers (just to keep it simple)
Use a custom build step for the XPCOM IDL file (spawns xpidl-build.bat to process the IDL with Mozilla toolset, not MIDL)

    + XPCOM composed with 3 modules 
Component interface described using IDL. The interface defines the methods, including arguments and return types, of the component.

Component implementation using C++. The implementation is where the methods actually do the work.

Component factory module, also in C++. The factory is in charge of creating instances of the implementations.

    + generate a simple interface 
#include "nsISupports.idl"

[scriptable, uuid(263ed1ba-5cc1-11db-9673-00e08161165f)]
interface ISpecialThing : nsISupports
{
  attribute AString name;

  long add(in long a, in long b);
};

    + compile the IDL into a type-library (*.XPT) and a C++ header file (*.H),
{path_to_geckosdk}\bin\xpidl.exe -m header -I..\gecko-sdk\idl {your_idl_file}
{path_to_geckosdk}\bin\xpidl.exe -m typelib -I..\gecko-sdk\idl {your_idl_file}

    + header file 
```        
    #ifndef __SPECIALTHING_IMPL_H__
    #define __SPECIALTHING_IMPL_H__

    #include "comp.h"
    #include "nsStringAPI.h"

    #define SPECIALTHING_CONTRACTID "@starkravingfinkle.org/specialthing;1"
    #define SPECIALTHING_CLASSNAME "SpecialThing"
    #define SPECIALTHING_CID { 0x245626, 0x5cc1, 0x11db, { 0x96, 0x73, 0x0, 0xe0, 0x81, 0x61, 0x16, 0x5f } }

    class CSpecialThing : public ISpecialThing
    {
    public:
        NS_DECL_ISUPPORTS
        NS_DECL_ISPECIALTHING

        CSpecialThing();

    private:
        ~CSpecialThing();

    protected:
        /* additional members */
        nsString mName;
    };

    #endif

        + cpp file 
    #include "comp-impl.h"

    NS_IMPL_ISUPPORTS1(CSpecialThing, ISpecialThing)

    CSpecialThing::CSpecialThing()
    {
        /* member initializers and constructor code */
        mName.Assign(L"Default Name");
    }

    CSpecialThing::~CSpecialThing()
    {
        /* destructor code */
    }

    /* attribute AString name; */
    NS_IMETHODIMP CSpecialThing::GetName(nsAString & aName)
    {
        aName.Assign(mName);
        return NS_OK;
    }
    NS_IMETHODIMP CSpecialThing::SetName(const nsAString & aName)
    {
        mName.Assign(aName);
        return NS_OK;
    }

    /* long add (in long a, in long b); */
    NS_IMETHODIMP CSpecialThing::Add(PRInt32 a, PRInt32 b, PRInt32 *_retval)
    {
        *_retval = a + b;
        return NS_OK;
    }

        + create module file 
    #include "nsIGenericFactory.h"
    #include "comp-impl.h"

    NS_GENERIC_FACTORY_CONSTRUCTOR(CSpecialThing)

    static nsModuleComponentInfo components[] =
    {
        {
           SPECIALTHING_CLASSNAME, 
           SPECIALTHING_CID,
           SPECIALTHING_CONTRACTID,
           CSpecialThingConstructor,
        }
    };

    NS_IMPL_NSGETMODULE("SpecialThingsModule", components)

        + test component in XULRunner application 
    Install Component: Copy your XPT and DLL files to the {app}/components folder. You should not put your component in the xulrunner/components folder.

    Clear Registry: Increment the BuildID in your {app}/application.ini.

    Use in JavaScript:

    function doXPCOM() {
      try {
        const cid = "@starkravingfinkle.org/specialthing;1";
        var obj = Components.classes[cid].createInstance();
        obj = obj.QueryInterface(Components.interfaces.ISpecialThing);
      }
      catch (err) {
        alert(err);
        return;
      }

      var res = obj.add(3, 4);
      alert('3+4 = ' + res);
    }
```
    + references 
    https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/en/Creating_XPCOM_Components
    
- simple XPCOM tutorial 
https://www.codeproject.com/Articles/87465/A-Simple-XPCOM-Tutorial
https://www.codeproject.com/Articles/96796/Convert-Microsoft-COM-to-XPCOM
https://developer.mozilla.org/en-US/docs/Archive/Mozilla/Modularization_Techniques

- check XPCOM registration error 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Troubleshooting_XPCOM_components_registration
    
- pass an XPCOM object to a new window in the window creation method to let the window code call the methods of the object 

var ww = 
      Components.classes["@mozilla.org/embedcomp/window-watcher;1"].
            getService(Components.interfaces.nsIWindowWatcher);

var win = ww.openWindow(null,
      "chrome://myextension/content/debug.xul",
      "debug history", "chrome,centerscreen,resizable", myObject);

//access the object by 
window.arguments[] 

- Troubleshooting XPCOM components registration 
    + common reasons 
binary (shared library) fails to load. components that fail to load will print an error to the Error Console. Chrome errors must be enabled. NSPR logging API to display the error 

A JavaScript component has parsing errors

The shared library loaded correctly, but registration was not successful. verify by 
Error Console and evaluating Components.classes["contract-id"].name where contract-id is your contract ID

- create javascript callback in components
https://developer.mozilla.org/en-US/docs/Mozilla/Creating_JavaScript_callbacks_in_components


# NSPR, Netscape Portable Runtime(NSPR)
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSPR

- about NSPR, provides platform independence for non-GUI operating system facilities. These facilities include threads, thread synchronization, normal file and network I/O, interval timing and calendar time, basic memory management and shared library linking 

- XPConnect 
XPCOM is like COM, for Windows. It lets you get pointers to components inside Mozilla, and it lets you talk about their interfaces as well.

XPConnect is what lets JavaScript talk with Mozilla guts, the XPCOM system. You can imagine it like a bridge between JavaScript code, and Mozilla guts.

xpcshell is a command line interface to Mozilla JavaScript. It's an interactive interpreter -- it gives you a shell that talks straight to Mozilla


# Debugging JavaScript
- Check all the JavaScript errors and logs 
/path/to/firefox --jsconsole 

- browser debugger (built-in)
devtools.chrome.enabled: true
devtools.debugger.remote-enabled: true

disable the pop-up above with the devtools.debugger.prompt-connection set to false in about:config

- strict code checking 
pref javascript.options.strict to true, the JavaScript engine gives you more types of warnings on the Error Consol

- dump variable from addon code by import the console utility:

const { console } = Components.utils.import("resource://gre/modules/devtools/Console.jsm", {});

- The dump() function allows you to print text on the native console. Use \n to output a newline at the end.

$ firefox.exe -console

- scratchpad, has chrome privileges if devtools.chrome.enabled = true.

- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_JavaScript


# Debugging on Windows 
- Firefox, in general, and even in non-e10s mode, does not start the main process directly, it starts it via a Launcher Process. This means that Visual Studio will only attach to the first process it finds, and will not hit any break-point 

install microsoft child process debugging power tool extension from https://marketplace.visualstudio.com/items?itemName=vsdbgplat.MicrosoftChildProcessDebuggingPowerTool

$ ./mach run --debug 
from the same command line. it will open visual studio and then click "Start"

- if you have generated the Visual Studio solution, via ./mach build-backend -b VisualStudio

open the solution start run firefox with visual studio. a good way to debug startup issues

- attach the debugger to existing mozilla process, select Debug > Attach to Process. If you want to debug a content process, you can hover on the tab of page you want to debug, which would show the pid.

- debugging release and nightly builds using Mozilla symbol server and source server 

- VC++ 6.0: To change or set the executable to debug, go to Project > Settings..., Debug tab and select General from the drop down list. "Executable for debug session:" should show the executable you are debugging

- Setting breakpoints in DLLs which are not yet loaded in memory. 
Project > Settings..., Debug tab and select "Additional DLLs" from the drop down list. Check "Locate Additional DLLs" option. For each DLL, click the "New" button which creates a new entry and then hit the "..." buttons which lets you browse to the DLL

- Avoiding stepping into certain function, http://blogs.msdn.com/andypennell/archive/2004/02/06/69004.aspx
- Disable assertions, set XPCOM_DEBUG_BREAK=warn
- Changing running code 

It is possible to change the interrupt code in memory (which causes you to break into debugger) to be a NOP (no operation)

int 3

- running two instances of mozilla 
set MOZ_NO_REMOTE=1

- debugging optimized builds, make sure the configure parameter is set 
the parameter:  --enable-debugger-info-modules=yes

- console debugging 

- get crash report 
Windows : %APPDATA%\Mozilla\Firefox\Crash Reports\submitted\

- get stack trace with windbg 
https://developer.mozilla.org/en-US/docs/Mozilla/How_to_get_a_stacktrace_with_WinDbg


# Mozilla source tree document 
- reference 
https://firefox-source-docs.mozilla.org/index.html#


# Mozilla project modules ownership 
- reference 
https://wiki.mozilla.org/Modules/All#Document_Object_Model


# Debug firefox 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_on_Windows


# MIME types detection 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/How_Mozilla_determines_MIME_Types


# HTTP Cache 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/HTTP_cache

# Zombie compartments 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Zombie_compartments
- compartments 
https://andreasgal.com/2010/10/13/compartments/
    + originally firefox save all the JS objects into one heap 
    + new compartment design 
        * All objects created by a website reside within the same compartment and hence are located in the same memory region. improves cache utilization 
        
        * JavaScript objects (including JavaScript functions, which are objects as well) are only allowed to touch objects in the same compartment.
        
        * cross compartment boundaries. We call these objects cross compartment wrappers.
        
    + wrappers, In the past, when another window (or tab or iframe) tried to touch an object that belongs to a different window, we handed it a wrapper object instead.
    
    With compartments we can do a lot better:
        * let all objects within a compartment touch other objects in the same compartment without a wrapper in between.
        
        * a cross compartment wrapper, we consult with the wrapper factory to see what kind of security policy should be applied.
        
        * Outer inner window navigation. Whenever an outer window navigates, we copy it into the new destination compartment. The object in the old compartment is transformed into a cross compartment wrapper that points to the newly created object in the destination compartment. So the term brain transplants is very appropriate here. 
        
- With compartments cross origin websites can still communicate with each other with a small overhead (governed by certain cross origin access policy), while with processes cross-process JavaScript object access is either impossible or extremely expensive.

- Javascript garbage collection be able to do so in the background on a different thread for tabs with inactive content (i.e. no event handler is firing at the moment).

- If you want to see a list of live compartments, type "about:memory" into the address. js-main-runtime-compartments tree 

    + These kinds of compartments are created by Firefox 
js-compartment([System Principal], 0x7f10f1250000)
compartment(atoms)
js-compartment(about:home)
js-compartment(about:blank)
compartment([System Principal], resource://gre/modules/addons/XPIProvider.jsm)

    + the compartment will be continued used for the same url and the tail url may different 
    
    manually trigger GC minimize memory usage and remeasure in about:memory.  It might be worth refreshing multiple times just to be sure.
    
    + Restartless add-ons should also take special care that all their compartments get destroyed after disabling or uninstalling the add-on. (Please note that you may need to close the about:addons UI before changes are made)
    
- common causes of memory leaks in extensions
    + reference 
    https://developer.mozilla.org/en-US/docs/Extensions/Common_causes_of_memory_leaks_in_extensions
    
    + store reference to window and DOM 
    
    + careful with setInterval/setTimeout. The setInterval may only be destroyed when the outer window is closed. 
    
gBrowser.addEventListener("DOMContentLoaded", function(evt) {
  var contentDoc = evt.originalTarget;
  var i = 0;
  
  // Refresh the title once each second
  setInterval(function() {
    contentDoc.title = ++i;
  }, 1000);
}, false);

    + put a reference to anything within this compartment into a long-lived window object (such as browser.xul), JavaScript module or XPCOM component, the bootstrap.js compartment will become a zombie. 
    
    + forgetting to unregister observers 
    
    Services.obs.addObserver(myObserver, "private-browsing", /* ownsWeak */ false);
    
    ownsWeak = false means it will keep a strong reference 
    
    + Forgetting to unload customized JavaScript modules in restartless add-ons
    
    Components.utils.unload("chrome://myaddon/content/mymodule.jsm");
    
- security 
https://developer.mozilla.org/en-US/docs/Mozilla/Gecko/Script_security
    

# WebIDL 
- WebIDL binding are generated at build time. base on two things
    + WebIDL file 
    + configuration file that lists some metadata about how the WebIDL should be reflected into Gecko-internal code.
    
- WebIDL files are placed at dom/webidl and added to the list of moz.build file 

- all the generated code is placed in the mozilla::dom namespace 

- The configuration file, dom/bindings/Bindings.conf, is basically a Python dict that maps interface names to information about the interface, called a descriptor

There are various helper objects and utility methods in dom/bindings that are also all in the mozilla::dom namespace and whose headers are all exported into mozilla/dom (placed in $OBJDIR/dist/include by the build process).

- Adding WebIDL bindings to a class. add a WebIDL binding for interface MyInterface to a class mozilla::dom::MyInterface

    + inherit from nsWrapperCache and hook up the class to the cycle collector so it will trace the wrapper cache properly. 
    
    + not need to do this if your objects can only be created, never gotten from other objects.
    
    + if also inherit from ISupports, make sure it is ahead of nsWrapperCache

    Example:
    
// Add strong pointers your class holds here. If you do, change to using
// NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE.
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE_0(MyClass) 
NS_IMPL_CYCLE_COLLECTING_ADDREF(MyClass)
NS_IMPL_CYCLE_COLLECTING_RELEASE(MyClass)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(MyClass)
  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
  NS_INTERFACE_MAP_ENTRY(nsISupports)
NS_INTERFACE_MAP_END

    + if your class doesn't inherit from a class that implements GetParentObject, then add a function of that name. for a given instance of your class, returns the same object every time. 
    
    The idea is that walking the GetParentObject chain will eventually get you to a Window, so that every WebIDL object is associated with a particular Window.

    return null for security purposes 

    + Add the WebIDL for MyInterface in dom/webidl and to the list in dom/webidl/moz.build.

    + Add an entry to dom/bindings/Bindings.conf that sets some basic information about the implementation of the interface. If the C++ type is not mozilla::dom::MyInterface, you need to set the 'nativeType' to the right type. 
    
    If the type is not in the header file one gets by replacing '::' with '/' and appending '.h', then add a corresponding 'headerFile' annotation. It is not recommended 

    + Implement a WrapObject override on mozilla::dom::MyInterface that just calls through to mozilla::dom::MyInterface_Binding::Wrap. Note that if your C++ type is implementing multiple distinct Web IDL interfaces, you need to choose which mozilla::dom::MyInterface_Binding::Wrap to call here. 
    
    Example: AudioContext::WrapperObject 

    + You can see an example of what the function declarations should look like by running mach webidl-example MyInterface. This will produce two files in dom/bindings in your objdir: MyInterface-example.h and MyInterface-example.cpp
    
    +  If your object can only be reflected into JS by creating it. Add 'wrapperCache': False to your descriptor. flag the function return object as [NewObject]

- sample patch migrates window.performance.* to WebIDL bindings 
https://hg.mozilla.org/mozilla-central/rev/dd08c10193c6

- C++ reflections of WebIDL constructs 
    + A WebIDL operation is turned into a method call on the underlying C++ object.

- Implementing WebIDL using Javascript

limited to interfaces that are not exposed in Web Workers. When the binding occurs, two objects are created:

    + Content-exposed object: what gets exposed to the web page.
    + Implementation object: running as a chrome-privileged script. This allows the implementation object to have various APIs that the content-exposed object does not.


# Working with windows in chrome code 
- opening windows 
    + from script or an overlay 
window.open(XUL_URL, //chrome://myextension/content/about.xul
            title,
            features);
            
The window.openDialog function works similarly, but lets you specify optional arguments that can be referenced from the JavaScript code.

    + from XPCOM 
var ww = Components.classes["@mozilla.org/embedcomp/window-watcher;1"]
                   .getService(Components.interfaces.nsIWindowWatcher);
var win = ww.openWindow(null, "chrome://myextension/content/about.xul",
                        "aboutMyExtension", "chrome,centerscreen", null);


return value of window.open (and similar methods) is a Window object (usually ChromeWindow) 


# The last legacy extension support version is 59
The following ESR release (59), and any subsequent release, will not support legacy add-ons. There will be no override provided for this behavior. 

- win.open() call returns before the window is fully loaded, so some calls, like win.document.getElementById() will fail. move the initialization code to a load handler of the window

- content window use browser.contentDocument to access that document 


XPCNativeWrappers when working with untrusted content. With XPCNativeWrappers turned on extension can direct access DOM but not the JS content

- window's opener using its window.opener property or via a callback function passed to the window in a way described in the previous section.

complicated cases you need to use the nsIWindowMediator interface when opener is not enough 
var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                   .getService(Components.interfaces.nsIWindowMediator);
var browserWindow = wm.getMostRecentWindow("navigator:browser");

-  nsIWindowWatcher when you don't have a window
- data sharing 
    + singleton XPCOM 
Components.classes["@domain.org/mycomponent;1"].getService();

    + string or number could be saved in preference 


# Xray Vision 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Xray_vision

- Xray vision is designed to solve. When a script accesses an object using Xray vision it sees only the native version of the object. Any expandos are invisible, and if any properties of the object have been redefined, it sees the original implementation, not the redefined version.

// chrome code
var transfer = gBrowser.contentWindow.confirm("Transfer all my money?");
// calls the native implementation
      
- Waiving Xray vision. Any of them, even setters and getters, could have been redefined by untrusted code.
    
// chrome code
var waivedWindow = gBrowser.contentWindow.wrappedJSObject;
var transfer = waivedWindow.confirm("Transfer all my money?");
// calls the redefined implementation
    
window.wrappedJSObject.document gets you the waived version of document.
    
undo the waiver again, call Components.utils.unwaiveXrays(waivedObject):
var unwaived = Components.utils.unwaiveXrays(waivedWindow);
unwaived.confirm("Transfer all my money?");
// calls the native implementation
    
- Xrays for DOM objects, In Gecko, DOM objects have a dual representation: the canonical representation is in C++, and this is reflected into JavaScript for the benefit of JavaScript code. Any modifications to these objects, such as adding expandos or redefining standard properties, stays in the JavaScript reflection and does not affect the C++ representation.
    
- Xrays for JavaScript objects. Until recently, built-in JavaScript objects that are not part of the DOM, such as Date, Error, and Object, did not get Xray vision when accessed by more-privileged code.
    
web content is usually working with DOM objects. For example, if content code creates a new Date object, it will usually be created as a property of a DOM object, and then it will be filtered out by the DOM Xray
    
most JavaScript built-in objects have an underlying C++ state that is separate from their JavaScript representation    
    
    
# Mozilla CPP guide line 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code

- RAII classes are useful when two operations (e.g., Lock/Unlock, AddRef/Release, PushState/PopState) must be paired.
http://en.wikipedia.org/wiki/RAII

AutoLock lock(mMutex);

http://mxr.mozilla.org/mozilla-central/source/mfbt/Attributes.h

class MOZ_RAII nsAutoScriptBlocker {...}

    + runtime assertions, These macros are provided in GuardObjects.h.
class MOZ_RAII nsAutoScriptBlocker {
public:
  explicit nsAutoScriptBlocker(JSContext *cx MOZ_GUARD_OBJECT_NOTIFIER_PARAM) { // Note: No ',' before macro
    MOZ_GUARD_OBJECT_NOTIFIER_INIT;
    nsContentUtils::AddScriptBlocker(cx);
  }
  ~nsAutoScriptBlocker() {
    nsContentUtils::RemoveScriptBlocker();
  }
private:
  MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
 };

MOZ_GUARD_OBJECT_NOTIFIER_PARAM is added to the end of the constructor's parameter list. MOZ_GUARD_OBJECT_NOTIFIER_INIT is added as a statement in the constructor. MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER is added where private members should be declared.

First, if the constructor (otherwise) takes no arguments, then you have to use the MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM macro instead
    
    
# Rust programming language 
- reference 

https://developer.mozilla.org/en-US/docs/Mozilla/Rust

video 
    
    
# Testing 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Testing


# Profile 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Profile_Manager


# Phishing 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Phishing


# omni.jar 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/About_omni.ja_(formerly_omni.jar)

it is a zip file 


# IPDL
- IPDL, short for "Inter-process-communication Protocol Definition Language", is a Mozilla-specific language allowing C++ code to pass messages between processes or threads

https://developer.mozilla.org/en-US/docs/Mozilla/IPDL


# Integrated authentication 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Integrated_authentication


# infallible memory allocators. 
- These are memory allocation routines that never return null; 

Under extreme memory conditions, it's possible that the allocation will fail; however, the allocation routine will not, in this scenario, return to your code. Instead, the application will terminate.

p = moz_xmalloc();
p = moz_xcalloc();
p = moz_xrealloc();
p = moz_xstrdup();

n = ::operator new(...);
nArray = ::operator new[](...);


# DOM Hacking 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Mozilla_DOM_Hacking#oneh


# Firefox New build experimental extension type ->> apiextension
add allowed legacy support MOZ_ALLOW_LEGACY_EXTENSIONS=1 into build config
 

# Bug https://bugzilla.mozilla.org/show_bug.cgi?id=1468296


* Keyboard mouse bugs, https://bugzilla.mozilla.org/show_bug.cgi?id=1402266

* Question for experimental extension in  mozilla blog
https://discourse.mozilla-community.org/t/cant-load-customized-experimental-extension-on-developer-edition/17550/2


* websocket error
https://bugzilla.mozilla.org/show_bug.cgi?id=712329


enable XPINSTALL_ENABLED to install an extension


# Enable firefox log 
https://michlstechblog.info/blog/firefox-enable-logging/


# Old configuration options 
'--cache-file',
'--datadir',
'--enable-content-sandbox',
'--enable-cookies',
'--enable-cpp-rtti',
'--enable-crashreporter',
'--enable-dbus',
'--enable-debug-js-modules',
'--enable-directshow',
'--enable-dtrace',
'--enable-dump-painting',
'--enable-extensions',
'--enable-feeds',
'--enable-gconf',
'--enable-icf',
'--enable-install-strip',
'--enable-ios-target',
'--enable-libjpeg-turbo',
'--enable-libproxy',
'--enable-llvm-hacks',
'--enable-logrefcnt',
'--enable-memory-sanitizer',
'--enable-mobile-optimize',
'--enable-necko-wifi',
'--enable-negotiateauth',
'--enable-nfc',
'--enable-nspr-build',
'--enable-official-branding',
'--enable-parental-controls',
'--enable-posix-nspr-emulation',
'--enable-pref-extensions',
'--enable-readline',
'--enable-sandbox',
'--enable-signmar',
'--enable-startup-notification',
'--enable-startupcache',
'--enable-strip',
'--enable-synth-pico',
'--enable-system-cairo',
'--enable-system-extension-dirs',
'--enable-system-pixman',
'--enable-system-sqlite',
'--enable-thread-sanitizer',
'--enable-signed-overflow-sanitizer',
'--enable-universalchardet',
'--enable-unsigned-overflow-sanitizer',
'--enable-updater',
'--enable-xul',
'--enable-zipwriter',


# Previous versions list 
https://ftp.mozilla.org/pub/firefox/releases/


# XPCOM language bindings 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings


# Creating XPCOM components 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components


# XPIDL, Interface Description Language used to specify XPCOM interface classes
- reference 
https://developer.mozilla.org/en-US/docs/Archive/Mozilla/XPIDL


# XPCOM overview 
- Gecko, similar to Microsoft COM, XPCOM is designed to be used principally at the application level. The most important use of XPCOM is within Gecko, an open source, standards compliant, embeddable web browser and toolkit for creating web browsers and other applications.

- HTTP, FTP, and others, which are bundled together and linked into a single library. This library is the networking module, also known as "necko."

- interface-based programming is often referred to as programming by contract.

- The nsISupports Base Interface, When this happens, interfaces may never be released and will leak memory. The system of reference counting is, like many things in XPCOM, a contract between clients and implementations.

- Reference XPCOM types, https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components/An_Overview_of_XPCOM#XPCOM_Types

- example implement an XPCOM 
class Sample: public nsISupports
{
  private:
    nsrefcnt mRefCnt;
  public:
    Sample();
    virtual ~Sample();

    NS_IMETHOD QueryInterface(const nsIID &aIID, void **aResult);
    NS_IMETHOD_(nsrefcnt) AddRef(void);
    NS_IMETHOD_(nsrefcnt) Release(void);
}; 
 
// initialize the reference count to 0
Sample::Sample() : mRefCnt(0)
{ 
}
Sample::~Sample()
{
}

// typical, generic implementation of QI
NS_IMETHODIMP Sample::QueryInterface(const nsIID &aIID,
                                  void **aResult)
{
  if (!aResult) {
    return NS_ERROR_NULL_POINTER;
  }
  *aResult = NULL;
  if (aIID.Equals(kISupportsIID)) {
    *aResult = (void *) this;
  }
  if (!*aResult) {
    return NS_ERROR_NO_INTERFACE;
  }
  // add a reference
  AddRef();
  return NS_OK;
}

NS_IMETHODIMP_(nsrefcnt) Sample::AddRef()  
{
  return ++mRefCnt;
}

NS_IMETHODIMP_(nsrefcnt) Sample::Release()
{
  if (--mRefCnt == 0) {
    delete this;
    return 0;
  }
  // optional: return the reference count
  return mRefCnt;
}


- Instead of leveraging C++ RTTI, XPCOM uses the special QueryInterface method that casts the object to the right interface if that interface is supported.

- XPCOM identifier class, The nsIID class is actually a typedef for the nsID class. The other typedefs of nsID, CID and IID, refer to specific implementations of a concrete class

The nsID class provides methods like Equals for comparing identifiers 

#define SAMPLE_CID \ 
{ 0x777f7150, 0x4a2b, 0x4301, \ 
{ 0xad, 0x10, 0x5e, 0xab, 0x25, 0xb3, 0x22, 0xaa}}

static NS_DEFINE_CID(kWebShellCID, NS_WEB_SHELL_CID);

- Contract ID, A contract ID is a human readable string used to access a component. A CID or a contract ID may be used to get a component. LDAP operation component 

"@mozilla.org/network/ldap-operation;1"
{domain}/module/component;version

- The factory design pattern can be used to encapsulate object construction. 
int New_SomeInterface(SomeInterface** ret)
{
  // create the object
  SomeClass* out = new SomeClass();
  if (!out) return -1;

  // init the object
  if (out->Init() == FALSE)
  {
    delete out;
    return -1;
  }

  // cast to the interface
  *ret = static_cast<SomeInterface*>(out);
  return 0; 
}

    + better way to implement singleton 
    + group manage objects lifetime 
    + Another benefit of using the nsISupports interface is that you can support other interfaces as they are introduced

- XPIDL and type libraries,  interface definition language (IDL). 

    + can not have two methods with same name 

workaround: 
void FooWithInt(in int x);
void FooWithString(in string x);
void FooWithURI(in nsIURI x);

    +  generate type libraries, or typelibs, which are files with the extension .xpt. The type library is a binary representation of an interface or interfaces. 

    + XPConnect is the layer of XPCOM that provides access to XPCOM components from other languages 
    
    + tool that generates these files is called the xpidl compiler.
    
    + XPCOM service, single instance of XPCOM object 

    + XPCOM types 
NS_IMETHOD method, declaration return type, XPCOM method declarations should use this  
NS_IMETHODIMP, implementation should use 
NS_IMETHODIMP_(type), implementation with return type 
NS_IMPORT, forces the method to be resolved internally by shared library 
NS_EXPORT, forces exported 

    + reference counting 
NS_ADDREF 
NS_IF_ADDREF 
NS_RELEASE 
NS_IF_RELEASE 

    + status codes 
NS_FAILED 
NS_SUCCESSED 

    + variable mappings 
nsrefcnt 
nsresult 
nsnull 

    + common XPCOM error codes 
NS_ERROR_NOT_INITIALIZED,	Returned when an instance is not initialized.
NS_ERROR_ALREADY_INITIALIZED,	Returned when an instance is already initialized.
NS_ERROR_NOT_IMPLEMENTED,	Returned by an unimplemented method.
NS_ERROR_NO_INTERFACE,	Returned when a given interface is not supported.
NS_ERROR_NULL_POINTER,	Returned when a valid pointer is found to be nsnull.
NS_ERROR_FAILURE,	Returned when a method fails. Generic error case.
NS_ERROR_UNEXPECTED,	Returned when an unexpected error occurs.
NS_ERROR_OUT_OF_MEMORY,	Returned when a memory allocation fails.
NS_ERROR_FACTORY_NOT_REGISTERED,	Returned when a requested class is not registered.

    + managing cookies from cpp 
nsCOMPtr<nsIServiceManager> servMan;
nsresult rv = NS_GetServiceManager(getter_AddRefs(servMan));
if (NS_FAILED(rv))
  return -1;

nsCOMPtr<nsICookieManager> cookieManager;
rv = servMan->GetServiceByContractID("@mozilla.org/cookiemanager",
                                     NS_GET_IID(nsICookieManager),
                                     getter_AddRefs(cookieManager));

if (NS_FAILED(rv))
  return -1;

PRUint32 len;
deletedCookies->GetLength(&len);

for (int c=0; c<len; c++)
    cookieManager->Remove(deletedCookies[c].host,
                          deletedCookies[c].name,
                          deletedCookies[c].path,
                          PR_FALSE);

- The previous code uses the special nsCOMPtr function do_QueryInterface that lets you QueryInterface without having to worry about reference counting
- There are two service getters on the nsIServiceManager interface: one that takes a CID and another interface that takes a Contract ID. Here we'll use the latter. The first parameter to the GetServiceByContractID

the variable catman holds the nsICategoryManager interface pointer, which you can use to add the component as a startup observer by calling a method on the nsICategoryManager.

char* previous = nsnull;
rv = catman->AddCategoryEntry("xpcom-startup",
                              "WebLock",
                              WebLock_ContractID,
                              PR_TRUE,  // persist category
                              PR_TRUE,  // replace existing
                              &previous);
if (previous)
  nsMemory::Free(previous); // free the memory the replaced value might have used
  
rv = catman->DeleteCategoryEntry("xpcom-startup",
                                 "WebLock",
                                  PR_TRUE);  // persist
                                  
    + common XPCOM notification 
    xpcom-startup 
    xpcom-shutdown 
    xpcom-autoregistration 
    
- using XPCOM utilities, to make things easier 


- troubleshooting XPCOM components registration 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Troubleshooting_XPCOM_components_registration

- XPConnect lets you bypass its wrappers and access the underlying JS object directly using the wrapper.wrappedJSObject property if the wrapped object allows this.

    + JS implemented XPCOM the JS object implementing our component directly, we must modify the component. For example:

function HelloWorld() {
  this.wrappedJSObject = this;
};

- XPCOM glue, The XPCOM Glue is a static library which component developers and embedders can link against. It allows developers to link only against the frozen XPCOM method symbols and maintain compatibility with multiple versions of XPCOM.

- internal string guide 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Internal_strings

- using nsCOMPtr 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Using_nsCOMPtr

- XPCOM internals 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components/Component_Internals
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components/Creating_the_Component_Code
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components/Using_XPCOM_Utilities_to_Make_Things_Easier
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works

    
    
# the Gecko networking libraries, see http://www.mozilla.org/projects/netlib/. Necko
- reference 
https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/Necko


# Firefox message manager 
https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Multiprocess_Firefox/Message_Manager/Message_manager_overview


# Enable global logging 
- environment variables 
MOZ_LOGGING_ENABLED
MOZ_LOG or MOZ_LOG_MODULES or NSPR_LOG_MODULES specify the module lists 
MOZ_LOG_FILE or NSPR_LOG_FILE

MOZ_LOG equal to all:5 will log everything 

- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSPR/Reference/NSPR_LOG_MODULES
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Gecko_Logging


# Download server certificate 
- If you have access to OpenSSL, try

\> openssl s_client -connect {HOSTNAME}:{PORT} -showcerts
replacing {HOSTNAME} and {PORT} with whatever your values are.

- to use the certificate 
\> wget https:/server.edu:443/somepage --ca-certificate=mycertfile.pem


# Firefox roadmap 
- roadmap update 
https://wiki.mozilla.org/Firefox/Roadmap/Updates

- release calender 
https://wiki.mozilla.org/Release_Management/Calendar

- manifest v3 
https://blog.mozilla.org/addons/
https://blog.mozilla.org/addons/2019/11/14/2019-add-ons-community-meetup-in-london/


# Firefox forum
- all topics 
https://discourse.mozilla.org/

- firefox development 
- addon 
https://discourse.mozilla.org/c/add-ons
- container 
https://discourse.mozilla.org/c/containers
- development 
https://discourse.mozilla.org/c/firefox-development


# Geko logging 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Gecko_Logging


# Code base filter 
filters 

- for native 
*.png
*.bmp
*.js
*.jsm
*.html
*.xhtml
*.ini
*.dtd
*.log
*.properties
*.ftl
*.svg
*.ico
*.icns
*.jpg
*.nsi
*.sh
*.xml
*.ver
*.pyc
*.build
*.mn
*.css
*.xul

- for JS
*.cpp
*.h
*.idl
*.in

- work items 
1. [fixed] delete keys in Firefox source

fxa-menu-service-label
fxa-menu-device-name-label
fxa-menu-header-title
fxa-menu-service-label

2. [fixed] user.js add to make single process 
browser.tabs.remote.autostart to 1

3. [fixed] modify user.js to reduce consumption. telemetry
disable telemetry for TCB => false
browser.newtabpage.activity-stream.feeds.telemetry
browser.newtabpage.activity-stream.telemetry
browser.ping-centre.telemetry
toolkit.telemetry.archive.enabled
toolkit.telemetry.bhrPing.enabled
toolkit.telemetry.enabled
toolkit.telemetry.firstShutdownPing.enabled
toolkit.telemetry.hybridContent.enabled
toolkit.telemetry.newProfilePing.enabled
toolkit.telemetry.reportingpolicy.firstRun
toolkit.telemetry.server
toolkit.telemetry.shutdownPingSender.enabled
toolkit.telemetry.unified
toolkit.telemetry.updatePing.enabled

toolkit.telemetry.archive.enabled = false
toolkit.telemetry.enabled = false
toolkit.telemetry.rejected = true
toolkit.telemetry.server = <clear value>
toolkit.telemetry.unified = false
toolkit.telemetry.unifiedIsOptIn = false
toolkit.telemetry.prompted",2);
toolkit.telemetry.rejected",true);

and disable experimental features:
experiments.activeExperiment
experiments.enabled
experiments.supported
network.allow-experiments

4. [fixed] console error:
proxy.onProxyError has been deprecated and will be removed in Firefox 71. Use proxy.onError instead.

modify TC code 

5. [fixed] ui control 
ReferenceError: localizeDocument is not defined

6.[fixed] chrome.proxy.onProxyError depreciated to chrome.proxy.onError and the callback parameter is changed

7. pop up your new tab is changed, firefox popup a native info dialog when open the first new tab

8.[drop] aboutblank.js changed in TC 
chrome.tabs.update -> window.location.href = "about:blank";

9. [drop] Failed to open input source, multiple UI scripts are not loaded correctly

10. [fixed] Update perference
extensions.fxmonitor.telemetryDisabled to true

11. [fixed] disable form autofill
extensions.formautofill.available to false
pref("browser.urlbar.autoFill", true);

12. [fixed] aboutblank.js remove navigation logic

13[fixed]. TC uicontrol.js comment  localizeDocument(this); line 758. find more elegent way to resolve the issue

14. [fixed] update extensionparent.jsm startupcache to ignore reading webext.sc.lz4

15. [fixed] update sessionfile.jsm to reduce error

16. [fixed] vugen save communicaton issue. no response from address 127.0.0.1:8080, reference 22.

17. [fixed]load mode crash, reference 22.

18. Update two svg in the branding folder

19. [fixed] Fix console logs errors for new version

20. [fixed]HTTP activity monitor 

21. [fixed]purge session encounter crash due to clear the authentication cache 

22. Save script to vugen have issue. the content of the script is not correct

a. keep browser parent process
b. modify vugen, CI, nanny logic 

23. [fixed]Modified user.js settings
user_pref("network.http.connection-timeout", 0);
user_pref("network.http.keep-alive.timeout", 0);
user_pref("services.settings.security.onecrl.signer", "");
user_pref("services.settings.server", "");
user_pref("browser.tabs.remote.desktopbehavior", false")
user_pref("extensions.screenshots.disabled");

user_pref("identity.fxaccounts.toolbar.enabled", false);
user_pref("identity.fxaccounts.toolbar.accessed", false);
user_pref("identity.fxaccounts.service.sendLoginUrl", "");
user_pref("identity.fxaccounts.service.monitorLoginUrl", "");
user_pref("identity.fxaccounts.account.device.name", "");
user_pref("browser.messaging-system.fxatoolbarbadge.enabled", false);

24. [fixed] mouse click

1577259963063: sendAsync, no ipc, message: {"target":"Utilities","action":"UserDataPoint","name":"dom_interactive [https://www.bing.com/?toWww=1&redig=97637B7445BB4B3F80C36B9FE2CECD3D]","value":1045}

check unnecessary preferences 
D:\mozilla-source\mozilla-release\modules\libpref\init\StaticPrefList.yaml
mobile\android\moz.configure

obj-firefox-win32-release\dist\include\mozilla-config.h


# Project 
upgrade-to-71b5
https://wiki.mozilla.org/Firefox/Roadmap/Updates
https://wiki.mozilla.org/Release_Management/Calendar



# Firefox build info
check and update build options
ac_add_options
WIN32_REDIST_DIR

https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options

https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Windows_Prerequisites

build/windows_toolchain.py


# TruClient feedbacks 
- real customer use case from sales force 
5000 vuser
3 controller

ramp up time is too long

program configure the controller and senario file

end event

- object ident
- unlimit scroll use case. This is a well known pattern in the current web development

- step end event is suck

- improve satelite collections 
actions 
identify methods 
JSAPI
etc.

- customer platform reference
- PE sharepoint 
https://microfocusinternational.sharepoint.com/teams/hpswil_lt/_layouts/15/Doc.aspx?sourcedoc={be3768dc-cdd9-4c10-acd7-f39866970c0d}&action=edit&wd=target%28Customer%20Platform%7C315aefe7-b1d9-4550-85fd-49eabfa8c62e%2F%29

- Linux testing for LR
https://microfocusinternational.sharepoint.com/teams/hpswil_lt/_layouts/15/Doc.aspx?sourcedoc={1a550c5c-b022-4a1e-bbd4-95818b0076c8}&action=edit&wd=target%28Linux%20LG%20Install%7Cc44c4a6c-ab61-4401-9ddc-04fc6a05b029%2F%29

- foot print for LR
https://microfocusinternational.sharepoint.com/teams/hpswil_lt/_layouts/15/Doc.aspx?sourcedoc={29cb0695-ba99-474e-b25a-480eee941ee9}&action=edit&wd=target%28Loadrunner%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%88%86%E6%9E%90%7Cea5f68bd-e5a9-4563-8e44-4209ef92793b%2F%29

- docker + linux LR
https://microfocusinternational.sharepoint.com/teams/hpswil_lt/_layouts/15/Doc.aspx?sourcedoc={83573387-770e-43f4-9ac4-fd1bb161c881}&action=edit&wd=target%28Basic%7Cde5b790e-9c85-46ee-8696-4cc5cd6d959b%2F%29

- graphql javascript query language 
- graphql 
- https://github.com/mihaifm/linq
- https://github.com/multiplex/multiplex.js/tree/master

- websocket connection interrupt
https://bugzilla.mozilla.org/show_bug.cgi?id=712329
https://stackoverflow.com/questions/13616960/how-do-i-catch-a-websocket-connection-interruption
https://stackoverflow.com/questions/28837558/socket-io-doenst-work-with-transports-xhr-polling
https://stackoverflow.com/questions/7016144/define-transport-types-on-the-client-side

- linux lg 
https://almoctane-ams.saas.microfocus.com/ui/?p=196009/4001#/my-items/my-works

- CPEs
https://almoctane-ams.saas.microfocus.com/ui/?p=196009/4001#/entity-navigation?entityType=work_item&id=256094


# Chrome relative urls 
https://developers.google.com/web/updates

https://developers.google.com/web/updates/2019/10/chrome-79-deps-rems

https://developers.google.com/web/updates/2019/10/nic78

https://developer.chrome.com/extensions/migrating_to_manifest_v3







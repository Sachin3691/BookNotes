Firefox project document;Note=Erxin

# Getting involved with mozilla 
- reference 
https://www.joshmatthews.net/blog/2010/03/getting-involve-with-mozilla/

# Developer guide, contain all information for firefox developers 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

# Build firefox for different versions 
- https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial

# Mozilla build reference 
https://wiki.mozilla.org/MozillaBuild

# How mozilla's build system works 
+ reference https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works
- mach build to build the tree is sufficient to work with the source tree 
- phases
    + system detection and validation
    + preparation of the build backend 
    + invokation of the build backend 
    
- phase 1, configure 
    + centers around the configure script generated configure.in which is written in M4(http://www.seindal.dk/rene/gnu/) and process using autoconfig 2.13(http://www.gnu.org/software/autoconf/) 
    
    + The primary output of the configure script is an executable file in the object directory called config.status. It is written in python instead of a normal shell script 
    
- phase2, build backend preparation and the build definition 
config.status is charged with the task of tell a tool how to build the tree 

build system definition consist of various moz.build files in the tree 

- phase3, invokation of the build backend, make consuming makefiles. non-mkae build backends such as Tup or Visual studio 

The main moz.build file defines the tiers and directories in them. In reality, the main moz.build files includes other moz.build files such as /toolkit/toolkit.mozbuild

- recursive make backend 
Each tier consists of 3 sub-tiers: export, libs, and tools. This roughly correspond to the actions of pre-build, main-build, and post-build. 

- moz.build files 
moz.build files are how each part of the source tree defines how it is integrated with the build system.
    
An individual moz.build file is actually a Python script. However, they are unlike most Python scripts you will ever see. The execution environment is highly controlled so moz.build files can only perform a limited set of operations

moz.build UPPERCASE Variables and Functions
sandbox.py contains code for a generic Python sandbox. 
reader.py contains the code that defines the actual moz.build sandbox

- build libraries 
    + components are shared libraries 
    + non component sahred libraries  such as libxpcom, libmozjs 
    + static libraries, used as intermediate steps to build a shared library 
    
# Configure build options 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options
- two types of options 
mk_add_options passed to client.mk 
ac_add_options passed to configure 



# Developer guide, all the required development document index 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

- view firefox source code online
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Viewing_and_searching_Mozilla_source_code_online

https://dxr.mozilla.org/mozilla-central/source/


# Source code directory structure 
- working with mozilla source code 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code

- update code 
$ hg pull -u

- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Directory_structure

- explains the folders which could not directly get the meaning from the names 
caps, capability-based web page security management 
chrome, chrome registry which seamonkey still uses rdf/chrome 
config, build relative 
docshell, main object managing things related to a document window. Each frame has its own docshell. it is the outermost layer of the embedding API used to embed a Gecko browser into an application 

dom, idl definitions of the interfaces defined
     connection between javascript and the implementation of DOM objects that are specific both to javascript and to DOM. binding between XPCOM and javascript live in js/src/xpconnect/ 
     implementation of a few of the core "DOM level 0" objects such as window, window navigator, window.location etc 
     
editor, html editor 
embedding, support embed Gecko in app 
extension, extend mozilla features 
extension/pref
gfx, interfaces that abstract the capability of platform specific graphics toolkits
gradle, related to JVM build system 
hal, platform specific functions such as sensor info, memory info, android alarm etc 
image, image render 
intl, l10n 
ipc, container for implementation of IPC 
js,  js/src, javascript engine known as SpiderMonkey 
     js/jsd, javascript debugging library 
     js/xpconnect/, support code for calling between js and cpp 
layout, render UI such as css xul etc 
media, sources of media libraries 
mfbt, impelmentation of weakptr 
mobile 
module, compression/archiving, math etc 
mozglue, low-level functionality including dynamic link for android, dll block list etc 
netwerk, networking library 
nsprpub, netscape portable runtime, abstraction layer to things like threads, file i/o, and socket 
parser, parse xml/html 
probes, related to dtrace 
python, cross module python code 
rdf, RDF handling APIs, Resource Description Framework (RDF) is a family of specifications for a metadata model that is often implemented as an application of XML
services, accounts and sync 
servo, parallel browser engine project, https://servo.org/; https://www.rust-lang.org/en-US/index.html
storage, xpcom wrapper for sqlite 
taskcluster, scripts and code to automatically build and test Mozilla trees for the continuous integration and release process 
testing, common testing tools for mozilla codebase 
third_party, vendored dependencies maintained outside of mozilla 
toolkit, shared with different products such as thunderbird etc. contains front-end components 
         toolkit/mozapps/extensions/test/xpinstall, contain codes to build xpi install 
tools, optionally build, used for debugging 
uriloader/prefetch, prefetch documents in order to have them cached for faster loading 
view, cross-platform painting, scrolling, event handling, z-ordering, and opacity will be obsolete 
widget, operation system specific widget 
xpcom
xpfe, cross platform front end, the seamonkey frontend, contains the xul files for the browser interface, common files used by the other parts of the mozilla suite. XBL files for the parts of the XUL language 


# Firefox project policies settings 
http://www-archive.mozilla.org/projects/security/components/ConfigPolicy.html


# Firefox irc channel 
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Getting_Started_with_IRC


# Firefox enable file url access
user_pref("capability.policy.policynames", "localfilelinks");
user_pref("capability.policy.localfilelinks.sites", "http://www.example.com");
user_pref("capability.policy.localfilelinks.checkloaduri.enabled", "allAccess");

http://kb.mozillazine.org/Links_to_local_pages_do_not_work
https://stackoverflow.com/questions/5317834/workaround-for-href-file-in-firefox


# Decode *.rsa file for firefox extension
- with python 3.5 install pyasn1 library 
>>> from pyasn1.codec.der import decoder
>>> buf = open(r'path-to-*.rsa', 'rb').read()
>>> decoder.decode(buf)

https://www.di-mgt.com.au/how-mozilla-signs-addons.html


# Firefox official build download 
http://ftp.mozilla.org/pub/firefox/tinderbox-builds/
http://ftp.mozilla.org/pub/firefox/

# Using the mozilla symbol server 
https://developer.mozilla.org/en-US/docs/Mozilla/Using_the_Mozilla_symbol_server
- download symbol with windbg 
SRV*c:\symcache\*http://msdl.microsoft.com/download/symbols;SRV*c:\symcache\*https://symbols.mozilla.org/


# Understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports

# Firefox enable legacy extension by 
about:config -> extensions.legacy.enabled -> true

# DOM VK event list
https://www.w3.org/TR/2000/WD-DOM-Level-3-Events-20000901/events.html

# Firefox cross domain issue 
- nsnetutil.cpp 
NS_HasBeenCrossOrigin

- nscontentsecuritymanager.cpp 
rv = CheckCHannel(aChannel); 
doContentSecurityCheck+0x86


# Firefox crash 
- file xmlhttprequestmainthread.cpp 
xul!mozilla::dom::XMLHttpRequestMainThread::DispatchToMainThread

- debug minidump 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_a_minidump

- understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports

# Contribute to Firefox project 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Introduction

good search tasks portal for different skills 
https://codetribute.mozilla.org/


# Firefox developer tool 
http://firefox-dev.tools/


# Firefox javascript engine spider monkey 
- spidermonkey 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey

- gc rooting guide 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/GC_Rooting_Guide

- hacking tips 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips


# Firefox developer tools document including debugger API for client and server 
http://docs.firefox-dev.tools/


# script security checks 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Gecko/Script_security#Security_checks
https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy

- frame script 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Frame_script_environment

- compartment, Gecko guarantees that JavaScript code running in a given compartment is only allowed to access objects in the same compartment. When code from compartment A tries to access an object in compartment B, Gecko gives it a cross-compartment wrapper.

- Whenever cross-compartment access happens, the wrappers enable us to implement the appropriate security policy. Because the wrapper we choose is specific to the relationship between the two compartments, the security policy it implements can be static: when the caller uses the wrapper

- cross process object wrapper 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Cross_Process_Object_Wrappers

- message manager 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Message_Manager/Message_manager_overview


# Mozilla build system introduction 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works

- configure.in, is written in M4. (http://www.seindal.dk/rene/gnu/) uasing autoconfig 2.13 to create configure script 

config.status of mozilla is written in python not bash 
    data structure contains output of configure 
    backend is a tool used to build the tree. 
    
- phases 
system detection and validation 
preparation of build backend 
invocation of build backend 
    + phase 1, configure with confg.status 
    + phase 2 build backend and build definition with moz.build 
    + phase 3 invocation of the build backend 
    
- recursive make backend is the tried-and-true backend used to build the tree  

- moz.build file variable and functions 
https://hg.mozilla.org/mozilla-central/file/default/python/mozbuild/mozbuild/frontend/context.py

- build with debug symbol 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Building_Firefox_with_Debug_Symbols


# XUL interface 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/XUL_Reference

- browser 
gBrowser.selectedBrowser is a browser object 
    
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/browser
    

# Firefox webextension implementation path in the repository 
..\mozilla-release\toolkit\components\extensions  
..\mozilla-release\browser\components\extensions\ext-windows.js  

# Webdriver base API implementation location 
d:\mozilla-source\mozilla-release\testing\marionette

# Document for marionette
https://firefox-source-docs.mozilla.org/testing/marionette/marionette/index.html


# JavaScript compartment
- spider monkey compartments 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Compartments

An object in one compartment cannot touch an object in another compartment, except through a cross-compartment wrapper.

SpiderMonkey tracks the creation of these cross-compartment wrappers and thus it knows at all times what objects from a compartment are kept alive by outside references 


# Firefox browser startup process 
- call stacks 
ntdll!NtWaitForAlertByThreadId+0x14
ntdll!RtlSleepConditionVariableSRW+0xf9
KERNELBASE!SleepConditionVariableSRW+0x28
mozglue!mozilla::detail::ConditionVariableImpl::wait+0x3e [z:\mozilla-release\mozglue\misc\conditionvariable_windows.cpp @ 58]
xul!mozilla::CondVar::Wait+0x38 [z:\mozilla-release\obj-x86_64-pc-mingw32\dist\include\mozilla\condvar.h @ 69]
xul!mozilla::Monitor::Wait+0x22 [z:\mozilla-release\obj-x86_64-pc-mingw32\dist\include\mozilla\monitor.h @ 41]
xul!mozilla::ipc::MessageChannel::WaitForSyncNotify+0x10a [z:\mozilla-release\ipc\glue\windowsmessageloop.cpp @ 1047]
xul!mozilla::ipc::MessageChannel::Send+0xb7f [z:\mozilla-release\ipc\glue\messagechannel.cpp @ 1466]
xul!mozilla::layers::PAPZCTreeManagerChild::SendTransformEventRefPoint+0x173 [z:\mozilla-release\obj-x86_64-pc-mingw32\ipc\ipdl\papzctreemanagerchild.cpp @ 838]
xul!mozilla::layers::APZCTreeManagerChild::TransformEventRefPoint+0x33 [z:\mozilla-release\gfx\layers\ipc\apzctreemanagerchild.cpp @ 215]
xul!mozilla::layers::IAPZCTreeManager::ReceiveInputEvent+0x650 [z:\mozilla-release\gfx\layers\apz\public\iapzctreemanager.cpp @ 154]
xul!nsBaseWidget::DispatchInputEvent+0x8b [z:\mozilla-release\widget\nsbasewidget.cpp @ 1171]
xul!mozilla::widget::TextEventDispatcher::DispatchInputEvent+0x8b [z:\mozilla-release\widget\texteventdispatcher.cpp @ 214]
xul!mozilla::widget::TextEventDispatcher::DispatchKeyboardEventInternal+0x48b [z:\mozilla-release\widget\texteventdispatcher.cpp @ 593]
xul!mozilla::widget::TextEventDispatcher::DispatchKeyboardEvent+0x48 [z:\mozilla-release\widget\texteventdispatcher.cpp @ 450]
xul!mozilla::widget::NativeKey::HandleKeyDownMessage+0x4a9 [z:\mozilla-release\widget\windows\keyboardlayout.cpp @ 2327]
xul!nsWindow::ProcessKeyDownMessage+0x8f [z:\mozilla-release\widget\windows\nswindow.cpp @ 6432]
xul!nsWindow::ProcessMessage+0x13a4 [z:\mozilla-release\widget\windows\nswindow.cpp @ 5470]
xul!nsWindow::WindowProcInternal+0x1f9 [z:\mozilla-release\widget\windows\nswindow.cpp @ 4933]
xul!CallWindowProcCrashProtected+0x2f [z:\mozilla-release\xpcom\base\nscrashonexception.cpp @ 35]
xul!nsWindow::WindowProc+0x51 [z:\mozilla-release\widget\windows\nswindow.cpp @ 4886]
USER32!UserCallWinProcCheckWow+0x280
USER32!DispatchMessageWorker+0x19f
xul!nsAppShell::ProcessNextNativeEvent+0x1a7 [z:\mozilla-release\widget\windows\nsappshell.cpp @ 394]
xul!nsBaseAppShell::DoProcessNextNativeEvent+0x44 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 138]
xul!nsBaseAppShell::OnProcessNextEvent+0x1c7 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 289]
xul!nsThread::ProcessNextEvent+0x23f [z:\mozilla-release\xpcom\threads\nsthread.cpp @ 1359]
xul!NS_ProcessNextEvent+0x5a [z:\mozilla-release\xpcom\threads\nsthreadutils.cpp @ 475]
xul!mozilla::ipc::MessagePump::Run+0x1e7 [z:\mozilla-release\ipc\glue\messagepump.cpp @ 125]
xul!MessageLoop::RunInternal+0x3d [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 239]
xul!MessageLoop::RunHandler+0x3b [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 232]
xul!MessageLoop::Run+0x22 [z:\mozilla-release\ipc\chromium\src\base\message_loop.cc @ 212]
xul!nsBaseAppShell::Run+0x49 [z:\mozilla-release\widget\nsbaseappshell.cpp @ 158]
xul!nsAppShell::Run+0x29 [z:\mozilla-release\widget\windows\nsappshell.cpp @ 271]
xul!nsAppStartup::Run+0x56 [z:\mozilla-release\toolkit\components\startup\nsappstartup.cpp @ 283]
xul!XREMain::XRE_mainRun+0x15c1 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4567]
xul!XREMain::XRE_main+0xb40 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4747]
xul!XRE_main+0x52 [z:\mozilla-release\toolkit\xre\nsapprunner.cpp @ 4842]
xul!mozilla::BootstrapImpl::XRE_main+0x2a [z:\mozilla-release\toolkit\xre\bootstrap.cpp @ 46]
firefox!do_main+0x31d [z:\mozilla-release\browser\app\nsbrowserapp.cpp @ 237]
firefox!NS_internal_main+0x1fe [z:\mozilla-release\browser\app\nsbrowserapp.cpp @ 309]
firefox!wmain+0x1b7 [z:\mozilla-release\toolkit\xre\nswindowswmain.cpp @ 115]
firefox!invoke_main+0x22 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 90]
firefox!__scrt_common_main_seh+0x11d [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 283]
KERNEL32!BaseThreadInitThunk+0x14
ntdll!RtlUserThreadStart+0x21

- app startup idl definition 
d:\mozilla-source\mozilla-release\toolkit\components\startup

- start up folder 
d:\mozilla-source\mozilla-release\toolkit\xre
XUL Runtime Environment


# Change firefox execute mode 
- multiprocess 
const char* kAccessibilityLastRunDatePref = "accessibility.lastLoadDate";
const char* kAccessibilityLoadedLastSessionPref = "accessibility.loadedInLastSession";

set the value to recent 7 days accessibility.lastLoadDate

const char* kForceEnableE10sPref = "browser.tabs.remote.force-enable";
const char* kForceDisableE10sPref = "browser.tabs.remote.force-disable";

bool optInPref = Preferences::GetBool("browser.tabs.remote.autostart", false);
bool trialPref = Preferences::GetBool("browser.tabs.remote.autostart.2", false);
bool prefEnabled = optInPref || trialPref;
int status;
if (optInPref) {
    status = kE10sEnabledByUser;
} else if (trialPref) {
    status = kE10sEnabledByDefault;
} else {
    status = kE10sDisabledByUser;
}
- e10s 
https://wiki.mozilla.org/Electrolysis


# Open Firefox trouble shooting page 
- about:support 


# RAII-style class for make sure release the mutex 
https://gist.github.com/trojanfoe/7134404


# Headless mode Firefox 
- example 
https://github.com/mdn/headless-examples

- articles 
https://intoli.com/blog/running-selenium-with-headless-firefox/

- doc 
https://developer.mozilla.org/en-US/Firefox/Headless_mode

- add environment variable 
MOZ_HEADLESS set to 1 or true 

- add commandline argument -headless 


# Firefox get scriptable top 
- nsGlobalWindow.cpp 
nsPIDOMWindowOuter*
nsGlobalWindow::GetScriptableTop()

# cross domain breakpoint settings window.frames[0].addEventListener 
- check window 
 1 e 00007ffb`3988db6e [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 5035]    0001 (0001)  0:**** xul!nsGlobalWindow::GetFrames+0xe
 2 e 00007ffb`3987ce58 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 10370]    0001 (0001)  0:**** xul!nsGlobalWindow::AddEventListener+0x18
 3 e 00007ffb`39319af8 [z:\mozilla-release\caps\nsscriptsecuritymanager.cpp @ 509]    0001 (0001)  0:**** xul!nsScriptSecurityManager::CheckSameOriginURI+0x18
 4 e 00007ffb`39892360 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4069]    0001 (0001)  0:**** xul!nsGlobalWindow::GetPrincipal
 5 e 00007ffb`3c17604a [z:\mozilla-release\docshell\base\nsdocshell.cpp @ 13677]    0001 (0001)  0:**** xul!nsDocShell::GetTopFrameElement+0x1a
 7 e 00007ffb`39892383 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4072]    0001 (0001)  0:**** xul!nsGlobalWindow::GetPrincipal+0x23


- call stacks 
00 00000094`affe79d0 00007ffb`399d51a8 xul!nsGlobalWindow::GetPrincipal+0x23 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 4072]
01 00000094`affe7a30 00007ffb`399d20a6 xul!OldBindingConstructorEnabled+0x78 [z:\mozilla-release\dom\base\nsdomclassinfo.cpp @ 1582]
02 00000094`affe7a70 00007ffb`398919a2 xul!nsWindowSH::NameStructEnabled+0x66 [z:\mozilla-release\dom\base\nsdomclassinfo.cpp @ 1610]
03 00000094`affe7ab0 00007ffb`39f4e58f xul!nsGlobalWindow::GetOwnPropertyNames+0x172 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 5158]
04 00000094`affe7b80 00007ffb`3c7802b0 xul!mozilla::dom::WindowBinding::_enumerate+0x11f [z:\mozilla-release\obj-x86_64-pc-mingw32\dom\bindings\windowbinding.cpp @ 16615]
05 00000094`affe7c00 00007ffb`3c7962bb xul!EnumerateExtraProperties+0xa0 [z:\mozilla-release\js\src\jsiter.cpp @ 130]
06 00000094`affe7d10 00007ffb`3c786466 xul!Snapshot+0x20b [z:\mozilla-release\js\src\jsiter.cpp @ 367]
07 00000094`affe8010 00007ffb`3cb854bc xul!js::GetPropertyKeys+0x36 [z:\mozilla-release\js\src\jsiter.cpp @ 468]
08 00000094`affe8040 00007ffb`398b3a79 xul!js::Wrapper::ownPropertyKeys+0xac [z:\mozilla-release\js\src\proxy\wrapper.cpp @ 65]
09 00000094`affe80b0 00007ffb`3cb84272 xul!nsOuterWindowProxy::ownPropertyKeys+0x99 [z:\mozilla-release\dom\base\nsglobalwindow.cpp @ 1268]
0a 00000094`affe8170 00007ffb`3c796599 xul!js::Proxy::ownPropertyKeys+0x102 [z:\mozilla-release\js\src\proxy\proxy.cpp @ 150]
0b 00000094`affe81f0 00007ffb`3c786466 xul!Snapshot+0x4e9 [z:\mozilla-release\js\src\jsiter.cpp @ 389]
0c 00000094`affe84f0 00007ffb`3c8f0448 xul!js::GetPropertyKeys+0x36 [z:\mozilla-release\js\src\jsiter.cpp @ 468]
0d 00000094`affe8520 00007ffb`3c8b8941 xul!js::DebuggerObject::getOwnPropertyNames+0xd8 [z:\mozilla-release\js\src\vm\debugger.cpp @ 10591]
0e 00000094`affe8650 00007ffb`3cb8cfe3 xul!js::DebuggerObject::getOwnPropertyNamesMethod+0x141 [z:\mozilla-release\js\src\vm\debugger.cpp @ 9711]
0f 00000094`affe8790 00007ffb`3cd69074 xul!js::CallJSNative+0x63 [z:\mozilla-release\js\src\jscntxtinlines.h @ 293]
10 00000094`affe87e0 00007ffb`3cd68d7d xul!js::InternalCallOrConstruct+0x2e4 [z:\mozilla-release\js\src\vm\interpreter.cpp @ 470]
11 00000094`affe88d0 00007ffb`3cd64075 xul!InternalCall+0x13d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 516]
12 00000094`affe8940 00007ffb`3cb7d43f xul!js::Call+0x55 [z:\mozilla-release\js\src\vm\interpreter.cpp @ 534]
13 00000094`affe8980 00007ffb`3cb6d39c xul!js::Wrapper::call+0x15f [z:\mozilla-release\js\src\proxy\wrapper.cpp @ 166]
14 00000094`affe8aa0 00007ffb`3cb7cc3d xul!js::CrossCompartmentWrapper::call+0x1bc [z:\mozilla-release\js\src\proxy\crosscompartmentwrapper.cpp @ 353]
15 00000094`affe8b50 00007ffb`3cb85c78 xul!js::Proxy::call+0xfd [z:\mozilla-release\js\src\proxy\proxy.cpp @ 479]
16 00000094`affe8bd0 00007ffb`3cb8cfe3 xul!js::proxy_Call+0x88 [z:\mozilla-release\js\src\proxy\proxy.cpp @ 739]
17 00000094`affe8c50 00007ffb`3cd68f1b xul!js::CallJSNative+0x63 [z:\mozilla-release\js\src\jscntxtinlines.h @ 293]
18 00000094`affe8ca0 00007ffb`3cd68d7d xul!js::InternalCallOrConstruct+0x18b [z:\mozilla-release\js\src\vm\interpreter.cpp @ 452]
19 00000094`affe8d90 00007ffb`3cd6418d xul!InternalCall+0x13d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 516]
1a 00000094`affe8e00 00007ffb`3cf17c57 xul!js::CallFromStack+0x1d [z:\mozilla-release\js\src\vm\interpreter.cpp @ 522]
1b 00000094`affe8e30 00000157`e3286a2e xul!js::jit::DoCallFallback+0x5e7 [z:\mozilla-release\js\src\jit\baselineic.cpp @ 2453]


# Content process preference 
- The list of preference sent to the content process 
d:\mozilla-source\mozilla-release\dom\ipc\ContentPrefs.cpp
D:\mozilla-source\mozilla-release\modules\libpref\prefapi.cpp


# file url access control 
- nsScriptSecurityManager.cpp 
const nsTArray<nsCOMPtr<nsIURI>>&
nsScriptSecurityManager::EnsureFileURIWhitelist()


# All the browser preferences location 
- reference 
d:\mozilla-source\mozilla-release\browser\components\preferences

in the XUL location 

D:\mozilla-source\mozilla-release\extensions\pref\autoconfig\src\prefcalls.js

# Performance measurement 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance
- profiler 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Reporting_a_Performance_Problem

    + setup profiler extension 
    https://perf-html.io/
    
    + capture and share a profile 



# Firefox telementry which is used to collect usage data for FF and send to mozilla 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Adding_a_new_Telemetry_probe
about:telementry

# Get firefox crash reports 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting
about:crashes


# Mozilla source tree documentation 
- reference 
https://firefox-source-docs.mozilla.org/




# Send a FF patch 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/How_to_Submit_a_Patch


# Editor configuration 
- reference 
https://developer.mozilla.org/en-US/docs/Developer_Guide/Editor_Configuration


# document to introduce hacking mozilla 
https://developer.mozilla.org/en-US/docs/Mozilla/An_introduction_to_hacking_Mozilla


# debug FF property, evaluate property value in windbg 
?? &((*(name.ptr))->d.inlineStorageLatin1)


# debug breakpoints 
- condition breakpoints 
.if(@@c++((*(name.ptr))->d.inlineStorageLatin1[0] == 'a'&& (*(name.ptr))->d.inlineStorageLatin1[1] == 'd' && (*(name.ptr))->d.inlineStorageLatin1[2] == 'd' && (*(name.ptr))->d.inlineStorageLatin1[3] == 'E')){.echo break when access addEventListener!!!;}.else{gc;}

    + new condition 
    
        * set breakpoint to 
4 e 00007ff9`aa2dfbc8 [z:\mozilla-release\js\src\jsobj.h @ 852]    0001 (0001)  0:**** xul!js::GetProperty+0x18 "$$<f:\\break.txt"

//reduce ambiguous
bp `jsobj.h:852` "$$<f:\\break.txt"

    
        * condition 
.if(@@c++((name->d).inlineStorageLatin1[0] == 'a'&& (name->d).inlineStorageLatin1[1] == 'd' && (name->d).inlineStorageLatin1[2] == 'd' && (name->d).inlineStorageLatin1[3] == 'E')){.echo break when access addEventListener!!!;}.else{gc;}

- breakpoints 
 0 d 00007ff9`aa2e750b     0001 (0001)  0:**** xul!js::LookupName+0x1b "$$<f:\\break.txt"
 1 d 00000000`00000000     0001 (0001)  0:**** 
 2 e 00007ff9`a6cd5898     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x258
 3 e 00007ff9`a6d43660     0001 (0001)  0:**** xul!xpc::SandboxProxyHandler::has+0x90
 4 e 00007ff9`a6cd577c     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x13c
 5 e 00007ff9`a6cd59a0     0001 (0001)  0:**** xul!xpc::DOMXrayTraits::resolveOwnProperty+0x360
 9 d 00007ff9`a6ccf2b0     0001 (0001)  0:**** xul!xpc::XrayWrapper<js::CrossCompartmentWrapper,xpc::OpaqueXrayTraits>::get
10 d 00007ff9`a6d435d0     0001 (0001)  0:**** xul!xpc::SandboxProxyHandler::has

- find issue type is 
class xpc::XrayWrapper<js::CrossCompartmentWrapper,xpc::JSXrayTraits>

- get system principle from js 
let systemPrincipal = Cc["@mozilla.org/systemprincipal;1"]
    .createInstance(Ci.nsIPrincipal);
    
let sandbox = new Cu.Sandbox([content], {
      sandboxPrototype: content,
      sandboxName: "browser-api-execute-script",
      allowWaivers: true,
      wantXrays: true,
      sameZoneAs: content
    });
    
Services.scriptSecurityManager.getSystemPrincipal()

    let sandbox
      = Cu.Sandbox(CC("@mozilla.org/systemprincipal;1", "nsIPrincipal")(),
                   {wantGlobalProperties: ["indexedDB"]});
                   
CompartmentPrivateCompartmentPrivate* priv = CompartmentPrivate::Get(CurrentGlobalOrNull(cx));                   


# CSP string directives in content script 
- reference in source code 
D:\mozilla-source\mozilla-release\dom\security\nsCSPUtils.h

# FF security sandbox implementation location 
D:\mozilla-source\mozilla-release\security\sandbox


# FF SpiderMonkey JavaScript Engine API reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_reference


# Mozilla test codebase 
D:\mozilla-source\mozilla-release\testing


# Mozilla fundamental types 
D:\mozilla-source\mozilla-release\mfbt

# Webdriver geckodriver 
D:\mozilla-source\mozilla-release\testing\geckodriver

# preference all path 
- all preference setting location 
D:\mozilla-source\mozilla-release\modules\libpref\init\all.js
D:\mozilla-source\mozilla-release\browser\app\profile\firefox.js

// Whether Xrays expose properties from the named properties object (aka global
// scope polluter).  Values are:
//   0 = properties exposed on Xrays
//   1 = properties exposed on Xrays, except in web extension content scripts.
//   2 = properties not exposed on xrays
pref("dom.allow_named_properties_object_for_xrays", 1);

// Turn off interprocess security checks. Needed to run xpcshell tests.
pref("network.disable.ipc.security", false);

// Limit the absolute number of http connections.
// Note: the socket transport service will clamp the number below this if the OS
// cannot allocate that many FDs
#ifdef ANDROID
pref("network.http.max-connections", 256);
#else
pref("network.http.max-connections", 900);
#endif

// If NOT connecting via a proxy, then
// a new connection will only be attempted if the number of active persistent
// connections to the server is less then max-persistent-connections-per-server.
pref("network.http.max-persistent-connections-per-server", 6);

// Number of connections that we can open beyond the standard parallelism limit defined
// by max-persistent-connections-per-server/-proxy to handle urgent-start marked requests
pref("network.http.max-urgent-start-excessive-connections-per-host", 3);


# Multiple process Firefox overview 
- introduction 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox
    + message manager 
    + OMTC, off main thread compositing, use a place holder for help sharing the structure and share the big data in background with shared memory or GPU memory for rendering purpose 
    + CPOW 
    + frame script 
    + interprocess communication with chrome IPC libraries 
    + cross process API 

- reference 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Technical_overview


# Mozilla IPDL introduction 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/IPDL/Tutorial
- inter process communication protocol definition language 

# Mozilla Framework Based on Templates (MFBT)
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/MFBT

- the folder is mfbt/ in the source tree 
- Functionality 
    + types and type manipulation 
    StandardInteger.h, implements <stdint.h> 
    
    Types.h, includes StandardInteger.h and further provides size_t 
    
    CheckedInt.h implement checked integers, behave like integer but safely check for integer overflow and divide by zero 
    
    FloatingPoint.h, provide various operations for examining and working upon double precision floating point values 
    
    + Core 
    Types.h further provides macros to define imported and exported C symbols 
    
    Attributes.h implements various function and class attribute macros 
    
    Likely.h, provide MOZ_LIKELY and MOZ_UNLIKELY marcros to annotate conditions with their expected truthiness 
    
    - Util.h, implements various other bits of usefuly functionally. 
    
    - debugging 
    Assertions.h 
    GuardObjects.h 
    
    + Data structure 
    LinkedList.h 
    RangePtr.h 
    RefPtr.h 
    Scoped.h 
    ThreadLocal.h 

# JavaScript code module reference such as Services 
https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules


# ipdl tutorial which contain in mozilla source 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/IPDL/Tutorial

- introduction 
All messages for multi-process plugins and tabs in Firefox are declared in the IPDL language.

    + messages are sent between parent and a child end points, called actors. An IPDL protocol declares how actors communicate:
    
- parent/child actors 
                Parent              Child 
IPC tabs        chrome process      Content process 
IPC plugins     content process     plugin process

- The IPDL compiler generates several C++ headers from each IPDL protocol. This generated code manages the details of the underlying communication layer (sockets and pipes)

    + example 
async protocol PPlugin
{
//two message can be sent from the parent to the child 
child:
  Init(nsCString pluginPath);
  Shutdown();

//one method could be sent from the child to parent 
parent:
  Ready();
};

    + generated header content 
class PPluginParent
{
public:
  bool SendInit(const nsCString& pluginPath) {
    // generated code to send an Init() message
  }

  bool SendShutdown() {
    // generated code to send a Shutdown() message
  }

protected:
  /**
   * A subclass of PPluginParent must implement this method to handle the Ready() message.
   */
  bool RecvReady() = 0;
};

class PPluginChild
{
protected:
  bool RecvInit(const nsCString& pluginPath) = 0;
  bool RecvShutdown() = 0;

public:
  bool SendReady() {
    // generated code to send a Ready() message
  }
};
    + implement the parent 
class PluginChild : public PPluginChild
{
protected:
  void RecvInit(const nsCString& pluginPath) {
    mPluginLibrary = PR_LoadLibrary(pluginPath.get());
    SendReady();
  }
  void RecvShutdown() {
    PR_UnloadLibrary(mPluginLibrary);
  }

private:
  PRLibrary* mPluginLibrary;
};

- Because protocol messages are represented as C++ methods, it's easy to forget that they are in fact asynchronous messages: by default the C++ method will return immediately, before the message has been delivered.

- each message type includes a "direction" which specifies whether the message can be sent from parent to child, from child to parent or both ways 

child: from parent to child 
parent: from child to parent 
both: both way 

    + example 
// PDirection.ipdl
async protocol PDirection
{
child:
  Foo();  // can be sent from-parent-to-child
parent:
  Bar();  // can be sent from-child-to-parent
both:
  Baz();  // can be sent both ways
};

- parameters, Message declarations allow any number of parameters. Parameters specify data that are sent with the message. Their values are serialized by the sender and deserialized by the receiver

- custom primitive types, When you need to send data of a type other than one built into IPDL, you can add a using declaration in an IPDL specification.
using mozilla::plugins::NPRemoteEvent;

sync protocol PPluginInstance
{
child:
  HandleEvent(NPRemoteEvent);
};

- unions
    + support declaring discriminated unions 
using struct mozilla::void_t from "ipc/IPCMessageUtils.h";

union Variant
{
  void_t;
  bool;
  int;
  double;
  nsCString;
  PPluginScriptableObject;
};

    + will generated 
struct Variant
{
  enum Type {
    Tvoid_t, Tbool, Tint, Tdouble, TnsCString, TPPlugionScriptableObject
  };
  Type type();
  void_t& get_void_t();
  bool& get_bool();
  int& get_int();
  double& get_double();
  nsCString& get_nsCString();
  PPluginScriptableObject* get_PPluginScriptableObject();
};

- structs 
- array 
- synchronous and RPC messaging 
But what if we wanted to wait until the message was handled, or get return values from a message?

In IPDL, there are three different semantics:
1.asynchronous semantics; the sender is not blocked.
2.Wait until the receiver acknowledges that it received the message. We call this synchronous semantics, as the sender blocks until the receiver receives the message and sends back a reply. The message may have return values.
3.rpc semantics are a variation on synchronous semantics, see below.

protocol PPluginInstance
{
child:
    sync Init() returns (bool windowless, bool ok);
};

    + the C++ method names for synchronous and RPC messages are different
            sender              receiver 
async/sync  SendMessageName     RecvMessageName 
rpc         CallMessageName     AnswerMessageName 

- message semantics strength, sync is stronger than async 
sync protocol xx
{
}

- "RPC" stands for "remote procedure call," and this third semantics models procedure call semantics. A quick summary of the difference between RPC and sync semantics is that RPC allows "re-entrant" message handlers

    + example,  "CallMeCallYou()" RPC interface, and the parent offers a "CallYou()" RPC interface. The rpc qualifiers mean that if the parent calls "CallMeCallYou()" on the child actor, then the child actor, while servicing this call, is allowed to call back into the parent actor's "CallYou()" message.
    
rpc protocol Example {
child:
    rpc CallMeCallYou() returns (int rv);

parent:
    rpc CallYou() returns (int rv);
};

Please don't use RPC semantics. RPC semantics exists mainly to support remoting plugins (NPAPI), where we have no choice.

Chrome to content calls (for IPC tabs) must only use async semantics

- Message delivery order, Delivery is "in-order", that is, messages are delivered to the receiver in the order that they are sent, regardless of the messages' semantics

- A sub-protocol is bound to a "manager" which tracks its lifetime and acts as a factory. A protocol hierarchy begins with a single top-level protocol from which all subprotocol actors are eventually created. In Mozilla there are two main top-level protocols: 

PPluginModule for remote plugins 
PContent for remote tabs.

    + example extends the toplevel plugin protocol to manage plugin instances.
include protocol PPluginInstance;

rpc protocol PPlugin
{
    manages PPluginInstance;
child:
    rpc Init(nsCString pluginPath) returns (bool ok);
    rpc PPluginInstance(nsCString type, nsCString[] args) returns (int rv);
};

// ----- file PPluginInstance.ipdl

include protocol PPlugin;

rpc protocol PPluginInstance
{
    manager PPlugin;
child:
    rpc __delete__();
    SetSize(int width, int height);
};
    
__delete__ is a built-in construct, and is the only IPDL message which does not require an overridden implementation 

AllocPProtocol and DeallocPProtocol are a matched pair of functions. The typical implementation of these functions uses `new` and `delete

    + sub protocol deletion
// --- PExample.ipdl
include protocol PSubExample;

async protocol PExample
{
    manages PSubExample;

parent:
    PChild();
};

// --- PSubExample.ipdl
include protocol PExample;

async protocol PSubExample
{
    manager PExample;

child:
    __delete__();
};

//call 
aPSubExampleParent->Send__delete__();

//will trigger 
PSubExampleParent::ActorDestroy(Deletion)
/* Deletion is an enumerated value indicating
   that the destruction was intentional */
PExampleParent::DeallocPSubExample()1234
PSubExampleChild::Recv__delete__()
PSubExampleChild::ActorDestroy(Deletion)
PExampleChild::DeallocPSubExample()

- [not completed]

# Firefox tab container 
- introduction 
https://www.ghacks.net/2016/06/15/firefox-container-tab/
- wiki 
https://wiki.mozilla.org/Security/Contextual_Identity_Project/Containers
- support document 
https://support.mozilla.org/en-US/kb/containers


# Record and replay Firefox bugs 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Record_and_Replay_Debugging_Firefox
https://rr-project.org/


# Principals
- Create system principal in JS 
CC("@mozilla.org/systemprincipal;1", "nsIPrincipal")()
- waive xray 
Cu.waiveXrays(Cu.Sandbox(null).eval(`
    Object.defineProperty({}, "bar", {
      get: function() { return "bar"; },
      configurable: true,
      enumerable: true
    });
  `));
  
var sb = cu.Sandbox(["http://www.example.com",
                     "http://localhost:4444/redirect",
                     "http://localhost:4444/simple",
                     "http://localhost:4446/redirect"],


# Add log to webextension implementation 
Components.utils.import("resource://gre/modules/Log.jsm");
let log = Log.repository.getLogger("TruClient.Debug");
log.level = Log.Level.Debug;
log.addAppender(new Log.ConsoleAppender(new Log.BasicFormatter()));
let _info = log.info;
let _error = log.error;
log.info = (...args)=>{
  _info.call(log, '[truclient.ext] ', ...args);
};
log.error = (...args)=>{
  _error.call(log, '[truclient.ext]', ...args);
};


# Firefox source code search tool DXR 
- reference 
https://dxr.readthedocs.io/en/latest/use.html#highlighting

- Getting started
    + get the source 
    + if your project is implemented with compiled language, tell DXR how to build it 
    + run 
    $ dxr index 
    to index your code 
    + run 
    $ dxr serve 
    to present a web-based search interface 
    
- download dxr 
git clone https://github.com/mozilla/dxr.git

- booting and building 
    + using homebrw pacakage manager like mac, run dxr on virtualbox, install docker; docker-compose; and. <--and is a tool name 
    
    + on mac 
    $ brew install docker docker-compose docker-machine
    
    + on linux 
    $ docker-machine create --driver virtualbox --virtualbox-disk-size 50000 --virtualbox-cpu-count 2 --virtualbox-memory 512 default
    eval "$(docker-machine env default)"
    
    $ docker-machine start default 
    $ eval "$(docker-machine env default)"
    
    $ make docker_stop 
    $ make shell 
    $ make test 
    
- configuration 
...
- Deployment
- Use 
    + using keyword search. In Firefox and mozilla suite you specify keywords for bookmarks by filling in the "keyword" field in bookmark's properties 
    
    replace the keyword to url 
    
    http://kb.mozillazine.org/Using_keyword_searches
    
    default keywords 
    google 
    quote, dictionary.com 
    wp, wikipedia 
    slang, urban dictionary 
    ::, mozillaZineKB
    
    add a bookmark name and keyword.

    You can also create it manually:

    Do a search on the site you want to add a quicksearch to.
    Bookmark the page you are brought to (the results page).
    Open the Properties dialog for your new bookmark.
    In your bookmark’s URL (the Location field), find and replace what you searched for with %s (If it does not appear, you cannot use a quicksearch here)
    Add a keyword
    Difference between (small s) %s and (Capital S) %S

    (small s): %s will have additional substitution replacements: # by %23, % by %25, / by %2F, and @ by %40.
    (Capital S): %S will not have substitutions and allow use of C++ in a Google search, allow use of @ in an email substitution, allow use of a fragment-id in a url substitution index.html#example2, and use of a directory as in code/example2.txt.
    
    + querying
    filtered terms are structured as <filter name>:<argument>
    callers:frobulate 
    var:num_caribou 
    
    Text terms: just bare text and do simple substring match 
    hello 
    three independent words 
    
    + quoting, singles can contain doubles, doubles can contain singles 
    a phrase with a space: "hello, world"
    quotes in a plain text search, taken as literals since they're not leading: id="whatShouldIDoContent"
    double quotes inside single quotes as a filter argument: regexp:'"wh(at|y)'
    Blackslash escaping "I don't \"belive\" in fairies"
    
    + highlighting 
    single click to select it 
    single click then shift click, to select range 
    control-or command click, add to the set of highlighted lines 
    control-or command then shift-click 
- Development 


# Firefox XBL scope 
- XBL scope 
a raw XBL scope object corresponding to contentScope, which must
 be an object whose global is a DOM window. It is not wrapped into cx->compartment, so be sure to enter its compartment before doing anything meaningful.

- reference 
D:\mozilla-source\mozilla-release\js\xpconnect\src\xpcpublic.h


# Exception capture points 
// All of the exceptions thrown into JS from this file go through here.
// That makes this a nice place to set a breakpoint.
D:\mozilla-source\mozilla-release\js\xpconnect\src\XPCWrappedNativeJSOps.cpp


# Firefox webextension webrequest relative APIs. We could also expose other http relative property for har file generation 
const OPTIONAL_PROPERTIES = [
  "requestHeaders", "responseHeaders", "statusCode", "statusLine", "error", "redirectUrl",
  "requestBody", "scheme", "realm", "isProxy", "challenger", "proxyInfo", "ip", "frameAncestors",
];


# Firefox about protocol 
https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/The_about_protocol    
    
    
# Execute mach bootstrap with error 
- message 

If filing a bug, please include the full output of mach, including this error
message.

The details of the failure are as follows:

CalledProcessError: Command '[u'c:\\Users\\shanger.CORPDOM\\.cargo\\bin\\rustc.exe', u'--version']' returned non-zero exit status 1

    + reason: rust execute error 
error: no default toolchain configured    
    
    + resolve, update rust configuration 
rustup install stable
rustup default stable


# Automatic test 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Automated_testing


# Firefox developer tools 
- reference 
https://docs.firefox-dev.tools/

- get a bugzilla account 
https://bugzilla.mozilla.org/

- install mercurial 
    + repo 
    https://hg.mozilla.org/mozilla-central/
    
    + install 
    mac install 
    $ brew install mercurial 
    
    linux 
    $ apt-get install mercurial 
    
- build and run locally 
    + build requirement reference 
    https://developer.mozilla.org/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build
    
    + download dependency 
$ mach bootstrap 

    + create .mozconfig file then 
$ mach configure 
$ mach build 

- run firefox 
$ mach run 

- rebuilding 
$ mach build faster 

to only build changed files 

    + start from scratch 
$ mach clobber 

add to .mozconfig to enable automatic clobber 
// Automatically clobber when an incremental build is not possible
mk_add_options AUTOCLOBBER=1

- build with artifact builds, if you don't change c/c++ code then you could use artifact build 
ac_add_options --enable-artifact-builds

mk_add_options MOZ_OBJDIR=./objdir-frontend
    
- modified JS file doesn't required build. just run 
$ mach run 
    
- setup development profile 
$ ./mach run -P development

- enable additional logging 
browser.dom.window.dump.enabled	true	Adds global dump function to log strings to stdout
devtools.console.stdout.chrome	true	Allows console API to write to stdout when used by chrome content
devtools.console.stdout.content	true	Allows console API to write to stdout when used by content
devtools.debugger.log (*)	true	Dump packets sent over remote debugging protocol to stdout.
devtools.dump.emit (*)	true	Log event notifications from the EventEmitter class
(found at devtools/shared/event-emitter.js).
    
- remote debugging protocol, RDP 
https://docs.firefox-dev.tools/backend/protocol.html

- source code search engine 
http://searchfox.org/mozilla-central/source (update frequently)
http://dxr.mozilla.org/mozilla-central/source/ (less often)
    
- investigating performance issues 
https://docs.firefox-dev.tools/contributing/performance.html
    + profile code 
    https://developer.mozilla.org/docs/Mozilla/Performance/Reporting_a_Performance_Problem
    
    profile document, https://perf-html.io/docs/#/
    
    project page, https://github.com/devtools-html/perf.html

- writing efficient react code 
https://docs.firefox-dev.tools/contributing/react-performance-tips.html

- always measure before optimizing 
https://docs.firefox-dev.tools/contributing/performance.html

- run tests 
./mach test devtools/path/to/test.js

 number of tests which are related to the bug you're fixing
 
./mach test devtools/path/to/test-thing-*.js

- install eslint 
./mach eslint setup 

- run performance tests 
./mach try -b o -p linux64 -u none -t damp-e10s --rebuild-talos 5 --artifact

- Frontend end 
    + panel svgs 
    + react 
    guidlines 
    + redux 
    guidlelines 
    + telemetry 
    
- backend 
    + remote debugging protocol 
    + client api 
    + debugger api 
    + backward compatibility 
    + actors 
    
- gitbook use markdown style to build document 
https://github.com/GitbookIO/gitbook


# Understand profiles, and profiling firefox 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Profiling_with_the_Built-in_Profiler#Understanding_Profiles
- profiling firefox startup and shutdown 
https://perf-html.io/docs/#/./guide-startup-shutdown


# Manually build symbols 
In the past you had to need to run mach build symbols manually


# Investigate website and browser performance 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance

- using xperf which is in MS performance toolkit to test firefox performance 
https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Profiling_with_Xperf

# Firefox project release note 
https://developer.mozilla.org/zh-CN/docs/Mozilla/Firefox/Releases/65


# Mozilla source tree document 
- reference 
https://firefox-source-docs.mozilla.org/index.html

- talos test 
https://wiki.mozilla.org/Performance_sheriffing/Talos/Tests
https://wiki.mozilla.org/Performance_sheriffing/Talos/Running


# Firefox built-in extension 
- saved location 
./browser/extensions 

devtools.aboutdebugging.showSystemAddons;false

- after build 
These get placed into the features directory of the application directory at build time.

- moz.build files 
As mentioned above, moz.build files are Python scripts. However, they are executed in a special Python sandbox

The execution sandbox treats all UPPERCASE variables specially. Any UPPERCASE variable must be known to the sandbox before the script executes.

the directory separate (UNIX-style paths) and * and ** used to denote wildcard matching

    + predefined symbols in the build file 
    https://firefox-source-docs.mozilla.org/build/buildsystem/mozbuild-symbols.html
    
    
# Web technology for developers 
- reference 
https://developer.mozilla.org/en-US/docs/Web

    + xpath 
    https://developer.mozilla.org/en-US/docs/Web/XPath
   
   
# Multiprocess Firefox 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Multiprocess_Firefox

- XPCOM 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM

- WebIDL 
https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings#ChromeOnly

- Security 
https://developer.mozilla.org/en-US/docs/Security/Firefox_Security_Basics_For_Developers

- WebExtension API documents in repo 
.\mozilla-release\toolkit\components\extensions\docs

- New webextension API task list 
https://bugzilla.mozilla.org/buglist.cgi?bug_status=UNCONFIRMED&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED&product=WebExtensions&resolution=---&status_whiteboard=[design-decision-approved]&status_whiteboard_type=allwordssubstr

- cross process communication, requires parameters should support structured clone 
https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm


# WebExtension  API development 
- reference 
https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/index.html


# High level turn feature on and off 
- features gates 
https://firefox-source-docs.mozilla.org/toolkit/components/featuregates/featuregates/index.html

    
# Setup firefox debugging environment 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_Mozilla_with_gdb    







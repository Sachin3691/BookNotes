Firefox project document;Note=Erxin

# Getting involved with mozilla 
- reference 
https://www.joshmatthews.net/blog/2010/03/getting-involve-with-mozilla/

# Developer guide, contain all information for firefox developers 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

# Build firefox for different versions 
- https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial

# Mozilla build reference 
https://wiki.mozilla.org/MozillaBuild

# How mozilla's build system works 
+ reference https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/How_Mozilla_s_build_system_works
- mach build to build the tree is sufficient to work with the source tree 
- phases
    + system detection and validation
    + preparation of the build backend 
    + invokation of the build backend 
    
- phase 1, configure 
    + centers around the configure script generated configure.in which is written in M4(http://www.seindal.dk/rene/gnu/) and process using autoconfig 2.13(http://www.gnu.org/software/autoconf/) 
    
    + The primary output of the configure script is an executable file in the object directory called config.status. It is written in python instead of a normal shell script 
    
- phase2, build backend preparation and the build definition 
config.status is charged with the task of tell a tool how to build the tree 

build system definition consist of various moz.build files in the tree 

- phase3, invokation of the build backend, make consuming makefiles. non-mkae build backends such as Tup or Visual studio 

The main moz.build file defines the tiers and directories in them. In reality, the main moz.build files includes other moz.build files such as /toolkit/toolkit.mozbuild

- recursive make backend 
Each tier consists of 3 sub-tiers: export, libs, and tools. This roughly correspond to the actions of pre-build, main-build, and post-build. 

- moz.build files 
moz.build files are how each part of the source tree defines how it is integrated with the build system.
    
An individual moz.build file is actually a Python script. However, they are unlike most Python scripts you will ever see. The execution environment is highly controlled so moz.build files can only perform a limited set of operations

moz.build UPPERCASE Variables and Functions
sandbox.py contains code for a generic Python sandbox. 
reader.py contains the code that defines the actual moz.build sandbox

- build libraries 
    + components are shared libraries 
    + non component sahred libraries  such as libxpcom, libmozjs 
    + static libraries, used as intermediate steps to build a shared library 
    
# Configure build options 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Configuring_Build_Options

# Developer guide 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

- view firefox source code online
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Viewing_and_searching_Mozilla_source_code_online


# Source code directory structure 
- working with mozilla source code 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code

- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Directory_structure

- explains the folders which could not directly get the meaning from the names 
caps, capability-based web page security management 
chrome, chrome registry which seamonkey still uses rdf/chrome 
config, build relative 
docshell, main object managing things related to a document window. Each frame has its own docshell. it is the outermost latyer of the embedding API used to embed a Gecko browser into an application 

dom, idl definitions of the interfaces defined
     connection between javascript and the implementation of DOM objects that are specific both to javascript and to DOM. binding between XPCOM and javascript live in js/src/xpconnect/ 
     implementation of a few of the core "DOM level 0" objects such as window, window navigator, window.location etc 
     
editor, html editor 
embedding, support embed Gecko in app 
extension, extend mozilla features 
extension/pref
gfx, interfaces that abstract the capability of platform specific graphics toolkits
gradle, related to JVM build system 
hal, platform specific functions such as sensor info, memory info, android alarm etc 
image, image render 
intl, l10n 
ipc, container for implementation of IPC 
js,  js/src, javascript engine known as SpiderMonkey 
     js/jsd, javascript debugging library 
     js/xpconnect/, support code for calling between js and cpp 
layout, render UI such as css xul etc 
media, sources of media libraries 
mfbt, impelmentation of weakptr 
mobile 
module, compression/archiving, math etc 
mozglue, low-level functionality including dynamic link for android, dll block list etc 
netwerk, networking library 
nsprpub, netscape portable runtime, abstraction layer to things like threads, file i/o, and socket 
parser, parse xml/html 
probes, related to dtrace 
python, cross module python code 
rdf, RDF handling APIs, Resource Description Framework (RDF) is a family of specifications for a metadata model that is often implemented as an application of XML
services, accounts and sync 
servo, parallel browser engine project 
storage, xpcom wrapper for sqlite 
taskcluster, scripts and code to automatically build and test Mozilla trees for the continuous integration and release process 
testing, common testing tools for mozilla codebase 
third_party, vendored dependencies maintained outside of mozilla 
toolkit, shared with different products such as thunderbird etc. contains front-end components 
         toolkit/mozapps/extensions/test/xpinstall, contain codes to build xpi install 
tools, optionally build, used for debugging 
uriloader/prefetch, prefetch documents in order to have them cached for faster loading 
view, cross-platform painting, scrolling, event handling, z-ordering, and opacity will be obsolete 
widget, operation system specific widget 
xpcom
xpfe, cross platform front end, the seamonkey frontend, contains the xul files for the browser interface, common files used by the other parts of the mozilla suite. XBL files for the parts of the XUL language 



# Firefox project policies settings 
http://www-archive.mozilla.org/projects/security/components/ConfigPolicy.html


# Firefox irc channel 
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Getting_Started_with_IRC


# Firefox enable file url access
user_pref("capability.policy.policynames", "localfilelinks");
user_pref("capability.policy.localfilelinks.sites", "http://www.example.com");
user_pref("capability.policy.localfilelinks.checkloaduri.enabled", "allAccess");

http://kb.mozillazine.org/Links_to_local_pages_do_not_work
https://stackoverflow.com/questions/5317834/workaround-for-href-file-in-firefox


# Decode *.rsa file for firefox extension
- with python 3.5 install pyasn1 library 
>>> from pyasn1.codec.der import decoder
>>> buf = open(r'path-to-*.rsa', 'rb').read()
>>> decoder.decode(buf)

https://www.di-mgt.com.au/how-mozilla-signs-addons.html


# Firefox build download 
http://ftp.mozilla.org/pub/firefox/tinderbox-builds/

# Using the mozilla symbol server 
https://developer.mozilla.org/en-US/docs/Mozilla/Using_the_Mozilla_symbol_server
- download symbol with windbg 
SRV*c:\symcache\*http://msdl.microsoft.com/download/symbols;SRV*c:\symcache\*https://symbols.mozilla.org/


# Understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports

# Firefox enable legacy extension by 
about:config -> extensions.legacy.enabled -> true


# DOM VK event list
https://www.w3.org/TR/2000/WD-DOM-Level-3-Events-20000901/events.html

# Firefox cross domain issue 
- nsnetutil.cpp 
NS_HasBeenCrossOrigin

- nscontentsecuritymanager.cpp 
rv = CheckCHannel(aChannel); 
doContentSecurityCheck+0x86


# Firefox crash 
- file xmlhttprequestmainthread.cpp 
xul!mozilla::dom::XMLHttpRequestMainThread::DispatchToMainThread

- debug minidump 
https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_a_minidump

- understand crash report 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Crash_reporting/Understanding_crash_reports

# Contribute to Firefox project 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Introduction


# Firefox developer tool 
http://firefox-dev.tools/


# Firefox javascript engine spider monkey 
- spidermonkey 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey

- gc rooting guide 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/GC_Rooting_Guide

- hacking tips 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips



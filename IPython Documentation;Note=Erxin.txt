IPython Documentation;Note=Erxin

# Introduction 
- release 
6.4.0
Date May 10, 2018

- reference 
http://ipython.readthedocs.io/en/stable/

- main features:

Comprehensive object introspection.
Input history, persistent across sessions.
Caching of output results during a session with automatically generated references.
Extensible tab completion, with support by default for completion of python variables and keywords, filenames and function keywords.
Extensible system of ‘magic’ commands for controlling the environment and performing many tasks related to IPython or the operating system.
A rich configuration system with easy switching between different setups (simpler than changing $PYTHONSTARTUP environment variables every time).
Session logging and reloading.
Extensible syntax processing for special purpose situations.
Access to the system shell with user-extensible alias system.
Easily embeddable in other Python programs and GUIs.
Integrated access to the pdb debugger and the Python profiler.

- compatible frontend it allows:
the object to create a rich display of Html, Images, Latex, Sound and Video.
interactive widgets with the use of the ipywidgets package.

- ipython three main components 
An enhanced interactive Python shell.
A decoupled two-process communication model, which allows for multiple clients to connect to a computation kernel, most notably the web-based notebook provided with Jupyter.
An architecture for interactive parallel computing now part of the ipyparallel package

- main features of interactive shell 
Dynamic object introspection. with ? and ?? additional detail 

Search with * wildcards, both when using the ? system and via %psearch command 

Completion in the local namespace by typing TAB at the prompt

Numbered input/output prompts with command history 

User-extensible 'magic' commands, prefixed with % or %% provide directory control, namespace information 

alias 

system shell start with ! and capture shell output by 
variable = !cmd or !! 

Expand python variables when calling the system shell, python variable prefixed with $ is expanded. A double $$ allows passing a literal $ to the shell 

Filesystem navigation, via a magic %cd command, along with a persistent bookmark system (using %bookmark) for fast access to frequently visited directories

A lightweight persistence framework via the %store command, which allows you to save arbitrary Python variables. restore by %store -r 

Macro system for quickly re-executing multiple lines of previous input with a single name via the %macro command. Macro also can be store and edit by %store and %edit 

Session logging 

Session restoring 

Verbose and colored 

Auto-parenthese via the %autocall, sin 3 is automatically converted to sin(3)

Auto quoting using , or ; as the first character forces auto-quoting of reset of the line 
,my_function a b becomes automatically my_function("a","b"), while ;my_function a b becomes my_function("a b").

Extensible input syntax, This allows for example pasting multi-line code fragments which start with >>> or ... such as those from other python sessions 

Flexible configuration system. It uses a configuration file which allows permanent setting of all command-line options

Embeddable. Call IPython as a python shell inside your own python programs 

The %run magic command (with the -d option) can run any script under pdb’s control, automatically setting initial breakpoints for you. easy debug by %debug 

Profiler support. You can run single statements (similar to profile.run()) or complete programs under the profiler’s control. see %prun and %run -p

Simple timing information. You can use the %timeit command to get the execution time of a Python statement or expression.

To get the timing information for more than one expression, use the %%timeit cell magic command.

Doctest support. The special %doctest_mode command toggles a mode to use doctest-compatible prompts

- Decoupled tow process mode 
Most of this is now part of the Jupyter project, which includes jupyter console, jupyter qtconsole, and jupyter notebook

- interactive parallel computing 


# Tutorial 
- introducing ipython 
In[#]:        # indicate the input line 
Out[#]:       # indicate the output line 

- four most helpful commands 
? introduction and overview of ipython's features 
%quickref, quick reference 
help, python's own help system 
object?, details about 'object', use 'object??' for extra details 

- tab completion, tab completion also works with complex expression 

start with ipython 6.0 if jedi is installed, ipython will pull completions from Jedi 

- exploring your objects 
$ object_name? 

magic command 
%pdoc 
%pdef 
%psource 
%pfile 

- magic functions, you can call with a command line style syntax 
Lines magics can return results and can be used in the right hand side of an assignment. 

Cell magics are prefixed with a double %%, and they are functions that get as an argument not only the rest of the line, but also the lines below it in a separate argument.

Functions that work with code: run, edit, save, macro, recall, etc.
Functions which affect the shell: colors, xmode, autoindent, automagic, etc.
Other functions such as reset, timeit, writefile, load, or paste.

A more detailed explanation of the magic system can be obtained by calling %magic, and for more details on any magic function, call %somemagic? to read its docstring. To see all the available magic functions, call %lsmagic

    + reference http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb

- The run magic command allows you to run any python script and load all of its data directly into the interactive namespace.

%run has special flags for timing the execution of your scripts (-t), or for running them under the control of either Python’s pdb debugger (-d) or profiler (-p)

- The edit command gives a reasonable approximation of multi-line editing, by invoking your favorite editor on the spot

- Debugging, After an exception occurs, you can call debug to jump into the Python debugger (pdb) and examine the problem. Alternatively, if you call pdb

- step through a program from the beginning by calling %run -d theprogram.py

- history, input and output history are kept in variables called In and Out

The last three objects in output history are also kept in variables named _, __ and ___.

%history magic function to examine past input and output. Input history from previous sessions is saved in a database, and IPython can be configured to save output history.

use your input history, including %edit, %rerun, %recall, %macro, %save and %pastebin. You can use a standard format to refer to lines:

%pastebin 3 18-20 ~1/1-5
This will take line 3 and lines 18 to 20 from the current session, and lines 1-5 from the previous session.

- system shell call, define your own system aliases 

simply prefix it with !, e.g.:

$ !ping www.bbc.co.uk

capture the output into a Python list, e.g.: files = !ls

Python comes with some pre-defined aliases and a complete system for changing directories, both via a stack (see pushd, popd and dhist) and via direct cd

- configuration, ipython profile create to produce the default config files. These will be placed in ~/.ipython/profile_default, and contain comments explaining what the various options do

- startup files, If you want some code to be run at the beginning of every IPython session, the easiest way is to add Python (.py) or IPython (.ipy) scripts to your profile_default/startup/ directory.


# Rich output, ipython 5.x compatible with python 2.7 and the newer only match python 3.3+
- output support image, sounds, animations etc by 
from IPython.display import display 

display(<your object>)

instead of print()

- plotting, matplotlib.pyplot.ion()/matplotlib.pyplot.ioff() which have the advantages of working outside of IPython as well

%matplotlib magic command. This performs the necessary behind-the-scenes setup for IPython to work correctly hand in hand with matplotlib

the default matplotlib backend in a separate window. Alternatively, the backend can be explicitly requested using, for example:

%matplotlib gtk

A particularly interesting backend, provided by IPython, is the inline backend. This is available only for the Jupyter Notebook and the Jupyter QtConsole. It can be invoked as follows:

%matplotlib inline


# IPython reference 
- start ipython with command 
$ ipython [options] files 

- get help 
$ ipython --help 

- using qt to render the GUI 
$ ipython --matplotlib qt

- in Windows commands ‘/’ flags options, so you can not use it for the root directory. This means that paths beginning at the root must be typed in a contrived manner like: %copy \opt/foo/bar.txt \tmp

- magic command system, If you have ‘automagic’ enabled (as it is by default), you don’t need to type in the single % explicitly for line magics

%cd is equal to cd command in terminal 

    + Lines that begin with %% signal a cell magic: they take as arguments not only the rest of the current line, but all lines below them as well, in the current execution block. 
    
    cell command can modify input as they receive the python code block as a string 
    
    + cell command always required %% prefix 

line and cell command can be overlay by normal variable. During this condition we could add the % and %% prefix 

- print detail infor for an object 
?instance 
instance? 

pdoc <object>, print docstring 
pdef <object>, print signature 
psource <object>, print code 
pfile <object> show the entire source of an object 
who/whos, give information about identifiers you have defined interactively 

- command line completion use tab 
- search command 
ctrl-r to open a search prompt 

using ctrl-p, ctrl-n to search thourgh only the history items 

- autoindent,  IPython uses prompt_toolkit in place of readline, it thus can recognize lines ending in ‘:’ and indent the next line

change the input mode to vi, you will need to set the TerminalInteractiveShell.editing_mode configuration option of IPython

- session logging and restoring 

    + log all input from the start with option 
    $ ipython --logfile=foo.py 
    
    + log in the middle of execution with the magic function 
    $ %logstart [log_name [log_mode]]






























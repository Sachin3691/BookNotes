Learning PHP=David Sklar;Note=Erxin

# Introduction
- other resource 
php manual, for exploring php's extensive function library, http://php.net/manual/zh/index.php

php mailing list, http://www.php.net/mailing-lists.php

php right way is a website, http://www.phptherightway.com/

books:
programming php 
php cookbook 
modern php 

mysql and php:
learning php, mysql & javascript 
sql in a nutshell 
mysql cookbook 
mysql reference manual 

- safari books online 

- php's place in the web world, it is used mostly for building websites 

- hello world 
<html>
    <head></head>
    <body>
        <b>
            <?php 
            print "hello world"
            ?>
        </b>
    </body>
</html>

- form for submitting data 
<form method="post" action="sayhello.php">
    <input type="text" name="user"/>
    <br/>
    <button type="submit">Say Hello</button>
</form>

//sayhello.php 
<?php 
    print "Hello, ";
    print $_POST['user'];
    print "!";
?>

- let php print out the form 
<?php
// Print a greeting if the form was submitted
if ($_POST['user']) {
print "Hello, ";
// Print what was submitted in the form parameter called 'user'
print $_POST['user'];
print "!";
} else {
// Otherwise, print the form
print <<<_HTML_
<form method="post" action="$_SERVER[PHP_SELF]">
Your Name: <input type="text" name="user" />
<br/>
<button type="submit">Say Hello</button>
</form>
_HTML_;
}
?>

- print formatted data 
<?php print "The population of the US is about: ";
print number_format(320853904);
?>

- basic rules of php proram 

- php start end tag <?php ... ?>

- whitespace and case-sensitivity 
- comment, //, # for line comment and /*...*/


# Data: working with text and numbers 
- text/string, no max limitation base on memory size
    + define 
    '...'
    "..."
    'xx
    xxx
    xxx'
    
    + double quoted strings 
    \n 
    \r 
    \t 
    \\ 
    \$ 
    \"
    \0...\777 octal number 
    \x0 ... \xFF, hexadecimal number 

    + different between single quoted string and double quoted string is that, double quote string will substituted variable to value

     $user holds the value Bill, then 'Hi $user' is just that:Hi $user. However, "Hi $user" is Hi Bill

    + define document syntax for string 
<<<HTMLBLOCK
<html>
<head><title>Menu</title></head>
<body bgcolor="#fffed9">
<h1>Dinner</h1>
<ul>
<li> Beef Chow-Fun
<li> Sauteed Pea Shoots
<li> Soy Sauce Noodles
</ul>
</body>
</html>
HTMLBLOCK

example:
print <<<HTMLBLOCK
<html>
<head><title>Menu</title></head>
<body bgcolor="#fffed9">
<h1>Dinner</h1>
<ul>
<li> Beef Chow-Fun
<li> Sauteed Pea Shoots
<li> Soy Sauce Noodles
</ul>
</body>
</html>
HTMLBLOCK;

    + concategate string
print "bread" . "fruit";

- validating strings
- string functions
trim('string');
strlen();
strcasecmd();
printf();
strtolower();
strtoupper();
ucwords() function uppercases the first letter of each word in a string 
substr() 
str_replace()

- different kinds of numbers 


- define variable 
$variable-name = value;

- operating on variable 
+=
.=
++$var 
$var--

- putting variables inside strings, double quoted strings and here documents could interpolate variable into them 
print "send replace to $var";

print <<<menu 
<html>
..
</html>
menu;

    + php 5.3+ have another document type called now document, when you put the beginning delimiter word in single quotes, you get a now document. no variable interpolation is done inside a now document 

    + curly braces are necessary to indicate where the variable name stops the literal string begins 
$preparation = 'braise';
$meat = 'beef';
print "{$preparation}"d $meat with vegetables";


# Logic making decissions and repeating yourself 
- if expression 
if(expression){

}
elseif(expression1){
}
else{
}

- comparison 
==, >, <, <=, >=, != 

    + string comparison can produce unexpected result, if the string only contain numbers or start with numbers, when php engine see string like this, if converts them to numbers for the comparison 
    
    + ensure php compare string use dictionary order(string compare), then use built-in funciton 
    strcmp()
    
    + compare non-ascii strings, need use the Collator class. the regular string comparison function may not do what you want 
    
    + the spaceship operator(<=>) does comparison similar to strcmp(), but for any data type. it evaluates to a negativenumber when its lefthand operand is less than the righthand operand. a positive number when the righthand oprand is bigger and 0 when they are equal 
    1 <=> 12.7; //negative 
    "charlie" <=> "bob"; //positive c comes after b 
    
    // Comparing numeric strings works like < and >, not like strcmp()
    $x = '6 pack' <=> '55 card stud';

    // Comparing numeric strings works like < and >, not like strcmp()
    $x ='6 pack' <=> 55;

- logic operators, strcasecmp()
&&, ||

- repeating yourself 
while(expression){

}

for($i = 1; $i<10; $i++){
}


# Groups of data,working with arrays 
- create array, specify a comma-delimited list of key/value pairs separated by => 
$var = array('corn' => 'yellow',
             'beet' => 'red', 
             'carrot' => 'orange');

    + php 5.4+ 
$vegetables = ['corn' => 'yellow', 'beet' => 'red', 'carrot' => 'orange'];

$vegetables['corn'] = 'yellow';

// An array called $dinner with numeric keys
$dinner[0] = 'Sweet Corn and Asparagus';
$dinner[1] = 'Lemon Chicken';

    + create a numeric array, create array with only values without simbol => 
$dinner = array('Sweet Corn and Asparagus',
'Lemon Chicken',
'Braised Bamboo Fungus');
print "I want $dinner[0] and $dinner[1].";

// Add an element to the end of $dinner
// This sets $dinner[3]
$dinner[] = 'Flank Skin with Spiced Flavor';
The empty brackets add an element to the array. The new element has a numeric key
that’s one more than the biggest numeric key already in the array. If the array doesn’t
exist yet, the empty brackets add an element with a key of 0.

- get the size of an array 
count($array);

- loop through array 
foreach($array as $key => $value){

}

- To check for an element with a certain key, use array_key_exists()
array_key_exists(key, $array); //if the key exist in the $array then return true

- Interpolating array element values with curly braces
$meals['Walnut Bun'] = '$3.95';
$hosts['www.example.com'] = 'website';
print "A Walnut Bun costs {$meals['Walnut Bun']}.\n";
print "www.example.com is a {$hosts['www.example.com']}.";

- remove an element from an array 
unset($dishes[key]);

- make a string from an array with implode() 
Making a string from an array with implode()
$dimsum = array('Chicken Bun','Stuffed Duck Web','Turnip Cake');
$menu = implode(', ', $dimsum);
print $menu;

- Turning a string into an array with explode()
$fish = 'Bass, Carp, Pike, Flounder';
$fish_list = explode(', ', $fish);
print "The second fish is $fish_list[1]";

- sorting array, sort method should only be used with numeric arrays, non numeric keys will be assigned to number and the value will be sorted 

use asort method to sort string method 

use ksort to sort the key are in ascending order 

- using multidimensional arrays

$meals = array('breakfast' => ['Walnut Bun', 'Coffee'],
		'lunch' => ['Cashew Nuts', 'White Mushrooms'],
		'snack' => ['Dried Mulberries', 'Salted Sesame Crab']);

$lunches = [['Chicken', 'Eggplant', 'Rice'],
            ['Beef', 'Scallions', 'Noodles'],
            ['Eggplant', 'Tofu']];

$meal['lunch'][1];

    + iterating 
foreach($flavors as $culture => $culture_flavors) {
	// $flavor is the key and $example is the value
	foreach($culture_flavors as $flavor => $example) {
		print "A $culture $flavor flavor is $example.\n";
	}
}


# Groups of logic, functions and files 
- declaring and calling functions 
function func_name($arg = default_value){
    return value;
}

all the optional arguments must come after any mandatory arguments 

- variable scope, each function has its own scope, variable defined outside of function are called global variable. inside function is called local scope 
$dinner = 'Curry Cuttlefish';
function vegetarian_dinner() {
	print "Dinner is $dinner, or ";
	$dinner = 'Sauteed Pea Shoots';
	print $dinner;
	print "\n";
}
function kosher_dinner() {
	print "Dinner is $dinner, or ";
	$dinner = 'Kung Pao Chicken';
	print $dinner;
	print "\n";
}
print "Vegetarian ";
vegetarian_dinner();
print "Kosher ";
kosher_dinner();
print "Regular dinner is $dinner";

    + output 
Vegetarian Dinner is , or Sauteed Pea Shoots
Kosher Dinner is , or Kung Pao Chicken
Regular dinner is Curry Cuttlefish

- there are two ways to access a global variable 
    + from the $GLOBALS 
$dinner = 'Curry Cuttlefish';
function macrobiotic_dinner() {
	$dinner = "Some Vegetables";
	print "Dinner is $dinner";
	// Succumb to the delights of the ocean
	print " but I'd rather have ";
	print $GLOBALS['dinner'];
	print "\n";
}

    + use global keyword like python 
$dinner = 'Curry Cuttlefish';
function macrobiotic_dinner() {
    global $dinner;
	$dinner = "Some Vegetables";
	print "Dinner is $dinner";
	// Succumb to the delights of the ocean
	print " but I'd rather have ";
	print "\n";
}

- enforcing rules on arguments and return values, type declaration 
array, must be array 
bool, must be boolean 
callable, must be someting representing a function or method 
float, must be a floating-point number 
int, must be an integer 
string, must be a string 
name of a class, must an instance of that class 

function countdown(int $top) {
	while ($top > 0) {
		print "$top..";
		$top--;
	}
	print "boom!\n";
}
$counter = 5;
countdown($counter);
print "Now, counter is $counter";

    + strict mode, Even with type declarations, PHP 7 attempts to convert the type of an argument or return value that doesn’t actually match a type declaration but could match it. Numeric values get silently converted to strings, and strings that contain numbers get silently convertedto the appropriate numeric type. You can turn off this loosey-goosey default in a particular file byputting 
    
    declare(strict_types=1); 
    
    at the top of the file. 

- running code in another file
    + use require directive tells the php engine to load code located in a different file, if the operation fail then the program will stop 

require 'restaurant-functions.php';
/* $25 check, plus 8.875% tax, plus 20% tip */

$total_bill = restaurant_check(25, 8.875, 20);
/* I've got $30 */

$cash = 30;
print "I need to pay with ".payment_method($cash, $total_bill);

    + another way is use include statement but if the operation fail the program will continue execution 


# Data and logic together, working with objects
- basic terms 
class 
method 
property 
instance 
constructor 
static method 

- object basic 
class entree{
    public $name;
    public $ingredients = array();
    
    public function __construct(arg0, arg1, ...){
    }
    
    public function hasIngredient($ingredient){
        return in_array($ingredient, $this->ingredients);
    }
    public static function func-name(){
    }
}

//$this is point to the current instance 
$soup = new entree;
$soup->name = 'chicken soup';
entree::func-name(); //call a static method 

constructors, in php the constructor method of a class is always called __construct() 

//call constructor 
$soup = new entree(arg0, arg1)

- indicating a problem with exceptions, exception is a special object that can be used to indicate that something bad happend 
throw new Exception('$ingredients must be an array');

    + try... catch 
try{
    ..
}
catch(Exception $e){
}

- extending an object, inherit 
class ComboMeal extends Entree{
    public function hasIngredient($ingredient){
    
    }
}

- property and method visibility
public 
private 
protected 

- namespace, define a class in a namespace by add namespace keyword at the top of a file with a namespace name 

namespace Food;

class Fruit{
    public static function foo(){}
}

reference namespace 
\Food\Fruit::foo();

the '\' means the top level namespace, if omite it, the reference namespace is relative to the current file's namespace 

in php if a file contain no namespace declaration then it is contain in the default top level 

alias to reference namespace 
use Food\Fruit as f;
use Food\Fruit;


# Exchange information with users making web forms 
- print login information or print login form 
if ('POST' == $_SERVER['REQUEST_METHOD']) {
	print "Hello, ".$_POST['my_name'];
} else {
    print<<<_HTML_
    <form method="post" action="$_SERVER[PHP_SELF]">
    Your name: <input type="text" name="my_name" >
    <br>
    <input type="submit" value="Say Hello">
    </form>
    _HTML_;
}

- useful server variables, which provide information on the web server and current request 
Element                 Example
QUERY_STRING            category=kitchen&price=5            http://www.example.com/a.php?category=kitchen&price=5 

PATH_INFO               /browser extra path information tacked onto the end of the url after a slash http://www.example.com/browser 

SERVER_NAME             www.example.com 

DOCUMENT_ROOT           /usr/local/htdocs           the directory on the server holds the documents 

REMOTE_ADDR             175.56.28.30                the ip address making the request 

REMOTE_HOST             if your server configured user ip addresses into hostname, this is the host name making the request to your server 

HTTP_REFERER            http://shop.oreilly.com/product/923.do      if someoneclicked on a link to reach the current URL HTTP_REFERER contains the URL of the page that contained the link 

HTTP_USER_AGENT 

- accessing form parameters get method forms are put into $_GET, POST method forms are put into $_POST 

$_GET[key]
            
    + printing submit form parameter 
<form method="POST" action="catalog.php">
    <input type="text" name="product_id">
    <select name="category">
    <option value="ovenmitt">Pot Holder</option>
    <option value="fryingpan">Frying Pan</option>
    <option value="torch">Kitchen Torch</option>
    </select>
    <input type="submit" name="submit">
</form>
<?php
if (isset($_POST['lunch'])) {
	foreach($_POST['lunch']as $choice) {
		print "You want a $choice bun. <br/>";
	}
}
?>

- form processing with functions 
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
	process_form();
} else {
	show_form();
}

- validating data, data validation is one of the most important parts of a web application 

- required elements
if(strlen($_POST['email']) == 0){
    $errors[] = "you must enter an email address";
}

- numeric or string elements
    + filtering integer input 
$ok = filter_input(INPUT_POST, 'age', FILTER_VALIDATE_INT);
if (is_null($ok) || ($ok === false)) {
	$errors[] = 'Please enter a valid age.';
}

The FILTER_VALIDATE_INT and FILTER_VALIDATE_FLOAT filters check

In filter_input(INPUT_POST, 'age', FILTER_VALIDATE_INT) tells the PHP engine to examine submitted form data (INPUT_POST), specifically the form field named age

- number ranges, filter integer range 
$input['year'] = filter_input(INPUT_POST, 'year', FILTER_VALIDATE_INT,
		array('options' => array('min_range' => 1900,
                                 'max_range' => 2100)));

- email address, filter email 
$input['email'] = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);
if (!$input['email']) {
	$errors[] = 'Please enter a valid email address';
}

- html and javascript To prevent cross-site scripting attacks in your programs, never display unmodified external input. 

The strip_tags() function removes HTML tags from a string, and the htmlentities() function encodes special HTML characters.

$comments = strip_tags($_POST['comments']);
// Now it's OK to print $comments
print $comments;

The characters that have a special meaning in HTML (<, >, &, and ") have been
changed into their entity equivalents:
< to &lt;
> to &gt;
& to &amp;
" to &quot;

This is the same idea (but with a different syntax) as escaping a " or $ character inside a double-quoted string


# Remembering information: database 
- database provide convenience, simultaneous access, and security.
- use php data objects(pdo) database program abstraction layer 
- organizing data in a database 
- sql, structure query language 
- connect to a database program 
$db = new PDO('mysql:host=db.example.com;dbname=restaurant', username, password);

the first parameter is PDO DSN prefix and options 

- execute sql 
$db = new PDO('sqlite:/tmp/restaurant.db');
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$return = $db->exec(sql-string);

- get error info after failure 
$db->errorinfo();

- inserting form data safely with parepared statement avoid sql injuection attack 
$stmt = $db->prepare('INSERT INTO dishes (dish_name) VALUES (?)');
$stmt->execute(array($_POST['new_dish_name']));

- a complete data insertion form 
<form method="POST" action="<?= $form->encode($_SERVER['PHP_SELF']) ?>">
    <table>
    <?php if ($errors) { ?>
        <tr>
        <td>You need to correct the following errors:</td>
        <td><ul>
        <?php foreach ($errors as $error) { ?>
        <li><?= $form->encode($error) ?></li>
        <?php } ?>
        </ul></td>
    <?php } ?>
    <tr>
        <td>Dish Name:</td>
        <td><?= $form->input('text', ['name' => 'dish_name']) ?></td>
    </tr>
    <tr>
        <td>Price:</td>
        <td><?= $form->input('text', ['name' => 'price']) ?></td>
    </tr>
    <tr>
        <td>Spicy:</td>
        <td>
            <?= $form->input('checkbox',['name' => 'is_spicy','value' => 'yes']) ?> Yes
        </td>
    </tr>
    <tr>
        <td colspan="2" align="center">
        <?= $form->input('submit',['name' => 'save','value' => 'Order']) ?>
        </td>
    </tr>
    </table>
</form>

- retrieving data from the database, use query method to retrive information from the database. each time you call the fetch() method of this object to get the next row returned from the query 

$q = $db->query('SELECT dish_name, price FROM dishes');
while ($row = $q->fetch()) {
	print "$row[dish_name], $row[price] \n";
}

if there is no more rows then fetch() will return false 

- use fetchAll() to get all of a query result 

- sql where clause operators 
= 
<>
>
<
>=
<=
AND 
OR 
()

- changing the format of retrieved rows, To get a row back as an array with only numeric keys, pass PDO::FETCH_NUM as the first argument to fetch() or fetchAll(). To get an array with only string keys, use PDO::FETCH_ASSOC

// With numeric indexes only, it's easy to join the values together
$q = $db->query('SELECT dish_name, price FROM dishes');
while ($row = $q->fetch(PDO::FETCH_NUM)) {
	print implode(', ', $row)."\n";
}

we could alse set the default fetch mode, $q->setFetchMode(PDO::FETCH_NUM);

- retrieving form data safely 
- wildcard character in sql, _ match one character, % match any 


# Working with files 
- read file with file_get_contents()
- modify text file content with str_replace()
- write a file with file_put_contents(name, content)
- reading and writing parts of files with file() function. it is used to access each line of a file 

foreach(file('people.txt') as $line){
    $line = trim($line);
    $info = explode('|', $line);
    print 'xxx';
}

- four file access functions 
$fh = fopen('people.txt', 'rb');
while((!feof($fh)) && ($line = fgets($fh))){
    $line = trim($line);
    $info = explode('|', $line);
    print 'xxx';
}
fclose($fh);

fgets() function read a line from a file and return it as a string 

    + file access mode for fopen 
    mode    allowable actions       position point      clear content?      if not exist 
    rb      reading                 begin               no                  false,warnning    
    rb+     reading/writing         begin               no                  flase, warning 
    wb      writing                 begin               yes                 create 
    wb+     reading/writing         begin               yes                 create 
    ab      writing                 end                 no                  create 
    ab+     reading/writing         end                 no                  create 
    xb      writing                 begin               no                  create, if exist warning 
    xb+     reading/writing         begin               no                  create, if exist warning 
    cb      writing                 begin               no                  create 
    cb+     reading/writing         begin               no                  try create     

- works with csv file 
fgetcsv(), returns an array containing each field in the line 

try {
	$db = new PDO('sqlite:/tmp/restaurant.db');
} catch (Exception $e) {
	print "Couldn't connect to database: ".$e->getMessage();
	exit();
}
$fh = fopen('dishes.csv', 'rb');
$stmt = $db->prepare('INSERT INTO dishes (dish_name, price, is_spicy)
		VALUES (?,?,?)');
while ((!feof($fh)) && ($info = fgetcsv($fh))) {
	// $info[0] is the dish name (the first field in a line of dishes.csv)
	// $info[1] is the price (the second field)
	// $info[2] is the spicy status (the third field)
	// Insert a row into the database table
	$stmt->execute($info);
	print "Inserted $info[0]\n";
}
// Close the file
fclose($fh);

- write a csv file with fputscsv() 
- inspecting file permissions 
file_exists()
is_readable()
is_writable()

- checking for errors When fwrite(), fputcsv(), and file_put_contents() succeed, they return the number of bytes they’ve written. When fwrite() or fputcsv() fails, it returns false

- sanitizing externally supplied filenames 


# Remembering users: cookies and sessions 
- working with cookies 
setcookie('userid', 'id-content');

the setcookie function will URL-encodes the content before send to the webclient 

setrawcookie() function will not URL-encode the content  vvbs

- printing a cookie value 
print $_COOKIE['key'];

$_COOKIE is a global variable which is a string array, it show up when the web client sends them along with the request 

the default lifetime of cookie is the lifetime of the web client 

    + change cookie expiration 
// The cookie expires one hour from now
setcookie('short-userid','ralph',time() + 60*60);
// The cookie expires one day from now
setcookie('longer-userid','ralph',time() + 60*60*24);
// The cookie expires at noon on October 1, 2019
$d = new DateTime("2019-10-01 12:00:00");
setcookie('much-longer-userid','ralph', $d->format('U'));

setcookie('short-userid','ralph',0,'/');
In Example 10-5, the expiration time argument to setcookie() is 0. This tells the setcookie() method to use the default expiration time 
the forth parameter is the path of the cookie, the path should relative to the base url of the website 

setcookie('short-userid','ralph',0,'/','.example.com');
The cookie in Example 10-7 expires when the web client exits and is sent with requests in any directory (because the path is /) on any server whose name ends with .example.com.

the last two parameter tell the client only return cookie over a secure connection 

if you've set a cookie with non default value for an expiration time, path or domain, the same values are needed when you delete the cookie 

- activating sessions, session by default use a cookie called PHPSESSID when you start a session on a page, the PHP engine checks for the presence of this cookie and sets it if it doesn't exist. 
the value is a randome alphanumeric string 

call session_start() at the beginning of your script. if you want to use sessions in all your pages set the configuration directive session.auto_start to On. 

- storing and retrieving information, session data is stored in the $_SESSION auto-global array 
session_start();
if (isset($_SESSION['count'])) {
	$_SESSION['count'] = $_SESSION['count'] + 1;
} else {
	$_SESSION['count'] = 1;
}

the next time the user access the webpage the client sends the PHPSESSID cookie the session_start() function sees the ID and loads the file that contains the saved information jsut says $_SESSION['count'] is 1

the $_SESSION array is a way of sharing information between pages 

- configuring sessions, sessions are for keeping track of recent user activity to make the browsing experience smoother 

You can change session.gc_maxlifetime in your server configuration or by calling the ini_set() function from your program.

at the beginning of any request that uses sessions (because the page calls session_start(), or session.auto_start is On), there is a 1% chance that the PHP engine scans through all of the sessions on the server and deletes any that are expired. “A 1% chance” sounds awfully unpredictable for a computer program. It is. But that randomness makes things more efficient.
The session.gc_probability configuration directive controls the percent change that the "erase old sessions"

    + example to change the value 
    ini_set('session.gc_probability',100);
    session_start();
    
    + session cookie configuration parameters 
    session.name 
    session.cookie_lifetime 
    session.cookie_path 
    session.cookie_secure 
    session.cookie_httponly 
    
- login and user identification, adding user login on top of sesions has five parts 
    + displaying a form asking for a username and password 
    + checking the form submission 
    + adding the username to the session 
    + looking for the username in the session to do user-specific tasks 
    + removing the username from the session when the user logs out 
    
- why setcookie() and session_start() want to be at the top of the page, Functions such as setcookie() and session_start() add headers to the response. In order for the added headers to be sent properly, they must be added before any output starts. 

Make sure there are no print statements before you call setcookie() or session_start(). Check that there is nothing before the first <?php start tag in the page. Also, check that there is nothing outside the <?php and ?> tags in any included or required files—even blank lines

to workaround this we need to set the output_buffering configuration directive. this will enable the mix use the print methods. this could be done in the server configuration 

    + this code works only if the output_buffering is turn on 
<html>
<head>Choose Your Site Version</head>
<body>
<?php
setcookie('seen_intro', 1);
?>
<a href="/basic.php">Basic</a>
or
<a href="/advanced.php">Advanced</a>
</body>
</html>

the <html> content will trigger send header in the php file content 


# Talking to other websites and services 
- simple url access with file functions. the built-in file function works with url 
file_get_contents()

Did you know that <?= file_get_contents('http://numbersapi.com/09/27') ?>

A header value of application/json tells the server to format the response as JSON

//create a context for an 'http' stream 
stream_context_create(array('http'=>$options));

- comprehensive url access with cURL, with PHP's cURL funciton 

    + retrieving URLs via GET 
    
// Just key and query term, no format specified in query string
$params = array('api_key' => NDB_API_KEY,
'q' => 'black pepper');
$url = "http://api.nal.usda.gov/ndb/search?" . http_build_query($params);
$c = curl_init($url);
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
print curl_exec($c);

This could be something such as not finding the hostname, or not being able to make a connection to the remote server. If this kind of thing happens, curl_exec() returns false and curl_errno() returns an error code

The curl_getinfo($c) function returns an array of information about the request.

- retrieving urls via post, CURLOPT_POST setting tells cURL you want a post request and the CURLOPT_POSTFIELDS

- encode to json, json_encode(param)

- using cookies $_COOKIE 
In this mode, the cookie jar only tracks cookies within a handle. Changing the value of CURLOPT_COOKIEJAR to a filename tells cURL to write the cookie values to that file. Then you can also provide that filename as the value for CURLOPT_COOKIEFILE.

$c = curl_init('http://php7.example.com/cookie-server.php');
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
// Save cookies to a 'saved.cookies' file in the same directory
// as this program
curl_setopt($c, CURLOPT_COOKIEJAR, __DIR__ . '/saved.cookies');
// Load cookies (if any have been previously saved) from the
// 'saved.cookies' file in this directory
curl_setopt($c, CURLOPT_COOKIEFILE, __DIR__ . '/saved.cookies');
// This request includes cookies from the file (if any)
$res = curl_exec($c);
print $res;

- comprehensive url access with cURL, 
$c = curl_init('http://numbersapi.com/09/27');
// Tell cURL to return the response contents as a string
// rather then printing them out immediately
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
// Execute the request
$fact = curl_exec($c);
$info = curl_getinfo($c);

- retrieving URLs via post,  CURLOPT_POSTFIELDS setting holds the data you want to send.
$url = 'http://php7.example.com/post-server.php';
// Two variables to send via POST
$form_data = array('name' => 'black pepper',
'smell' => 'good');
$c = curl_init($url);
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);
// This should be a POST request
curl_setopt($c, CURLOPT_POST, true);
// This is the data to send
curl_setopt($c, CURLOPT_POSTFIELDS, $form_data);
print curl_exec($c);

- using cookies 
curl_version() function to find out what version your PHP installation has
CURLOPT_SSL_VERIFYPEER is turned on by default. 

- serving API requests, to send an http header along with your response, use header() function 
$response_data = array('now' => time());
header('Content-Type: application/json');
print json_encode($response_data);

    + change response code 
if (!(isset($_GET['key']) && ($_GET['key'] == 'pineapple'))) {
	http_response_code(403);
	$response_data = array('error' => 'bad key');
} else {
	$response_data = array('now' => time());
}
header('Content-Type: application/json');
print json_encode($response_data);

    + checking for https 
$is_https = (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on'));
if (!$is_https) {
	$newUrl = 'https://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
	header("Location: $newUrl");
	exit();
}
print "You accessed this page over HTTPS. Yay!";


# Debugging 
- to display error in browser by set the display_error directive to On 
- to record server error into server log by set log_errors set to On 
- php error message will fail into five different categories 
    + parse error 
    + fatal error 
    + warning 
    + notice 
    + strict notices or deprecation warning, an admonishment from the php engine about your conding style or that something you're doing will stop working in a futu re version of php 
    
- error_reporting configuration directive controls which kinds of errors the php engine reports, the default value for error_reporting is E_ALL & ~E_NOTIC & ~E_DEPERECATED

    + constants for set reporting level 
E_ALL 
E_PARSE
E_ERROR 
E_WARNING 
E_NOTICE 
E_STRICT 

- fix php parser error with ide
PhpStorm https://www.jetbrains.com/phpstorm $89
NetBeans https://netbeans.org Free
Zend Studio http://www.zend.com/en/products/studio $89
Eclipse + PDT http://www.eclipse.org/pdt Free
Sublime Text http://www.sublimetext.com $70
Emacs http://ergoemacs.org/emacs/which_emacs.html Free
Vim http://vim.wikia.com/wiki/Where_to_download_Vim Free

- to log web server error log by error_log() You surround the call to var_dump() with functions that temporarily suspend output

// Capture output instead of printing it
ob_start();
// Call var_dump() as usual
var_dump($_POST);
// Store in $output the output generated since calling ob_start()
$output = ob_get_contents();
// Go back to regular printing of output
ob_end_clean();
// Send $output to the error log
error_log($output);

- using a debugger, phpdbg which comes with php 

The Xdebug debugger is powerful and full-featured. It can communicate with editors and IDEs using a protocol but does not come with an easy-to-use client on its own. Xdebug is free

The Zend Debugger is part of Zend Studio

    + debug with phpdbg 
    $ phpdbg -e broken.php 

- handling uncaught exceptions with set_exception_handler() function to tell the php engine about your function 

function handler($ex){
}

set_exception_handler('handler');


# Testing: Ensuring your program does the right thing 
- PHPUnit is the de facto standard for writing tests for php code 
- installing PHPUnit https://phar.phpunit.de/phpunit.phar 

    + running php unit with php command 
    $ php ./phpunit.phar --version
    
- writing a test 
include 'restaurant-check.php';
class RestaurantCheckTest extends PHPUnit_Framework_TestCase {
	public function testWithTaxAndTip() {
		$meal = 100;
		$tax = 10;
		$tip = 20;
		$result = restaurant_check($meal, $tax, $tip);
		$this->assertEquals(130, $result);
	}
}


# Software engineering practices you should be aware of 
- php engine's source code at http://git.php.net 
- issue tracking system 
MantisBT, which source code is writen with php 

- Envronments and deployment 
- facebook php engine, HHVM https://docs.hhvm.com/hhvm/
- two open source profilers are Xdebug and XHProf 


# Handling dates and times 
- display the date or time 
$d = new DateTime();
$d->format('r');
$d->format('m/d/y');

- format character 
type        format      description                 range 
day             j           day of the month        1-31 
day             d           day of the month        01-31 
day             s           english ordinal suffix  st, th, nd, rd 
...

- parsing a date or time 
    + all possible date time format could be found at http://www.php.net/datetime.formats
    + you can also pass them to the the setTime() and setDate() methods to adjust the time
    + validation of days and months, use checkdate() on the month, day, and year first. 

- calculating date and times 
- working with timezones 
date_default_timezone_set()


# Package management 
- with composer, which could upgrade the third party package you are installed in your project 
- install composer 
$ curl -sS https://getcomposer.org/installer | php 

- adding a package to your program 
$ php composer.phar require swiftmailer/swiftmailer 

to add swiftmailer package to your porject 

- use the packages installed by composer by reference the autoload.php file, which will use the composer's classic finding logic 
// Tell PHP to load Composer's class-finding logic
require 'vendor/autoload.php';
// The Swift_Message class is now automatically available
$message = Swift_Message::newInstance();

All the code in vendor is managed by Composer. When you upgrade a package version, the only files you want to track changes in are the composer.json and composer.lock files

- adding package 
$php composer.phar require package-name 

- find the package list 
http://wwwpckageist.org 


# Sending email 
- swift mailer, we could use composer to install this package 
$ php compser.phar require swiftmailer/swiftmailer 

$message = Swift_Message::newInstance();
$message->setFrom('julia@example.com');
$message->setTo(array('james@example.com' => 'James Bard'));
$message->setSubject('Delicious New Recipe');
$message->setBody(<<<_TEXT_
Dear James,
You should try this: puree 1 pound of chicken with two pounds
of asparagus in the blender, then drop small balls of the mixture
into a deep fryer. Yummy!
Love,
Julia
_TEXT_
);
$transport = Swift_SmtpTransport::newInstance('smtp.example.com', 25);
$mailer = Swift_Mailer::newInstance($transport);
$mailer->send($message);


# Framework 
- framework is a set of functions, classes and conventions that make it easier to accomplish common tasks 

- the following task 
routing 
object-relational mapping 
user management 

- the best ask question site quora(知乎外文版)
http://www.quora.com 

checkout the topic php frameworks 

- laravel, a vibrant ecosystem of users and available hosting providers and tutorials 
    + add a laravel route 
Route::get('/show', function() {
$now = new DateTime();
$items = [ "Fried Potatoes", "Boiled Potatoes", "Baked Potatoes" ];
return view('show-menu', [ 'when' => $now,
'what' => $items ]);
});

- symfony describes itself as both a set of reusable components and a framework for web projects. it don't need to create request routing or other task 

- zend framework, a collection of components approach. 
namespace Application \ Controller;
use Zend \ Mvc \ Controller \ AbstractActionController;
use Zend \ View \ Model \ ViewModel;
class MenuController extends AbstractActionController{
	public function showAction() {
		$now = new \ DateTime();
		$items = ["Fried Potatoes", "Boiled Potatoes", "Baked Potatoes"];
		return new ViewModel(array('when' => $now, 'what' => $items));
	}
}


# Command-line php 
- with REPL, read eval print loop 
- writing command line php program 
- using php's built-in web server 
$ php -S hostname password 

- example psySh


# Internationalization and Localization
- php default encoding is utf-8 
- manipulating text, strlen() will only count bytes, it reports incorrect when a string is contain multipble bytes character 

mb_strlen($message)

all the multiple byte character string operation is starts with mb_xxx

- sorting and comparing, built in comparing class is use byte by byte operation. the Collator could help compare multiple bytes string 

// US English
$en = new Collator('en_US');
// Danish
$da = new Collator('da_DK');
$words = array('absent','åben','zero');
print "Before sorting: " . implode(', ', $words) . "\n";
$en->sort($words);
print "en_US sorting: " . implode(', ', $words) . "\n";
$da->sort($words);
print "da_DK sorting: " . implode(', ', $words) . "\n";

- localizing output
$fmtfavs = new MessageFormatter('en_GB', $messages['en_GB']['FAVORITE_FOODS']);
$fmtcookie = new MessageFormatter('en_GB', $messages['en_GB']['COOKIE']);
// This returns "biscuit"
$cookie = $fmtcookie->format(array());

# Installing and configuring the php engine 
- using php with a web-hosting provider 
    + test web server support php or not by 
    <?php print "PHP enabled"; ?>
    
    load the file from browser to localhost/test.php 
    
- install the php engine 
    + install on OS X 
    http://brew.sh/ for all nitty-gritty details 

    ruby -e "$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)"

    + install on linux 
    $ gunzip php-7.0.5.tar.gz 
    tar xvf php-7.0.5.tar 
    
    there is also an overview of php installation on linux and unix on php.net, as well as instructioin for install php with apache 2.0 
    
    + install on windows 
    
    WampServer, the binami Wamp Stack and Apache Friends XAMPP 
    
    microsoft maintains a website devoted to running php with iis. additionally the offical php for windows website has different versions of php for windows available for download 
    
    + modifying php configuraytion directives, change the output_buffering directive 
    
    if your website talks to the php engine using CGI or FastCGI you can also set configuration directives in .user.ini files 
    
    php.ini holds systemwide configuration for php engine, use output from phpinfo() to get all the configuration location for php engine 
    
    <?php phpinfo(); ?>
    
    + change configuration in php by int_set() 
    
    + change include_path with init_get()
    
    + useful configuration directives 
    allow_url_fopen 
    auto_append_file 
    auto_prepend_file 
    display_errors 
    extension 
    extension_dir 
    file_uploads 
    include_path 
    error_reporting 
    log_erros 
    session.auto_start 
    session.gc_maxlifetime 

    
    
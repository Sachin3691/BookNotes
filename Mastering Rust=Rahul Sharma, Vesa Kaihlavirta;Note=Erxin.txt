Mastering Rust=Rahul Sharma, Vesa Kaihlavirta;Note=Erxin

# Introduction
- https://www.rust-lang.org/
- background, Rust is a fast, concurrent, safe, and empowering programming language originally started and developed by Graydon Hoare in ­2006
- Servo, a new research project of creating a browser engine from scratch was initiated.
- Stylo, is a new css and render engine 
- Self-hosting is when a compiler is built by compiling its own source code. This process is known as bootstrapping a compiler. Compiler its own source code acts as a really good test case for the compiler.
- Resources can be memory address, a variable holding a value, shared memory reference, file handles, network sockets, or database connection handles.
- Fearless concurrency: When we said Rust is concurrent-safe, we meant that the language has Application Programming Interface (API) and abstractions that make it really easy to write correct and safe concurrent code


# Install rust 
- using rustup.rs, Rust formatting tool (rustfmt), Rust Language Server (RLS for IDEs), and other developer tools

$ curl https://sh.rustup.rs -sSf |sh 


# A tour of the language 
- example 
use std::env;
fn main() {
  let name = env::args().skip(1).next();
  match name {
    Some(n) => println!("Hi there ! {}", n),
       None => panic!("Didn't receive any name ?")8.
  }
}

    + compile 
$ rustc greet.rs 

then a *.exe file will be generated in Window 

- rust playground, http://play.rust-lang.org/
- rust document, https://doc.rust-lang.org/std/index.html
- example code, https://github.com/PacktPublishing/Mastering-RUST-Second-Edition

# Primitive types 
- types 
bool, 
char
integer types 
    + i8 
    + i16 
    + i32 
    + i64 
    + i128 
    
isize, the pointer-sized signed integer type equivalent to i32 on x86 cpu and i64 on x64 
usize, the pointer-sized unsigned integer type 
f32, the 32-bit floating point type 
f64, the 64-bit floating point type 
[T;N], a fixed size array for the element type 
[T], a dynamically sized view into a contiguous sequence 
str, string slices 
(T, U, ...) a finite sequence  where T and U can be different types 
fn(i32) -> i32, a function that takes an i32 and returns an i32 


# Declaring variables and immutability 
- use let to define variable. mutable variable required mark with mut 

let target = "world";
let mut greeting = "hello";


# Functions 
- define function 
fn add(a:u64, b:u64)-> u64{
    a + b
}

fn main(){
    let result = add(1, 2);
}

the last statement is the default return value; to return early with the keyword return 

fn modify_arg(mut a:u64){
    a += 1;
}


# Closures 
- simplest closure
let closure = ||();

//invoke by 
closure();

|| holds the parameters such as |a, b, c|

    + single line closure 
    |x| x * 2;
    
    + multiple lines closure 
    out_side_variable = 10;
    |x, y|{
        let z = x + y;
        z * out_side_variable;
    };

- rust strings are guaranteed to be valid UTF-8 encoded byte sequences
let question = "how are you?"; // a &str type 
let person: String = "Bob".to_string();
let namaste = String::from("नमस्ते");        // unicodes yay!

- rust have two types of strings, &str, and String 

- conditionals and decision making 
if condition {
    ...
} else {
    ...
}

let is a statement expects us to have a semicolon at the end 

save condition result 

let result = if condition {} else {}; 

- match expression, similar to switch 
let status = req_status();
match status {
    200 => println!("success"),
    404 => println!("not found"),
    other => {
    }
}

Rust allows us to either ignore the rest of the possibilities by using a catch all variable (here, this is other) or an _ (underscore) if we want to ignore the value.

- Loops, rust support three kinds of loops. loop, while, for. we can usual continue and break in all these loops 

let mut x = 1024;
loop {
    if x < 0{
        break;
    }
    x -= 1;
}

    + using loop label for helps break out from nest loops 
let mut result = 0;
'increment: loop {
    if result == a {
        let mut dec = b; 
        'decrement: loop {
            if dec == 0 {
                break 'increment;
            } else {
                result - = 1;
                dec -= 1;
            }
        }
    } else {
        result += 1;
    }
}

    + while 
while condition {

}

    + for 
//does not include 10 
for i in 0..10 {
}

//counts till 10 
for i in 0..=10 {

}


# User-defined types 
- structs, enums and unions 
- in rust there are three types of struct. 
    + unit struct 
    
struct Dummy;

let value = Dummy; 

it is a zero sized value. can be used to model entities with no data or state. another use case is represent error types. 

    + tuple struct. the fields are referenced by their positions 
struct Color(u8, u8, u8);
let white = Color(255, 255, 255);
white.0; white.1; white.2;

    + C like struct 
struct Player{
    name: String, 
    iq: u8,
    friends: u8, 
    score: u16
}

let name = "Alice".to_string();
let player = Player { name, iq: 171, friends: 134, score: 1129 };
//we can use the field init shorthand feature, which is the case with the name field in the preceding code

fn bump_player_score(mut player:Player){
    player.score += 120;
}

- enums, the enum data type can be any primitive type, structs, or an enum. enum is created on the stack which required predefined size 

enum Direction {N, E, S, W}
enum PlayerAction { Move { direction: Direction, speed:u8}, Wait, Attack(Direction)}
let player_action = PlayerAction::Move{direction: Direction::N, speed: 2,};

- functions and methods on types, we can using impl blocks to providing implementations for a type 
- add behaviors to previous defined struct 
struct Player{
    name: String,
    friends: u8
}

impl Player{
    fn with_name(name: &str) -> Player{
        Player{
            name: name.to_string()
        }
    }
    
    fn get_friends(&self)->u8{
        self.friends
    }
}

we can write two kinds of methods 
    + Associated methods: Methods without a self type as their first parameter. 
    + Instance methods, take a self value as its first argument 
    
let player = Player::with_name("Dave");

//this is a syntax sugar. It is also can be called with Player::get_friends(&player);
player.get_friends(); 

three types of implementation 
        * self as the first parameter won't allow you to use the type later 
        * &self, only read access 
        * &mut self, mutable access to the instance of a type 
        

# Impl blocks for enums
- consider a payment library 

enum PaymentMode{
    Debit,
    Credit, 
    Paypal
}

fn pay_by_credit(amt: u64){}

fn pay_by_debit(amt: u64){}

impl PaymentMode {
    fn pay(&self, amount: u64) {
        match self {
            PaymentMode::Debit => pay_by_debit(amount),
            PaymentMode::Credit => pay_by_credit(amount)
        }
    }
}

    + C like enums where variants implicitly have integer values 
    + can also be manually tagged with integer (isize) values to interactive with C foreign C library 
    + Enums are also widely used for modeling state machines, and when combined with match statements, they make state transition code very concise to write
    
# Switch different rust toolchain 
$ rustup install <version>

add target for different toolchain 
$ rustup target add i686-pc-windows-msvc --toolchain beta
    
    
# Module imports and use statements
- in executables, usually the main.rs, library is lib.rs 
- declare module with mod keyword 
mod my_module;

- use items from module with use keyword 

- expose item from module by pub keyword 
    
    
# Collections 
- array 
let numbers:[u8; 10] = [1,2,3,4,5,6,7,8,9,10];

[T, N], T is the type, N is the number of elements in array 

- tuples 

let num_and_str: (u8, &str) = (40, "have a good day");
    
- vectors are similar to array except the content length doesn't need to be known in advance

let mut numbers_vec: Vec<u8> = Vec::new();
let mut vec_with_macro = vec![1];
    
reference, https://doc.rust-lang.org/std/vec/struct.Vec.html
    
- hashmaps can be used to store key-value data. they come from std::collections module 

let mut fruits = HashMap::new();
fruits.insert("apple", 3);
    
- slices are a generic way to get a view into a collection. Slices are denoted by &[T], where T is any type. slice can be taken from array, vector and string 

let mut numbers:[u8:4] = [1,2,3,4];
let all:&[u8] = &numbers[..];
let first_two: &mut [u8] = &mut numbers[0..2];
    
- iterators, is a construct that provide a way to access on elements of collection types. iterator provide a next method. Python's iter(some_list) or C++'s vector.begin() are ways to construct iterators from an existing collection.

In Rust, an iterator is any type that implements the Iterator trait. 

- exercise 

use std::env;
use std::fs::File;
use std::io::prelude::BufRead;
use std::io::BufReader;
 # [derive(Debug)]struct WordCounter(HashMap < String, u64 > );
impl WordCounter {
    fn new()->WordCounter {
        WordCounter(HashMap::new());
    }
    fn increment(word:  & str) {
        let key = word.to_string();
        let count = self.0.entry(key).or_insert(0);
         * count += 1;
    }
    fn display(self) {
        for (key, value)
            in self.0.iter() {
                println!("{}: {}", key, value);
            }
    }
}
fn main() {
    let arguments: Vec < String >  = env::args().collect();
    let filename = arguments[1];
    println!("Processing file: {}", filename);
    let file = File::open(filenam).expect("Could not open file");
    let reader = BufReader::new(file);
    let mut word_counter = WordCounter::new();

    for line in reader.lines() {
        let line = line.expect("Could not read line");
        let words = line.split(" ");
        for word in words {
            if word == "" {
                continue
            }
            else {
                word_counter.increment(word);
            }
        }
    }
    word_counter.display();
}


# Managing projects with Cargo 
- package managers 
- modules, Rust program starts with a root module. If you are creating a library, your root module is the lib.rs file. executable is the main.rs. 

- nested modules 
mod food {
    pub struct Cake; 
    struct Smoothie;
    Struct Pizza;
}

use food::Cake;

fn main(){
    let eatable = Cake;
}

the items inside a module are not public 

- file as a module 
//foo.rs
pub struct Bar;

impl Bar{
    pub fn init(){
        println!("Bar type initialized");
    }
}

//main.rs 
mod foo; 

use crate::foo::Bar;

fn main(){
    let _bar = Bar::init();
}

Absoute imports:
crate: an absolute import prefix that refers to the current crate's root. depends on it is library or executable. 

self: A relative import prefix that refers to an item relative from the current module. self::foo::Bar

super, a relative import prefix that can use and import an item from the parent module. super::foo::Foo, will find foo's parent item Foo 

- directory as module 
create a sibling file foo.rs for the foo directory. it will contain module declarations for any submodules created within the directory foo/

my_program/
|-foo/ 
| |
| +-bar.rs 
|-foo.rs 

//bar.rs 
pub struct Bar; 

impl Bar {
    pub fn hello(){
    }
}

//foo.rs 
pub use self::bar::Bar;

pub fn foo(){
}

//main.rs 
mod foo;

use foo::Bar;

fn main(){
    foo::foo();
    Bar::hello();
}
    + in the older Rust 2015 edition, submodules don't need a sibling foo alongside the foo directory. instead use a mod.rs file within foo to convey the compiler that the directory is a module 
    
    + in 218 support use the directory name as the directory module specification 
    
- Cargo and crates 
    + https://crates.io is the centralized place for hosting libraries, from a local directory, an git repository or a hosted crate registry like crates.io 
    
    $ cargo 

   +  creating a new cargo project 

    $ cargo new <project name> 
    
    get help 
    $ cargo help new 

- rust toolchain repo 
https://github.com/rust-lang/rustup#toolchain-specification
    + check toolchain 
    $ rustup show

    + update toolchain 
    $ rustup update
    
    + cross-compilation











    
    
    
    
    
    



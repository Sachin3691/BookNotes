Linux system programming, 2nd Edition;Note=Erxin

# File I/O 
- the read and write requests interleave as intended and the result are as expected, if the system does not crash before the data makes it to disk!
Another issue for delayed writes is the inability to enforce write ordering 

- when a user-space app issues a write system call, linux kernel performs a few checks and then simply copies the data into a buffer. Later in the background, the kernel gathers all the dirty buffers and sorts them optionally and writes out to disk. a process known as writeback 

- the size_t and ssize_t types are mandated by POSIX the size_t type is used for storing values used to measure size in bytes. The ssize_t type is a singed version of size_t 
On 32-bit systems, the backing c types are ussually unsigned int and int 

- opened in nonblocking mode(if O_NONBLOCK was given to open(); see flags for open() and there is no data to read the read() call will return -1 and set errno to EAGAIN instead of blocking. When performing nonblocking reads, you must check for EAGAIN or risk confusing a serious error with the mere lack of data 

- Sometimes, programmers do no want a call to read() to block when there is no data available. Instead they prefere that the call return immediately, indicating that no data is available this is called nonblocking I/O; it allows application to perform I/O, potentially on multiple files without ever bocking 


# Introduction and essential concept 
- Authorization in linux is provided by users and groups. Each user is associated with a unique positive integer called the user ID(uid). Each process is in turn associated with exactly one uid, which identifies the user running the process and is called the process's real uid 

- 
Python in a nutshell=Alex Martelli;Note=Erxin

# the python interpreter
- command-line syntax and options
python {options} [-c command| -m module | file | -] {arguments}

; usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
; Options and arguments (and corresponding environment variables):
; -B     : don't write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x
; -c cmd : program passed in as string (terminates option list)
; -d     : debug output from parser; also PYTHONDEBUG=x
; -E     : ignore PYTHON* environment variables (such as PYTHONPATH)
; -h     : print this help message and exit (also --help)
; -i     : inspect interactively after running script; forces a prompt even
;          if stdin does not appear to be a terminal; also PYTHONINSPECT=x
; -m mod : run library module as a script (terminates option list)
; -O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x
; -OO    : remove doc-strings in addition to the -O optimizations
; -R     : use a pseudo-random salt to make hash() values of various types be
;          unpredictable between separate invocations of the interpreter, as
;          a defense against denial-of-service attacks
; -Q arg : division options: -Qold (default), -Qwarn, -Qwarnall, -Qnew
; -s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
; -S     : don't imply 'import site' on initialization
; -t     : issue warnings about inconsistent tab usage (-tt: issue errors)
; -u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
;          see man page for details on internal buffering relating to '-u'
; -v     : verbose (trace import statements); also PYTHONVERBOSE=x
;          can be supplied multiple times to increase verbosity
; -V     : print the Python version number and exit (also --version)
; -W arg : warning control; arg is action:message:category:module:lineno
;          also PYTHONWARNINGS=arg
; -x     : skip first line of source, allowing use of non-Unix forms of #!cmd
; -3     : warn about Python 3.x incompatibilities that 2to3 cannot trivially fix
; file   : program read from script file
; -      : program read from stdin (default; interactive mode if a tty)
; arg ...: arguments passed to program in sys.argv[1:]
; 
; Other environment variables:
; PYTHONSTARTUP: file executed on interactive startup (no default)
; PYTHONPATH   : ';'-separated list of directories prefixed to the
;                default module search path.  The result is sys.path.
; PYTHONHOME   : alternate <prefix> directory (or <prefix>;<exec_prefix>).
;                The default module search path uses <prefix>\lib.
; PYTHONCASEOK : ignore case in 'import' statements (Windows).
; PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
; PYTHONHASHSEED: if this variable is set to 'random', the effect is the same
;    as specifying the -R option: a random value is used to seed the hashes of
;    str, bytes and datetime objects.  It can also be set to an integer
;    in the range [0,4294967295] to get hash values with a predictable seed.
   
   
# the python language
- modifying a list
x = [1, 2, 3, 4, 5]
del x[1] # x is now [1, 3, 4, 5]
del x[::2] # x is now [3, 5]

- operator precedence in expressions
`expr,...`          String conversion NA
{key:expr,...}      Dictionary creation NA
[expr,...]          List creation NA
(expr,...)          Tuple creation or just parentheses NA
f(expr,...)         Function call L
x[index:index]      Slicing L
x[index]            Indexing L
x.attr              Attribute reference L
x**y                Exponentiation (xtoyth power) R
~x                  Bitwise NOT NA
+x,-x               Unary plus and minus NA
x*y,x/y,x//y,x%y    Multiplication, division, truncating division, remainder L
x+y,x-y             Addition, subtraction L
x<<y,x>>y           Left-shift, right-shift L
x&y                 Bitwise AND L
x^y                 Bitwise XOR L
x|y                 Bitwise OR L
x<y,x<=y,x>y,x>=y,x<>y, x!=y,x==y       Comparisons (less than, less than or equal, greater than, greater than or equal, inequality, equality) a NA
x is y,x is not y   Identity tests NA
x in y,x not in y   Membership tests NA
not x               Boolean NOT NA
x and y             Boolean AND L
x or y              Boolean OR L
lambda arg,...:expr Anonymous simple function NA
a <>and!=are alternate forms of the same operator.!=is the preferred version;<>is obsolete.
- global statements
global identifiers
where identifiers is one or more identifiers separated by commas(,). The identifiers listed in a global statement refer to the global variables(i.e., attributes of the module object) that the function needs to rebind.

for example , the _count in the counter function is reference from the outside scope
_count = 0
def counter( ):
    global _count
    _count += 1
    return _count
Use a global statement only if the function body rebinds a global variable

- arithmetic operations
    + by default python division returning a floating-point result or complex result, to have true division on integer
        * use -Qnew on the python command line 
        * begin your source file with the statement 
        from __future__ import division
        
    + exponentiation, a**b, built-in function pow(a,b,c) equal to (a**b)%c
    + comparison
    + sequence operations
    + sequences in general
    + concatenation and repetition, S*n
    
- nested functions and nested scopes, nested function can access the outer function 
- generator, example works like built-in xrange
def frange(start, stop, step=1.0):
    while start < stop:
    yield start
    start += step
    
# object-oriented python
- python class, is a python object with several characteristics
    + you can call a class object as if it were a function, the call returns another object, known as a instance of the class, the class is known as the type of the instance
    + a class has arbitrarily named attributes that you can bind
    + the values of class attributes can be descriptors( including functions )
    + class attributes bound to function are also known as methods 
    + a method can have a special python-defined name, with two leading and two trailing underscores, python implicitly invokes such special methods
    + a class can inherit from other classes, it delegates to other class objects the lookup of attributes that are not found in the class it self
    
- classes are object and can be treat as any other objects
- the class statement
    + new-style rather than old-style
    + class statement does not immediately create any instance of the new class but rather defines the set of attributes that will be shared by all instances
- class body
    + attributes of class objects
    class c1(object):
        x = 23
    print c1.x, class object c1 has an attribute named x, it can also bind or unbind class attributes ouside the class body
    class c1(object):
        pass
    c1.x = 23
    
    class attributes
    class.__name__
    class.__base__
    class.__dict__
    
    
    
   
# exceptions
- try...catch..else
The optional else clause of try/except executes only when the try clause terminates normally. In other words, the else clause does not execute when an exception propagates from the try clause
- try...finally



























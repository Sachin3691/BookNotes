勘误表，http://www.wrox.com, 查找书名
p2p论坛，读者可以在p2p.wrox.com上加入P2P卢潭

COM, component Object Model, 组件对象模型
OLE, Object Linking and Embedding 对象连接和嵌入
DCOM, Distributed COM, 分布式的组件对象模型

C#2008 的类属性函数操作声明 
public int MyProperty{ get; set; }　//之后编译器会自动生成属性操作get, set函数
也可以使用
public int myItem
{
  get{ return myItem; }
  set{ myItem = value; }
}

Asp.net默认支持Ajax

LINQ, Language Integrated Query Framework
WPF, Windows Communication Foundation
WF, Windows Workflow Foundation
IL, Microsoft Intermediate Language, MSIL微软中间语言
CTS, Common Type System 通用类型系统
CLS, Common Language Specification,  公共语言规范
.net 平台无关性暂时只能用于window平台，网站， http://www.go-mono.com
IDL, Interface Definition Language,  接口定义语言,用于COM组件开发时使用
ildasm是一个基于windows的实用程序，用于检查程序集合的内容，包括清单和元数据
WinCV是一个windows下的实用程序，用于浏览基类中的类、结构、接口和枚举
EDI, Electronic Data Interchange

让VC6代码运行在.net上，只要在头文件中加入
#unsing <mscorlib.dll>
C++代码可以把托管类型和非托管类型整合起来，使用托管的时候不能使用模版或重继承
COM与.net可以相互调用，COM是一个二进制文件保准，用来实现不同语言编写的程序的相互调用，并且不允许用继承来实现
COM组件的接口信息必须要从注册表获取，或者从类型库中读去

windows通过进程分割应用程序，来保证执行的代码相互隔离，32位系统可以分配4gb虚拟内存空间，而64为则更多。

不同进程之间项目分享数据的有效方式是采用dll技术，让所有的组件在同一个内存空间中运行，缺点是如果一个组件出错这其他组件也会受到影响 

共享程序集，需要防止同名方法冲突；被同一个程序集合的另一个版本覆盖，并且新版本与当前客户机的代码不兼容；解决方法是将程序集存放在文件系统的一个特定子目录，成为全局程序集高速缓存GAC中

反射，程序集合存储了元数据，包括类型及成员细节，可以编程访问他们，这个技术称为反射

命名空间，最好采用"公司名.技术名/软件包名.类名"的方式命名

asp.net， 是对asp的修改，是结构化的，每个页面继承自System.Web.UI.Page类，允许把页面编辑为dll，并把dll放在html的同一个目录中，html中的编译指令将把dll与html整合起来。
web页面可以使用system.web.ui.webControls.WebContrl类建立

xml web, 网络选择xml是必然的，http协议传输文本xml完成对跨平台数据的传输

WPF,  windows presentation foundation，建立应用程序的时候使用xaml，要求机器安装.net 3.0以上版本
xaml, Extensible Application Markup Language是可扩展标记语言

windows 控件， 必须派生于类 System.Windows.Forms.Control，.net提供了程序将ActiveX控件包装之后放到窗体上
windows 服务，使用System.ServiceProcess命名空间中的.net framework基类可以处理许多与服务相关的样本任务

WPF, Windows Communication Foundation, 只要修改配置文件即可完成将数据和服务移动到另一处的方法

C#编译器， csc.exe  *.cs 进行编译程序

语法基础
常量，名称前加 const

命名空间几乎都引用
using system;

CTS, common type system，C#认可的基本类型没有内置于C#中而是内置在.NET Framework中

常量，在C#中只有局部变量和字段可以声明为常量，去掉了C++中常量具有的其他特点

预定义类型，类型长度与java类似与平台无关
名称		CTS类型			bit
sbyte		system.sbyte	8(有符号)
short		system.int16	16
int			system.int32	32
long		system.int64	64
byte		system.byte		8(无符号)
ushort		system.uint16	16
uint		system.uint32	32
ulong		system.uint64	64
float		system.single	32
double		system.double	64
decimal		system.decimal	28
bool		system.boolean	na
char		system.char		16位的unicode
object		system.object	基类
string		system.string	unicode字符集
在使用常量的时候可以在数字后加入U,L来标记无符号或长整型数，不使用小写的原因是避免l与1引起误会

流控制与java相同，加入
foreach( type varName in collection )
  code
//--------------------
goto Lable
  code
Lable:
  code

枚举类型
range enum varName{ ... }

数组声明同java新方法
int[] aryName;

using语句
1.用于导入命名空间	using nameSpacename;
2.为命名空间起别名	using otherName = nameSpacename

main方法，可以有多个，但是在编译的时候需要加入附加指令
csc *.cs /main:namespace.className
编译器，csc.exe 指令 /t:exe控制台； /t:library有清单的类库（动态）； /t:module没有清单的组件（静态）使用时可以在编译时加入指令/addmodule选项 /t:winexe windows应用程序

console.writeline(), 格式控制
C本地货币；D十进制; E科学计数法; F固定小数点; G普通格式，E,F中较简单的方式; N数字格式; P百分数； X十六进制
{索引,位宽:特殊字符} 可以参考手册

C#可以自动创建XML文档说明，自动索引代码中的注释内容，这部分注释已///开头；可以识别的XML元素有
<c>, <code>, <example>, <exception>, <include>, <list>, <param>, <paramref>, <permission>, <remarks>, <returns>, <see>, <seealso>, <summary>, <value>

C#预处理指令,用于发布软件的基本版本和企业版的时候很有用，控制编译的代码多少
#define , #undef
#if, #elif, #else, #endif
#warning, #error 用于编译器产生错误和警告，配合#if, #else  等处理语句对
#region, #endregion 用于在代码段为一个块命名，便于IDE环境显示
#line 指定编译器在警告和错误信息中显示的文件名和行号信息
#pragma 可以抑制指定的编译警告或恢复被抑制的警告
#pragma warning disable NUMBER
#pragma warning restore NUMBER

保留的关键字
Abstract, do, in, protected, true, as, double , int, public, try, base, else, interface, readonly, typeof, bool, enum, internal, ref, uint, break, event, is, return, ulong, case, extern, long, sealed, unsafe, catch, false, namespace, short, ushort, char, finally, new, sizeof, using, checked, fixed, null, stackallock, virtual, class, float, object, static, volatile, const, for, operator, string, void, continue, foreach, out, struct, while, decimal, goto, override, switch, default, if, params, this, delegate, implicit, private, throw
如果一定要把保留字符作为关键字，那么在代码中在保留字符前加@
标识符也可以包含unicode字符，用法是\uXXXX X为unicode的四位16进制代码；可以直接使用unicode字符命名

静态构造函数，一个类只能有一个静态构造函数， .net运行库并不保证静态函数什么时候执行，但能保证其至多被执行一次。该函数用于对类内部定义的静态成员变量进行初始化，与C++和java不同
构造函数初始化器，在类本身的构造函数中可以调用同类的其他构造函数，类似于C++调用基类构造函数
Class className
{
  public className( n, m){};
  public className(n) : this( a, b ){} //其中this的引用即为类构造器
}

只读字段，两种方法实现 readonly, const；readonly比const灵活允许在构造函数中进行初始化操作；

匿名类型，使用var字段，与用new一起使用则初始化了一个继承了object类的没有名字的类

结构与类的区别，结构是值类型，类是引用类型，所以存储的位置不同，结构不能继承，结构不允许重写无参数的构造函数

部分类，partial关键字允许把类，结构或接口放在多个文件中，使用方法
// in file0
Partial class className{}
//in file1
Partial class className{}

静态类
static class className{}

Object类,所有类派生于System.Object,具有如下方法
ToString(); GetHashTable(); Equals(); Finalize(); GetType(); MemberwiseClone()是一个浅表复制，是受保护的方法，不能用于复制外部对象，不是虚方法不能重写代码;

类的扩展方法，针对无法查看源代码的时候对指定的类进行方法扩展；扩展方法是静态方法，是类的一部分
public static class classNameExtension //不知道名字是否任意
{
	public static void funcionName( this className, params )
	{
	}
}

Vb不支持任何类型的实现继承，只支持接口继承

每个C#结构类型都派生自System.ValueType

C#不支持私有继承

只有声明为虚方法，派生类才可以重写方法；重写的时候要求加上关键字override, 不加virtual关键字则不可以重写；默认是非虚的

隐藏方法，在派生类中使用new关键字隐藏基类的同名方法；如果想调用基类中的方法，需要使用base关键字

抽象函数，抽象类，abstract关键字；

封闭类，封闭方法，加入关键字sealed;对于方法表示不能重写，对于类指不能继承该类

类的构造函数的调用
public class className: baseClass
{
	public class className(params) : base( params )
	//调用基类构造函数或使用this(params)调用本身构造函数
	{
	}
}
修饰符的种类，public, protected, internal, private, protected internal
internal 与 protected的区别是，internal限定本身的程序集内访问，protected只说有派生类内访问
其他修饰符
new、static、virtual、abstract、override、 sealed、 extern仅静态[DllImport]方法，成员在外部使用另一种语言实现

接口，定义不允许包含重载运算符，不允许有构造函数，成员总是公有的，不能是虚或静态
foreach循环类型要求实现了System.Collections.IEnumerable接口；系统自带的接口可以被系统识别，相当于实现了C++中的函数
使用interface定义关键字，接口中只能包含方法，属性，索引器，事件和声明

数组
type[] aryName = new type[dimension];
可以定义锯齿数组，也就是每一维的长度不一样的数组

Array类是一个抽象类，可以使用静态方法createInstance()创建数组
并对实例使用setValue方法进行设置，clone方法进行数组的浅复制，要求数组的元素实现ICloneable接口；使用sort()方法，排序要求实现IComparable接口，采用冒泡排序
数组的集合类接口，派生关系如下IEnumerable->ICollection->IList

foreach语句，迭代块得实现必须返回IEnumerator或IEnumerable接口，块中包含多个yield return 语句或者yield break语句，但不包含return语句

运算符和类型强制转换，基本同java和c++
checked{}和 unchecked{}块来指定是否进行溢出检测

sizeof()用于确定堆栈中值类型需要的长度，只能在不安全代码中使用

typeof返回一个表示特定类型的system.type对象

可空类型和运算符 ?
type ? varName;
可空类型参加的操作中如果一个运算符为null，则结果为null
对应的空结合运算符
b = a ?? 10; //如果a为null则 b = 10;若a != null则b = a

变量的类型转换
int -> short会丢失数据
int -> <- uint会丢失数据
float -> int会丢失小数点后的所有数据
任何数字类型转换为char会丢失数据
decimal可以转换为任何数据类型
int? -> int

对象的装箱与拆箱，就是将对象赋值给object类型或将object类型赋值给对象

对象相等，系统类System.object定义了3个不同方法。
ReferenceEquals()是静态方法，测试两个引用是否指向同一个实例，不能被重写，只能使用本身的代码
Equals()是虚拟方法，可以被重写，如果对象被用作字典中的键就需要重写这个方法，否则根据重写Object.GetHashCode()的方法包含对象的字典类，要么不工作要么效率低。重写Equals()方法要注意不能能抛出异常
Equals()静态方法，该版本有两个参数，并对他们进行比较，可以处理两个对象中一个是NULL的情况

运算符重载，经常使用在数学运算及图形程序中
public static returnType operator +( param, param );
public static returnType operator ++(param)

用户定义数据类型转换，如果类型转换总是安全的就可以定义为隐式类型转换，否则进行自定义类型转换函数
用户自定义类型转换的方法对于类与结构是一样的，类型转换相当于一种操作符重载
声明为隐式类型转换 type -> float型的
public static implicit operator float( type varName ){}
定义显示类型转换
public static explicit operator float( type varName ){}
系统自带的数据类习惯转换函数 System.Convert, 并且在其中进行了数据溢出检测

同理可以定义类之间的显示类型转换，只要将float与type换为对应的类名即可
派生类与基类的转换，派生类可以显示转换为基类，基类不能显示转换为派生类对象 
如果需要派生类->基类的转换，只要建立基类为参数的派生类构造函数即可、

在可能出现多重类型转换的时候最好指定转换路线，保证所有可能的转换都是预期的，可以使用隐式转换，如果不能确保转换的路径是最好显示指定转换次序
aim = (type0)(type1)source;

装箱，拆箱，在C#中的方法同C++中的父类，子类指针的使用规则。只有装箱了指定的类型才能对object对象拆箱为指定的类型

委托，是专门用于传递方法的类型，C#中必须要将方法的细节封装到类型当中，以进行强类型检查
public/private delegate void MethodInvoker( params );  //只是定义了一类委托，使用时需要实例化
MethodInvoker objMethodInovker = new MethodInvoker( functionName ); 或
MethodInvoker objmethodInvoker = functionName;
委托赋值的时候不需要考虑是否是静态方法还是实例方法，只要赋值即可
基类是System.Delegate <- System.MulticastDelegate
回调函数，就是委托的原型，回调函数就是函数指针
同样可以定义泛型委托
多播委托，通常定义为返回void类型的委托，也就是所有调用函数均不返回值或者定义返回值，但是返回值只能得到最后一次调用的函数的返回值，如果一个方法异常，整个委托链结束
可以使用 objDelegate.GetInvocationList()方法返回委托的调用顺序

匿名方法，配合委托的定义使用
objDelegate = delegate( params ){}; 
其中delegate是关键字，用于简化代码编写，不必专门定义只有委托使用的函数。有两个基本原则，匿名方法的定义中不能跳转到匿名方法外，同样外部不能跳转到匿名方法中。不能访问不安全代码，不能使用外部定义的ref和out参数。
匿名方法中可以使用外部定义的变量。

_lambda_表达式，是一种匿名函数的新语法，可以用于委托定义。
objDelegate = [(]params[)] => { };

协变与抗变，就是委托返回的参数或调用的参数中进行了隐式类型转换，包括派生类与基类的转换等，只要转换符合委托定义即可调用委托方法。

事件，对应的概念有事件的发送器，事件的接收器；
事件处理程序不能有返回值，因为多播委托的原因，多个委托函数值返回其最后的结果；
只要使用EventHandler委托，参数就是两个 ( object sender, EventArgs e )
事件处理程序同样可以使用匿名函数或者_lambda_表达式
事件的定义，首先要定义与事件相关的委托，在进行事件定义，例如
public delegate void SomeEventHandler( object sender, EventArgs e );
public static SomeEventHandler eventName;
public static event SomeEventHandler EventName  //这部分对事件的定义类似于属性
{
  add 
  {
    eventName += value;
  }
  remove
  {
    eventName -= value;
  }
}
EventArgs类用于在接受者与发送者之间传递数据，也可以自定义EventArgs类
EventArgs e = new EventArgs();
EventName( this, e ); //自己触发事件
增加触发事件的函数，当委托为空的时候不调用委托，所以事件中增加一个函数 onEventName
来对委托是否为空进行检查
void EventName( object sender, EventArgs e )
{
  if( eventName != null )
    eventName( sender, e );
}

字符串与正则表达式，System.String
字符串中使用@允许字符串换行，在代码中使用@开头的变量定义允许用关键字作为变量名
正着表达式 Regex类， System.Text.RegularExpressions

:泛型，优点是性能突出，命名约定，泛型类型的名称用T作为前缀，
public class className<TVar,...>
{
	private TVar value ...; //类似的定义
}
null，不能赋予泛型类型，原因是泛型类型可以实例化为值类型，而null只能用于引用类型；针对这个问题可以使用default关键字
T doc = default(T); 将 null赋予引用类型，将0赋予值类型；
泛型约束，例如在泛型中调用泛型方法，要求参数实现一定的接口或继承时使用
public class className< T > where T : IAimInfterFaceOrClass{}
泛型继承，可以实现泛型->泛型;泛型->类的继承，要求必须重复接口的泛型类型，或者指定基类的类型
public class className<T>:baseClass<Type>{}
静态成员，泛型的静态成员只能在类的一个实例中共享；不同的生成类具有不同的静态成员
public class className<T>
{
	public static int x;
}
className<string> a.x = 5;
className<int> b.x = 4;
a.x 与 b.x是不同的，针对不同的类型具有独立的空间
泛型接口，泛型可以定义接口，其方法中可以带泛型参数
public interface ICompareable<T>{}
接口也可以使用装箱操作来实现，使用非泛型接口，不过泛型接口性能更好
public className : ICompareable
{
	...;
	public int Compare( object obj )
	{
		//使用obj时要进行强制类型转换；
	}
}
public className : IComparable<otherClassName>
{
	...;
	public int compare( otherClassName obj)
	{
		//使用obj无需进行任何类型转换
	}
}
可以定义泛型方法，同C++中的模板函数
void functionName<T>(ref T x, int y){}
同样可以使用泛型约束函数
public static float functionName<T>(IEnumerable<T> t)where T:IAimClassOrInterface
泛型委托，例如系统的EventHandler委托的定义
public sealed delegate void EventHandler<TEventArgs>(object sender, TEventArgs e ) where TEventArgs: EventArgs

Framework的其他泛型，讨论内容如下
Nullable<T>	结构, 可空类型结构，可空类型不能随意转换为非可空类型，结合时使用??运算
Nullable <int> x;  等同于  int? x;

EventHandler<TEventArgs> 委托
ArraySegment<T> 结构，数组段，用于需要数组的一部

:集合，位于System.Collections命名空间，包括
集合接口和类型、列表、队列、栈、链表、有序表、字典、lookup、hashset、位数组、性能
对象集合位于System.Collection命名空间、泛型集合位于System.Collections.Generic命名空间、专用集合位于System.Collections.Specialized命名空间 
接口方法名称, 都具有对象版本与泛型两个版本，除了标明为泛型的以外
IEnumerable, ICollection, IList, IDictionary, ILookup索引器, ICompare<T>, IEqualityComparer<T>
非泛型接口
常用的集合类型
SortedList<TKey,TValue>, LinkedList<T>, Stack<T>, Queue<T>, List<T>, Dictionary<TKey,TValue>, 3.5新增的 Lookup<TKey,TElement>对象, HashSet<T>无重复项的无需表, BitArray位数组, BitVector32需要事先知道需要的位数则可以使用其代替BitArray以提高效率

LINQ, Langurage Integrated Query
反向的SQL语句
from
where/orderby/join/let/from
select/group 
查询操作符:
where ofType<Tresult>, select, selectMany, OrderBy, ThenBy, OrderByDescending, ThenByDescending, Reverse, Join, GroupJoin, Any, All, Contains, Take, Skip, TakeWhile, SkipWhile, Distinct, Union, Interset, Except, First, FirstorDefault, Last, LastOrDefault, ElementAt, ElementAtOrDefault, Single, SingleOrDefault, Count, Sum, Min, Max, Average, Aggregate, ToArray, ToEnumberable, ToList, ToDictionary, ToType<T>, Empty, Range, Repeat
例：
var result = from r in collection
             where r.property > 15 && r.property < 3
			 group r by r.property into newLabel  //newLabel用于对分组进行访问
			 orderby newLaby.count 
			 orderby r.property
			 thenby r.property  //继续排序
			 select r;
foreach( var t in result )
  doSomeThing;
也可以筛选后创建新字段
var result = from r in collection
			 where r.property > 15
			 group by r.property into newLabel
			 select new
			 {
			   key = newLabel.property;
			   ...或继续嵌入LINQ
			 };
join语句可以将两个赛选的结果按照指定条件进行连接
from r1 in collecton
join r0 in result0 on r1.property equals(或其他条件) r0.property
select new
{
  property = r1.property;
  ...
}
设置操作Distinct(), Union(), Intersect(), Except()
分块操作Take(), Skip()实现分页提取
for( pagesize = 100, page = 0; page < 10; page ++ )
{
	from r in collection
	select r.property
	skip(page * pagesize).take(pagesize);
}
合计操作count(), sum(), min()...
Lookup<TKey,TElement>中支持一个键对应多个值
表达式树Expression<T>，将一个委托类型作为参数，这样就可以将_lambda_表达式赋予参数
public static IEnumberable<T> where <T>( this IEnumberable<T> source, Func<T, bool> predicate);		//定义了where<T>的扩展方法
Func<T, bool> predicate = r.property == value;  //委托方法或_lambda_表达式
也可以使用IQueryable<T> 定义 where<T>的扩展方法
LINQ提供程序包括LINQ to Xml, LINQ to Sql等

内存管理和指针，在使用非托管资源的时候推荐使用IDisposable接口来完成，不使用析构函数的目的是防止与垃圾收集器冲突
class className:IDisposable
{
  public void Dispose()
  {
  }
}
最好将所有清理工作放到同一个函数中进行实现，推荐全部放置在Dispose()函数中，使用析构函数对Dispose()进行调用，双重实现稀构
为了确保稀构对象可以重载Dispose()方法，并在参数中加入标志位来检测是否是第一次调用

使用unsafe关键字编写代码
在命令行编译的时候要加入参数-unsafe, 例如
csc -unsafe *.cs

指针实际是一个内存地址的整数，所以它经过强制转换可以转换为任何数据类型
sizeof 用于返回指定类型（可以是自定义也可以是系统自带类型）的大小

反射，是一种自定义属性与属性类的处理方法，对原有.net类型进行扩展。
定义属性
[FieldName("attributeName")
public type attributeName
{
	get{}...
}
编译器会在编译时自动在FieldName后加Attribute字符串，并使用这个名字搜索命名空间中的对应类。如果手动在FieldName后加上Attribute则编译器不会再加，以上代码等同于
[FieldNameAttribute("attributeName")]
public type attributeName
{...}
；
对应的类可以规定属性可以使用的范围
[AttributeUsage( AttributeTargets.Property, AllowMultiple=false, Inherited=false...)]
public class FieldNameAttribute:System.Attribute
{
	private string name;
	public FieldNameAttribute(string name)
	{
		this.name = name;
	}
}
其中AttributeTargets是一个枚举类型，里面规定了类属性可以使用的所有范围；
其中有两个关键字assembly, module说明属性可以应用到整个程序集或模块中
[assembly:SomeAssemblyAttribute(Parameters)]
[module:SomeAssemblyAttribute(parameters)]
；
对于需要制定多个target属性的时候可以使用OR运算来连接
AttributeTargets.Property|AttributeTargets.Field
如果AllowMultiple=false那么
[FieldName("SocialSecurityNumber")]
[Fieldname("NationalInsuranceNumber")]
public string SocialSecurityNumber
{}
；
将会引起编译错误
Inherited = true 会自动将反射特性应用到派生类的方法或者属性中
；
特性的参数，特定对应的特性类中必须要有字符串参数的构造函数，例如上面的构造函数 string name参数，如果在特性赋予属性的时候指定了多个参数则除了第一个参数作为构造函数的参数外之后的参数会在类中查找相同的属性名，如果找到则赋值，找不到则报错;或者使用多个参数
[FieldName("SocialSecurityNumber", Commet="This is the primary key")]
public string SocialSecurityNumber{}
;
对于上面的属性类定义要加属性Commet
[AttributeUsage(AttributeTarges.Property, AllowMultiple=false, Inherited=false)]
public class FieldNameAttribute: System.Attribute
{
  public string Commet{get;set;}
  public FieldNameAttribute(string name){}
}
;
就是将一个类定义为装饰属性的一种方式。变为属性后可以用来修饰其他类或方法

将源码编译为库的编译命令为
csc /target:libr  ary *.cs

反射
是从对象取得类型，然后取得这个类型的方法集合，调用指定方法。
Type t = typeof( double )
MethodInfo [] methods = t.GetMethods(); //也可使用 GetMethod()取得一个方法
for( MethodInfo m in methods )
{
	...
}
；
Assembly, 类，是System.Reflection 命名空间中定义的,它允许访问给定程序集的元数据，包含可以加载和执行程序集的方法。
方法：
Load(), LoadFrom()
可以在程序集中查找定义的类型
objAssembly.getTypes();
查找定制特性
Attribute.GetCustomAttributes(objAssembly);

错误和异常
异常类
Exception->SystemException->ArgumentException
                            ArithmeticException
                            IOException
                            StackOverflowException
           ApplicationException
;
捕获异常
try
catch...
catch...
finally
;
System.Exception属性
Data, 是一个字典，可以自己添加
HelpLink,  连接到一个帮助文件上，提供异常的更多信息
InnerException, 在catch块中抛出，它就会把代码发送到catch块中的异常对象
Message, 描述错误的文本
Source, 导致异常应用程序对象或名称
StackTrace, 堆栈上方调用的信息
；
异常处理中可以再次抛出异常来对当前的异常进行进一步处理
;
正确释放, 实现IDisposable接口
;
定义异常类, 类继承自某个异常

:visual stduio 2008
>一个solution中设置有多个项目, 要设置一个项目为启动项
>窗口
    - 类视图
    - 属性
    - 对象浏览器, view|boject brower
>调试, 发布编译
>改变解决方案配置

:部署
>最初设计的时候就开始计划部署
>部署选项
    - xcopy
    - copy web 工具, 用于赋值web项目, website|copy website
    - 发布web, 会编译整个站点, 然后复制到指定位置, website|publish website
    - 部署项目, microsoft windows installer技术4种选择
        * 创建合并模块
        * 创建安装程序
        * 为web应用创建安装程序
        * 基于智能设备的compact framework创建安装程序
    - clickonce, 建立自动升级
>.net运行库
    - .net3.0之前, dotnetfx.exe
    - .net3.0, donetfx.exe
    - .netfx35_x86.exe
>installer 项目
    - setup project
    - web steup
    - merge module
    - cab project
    - setup wizard
    - smart device cab
    - 方式, 在solution属性中设置
    


















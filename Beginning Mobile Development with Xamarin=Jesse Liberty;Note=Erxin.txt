Beginning Mobile Development with Xamarin=Jesse Liberty;Note=Erxin

# introduction
- background require
c# and xaml 


# creating your first xamarin.forms application 
- introduction 
xamarin forms
xamarin.ios
xamarin.android 
ios sdk 
android sdk 

    + xamarin.forms,a new innovation 
page, content page
inpage is layout,inside layout are views, views in xaml are called controls 

- hello world 
use xamarin studio,create new solution, use blank xamarin forms

after create the solution the first thing is update the package in visual studio use nuget to update the packages 

open the project start cs file, change the code 
MainPage = new MainPage(); //we will create a new MainPage xaml file 

create new file Forms.ContentPage.Xaml 

the ContentPage.Content could only have one control. the in the MainPage.xaml 

now we could set IOS as the startup project,we could choose the IOS simulator 
- starting todo application 
    + create new solution for todo application, change the start entry 
    
    MainPage = new NavigationPage(new CreatePage());
    
    the NavigationPage will setup the navigation system for us 
    
    + create the CreatePage.xaml 
    
    + when you add stackpanel for IOS you have to add aditional padding for it to prevent crash icons together 
    
    + add new Entry control in the CreatePage, Entry is used to input text 
    <Entry x:Name="ToDoEntry" Placeholder="New To Do Item" WidthRequest="150"/>
- simple data entry 
- time and date pickers 
- model classes and event handling 
- completing the UI 

# collections, perssitence and mvvm 
- introduction 
- begining data binding 
when you data bind you always bind to the public property 

create public property value on the data page 

namespace ToDo {
    public partial class ListTaskPage:ContentPage {
    
        public string MyName {get;set;}
        
        public ListTaskPage(List<ToDoItem> items){
            MyName = "Jesse";
            BindingContext = this;
            InitializeComponent();
        }
    }
}

let the label in the xaml binding to the public property 

<ContentPage.Content>
    <Label Text="{Binding MyName}"/>
</ContentPage.Content>
- list data binding 
<ContentPage.Content>
    ...
    <ListView x:Name="ToDoList" ItemTapped="OnSelected" ItemsSource="{Binding ToDoItem}">
        <ListView.ItemTemplate>
            <DataTemplate>
                <ViewCell>
                    <ViewCell.View>
                        <StackLayout Padding="5" Spacing="1">
                            <Label
                            x:Name="TaskNameDisplay"
                            Text="{Binding TaskName}"
                            FontSize="12"
                            TextColor="Red"/>
                            <StackLayout Orientation="Horizontal"/>
                            />
                        </StackLayout>
                    </ViewCell.View>
                </ViewCell>
            </DataTemplate>
        </ListView>
    </ListView>
</ContentPage.Content>

//in the code behind class object

BindingContext = this; 
....
public List<ToDoItem> ToDoItems {get;set;}
- introducing mvvm 
View, the view controls and pages 
ViewModel, view model for data binding 
Model, contain the data model of the view 
- introducing sqlite 
use sqlite.net pcl

use the pcl license for your window phone project 

    + add the same package for your other platform project 
- data classes 
- working with sqlite 
    + add interface to the data model folder 
public interface ISqlLite{
    SqlLiteConnection GetConnection();
}

    + add database access class 
    
public class ToDoDatabase{

    private SQLLiteConnection database;
    static object locker = new object();
    
    public ToDoDatabase(){
        database = DependencyService.Get<ISqlLite>.GetConnection();
        database.CreateTable<ToDoItem>();
    }
    
    public int SaveToDo(ToDoItem toDoItem){
        lock(locker){
        }
    }
}

    + for ios project, create SQLite_iOS:ISQLite(){
        public SQLite_iOS(){
        
        }
        
        public SQLite.SQLiteConnection GetConnection(){
        
            var path = "/users/jesseliberty/Data/ToDo.db"; 
            File.Open(path, FileModel.OpenOrCreate);
            var conn = new SQLite.SQLiteConnection(path);
            return conn;
        }
    }
- todo items in the database 
set the context of the page to the view model 
- retriving data from the database 
create new datamodel and save into database, like entity framework 
- resources and conversions,use lock to simulate the data access 
public class ToDoDatabase{
    private SQLiteConnection database;
    static object locker = new object();
    
    public ToDoDatabase(){
        database = DependencyService.Get<ISQLite>.GetConnection();
        database.CreateTable<ToDoItem>();
    }
    
    public ToDoItem GetToDo(int id){
        lock(locker){
            return database.Table<ToDoItem>()
                           .Where(c=>c.ID == id)
                           .FirstOrDefault();
        }
    }
    
    public int SaveToDo(ToDoItem toDoItem)
    {
        lock(locker){
            if(toDoItem.ID != 0){
                database.Update(toDoItem);
                return toDoItem.ID;
            }
            else 
            {
                return database.Insert(toDoItem);
            }
        }
    }
}
    + add converter class and add a instance as resource into the content page resource dictionary 
- wrapping it up 
use third party tool to access the sqlite database tool to help manipulate and test the application 
- summary 


# creating your first ios application 
- introduction 
xamarin forms
xamarin.ios
ios SDK

    + MVC is the primary pattern for ios development 
    view model controller 
    
    + only one screen is visible at a time in ios 
    controllers are typically represented as screens
    navigation controller has no UI 
    each new screen is stacked on the previous 
    the bottom screen is called the "root controller"
    
    + the plan
    create a bare-bones ui 
    enter data and pass to second screen 
    data will be displayed as list in second screen 
    
- create single view app for ios 

    + create solution 
    + update nuget packages 
    + for application is the main story board 
    + drag and drop navigation controller into the main.storyboard. navigation controller is come with a root controller 
    + drag and drop a new table view controller and set the start point to the navigation controller 
    
    select the controller and give the controller a name from the property window 
    
    add button and text 
    
    give the button a name and set the controller 
    
- Navigation
    + drag the button and drop the line to a view and set the detail menu to show
    
    this will set the navigation
    
    + set up the logic for controller 
    
public partial class ViewController: UIViewController {
    string toDoItem = string.Empty;
    public List<string> ToDoItems {get;set;}
    public ViewController(IntPtr handle):base(handle)
    {
        ToDoItems = new List<string>();
    }
    
    public override void ViewDidLoad(){
        base.ViewDidLoad();
        SaveButton.TouchUpInside += (send, e) => {
            ToDoItems.Add(ToDoEntry.Text);
            ToDoEntry.ResignFirstResponder(); //will hide the keyboard after leave the text board 
        };
    }
    
    public override void PrepareForSegue(UIStoryboardSegue segue, Founda..)
    {
       base.PrepareForSegue(segue, sender);
       var ToDoReviewController = segue.DestinationViewController as ToDoReviewController; 
       
       if(ToDoReviewController != null)
       {
            ToDoReviewController.ToDoItems = ToDoItems;
       }
    }
}

//in the ToDoReviewController.cs add the property 
partial class ToDoReviewController: UITableViewController 
{
    public List<string> ToDoItems {get;set;}
    static NSString toDoReviewCellId = new NSString("ToDoReviewCell");
    
    public ToDoReviewController (IntPtr handle):base(handle){
        TableView.RegisterClassForCellReuse(typeof(UITableViewCell), toDoReviewCellId);
        
        TableView.Source = new ToDoReviewDataSource(this);
        ToDoItems = new List<string>();
    }
    
    class ToDoReviewDataSource: UITableViewSource{
        ToDoReviewController controller;
        
    }
    
}

- persistence add NSString property which is a string type for ios 


# implementing event handling and persistence 
- introduction 
- returning to the storyboard 
- working with date picker, SharpMobileCode/ModalPickerViewController from the github
- managing the view controller, use the NSDataFormatter to format the date time style in IOS 
- finishing the date formatter  
- setup persistence
write into database 

add sqlite package, select sqlite-net package 

# creating your first android application 
- Xamarin Android 
use intent, an intent indicates an operation that should be performed in the android OS. it can be used to launch applicationsor activities with the intent to do something, such as make a phone call, display a page or navigate 

activity, android applications are made up of sub-applications called activities. the best way to thinkof activity is a page 

- getting started with creating an android application 
    + open new solution
    + create android project 
    + use moden development 
    + place the solution 
    + go to the layout folder we would find the Main.axml file 
    
    + it will open the storybord, use the botton of the screen to switch between and the content and the xml source file to create xaml conent 
    <TextView android:text="New Task" android:textAppearance="?android:attr/textAppearance" layout_width="match_parent" android:layout_height="wrap_content" android:id="@+id/textView1" android:textColor="@android.../>

- add other controls from designer view 

# implementing event handling and persistence 
- event handling part1 
[Activity(Label = "To Do(Android)", MainLauncher = true, Icon="@drawable/icon]
public class MainActivity:Activity{
    static readonly List<string> toDoItems = new List<string>();
    private TextView dateDisplay;
    private Button pickDate;
    private DateTime date;
    private content int DateDialogId = 0;
    
    protected override void OnCreate(Bundle bundle){
    
        base.OnCreate(bundle);
        SetContentView(Resource.Layout.Main);
        
        Button saveButton = FindViewById<Button>(Resource.Id.saveButton);
        saveButton.Click += delegate(object s, EventArgs e){
            ...
        };
    }
}
- use sqlite to persistence our data 

# review and next steps 
- cross platform 
- quick & easy 
- layout with xaml (no designer for now)
- pages layouts views 
- data binding 
- MVVM 
- review ios 
ios designer 
mode-view-controller (mvc)
screens stack only one visible at the same time 
sqlite 

- android designer 
intents 
activities, many ways activity is subprogram 
sqlite 






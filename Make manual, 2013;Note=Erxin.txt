Make manual, 2013;Note=Erxin

# Overview of make
-GNU make implemented by Richard Stallman and Roland McGrath, from version 3.76 has been handled by Paul D. Smith

- GNU make conforms to section 6.2 of IEEE standard 1003.2-1992(POSIX.2)
- make can be used for any task where some files must be updated automatcially from others whenever the other changes

- report bug
bug-make@gnu.org, http://savannah.gnu.org/projects/make/

- check make version
make --version

- obtain os and machine info by check the tail output of
make --help

- introduction to makefiles
    + what a rule looks like, simple make files looks like 
target ... : prerequisites ...
    recipe
    ...
    ...

target usually the name of a file that is generaeted by a program. can also be the name of an action to carry out such as clean 
prerequisites, a file that is used as input to create the target 
recipe, an action that make carries out, YOU NEED TO ADD A TAB CHARACTER AT THE BEGINNING OF EVERY RECIPE LINE. you can set the .RECIPEPREFIX to change the prefix character. recipe may have more than one command either on the same line or each on its own line. usually recipe is in a rule with prerequesites 
rule, how and when to remake certain files which are the targets of the particular rule 

- simple make file 
edit : main.o kbd.o command.o display.o \
       insert.o search.o files.o utils.o
    cc -o edit main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
               
main.o : main.c defs.h
    cc -c main.c

kbd.o : kbd.c defs.h command.h
    cc -c kbd.c

command.o : command.c defs.h command.h
    cc -c command.c

display.o : display.c defs.h buffer.h
    cc -c display.c

insert.o : insert.c defs.h buffer.h
    cc -c insert.c

search.o : search.c defs.h buffer.h
    cc -c search.c

files.o : files.c defs.h buffer.h command.h
    cc -c files.c

utils.o : utils.c defs.h
    cc -c utils.c

clean :
    rm edit main.o kbd.o command.o display.o \
            insert.o search.o files.o utils.o

     + using backslash/newline; this is like using one long line, but is easier to read.
     + use this make file by 
     $ make 
     
     delete all the executable by 
     $ make clean 

targets that do not refer to files but are just actions are called phony targets
 
- how make processes a makefile 
    + by default make starts with the first target. you could override this hbehavior using hte command line or .DEFAULT_GOAL special variable 
    
if source file such as *.c *.h is newer than *.o then make will recompile the *.o file with the rule 

- variables make makefiles simpler 
     
define such a variable objects with a line like this in the makefile:
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
     
reference the variable by $(objects)     
     
- let make deduce the recipes, It is not necessary to spell out the recipes for compiling the individual C source files, because make can figure them out: it has an implicit rule for updating a ‘.o’ file from a correspondingly named ‘.c’ file using a ‘cc -c’ command.
     
when a '.c' file is used automatically added to prerequisites list and we could omit it in the recipe 

the new version of the previous example 
     
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
edit : $(objects)
    cc -o edit $(objects)
    
main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h
.PHONY : clean
clean :
    rm edit $(objects)    
     
- another style of make file, group entries by their prerequesites instead of by their targets. not recommanded 

objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
edit : $(objects)
    cc -o edit $(objects)
$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h
     
- rules for cleaning the directory. write a rule for how to clean all the object file 
clean:
    rm edit $(objects)
    
write rule for handle unanticipated situations 
.PHONY:clean 
clean:
    -m edit $(objects)
    
this prevents make from getting confused by an actual file called clean and causes it to continue in spite of errors from rm 

it should be place at first which could be come default action 
     
- write makefiles 
    + what makefile contains, five kinds of things 
    explicit rules, decribe how to remake one or more files which called targets. the dependent files are called prerequesites. may also contain a recipe to use to create or update the target 
    
    implicit rules, describe how to remake a class of files based on their names. it gives a recipe to create or udpate such target base on their names from the dependent files 
    
    variable definitions, a line specifies a text string value which can be subsituted into text later 
    
    directives, is an instruction for make to do something special while reading the makefile 
        + reading another makefile 
        + deciding whether to use or ignore a part of the makefile 
        + defining a variable from verbatim string containing multiple lines 
        
    comments. '#' in a line of a makefile starts a comment. comment within a recipe are passed to the shell, just as with any other recipe text. the shell decide how to interpret it. within a define directive, comments are not ignored during the definition of the variable.
    + symbols
    \ is line continue symbol. all whitespae around the backslash will condensed into a single space 
    .POSIX special target is defined then backslash/newline handling is modified slightly to conform to POSIX.2: first, whitespace preceding a backslash is not removed and second, consecutive backslash/newlines are not condensed
     
- what name to give your makefile 
normally call it makefile or Makefile, Makefile will appears prominetly near the beinning of  directory listing right near the README 

the name GNUmakefile is only first checked by gnu make 

to specify another name 
$ make -f makefile-name 
     
- including other makefiles 
include file-names...

extra spaces are allowed but don't use the .RECIPEPREFIX character which will make the line interpret as a recipe line 

include foo *.mk $(variable-name)

    + occasion for using include is when severl programs handled by individual makefiles in various directories need to use a common set of variable definitions or pattern rules 
    
    + another is when you want to generate prerequesites from source files automatically. the prerequesites can be put in a file that is include by the main makefile. it generally cleaner than generate it at the end of the makefile like other traditional make 
    
    + search pathes, if specified name does not start with a slash and the file is not found in the  current directory. other are searched 
    specify -I or --include-dir option are searched 
    prefix/include 
    /usr/local/include 
    /usr/gnu/include 
    /usr/local/include/
    /usr/include 
    
    if still can't file the file then a fatal error will be thrown 
    
    + to ignore a makefile does not exist or cannot be remade with no error 
    -include file-names 
    
- variable maekfiles 
if environment variable MAKEFILES is defined maek consider the value as a list of names seperated by whitespace of addtional makefiels to be read before the others 

it is not a good practice to the environment variable. keep always use explicit include 

- how makefiles are remade, if you know that one or more of your makefiles cannot be remade and you want to keep make from performing an implicit rule search on them, perhanps for efficient reasons. you can use any normal method of preventing implicit rule look-up 

a double-colon rule to remake a file with a recipe but no prerequesites that file will always be remade. this will cause infinit loop in remake. maek will not attempt to remake makefiles which are specified as targets of a double-colon rule with a recipe but no prerequesites

- overriding part of another makefile. use a match-anything pattern rule to say that to remake any target that cannot be made from the information in the containing makefile 

foo: 
    frobnicate > foo 
%: force 
    @$(MAKE) -f makefile $@
force:;

the % pattern will match any target. the rule specify a prerequesites force to guarantee that the recipe will be run even if the target file already exits. an empty recipe is given to force to prevent is math the % which will causes a infinit loop 

- how make reads a makefile 
    + read all the make file and build variables, rules and build a dependency graph 
    
    + maek use these structures to determine what targets will be rebuilt 
    
    + how variable and function expansion happens. expansion is immediate if it happens during the first phase
    
    expansion is deferred if it is not performed immediately till either the construct appears later in an immediate context or second phase 
    
- variable assignment 
immediate = deferred 
immediate ?= deferred 
immediate := immediate 
immediate ::= immediate
immediate += deferred or immediate 
immediate != immediate

define immediate
    deferred
endef 

define immediate = 
    deferred
endef 

define immediate ?= 
    deferred
endef 

define immediate := 
    immediate
endef 

define immediate += 
    deferred or immediate
endef 

define immediate != 
    immediate
endef 

- conditional directives are parsed immediately. automatic variable cannot be used in conditional directives as automatic variables are not set until the recipe for that rule is invoked. if you want to use automtica variables in directive you must move the condition into the recipe and use shell condtional syntax instead 

- rule definition, it expanded the same way. the recipe used to construct the target is always deferred. 

immediate: immediate; deferred
    deferred
    
- secondary expansion, need to special target .SECONDEXPANSION must be defined before the first prerequesites list that makes use of this feature 

special target is defined then in between the two phases mentioned above, right at the end of the readin phase, all prerequesites of the targets defined after the special target are expanded a second time 

    + example 
.SECONDEXPANSION:
ONEVAR = onefile
TWOVAR = twofile
myfile: $(ONEVAR) $$(TWOVAR)

After the first expansion phase the prerequisites list of the myfile target will be onefile and $(TWOVAR); the first (unescaped) variable reference to ONEVAR is expanded, while the second (escaped) variable reference is simply unescaped, without being recognized as a variable reference. The final result is that there are two prerequisites, onefile and twofile.

you can use $@, $* etc during the second expandsion 
    + example 
.SECONDEXPANSION:
main_OBJS := main.o try.o test.o
lib_OBJS := lib.o api.o
main lib: $$($$@_OBJS)

Here, after the initial expansion the prerequisites of both the main and lib targets will be $($@_OBJS). During the secondary expansion, the $@ variable is set to the name of the target and so the expansion for the main target will yield $(main_OBJS), or main.o try.o test.o, while the secondary expansion for the lib target will yield $(lib_OBJS), or lib.o api.o.

- secondary expandsion of explicit rules 
$$@ and $$% evaluate, respectively, to the file name of the target and, when the target is an archive member, the target member name. The $$< variable evaluates to the first prerequisite in the first rule for this target. $$^ and $$+ evaluate to the list of all prerequisites of rules that have already appeared for the same target

    + example 
.SECONDEXPANSION:
foo: foo.1 bar.1 $$< $$^ $$+ # line #1
foo: foo.2 bar.2 $$< $$^ $$+ # line #2
foo: foo.3 bar.3 $$< $$^ $$+ # line #3

In the third they will have values foo.1, foo.1 bar.1 foo.2 bar.2, and foo.1 bar.1 foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1 respectively.

The variables $$? and $$* are not available and expand to the empty string

- secondary expansion of static pattern rules, for static pattern rules the $$* variable is set to the pattern stem. As with explicit rules, $$? is not available and expands to the empty string

- secondary expansion of implicit rules, make searches for an implicit rle it substitutes the stem and then performs secondar expansion for every rule with a matching target pattern 

    + example 
.SECONDEXPANSION:
foo: bar
foo foz: fo%: bo%
%oo: $$< $$^ $$+ $$*

When the implicit rule is tried for target foo, $$< expands to bar, $$^ expands to bar boo, $$+ also expands to bar boo, and $$* expands to f.

- writing rules the order of rues is not significant except for determing the default goal. if you don't specific one then the default goal the target of the first rule in the first makefile 

if the rule has multiple target only the first target take as default. two exceptions 
    + target starting with a period is not a default unless it contains one or more slashes '/'
    + a target defines a pattern rule has no effect on the default goal 

- rule syntax 
In general, a rule looks like this:
    targets : prerequisites
    recipe
    ...
    
or like this:
targets : prerequisites ; recipe
    recipe
    ...

targets, may contain mutilple files 
recipe lines start with a tab character, it could be custom by .RECIPEPREFIX
dollar signs are used to start make variable references. 

- 












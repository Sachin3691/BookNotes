Firefox SpiderMonkey Document;Note=Erxin

# Blog for learning spidemonkey 
- ref, http://blog.cdleary.com/2011/11/contributing-to-spidermonkey/

# New to spidermonkey
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Articles_for_new_developers

# JSAPI User Guide 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/JSAPI_User_Guide

- what spider monkey does 
    + provide core javascript data types 
    
- hello world 
    + build documentation 
    https://developer.mozilla.org/En/SpiderMonkey/Build_Documentation
    
    + include header 
    C++ code accesses SpiderMonkey via the JSAPI, by including the header "jsapi.h"
    
    + an application must have three key elements 
    runtimes, JSRuntime, space which javascript variables, objects scripts and context used by your application 
    
    contexts, JSContext, like a little machine that can do many things. compile and execute scripts, get set object properties. call javascript functions, convert javascript data from one type to another. all jsapi functions require a JSContext
    
    global objects. contains all the classes, functions and variables. JSAPI application have full control over that global properties scripts can see 
    All of these functions, classes, and variables are stored as properties of the global object
        
    + minimal example 
    The runtime: Use JS_NewRuntime to create it and JS_DestroyRuntime to clean it up when you're done. 
    
    The context: Use JS_NewContext and JS_DestroyContext. For maximum ECMAScript standard compliance, applications should also use JS_SetOptions to enable JSOPTION_VAROBJFIX.
    
    get the latest JavaScript language features, applications may use JS_SetVersion. Error reporting is also per-context and is enabled using JS_SetErrorReporter.
    
    The global object: To create this object, you first need a JSClass with the JSCLASS_GLOBAL_FLAGS option. Use JS_NewGlobalObject to create a global object. Use JS_InitStandardClasses to populate it with the standard JavaScript globals.
    
    Each JSNative has the same signature, regardless of what arguments it expects to receive from JavaScript. 
    
    The JavaScript arguments to the function are given in argc and vp. argc tells how many actual arguments the caller passed, and JS_ARGV(cx, vp) returns an array of those arguments. The arguments do not have native C++ types like int and float; rather, they are jsvals
    
    The native function uses JS_ConvertArguments to convert the arguments to C++ types and store them in local variables. The native function uses JS_SET_RVAL(cx, vp, val) to store its JavaScript return value.
    
    On success, a JSNative must call JS_SET_RVAL and return true
    
    On failure, a JSNative calls an error-reporting function, in this case JS_ReportError, and returns false.
    
    make native functions callable from JavaScript, declare a table of JSFunctionSpecs describing the functions. Then call JS_DefineFunctions.
    
        * Examples 
#include "jsapi.h"

using namespace JS;

// The class of the global object.
static JSClass globalClass = {
    "global",
    JSCLASS_GLOBAL_FLAGS,
    JS_PropertyStub,
    JS_DeletePropertyStub,
    JS_PropertyStub,
    JS_StrictPropertyStub,
    JS_EnumerateStub,
    JS_ResolveStub,
    JS_ConvertStub,
    nullptr, nullptr, nullptr, nullptr,
    JS_GlobalObjectTraceHook
};

// The error reporter callback.
void reportError(JSContext *cx, const char *message, JSErrorReport *report) {
     fprintf(stderr, "%s:%u:%s\n",
             report->filename ? report->filename : "[no filename]",
             (unsigned int) report->lineno,
             message);
}

int run(JSContext *cx) {
    // Enter a request before running anything in the context.
    JSAutoRequest ar(cx);

    // Create the global object and a new compartment.
    RootedObject global(cx);
    global = JS_NewGlobalObject(cx, &globalClass, nullptr,
                                JS::DontFireOnNewGlobalHook);
    if (!global)
        return 1;

    // Enter the new global object's compartment.
    JSAutoCompartment ac(cx, global);

    // Populate the global object with the standard globals, like Object and
    // Array.
    if (!JS_InitStandardClasses(cx, global))
        return 1;

    // Your application code here. This may include JSAPI calls to create your
    // own custom JS objects and run scripts.

    return 0;
}

int main(int argc, const char *argv[]) {
    // Initialize the JS engine.
    if (!JS_Init())
       return 1;

    // Create a JS runtime.
    JSRuntime *rt = JS_NewRuntime(8L * 1024L * 1024L);
    if (!rt)
       return 1;

    // Create a context.
    JSContext *cx = JS_NewContext(rt, 8192);
    if (!cx)
       return 1;
    JS_SetErrorReporter(rt, reportError);

    int status = run(cx);

    // Shut everything down.
    JS_DestroyContext(cx);
    JS_DestroyRuntime(rt);
    JS_ShutDown();

    return status;
}

- 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
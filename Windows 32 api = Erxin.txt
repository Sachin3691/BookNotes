Windows 32 api = Erxin

:window 32 api
>The programming language is C.
>The Windows API has four basic components
	- win api components
	- base services
	- gdi
	- user interface
	- networks

:Create a window console project
>don't use precompile header file from the project property. (stdafx.h)

:Window
>everything is a window in windows
>every window application at least have two functions
	- WinMain, is the entry point
	 int WINAPI WinMain( HINSTANCE hInstance, 
						 HINSTANCE hPrevInstance, 
						 LPSTR lpCmdLine, 
						 int nCmdShow );
		* hInstance is handle of instance, 32-bit number is given by Windows.
		* hPrevInstance parameter is always NULL. Is legacy from 16 bit windows.
		* lpCmdLine, is the commnad line arguments.
		* The nCmdShow value specifies, how the window will be displayed. Minimized, maximized or hidden. 
	 The WinMain function terminates when it receives the WM_QUIT message.
	- window procedure function
>Registering window
	- create and fill an WNDCLASS structure, to set style, memory, brush;
	- Finally, we call the RegisterClass() function; 
>Creating a window
HWND CreateWindow( LPCTSTR lpClassName, 
				   LPCTSTR lpWindowName, 
				   DWORD dwStyle, 
				   int x, int y, 
				   int nWidth, 
				   int nHeight, 
				   HWND hWndParent, 
				   HMENU hMenu,
				   HINSTANCE hInstance, 
				   LPVOID lpParam );
    - lpClassName uniquely identifies the window. It is the name under we regist the window.
	- The lpWindowName is a window name. It's effect depend on context. It can be a title of window or a label
	- The lpParam is the last parameter, it is an optional value passed to the window during the WM_CREATE message. The CreateWindow() function returns handle to the newly created window. 
>Message
The WinMain function creates a message loop. It's endless loop. A message is an integer value that identifies a specific event. 
There is a message queue. The message enters the message queue and waits until it is processed. 
The GetMessage() function retrieves the message from the message queue. 
The DispatchMessage() function dispatches a message to a window procedure. 
The TranslateMessage() function to obtains character input.
>Window procedure
Every window must have a procedure. It's a function receive message.
LRESULT CALLBACK WindowProc(HWND hwnd, 
							UINT uMsg, 
							WPARAM wParam, 
							LPARAM lParam);
We react to a message or we call the default window procedure. Most messages are sent to the default window procedure. The default window procedure is called DefWindowProc(). The parameters are as same as WindowProc.
>_cdecal, _stdcal
	- _cdecal
	This is the default calling convention for C and C++ programs. Because the stack is cleaned up by the caller, it can do vararg functions. The __cdecl calling convention creates larger executables than __stdcall, because it requires each function call to include stack cleanup code. The following list shows the implementation of this calling convention.
	Element  Implementation  
	Argument-passing order
	 Right to left
	Stack-maintenance responsibility
	 Calling function pops the arguments from the stack
	Name-decoration convention
	 Underscore character (_) is prefixed to names, except when exporting __cdecl functions that use C linkage.
	Case-translation convention
	 No case translation performed
	- _stdcal
	The __stdcall calling convention is used to call Win32 API functions. The callee cleans the stack, so the compiler makes vararg functions __cdecl. Functions that use this calling convention require a function prototype.
	return-type __stdcall function-name[(argument-list)]
	  Remarks 
	The following list shows the implementation of this calling convention.
	Element  Implementation  
	Argument-passing order
	 Right to left.
	Argument-passing convention
	 By value, unless a pointer or reference type is passed.
	Stack-maintenance responsibility
	 Called function pops its own arguments from the stack.
	Name-decoration convention
	 An underscore (_) is prefixed to the name. The name is followed by the at sign (@) followed by the number of bytes (in decimal) in the argument list. Therefore, the function declared as int func( int a, double b ) is decorated as follows: _func@12
	Case-translation convention
	 None
>library of win32api
The Win32 API is added to the C programming project by linking the necessary libraries, kernel32.lib, user32.lib, gdi32.lib and by including the <windows.h> header file.
>send message to the specify window
sendMessage(hwnd, msg, wparam, lparam)	
>Importing Data Using __declspec(dllimport)
__declspec(dllimport) is a convenience item that removes a layer of indirection. When you import data from a DLL, you still have to go through the import address table. In the Win32 days before __declspec(dllimport). 
The steps are:
// project.h
#ifdef _DLL   // If accessing the data from inside the DLL
   ULONG ulDataInDll;
#else         // If accessing the data from outside the DLL
   ULONG *ulDataInDll;
#endif
Then export the data in .DEF file 
// project.def
LIBRARY project
EXPORTS
   ulDataInDll   CONSTANT
Access the data out side the dll
if (*ulDataInDll == 0L) 
{
   // Do stuff here
}
When you mark the data as __declspec(dllimport), the compiler automatically generates the indirection code for you.
To export the data automatically from the dll, use these declaration:
__declspec(dllexport) ULONG ulDataInDLL;
>Move the window, use the message WM_MOVE
>Flash a window
	- create and fill a FLASHWINFO structure
	- call FlashWindowEx() function
	
:Dialog
>Create a dialog
dialog is a special window with some attributes; The dialogClass is registed as normal window
  CreateWindowEx(WS_EX_DLGMODALFRAME | WS_EX_TOPMOST,  TEXT("DialogClass"), TEXT("Dialog Box"), 
        WS_VISIBLE | WS_SYSMENU | WS_CAPTION , 100, 100, 200, 150, 
        NULL, NULL, ghInstance,  NULL);
>show color window
COLORREF ShowColorDialog(HWND hwnd) {
  CHOOSECOLOR cc;                 
  static COLORREF crCustClr[16];     
  ZeroMemory(&cc, sizeof(cc)); //Fills a block of memory with zeros.
  cc.lStructSize = sizeof(cc);
  cc.hwndOwner = hwnd;
  cc.lpCustColors = (LPDWORD) crCustClr;
  cc.rgbResult = RGB(0, 255, 0);
  cc.Flags = CC_FULLOPEN | CC_RGBINIT;
  ChooseColor(&cc);
  return cc.rgbResult;
}
>show open file dialog
	- define a open file structure
	OPENFILENAME ofn;
	- call the functoin 
	GetOpenFileName(&ofn))
>load file dialog
  hFile = CreateFile(file, GENERIC_READ, 0, NULL, OPEN_EXISTING, 0, NULL);
  dwSize = GetFileSize(hFile, NULL);
  lpBuffer = (LPBYTE) HeapAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, dwSize + 1);
  ReadFile(hFile, (LPWSTR)lpBuffer, dwSize, &dw, NULL);
  CloseHandle(hFile);
  lpBuffer[dwSize] = 0;
  SetWindowText(ghwndEdit, (LPSTR) lpBuffer);
  HeapFree(GetProcessHeap(), 0, lpBuffer);

:Controls
>Controls are called widgets in UNIX environment. 
>reference header, #include <commctrl.h>
>The static control displays text and graphics. The static control cannot be selected. It cannot have keyboard focus. 
>Button, A button is a simple control. It has a text label. It is used to trigger an action. 
   CreateWindow(TEXT("button"), TEXT("Beep"),    
			 WS_VISIBLE | WS_CHILD ,
			 20, 50, 80, 25,        
			 hwnd, (HMENU) 1, NULL, NULL);   
The control id is in the LOWORD of the wParam. Depending on the control id, we call the Beep() function or the PostQuitMessage() function. 
>Check box, is a kind of button with specify styles
	CreateWindow(L"button", L"Show Title",
	 WS_VISIBLE | WS_CHILD | BS_CHECKBOX,
	 20, 20, 185, 35,        
	 hwnd, (HMENU) 1, ((LPCREATESTRUCT)lParam)->hInstance, NULL);
	BOOL checked = IsDlgButtonChecked(hwnd, 1); //check the check box is checked 1 is the check box id in the hwnd window
	CheckDlgButton(hwnd, id); //to check and uncheck the checkbox
>Edit Control
Edit control is a rectangular child window. Edit control is used to enter and edit text. It can be single line or multiline. 
	hwndEdit = CreateWindow(TEXT("Edit"), NULL, WS_CHILD | WS_VISIBLE | WS_BORDER,
					50, 50, 150, 20, hwnd, (HMENU) ID_EDIT,
					NULL, NULL);
	if (HIWORD(wParam) == BN_CLICKED) {
	len = GetWindowTextLength(hwndEdit) + 1;
	GetWindowText(hwndEdit, text, len);
	SetWindowText(hwnd, text);
	}	
>Trackbar
A trackbar is a window that contains a slider and optional tick marks. We move the slider using the mouse or keyboard.	
	 hwndTrack = CreateWindowEx( 
	  0, TRACKBAR_CLASS, "Trackbar Control",          
	  WS_CHILD | WS_VISIBLE | 
	  TBS_AUTOTICKS | TBS_ENABLESELRANGE,  
	  100, 25, 120, 30,                       
	  hwnd, (HMENU) 3, NULL, NULL);
	 SendMessage(hwndTrack, TBM_SETRANGE,  TRUE,  MAKELONG(0, 255)); 
	 SendMessage(hwndTrack, TBM_SETPAGESIZE, 0,  20); 
	 SendMessage(hwndTrack, TBM_SETTICFREQ, 20, 0); 
	 SendMessage(hwndTrack, TBM_SETPOS, FALSE, 255); 
	 SendMessage(hwndTrack, TBM_SETBUDDY, TRUE, (LPARAM) hwndLeftLabel); 
	 SendMessage(hwndTrack, TBM_SETBUDDY, FALSE, (LPARAM) hwndRightLabel); 
	 break;
	 res = SendMessage(hwndTrack, TBM_GETPOS, 0, 0);
	 SetLayeredWindowAttributes(hwnd, RGB(255, 0, 0), (BYTE) res, 
		 LWA_COLORKEY | LWA_ALPHA); //Change the current window's transparency
	 break;
	When we move the trackbar slider, the window procedure receives the WM_HSCROLL message.(In case of a horizontal trackbar, of course)
>Tooltip
A tooltip is a common graphical user element. Tooltip is a part of common controls, we must initialize common controls.
	- Create a tool tip window
	- make it top most
	- create a tooltip text and a TOOLTIPINFO structure, the structure must be filled with important info
	- window handle, tooltip text and the rectangle will the tooltip cover
	- add tooltip after send the message TTM_ADDTOOL
	SendMessage(hwndTT, TTM_ADDTOOL, 0, (LPARAM) (LPTOOLINFO) &ti);
	- ex.
    INITCOMMONCONTROLSEX iccex; 
    HWND hwndTT;                
    TOOLINFO ti;
    char tooltip[30] = "A main window";
    RECT rect;                 
    iccex.dwICC = ICC_WIN95_CLASSES;
    iccex.dwSize = sizeof(INITCOMMONCONTROLSEX);
    InitCommonControlsEx(&iccex);
    hwndTT = CreateWindowEx(WS_EX_TOPMOST, TOOLTIPS_CLASS, NULL,
        WS_POPUP | TTS_NOPREFIX | TTS_ALWAYSTIP,		
        0, 0, 0, 0, hwnd, NULL, NULL, NULL );
    SetWindowPos(hwndTT, HWND_TOPMOST, 0, 0, 0, 0,
        SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);
    GetClientRect (hwnd, &rect);
    ti.cbSize = sizeof(TOOLINFO);
    ti.uFlags = TTF_SUBCLASS;
    ti.hwnd = hwnd;
    ti.hinst = NULL;
    ti.uId = 0;
    ti.lpszText = tooltip;
    ti.rect.left = rect.left;    
    ti.rect.top = rect.top;
    ti.rect.right = rect.right;
    ti.rect.bottom = rect.bottom;
    SendMessage(hwndTT, TTM_ADDTOOL, 0, (LPARAM) (LPTOOLINFO) &ti);	
>Month Calendar Control	
>Radio buttons and GroupBox
. A group box is a rectangle that surrounds a set of controls. These are often radio buttons.
A radio button is a special kind of button, that can be selected by the user, but not cleared. It allows the user to select a single exclusive choice from a group of options. 
	CreateWindow(TEXT("button"), TEXT("Choose Color"), 
		WS_CHILD | WS_VISIBLE | BS_GROUPBOX,
		10, 10, 120, 110, hwnd, (HMENU) 0, g_hinst, NULL);
	CreateWindow(TEXT("button"), TEXT("Blue"),
		WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON,
		20, 30, 100, 30, hwnd, (HMENU)ID_BLUE , g_hinst, NULL);
	CreateWindow(TEXT("button"), TEXT("Yellow"),
		WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON,
		20, 55, 100, 30, hwnd, (HMENU)ID_YELLOW , g_hinst, NULL);
	CreateWindow(TEXT("button"), TEXT("Orange"),
		WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON,
		20, 80, 100, 30, hwnd, (HMENU)ID_ORANGE , g_hinst, NULL);
InvalidateRect(hwnd, NULL, TRUE);
We invalidate the rectangle (in this case whole window), which will cause the client area to be redrawn. This will launch a WM_PAINT message. 
>ComboBox
A combo box is a combination of an edit box or static text and a list.		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
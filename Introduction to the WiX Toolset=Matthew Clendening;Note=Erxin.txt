Introduction to the WiX Toolset=Matthew Clendening;Note=Erxin


# Overview
- Introduction 
    + precondition 
    WiX toolset is design for create window installer only 
    + can't be used to install window store apps 
    + referece website 
    http://wix.tramontana.co.hu/
    http://sourceforge.net/p/wix/mailman/wix-users/
    http://wixtoolset.org/
    http://wix.codeplex.com/
    
- required software
    + visual studio 
    free community edition fully supports WiX
    http://bit.ly/vscommunityedition
    
- The Setup Experience 
    + some familier pattern 
    .msi, window installer package 
    .exe

    user need to double click package 
    
    Welcome -> Destination Folder -> installing process -> install result message 
    
    + setup is your user's first experience with your product 
    
    + getting setup right is critical 
    
- setup development 
    + dependency, anything your product needs in order to run 
    + some possible dependencies 
        * product libraries, dlls 
        * runtime libraries, c++/c 
        * framework, such as .net 
        * system 
        * thrid party libraries
        * configuration file 
        * com objects 
        * registry keys 
        * ...
        
- setup development, the process 
    * avoid treating setup development as being different from product development 
    * developing a product's setup last is asking for trouble 
    * the product's setup should be created along with the product 
    * the wix toolset makes it easy to integrate setup development into normal product development 
    
- The Wix toolset 
    + Wix, windows installer xml 
    uses xml source code to create 
    window installer packages, patches transforms 
    open source toolset created by Rob Mensching, first open source project 
    
    Firegiant company provide window installer package 
    + wrapper around the windows installer 
        * more intense learning curve 
    + Wix source code is human-readable xml 
    + Treats setup development like software development
        * integrates nicely into software projects and source control 
        
- Wix components 
Component                    name 
compiler                     candle.exe
linker                       light.exe , used to generate *.msi...
bootstrapper, chainer, ..    burn.exe
harvester                    heat.exe, used for generate wix source code from file or registry structure  
decompiler                   dark.exe, take existing *.msi into wix source code 

visual studo add-in: Votive to support Wix edit 
Wix Extensions 
    * sql configuration 
    * web configuration 
    * much more ... 
    
- Installing Wix 
    + Get latest wix toolset 
    + add %WIX%\BIN into system environment path
    + wix community mailing lists 
        * http://wixtoolset.org/docuementation/mailinglist/ 
        wix-users, http://bit.ly/WixUsers 
        wix-devs, http://bit.ly/WixDevs
    
- Demo, hello wix 
    + first installer, hello wix 
    + task, install a single file to a target system 
    + switch to visual studio 
        * new project 
        * window installer xml, setup project 
        * delete the pre generated xml file, create a new one *.wxs
        * add standard xml decoration to the top of the file 
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
            <Product Id="" Name="HelloWix" Language="1033" Version="1.0.0" Manufacturer="SoftAgility" UpgradeCode="7A78A060-9968-4453-AA6D-4BBE2XXXXX">
                <Package Description="Simple Demo" Compressed="yes"/>
                <MediaTemplate EmbedCab="yes"/>
                <Directory Id="TARGETDIR" Name="SourceDir">
                    <Directory Id="ProgramFilesFolder">
                        <Directory Id="INSTALLFOLDER" Name="HelloWix"/>
                    </Directory>
                </Directory>
                
                <Component Id="TextFileComponent" Directory="INSTALLFOLDER">
                    <File Source="redist\foo.txt"/>
                </Component>
                <Feature Id="MainFeature" Title="HelloWix" Level="1">
                    <ComponentRef Id="TextFileComponent"/>
                </Feature>
            </Product>
        </Wix>
    
        Product element will be compiled and linked to *.msi file, have five required properties, Id, Name, Language, Manufacturer, UpgradeCode
        Id="*", map to the window installer product code property to identify a product, tell wix to generate a new guid code for each build 
        UpgradeCode is used for upgrade and is required for any new version of the product to let the installer upgrade the installer 
        
        Package element, contain the properties replace for the summary information of the msi file, this 
        summary information can be viewed from window explore 
        
        MediaTemplate, automatic assign file to cab, EmbedCab="yes" to keep the cab file inside the *.msi file to self contain 
        
        Directory element is used to specify the install location which could be a nested directory tree
        TARGETDIR, is the root directory 
        
        Component element is represent the file which want to be install the property Directory is used to the where the component should be install 
        
        Feature element, is a set of components, feature can be visible to the user during the installation process 
        
        
        * build the installer 
    
    
# Essential Windows installer concepts 
- Outline
    + what is the window installer 
    + windows installer packages 
    + installation database 
    + msi viewers 
    + msiexec and logging 
    +... other 
    
- What is the windows installer
    + setup and configuration service built into windows
    version 1, 1999 
    
    + features 
        * transactional installation with rollback, during the installation a rollback script is generated 
        * self repair, if a program is corrupted, could be repaired, window installer file is saved by window 
        * installer-based UI 
        * custom actions 
        * registration with "program and features"
        * upgrades and patching 
        * uninstall 
        * logging, installation logging 
        
- Windows installer packages 
    + msi file, utilize com structured storage 
    file system within a file 
    
    +--------------------------+
    |summary information stream|
    |data streams ...          |
    |+-----+                   |
    ||DB   |                   |
    ||     |                   |            
    +--------------------------+
    
    + window installer use declarative approach 
    provide what needs to be installed... and let windows installer do the work 
    
    + windows installer needs to be extremely reliable 
    
- installer viewer 
    + tools for viewing .msi files 
    orca(in windows sdk) to view and edit the .msi file 
    windows sdk: http://bit.ly/windowssdk8-1

    + only install the msi tools which include the orca 
    the orca install file is located at 
    C:\Program Files (x86)\Windows Kits\8.1\bin\x86
    
    + instEd: http://bit.ly/Inst-Ed, another msi editor, which could compare two msi file 
    
- msiexec.exe, when you double click a *.msi file, the msiexec.exe is used to open the *.msc file and install it 
$ msiexec /?
Windows ® Installer. V 5.0.9600.16384 

msiexec /Option <Required Parameter> [Optional Parameter]

Install Options
	</package | /i> <Product.msi>
		Installs or configures a product
	/a <Product.msi>
		Administrative install - Installs a product on the network
	/j<u|m> <Product.msi> [/t <Transform List>] [/g <Language ID>]
		Advertises a product - m to all users, u to current user
	</uninstall | /x> <Product.msi | ProductCode>
		Uninstalls the product
Display Options
	/quiet
		Quiet mode, no user interaction
	/passive
		Unattended mode - progress bar only
	/q[n|b|r|f]
		Sets user interface level
		n - No UI
		b - Basic UI
		r - Reduced UI
		f - Full UI (default)
	/help
		Help information
Restart Options
	/norestart
		Do not restart after the installation is complete
	/promptrestart
		Prompts the user for restart if necessary
	/forcerestart
		Always restart the computer after installation
Logging Options
	/l[i|w|e|a|r|u|c|m|o|p|v|x|+|!|*] <LogFile>
		i - Status messages
		w - Nonfatal warnings
		e - All error messages
		a - Start up of actions
		r - Action-specific records
		u - User requests
		c - Initial UI parameters
		m - Out-of-memory or fatal exit information
		o - Out-of-disk-space messages
		p - Terminal properties
		v - Verbose output
		x - Extra debugging information
		+ - Append to existing log file
		! - Flush each line to the log
		* - Log all information, except for v and x options
	/log <LogFile>
		Equivalent of /l* <LogFile>
Update Options
	/update <Update1.msp>[;Update2.msp]
		Applies update(s)
	/uninstall <PatchCodeGuid>[;Update2.msp] /package <Product.msi | ProductCode>
		Remove update(s) for a product
Repair Options
	/f[p|e|c|m|s|o|d|a|u|v] <Product.msi | ProductCode>
		Repairs a product
		p - only if file is missing
		o - if file is missing or an older version is installed (default)
		e - if file is missing or an equal or older version is installed
		d - if file is missing or a different version is installed
		c - if file is missing or checksum does not match the calculated value
		a - forces all files to be reinstalled
		u - all required user-specific registry entries (default)
		m - all required computer-specific registry entries (default)
		s - all existing shortcuts (default)
		v - runs from source and recaches local package
Setting Public Properties
	[PROPERTY=PropertyValue]

Consult the Windows ® Installer SDK for additional documentation on the
command line syntax.

Copyright © Microsoft Corporation. All rights reserved.
Portions of this software are based in part on the work of the Independent JPEG Group.

    + you could /quiet to turn off the UI 
    + could be used to enable installation logging 


- logging 
$ msiexec.exe /i *.msi /l*vx log_file.txt
with this operation you could add additional options, the log file will be saved at the same folder of the *.msi file 

the log file contain the action start and action end 

action return value     description 
0                       function could not be executed 
1                       Success 
2                       User canceled installation 
3                       Fatal error 
4                       installation suspended 

search for "value 3" will get the error in most of the time 

the content log lines could be 
MSI (c)  (##:##)..., client side execution
MSI (s)  (##:##)..., server side execution 

the (##:##) is the last process id: thread id 

example analyze this node
MSI (c) (AC:6C) [08:48:55:173]: Note: 1:1402 2: HKEY_CURRENT_USER\Software\Microsoft.. 3:2
the content 
Note:
    1: 1402, is the window installation error code, http://bit.ly/msi-error-codes
    2: HKEY_CURRENT_USER\Software\Microsoft...
    3: 2

1402 could not open key [2], system error [3]

to find system error by platform sdk, winerror.h or http://bit.ly/windows-error-codes or use 
$ net helpmsg 2 

if the error code is minus, it should be changed to hex and then find the error code http://bit.ly/com-error-code, any error code can't be found in window error could could be check from the com error code 

feature and component states is another interested content, search for feature could be check the information 
Feature:...
Component:...
http://bit.ly/msi-installstates

search FileCopy to find which file is copied, if the version is less or equal to the current system's file will not be copied 
    
if you can't initiate the installation using command line? turn on the global logging by http://support.microsoft.com/kb/223300
    
- windows installer codes 
    + package code, identify a msi file, wix will generate it 
    + product code, identifies a product release, whenever change the code when you change the product version 
    + update code, identifies a product line
    Major Upgrade, replace v1.0 v1.1 
    
    + each code is a Globally Unique Identifier, is time relative, any GUID you greate ~5.3 * 10^36 possible to generate same GUID 
    
- Properties 
name=value, name begins with letter or underscore 
    + follow by any combination of 
    letters, numbers, underscores, periods 
    
    + value is just text 
    + property scope 
    public or private 
    + public, letters in name must be CAPITAL letters, values persist for all phases of an install, value can be specified on the command line 
    + private, letters in name must include lower case, only persist in the phase defined, value can't be specified on the command line 
    
    + property table, only property have non-null level, don't put secrete information because the table will be dumped into the log files 
    + required properties, product code, product language, manufacturer, product version, product name 
    + remember to always specify an upgradeCode 
    + properties can be used in the produced line 
    
- Features 
    + contain 1 or more components 
    + features can be visible to the user in the installer UI 
    + users will think about your product in terms of features 
    
    window installer will show the feature tree, like install office 
    + your installation package needs at least one feature, if it is only when it is not required to show to the user 
    
- components 
    + set of resources that are installed/removed together 
    files, shortcuts, registry key 
    + all components have a GUID identifier 
    KeyPath
    + file or registry key used to detect the component 
    + enables windows installer "Resiliency"
    + recommended 1:1 mapping between files & components 
    for an installed file to be resilient, it must be the KeyPath, when recover only the file mark with KeyPath will be recovered 
    
- installation types and phases 
    + simple
    + administrative 
    application's source image installed to the network 
    + only the interface for launching the app is installed 
    + when user "starts" app, on-demand installation mode 
    + most common simple/normal 
        * simple 
        UI - client side, run under the user who start the installation 
        Execute - server side, execute with the system 
    + UI/client phase 
        * can be ommitted or turned off via command line (/q)
        * collects data from user 
        * must not modify users system! to make true during the UI phase 
        
    + Execute/Server phase 
        * all system changes must occur here 
        * to make sure the window could reverse the installation 
        
- Sequences specify 
    + what action should be run 
    + the order 
    + simple install sequences 
        * InstallUISequence 
        * InstallExecuteSequence 
    
    + Advertise Install sequences 
    1. AdvtExecuteSequence 
    
    + Sequence table columns 
    1. Action, 
    2. Condition, optional expression that determines if action is executed (Action is executed if expression evaluates to "true" or is blank) 
    3. Sequence, Wix tool will create the suggested sequences 
    + use orca to check a msi file with InstallExecuteSequence and click the column Sequence will display the current order of the sequence 
    
- standard actions, built-in in window installer 
Suggested InstallexecuteSequence 
Wix will set it for you 
    + AppSearch action, allow installer to search install files 
    http://bit.ly/StandardActions
    
    + Sequencing restrictions is for some of the actions such as 
    InstallInitialize -> InstallExecute -> InstallFinalize 
    
    + InstallUISequence table contain Actions 
        * FindRelatedProducts 
        * LaunchConditions, use launch condition table to verify if the install could be executed
        * CostInitialize, FileCost, CostFinalize, decide the install resource is allocated 
        * ExecutAction
    
    + InstallexecuteSequence Actions 
        * FindRelatedProducts
        * AppSearch 
        * InstallValidate 
        * InstallInitialize, InstallFinalize, this is protected by the rollback action 
        
    + Change sequence order 
    for example RemovedExistingProducts this is used for upgrade your products 
    
- Custom Actions, the scenarios may no included in the standard actions
    + set a directory location to install-time value 
    use type 35 custom action, there is no name for the custom action
    + set a windows installer property to install-time value 
    
    + Provide different kinds of custom actions
    + For example 
        * Type 1, custom action 
        call a function in a dll 
        
        function must have certificate signature 
        C Function Signature, UINT __stdcall MyFunction(MSIHANDLE hModule);
    
        * type 2 custom action 
        call an executable with a command line
        .exe stored in binary table 
        
        * dll or exe embedded in msi - extracted at installed time not install with product 
        
        * type 17 & 18 custom actions 
        calls a dll/exe 
        the dll or exe is installed with the product 
        must sequence correctly, the dll or exe must be installed first 
        
        * type 34, calls .exe using a path from a directory table entry 
        * type 50, calls using a path from a windows installer property 
        * type 19, displays an error message from a formatted string and terminates installation 
        * type 35, set an install directory form a formatted string 
        * type 51, set a property from a formatted string 
        
        * type 5,6,21,22,37,38,53,54, script executing custom actions, suggest not use this kinds of technique because it is not easy to maintain and bug fix 
    
    + reference http://bit.ly/CustomActionReference 
    
- conditions 
if condition evaluate to true action will be executed, uses of conditions 
        
    + launch condition table 

    + feature and component conditions, omitted condition is means true 

    + ui features 

condition operator condition 

property could be a condition value 

substring operators 
    + ><, true if left string contains right string 
    + <<, true if left string starts with right string 
    + >>, true if left string ends with right string 

    + complex condition could be used with logical operators 
    AND, OR, XOR, EQV, IMP true if left side is false or right side is true 

    + a single property is used for condition value when it is defined is means true else false 

    check not define a property by 
    NOT PropertyName 
    
    + use environment variable 
    Environment Variable, %MyEnvVar 
    Component Key, $MyComponent 

- Formatted text, in window installer for reference window installer database  
Properties, Folders, Files, Environment Variables, 

    [PropertyName] Replaced by the value of the property 
    [DirectoryKey] Replaced the path of the directory 
    [%EnvironementVariable] Replaced by the value of the environment variable 
    [#FileKey] Replaced by the full path to the file on the target machine 
    
    [#MyFile] is a file in file table 
    {Here are two properties: [PropertyA] and [PropertyB]}
    
    Escaped literals: "\"
    
    + Launch condition table have formatted decription table 
    
- Summary 


# Creating Installation Packages with the Wix Toolset part1
- Sample project, creating guid's, every where, Tools|Create GUID, is a tool in visual studio to generate GUID
    + coding assitance tools 
    resharper, type nguid 
    
    + GUID, a generate tool, double click will display at the corner and copied to clipboard, download from pluralsight
    
    + create a wix setup project, use project property to twist the installer detail  
        * Installer tab, project name and project output type (*.msi, *.exe)
        * build tab, use to define processes variables, the generated output path 
        * Tool settings, you can pass specific environment variables 
        ICE, internal consistencies evaluated, validation, could be turn on, supplied by the microsoft
        
- Creating a Wix project, will automatic generate a wix project file(xml content)
    + the property of Product tag
    Id, *, auto generate GUID on each build 
    Name, will be displayed during the installation in the UI 
    Language, 1033, is a local id for English - United States
    Version, 1.0.0, only the first three numbers will be used by window installer 
    
    + Package, don't required for any changes 
    Compress, installer resources will be compress to cab file 
    InstallerVersion, the minimal version required to install window installer 
    InstallScope, perMachine, or could be set for perUser 
    Manufacture 
    Comments
    
    + MajorUpgrade, 
    + MediaTemplate, automatic assigne file to cab file, this element 
    EmbedCab="yes", this will save cab file into *.msi file, if you want to split your setup file into several files, you could set this to false 
- Setting up install directories 
    + directories 
    what are the destination directories? 
    c:\program files(x86)\getGuid
    
    use <Directory> element to create a directory 
    <Fragment>, is a wix container element to contain other elements 
    <Fragment>
        <Directory Id="TARGETDIR" Name="SourceDir">
            <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="HelloWix"/>
            </Directory>
        </Directory>
    </Fragment>
    
    use nested directory to create sub directories, the Id are all predefined by window installer, complete list of msd for predefined directories name
    http://bit.ly/DirectoryProperties 
    
    Id is the primary key in the primary table, window installer also 
    all capital id such as INSTALLFOLDER will be a public Id for both UI and execute actions 
    
    The Name is the actual name you want the directory to have 
    
- Components, use component element, need a unique id, if you don't set the id, it will be the same as the child element who set the key path of the component 
component also required a GUID, window install register each component with the GUID, if you omit this, wix will generated it for you, in order to do this, you have to have only one file for a component 

use directory attribute with property of component or nested a component to a directory element or use component group 
<Component Id="TextFileComponent" Directory="INSTALLFOLDER">
    <File Source="redist\foo.txt"/>
</Component>

<DirectoryRef Id="previous_define_directory_id">
    <Component Id="TextFileComponent" Directory="INSTALLFOLDER">
        <File Source="redist\foo.txt"/>
    </Component>
</Directory>
<ComponentGroup Id="ComponentId" Directory="ID_Name">
    <Component Id="TextFileComponent">
        <File Source="redist\foo.txt"/>
    </Component>
    <Component Id="TextFileComponent">
        <File Source="redist\foo.txt"/>
    </Component>
</ComponentGroup>

component is a container, you could create your child element in it 
RegisterKey, Service, ShortCut, File 

- Files element, <File/> unambiguous specify the file 
    + Source, support relative and absolute path
    <File Source="foo.txt"/> will look the same directory where wxs file location 
    + Id, required, use Hungary naming convention
    + Name, use to replace the source file name 
    KeyPath, is mark for the key component for a component, which is used when restore, ommit it will be set the first file of the component
    + Vital, yes/no, no means allow the installation to process event the file install failed, default is yes 
    + Readonly
    + Hidden
suggest assign each file to a component 
    
- Features 
    + a component must be assign to a component
    + feature must be set locally 
    + use <Feature/> to set
    + Id required a unique id, any name, you could local reference to the feature
    $ MsiExec.exe /i foo.msi ADDLOCAL=FeatureName 
    to install a feature from a msi file 
    
    + Title property, will be display to the feature tree control
    + Description is the property 
    + Level, equal to 1, means locally, 0 means disables feature
    the level is window installer thread hold 
    
    Feature is installed if level <= InstallLevel, default InstallLevel is 1 
    
    assign component to feature 
    <Feature Id="ProductFeature"
             Title="MainFeature"
             Level="1">
        <ComponentRef Id="ComponentId"/>
        <ComponentGroupRef Id="ComponentId"/>
    </Feature>
    
    + how many feature do you need
        * product has optional content 
        * supports different installation configurations 
        minimal, typical everything 
        
        * mall products may just have one feature, you will not expose the feature to user 
        
    after build, the install package is generated. 
    
- Providing a user interface 
WixUIExtension, pre-built UI dialog sets 

add project reference and select to the %WiX%\Bin directory ,and select WixUIExtension.dll 
    + available dialog sets 
    WixUI_Minimal, License -> Features 
    WixUI_Advanced, License->Install Scope->DestinationFolder->Features
    WixUI_FeatureTree, Welcome->License->Custom Setup->Ready to Install 
    WixUI_InstallDir, Welcome -> License -> Destination Folder -> Ready To Install 
    WixUI_Mondo, Welcome->License->Setup Type->Custom Setu(which feature to install)p->Ready To Install
    
    to add this dialog by set
    <UIRef Id="WixUI_Minial"/>, just provide a single UI and license agreement 
    minimal UI only have two pages License -> Features 
    
    provide license agreement by add a wix variable element 
    <WixVariable Id="WixUILicenseRtf" Value="license.rtf"/>
    
    the file is saved is need to the linker to search, add this by 
    /b <path>
    
    On the ToolSetting Page of the project property page to the parameter

    the UI element setting is located as the child of the product

    + support to add a property to don't let the user disable a feature 
    <Feature Absent="disallow"/>
    
    the property AllowAdvertise="Yes/No" will hide the feature from the UI 
    
    + the WixUI_Advanced UI add two additional pages 
    License->Install Scope->DestinationFolder->Features

- Searching and launch conditions 
    + search file with window installer standard actions
    + AppSearch,
    + LaunchConditoins
    Search Type, Description 
    <DirectorySearch/> Search for directories 
    <FileSearch/> Search for files 
    <RegistrySearch/> Search for registry keys and values 
    <ComponentSearch/> Search for windows installer components 
    <IniFileSearch/> Search for .ini files 

    
    <Property Id="FOOFOLDER" ComplianceCheck="yes">
        <DirectorySearch Id="DirSearchFoo" Path="c:\foo"/>
    </Property>
    the property value will be set by the search value, if the file is not found then the property value is null 
    The property, compliance check is set to yes, will check if the property have value, will display a error message dialog
    if you want to customize the message by conditoin element 
    <Condition Message="Foo folder must exist">
        <![CDATA[Installed OR FOOFOLDER]]>
    </Condition>
    in side CDATA section we could directly reference the properties it will be evalue by the installer 
    
    example to check a file is installed in the program file foldre 
    <Property Id="GETGUIDFOLDER">
        <DirectorySearch Id="ProgramFilesSearch" 
                         Path="[ProgramFilesFolder]"
                         AssignToProperty="no"
            <DirectorySearch Id="GetGuidSearch" Path="GetGuid"/>
        </DirectorySearch>
    </Property>
    <Condition Message="GetGuid must be installed">
        <![CData[Installed OR GETGUIDFOLDER]]>
    </Condition>
    the nested directory search will first find the outer and then find the inner, the property AssigntoProperty="no" means don't assign the search result to the property, the inner search will assign the value 
    
    one more attribute to set is the Depth, specify Depth=# means the installer will search the subfolder to the target path for the file 
    
- File Search 
    + add a child FileSearch to the directory search will set the file search 
    <Property Id="GETGUIDFOLDER">
        <DirectorySearch Id="ProgramFilesSearch" 
                         Path="[ProgramFilesFolder]"
                         AssignToProperty="no"
            <FileSearch Id="barSearch" Path="bar.txt"/>
        </DirectorySearch>
    </Property>
    
    you can refine the file search by 
    MinDate
    MaxDate, time format YYYY-MM-DDTHH:mm:SS
    attribute 
    
    MinSize, MaxSize to search with file size, bytes
    
    MinVersion, MaxVersion, is a > search, for example you want to search, 1.2.4, you have to search 1.2.3
    File version is composed of four 16bit integers, max value of a 16 bit integer:65535, so if you want to search 1.0.0, then you have to search 0.0.65535
    
- Component Search, used to get a path to a file is installed 
    + component ID(GUID), first search the component ID, when have a component ID with orca tool and compose a component search 
    
    <Property Id="PATHTOINSTALLEDFILE">
        <ComponentSearch Id="TheCompSearch" Guid="{insert-guid-here}"/>
    </Property>
    if the component is founded then the property will be assign the path else will be null 

- Registry Search 
<Property Id="ID_OF_THE_PROPERTY">
    <RegistrySearch Id="..."
                    Root="..."
                    Key="..."
                    Name="..."
                    Type="...">
        
    </RegistrySearch>
</Property>

for example to find a string key CurrentVersion in the path HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion

Wix brief the commonly used registry key value to 
Registry Root           Wix root value 
HKEY_CLASSES_ROOT       HKCR
HKEY_CURRENT_USER       HKCU
HKEY_LOCAL_MACHINE      HKLM
HKEY_USERS              HKU 

<Property Id="ID_OF_THE_PROPERTY">
    <RegistrySearch Id="winver"
                    Root="HKLM"
                    Key="SOFTWARE\Microsoft\Windows NT\CurrentVersion"
                    Name="CurrentVersion"
                    Type="raw">
        
    </RegistrySearch>
</Property>
the types of registry items are Directory, File, and Raw, if the type is Directory or file you could nested a directory search or file search, reading a string value will only required a raw type 
there are prefix for raw type values 
Registry Data Type      Prefix 
REG_SZ                  None(if first character is '#' it is escaped with anther '#')
REG_MULTI_SZ            Begin with '[~]' end with ['~']
REG_EXPAND_SZ           Begin with '#%'
REG_BINARY              Begin with '#X', each hex digit also prefixed by '#X'
DWORD                   Begin with '#' optionally followed by '+' or '-'

<Property Id="FooFilePath">
    <RegistrySearch Id="findFilePath"
                    Root="HKLM"
                    Key="SOFTWARE\Foo"
                    Name="FooPath"
                    Type="file">
        <FileSearch Id="verifyFoo" Path="[FooFilePath]"/>
    </RegistrySearch>
</Property>

use IniFileSearch in the file search, in this case you are search *.ini search get the detail from 
http://bit.ly/IniFileSearch


# Creating Installation Packages with Wix Toolset Part 2
- outline 
shortcuts 
uninstall shortcuts 
custom actions 
getguid installer: version 1 
...
create bootstrapper
- create shortcuts
window installer have a predefined property point to the start menu with ProgramMenuFolder

define target folder for shortcut 
<Directory Id="TARGETDIR" Name="SourceDir">
    <Directory Id="INSTALLFOLDER" Name="InstallLab">
    </Directory>
    <Directory Id="ProgramMenuFolder">
        <Directory Id="InstallLabShortcuts" Name="InstallLab"/>
    </Directory>
</Directory>

Advertised shortcuts, is a reference to a window shell namespace 
Shortcut ---> Shell Namespace 
The shell object, represent the application installed on the user system 
The shortcut point to a descriptor in the shell namespace and will be used to find the component path 
http://bit.ly/InstallerShortcuts

define shortcut in the component element 
<Component Id="MainApplication" Directory="INSTALLFOLDER">
    <File Id="mainApp.txt"
          Source ="redist\mainApp.txt"
          KeyPath="yes">
          <Shortcut Id="InstallLabShortcut"
                    Name="InstallLab"
                    Description="My Description"
                    Directory="InstallLabShortcuts"
                    WorkingDirectory="INSTALLFOLDER"
                    Advertise="yes">
    </File>    
    <RemoveFolder Id="DeleteInstallLabShortcuts"
                  Directory="InstallLabShortcuts" 
                  On="uninstall"/>
</Component>
a non advertise shortcut is just like user created shortcut in window explorer. we also required to add a removeFolder component, the directory is the aim to remove and on is the condtion when to remove the file 
if used a advertised shortcut, the file which is point to by the shortcut could re restore automatic

- Uninstall shortcut
    + window installer executable shortcut with this command to uninstall a product
    $ msiexec /x ProductCodeHere
      
    we need a non advertise uninstall shortcut 
    <Component Id="UninstallShortcut" Guid="*" Directory="InstallLabShortcuts"> 
        <Shortcut Id="UninstallThisProduct"
                  Name="Uninstall InstallLab"
                  Description="Uninstalls the InstallLab sample application" Target="[System64Folder]msiexec.exe" Arguments="/x [ProductCode]"/>
        <RegistryValue Root="HKCU" Key="Software\SoftAgility\InstallLab"
                       Name="installed"
                       Type="integer"
                       Value="1"
                       KeyPath="yes"/>
    <Component>
        
    the System64Folder is a predefined property and the ProductCode, in window installer a non advertise shortcut can't be a key of a component, so we need to create a registry value item as a key for the component 
        
    don't forget to add the uninstall component to the feature
    <Feature Id="ProductFeature" Title="InstallLab" Level="1">
        <Component Id="MainApplication"/>
        <Component Id="UninstallShortcut">
    </Feature>
        
- Custom Actions, use Wix toolset could create any kinds of custom actions, wouldn't suggest to use vbscript or jscript, Custom action in Wix 
    + set windows installer property value
    type 51, custom action, 
    
    <CustomAction Id="uniqueId" Property="Foo" Value="someValue"/>
    
    after define a custom action we need to scheduled it in the installation sequences    
    <InstallExecuteSequence>
        <Custom Action="uniqueId" Before="" After="CostFinalize"/>
    </InstallExecuteSequence>
    
    use custom element to reference the previous created custom action the before and after property is used to reference another action, could be built-in standard action or custom action 
        
    + we could also use SetProperty method to define a custom action in a simple way by 
    <SetProperty Id="Foo" Value="[INSTALLFOLDER]" Sequence="execute" After="CostFinalize"/>
        
    + set path to a directory element is also a wide used custom action, this is a type 35 custom action, wix toolset provide a element to do this in a simple way 
    <SetDirectory Id="TheDirectoryId_which_is_pre_defined" Sequence="execute"/>
        
    for example install to a subfolder with computer name into the installation root folder 
    <Directory Id="TARGETDIR" Name="SourceDir">
        <Directory Id="ProgramFilesFolder">
            <Directory Id="INSTALLFOLDER" Name="InstallLab">
                <Directory Id="SpecificSystemFolder" Name="tbd">
            </Directory>
        </Directory>
    </Directory>
    
    <SetDirectory Id="SpecificSystemFolder" Value="[INSTALLFOLDER][%COMPUTERNAME]" Sequence="execute">
        <!--condition for only install the product if it is not install -->
        <![CDATA[NOT INSTALL]]>
    </SetDirectory>
        
    we could use inner text xml element to specify condition for any custom action
        
    + when design custom action, try to minimize the custom actions

- GetGuid installer: v1, create installer for GetGuid.exe application 
    + find out the dependencies 
    .net 2.0 framework 
    the application, GetGuid 
    + nested install, no longer supported, this should be done with a bootstrapper which is used to check all the required environment is installed 
    + to add files to setup project from other project, wix provide project reference to do this 
    then the referenced project asset can be access by the wix toolset by this format 
    $(var.ProjectName.PreprocessorValue)

    var. is used to tell the wix process you want reference predefine variable 
    
    the preprocess variables are 
    Variable Name                        Example 
    $(var.ProjectName.Configuration)     Release 
    $(var.ProjectName.ProjectDir)        c:\dev\MyProject\
    $(var.ProjectName.TargetExt)         .exe 
    $(var.ProjectName.TargetFileName)    MyProject.exe 
    $(var.ProjectName.TargetPath)        c:\dev\MyProject\bin\debug\MyProject.exe 
    
    + wix have a extension to help detected .net versions 
    WixNetFxExtension.dll 
    <Product>
        <PropertyRef Id="NETFRAMWORK20"/>
    </Product>
    
    + add a icon for the application 
    <Icon Id="application.ico" SourceFile="getguidapp.ico"/>

    reference the icon by shortcut 
    <Shortcut Id="UninstallThisProduct"
              Name="Uninstall InstallLab"
              Description="Uninstalls the InstallLab sample application" 
              Target="[System64Folder]msiexec.exe" 
              Arguments="/x [ProductCode]"
              Icon="application.ico"/>
        
    + custom license content 
    <WixVariable Id="WixUILicenseRtf" Value="license.rtf"/>

    complete customize wix UI could be found in the wix doc 
    
    + set background big map 
    <WixVariable Id="WixUIDialogBmp" Value="dlgbmp.bmp"/>

- Fragments, is the key to allow us to split wix source code into different files, Fragment is container, we can place anything inside it 
<Fragment>
</Fragment>

for example the previous GetGuid project mix all the package, media, directory, component, feature into one file 

<Wix>
    <Product>
        <Package/>
        <MediaTemplate/>
        
        <Directory/>
        <Component/>
        <Feature/>
    </Product>
</Wix>

let break it into multiple framements
    + add new item for wix installer file 
    <Wix>
        <Fragment>
            <Directory/>
        </Fragment>
    </Wix>

    + note 
    when you reference a property inside a fragments all the definition of the other properties inside the fragments will be referenced too

- Upgrade 
    + major upgrade 
        * ProductedCode and ProductVersion must change 
        * UpgradeCode stays constant for life of product 
        
    + Minor upgrade & small update 
        * just modifies the existing product - don't remove 
        * product code stays the same 
        * feature/component tree can't be reorganized 
        * minor upgrade updates ProductVersion 
        can introduce new features and components 
        * small updates are ... small and don't update the ProductVersion
        
    + When to change the ProductCode
        * if the msi filename changes 
        * if a component code changes 
        * if a existing component is removed from a existing feature 
        * if a existing feature is made a child of another feature 
        * if a existing feature has been removed from a parent feature
        * if you required to install the new version at the same time with the old version then the product code must be different 
    + Update distribution
    small product, patch package (.msp)
    minor upgrade, msp or .msi 
    
    + demo 
        * create a product installer 
        * generate a install file 
        * update the Product Id and Version 
        * add necessary changes 
        * add major update element to the product elements 
        <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed"/>
        the message will be displayed if try to installer a lower version installer into a higher version installed product machine 

    + the properties we could used to optimize MajorUpgrade
    AllowDowngrades, yes/no, default is no 
    DisallowUpgradeErrorMessage, 
    IgnoreRemoveFailure, yes/no, yes
    Disallow, yes/no, default is no to allow upgrade 
    Schedule, afterInstallValidate, default value afterInstallValidate required to removed previous version 
              afterInstallInitialize, if upgrade failed, window installer will restore the removed product 
              
              these lower three install the newer version on top of old version 
              afterInstallExecute, if install failed, window installer will restore old version 
              afterInstallExecuteAgain, 
              afterInstallFinalize, if upgrade failed, no rollback happens

- GetGuid installer, v2 
    + requirements 
        * update launchCondition to handle .net 4.5 
        * better source organization, more source files 
        * incorporate open source libraries into installer 
        * make sure major upgade works 
        
    + change the detect property for 4.5 
    <PropertyRef Id="NETFRAMWORK45">
    
    <Condition Message="This application required .net framework 4.5">
        <![CDATA[Installed OR NETFRAMWORK45]]>
    </Condition>
    + add directory wix source file to contain directory setting 
    + create a file to component settings 
    
    + create components for opensource libraries, use component group element to contain three component for the three opensource dll 
    <CompnentGroup Id="ThirdPartyLibs">
        <Component>
            <File Source="$(var.GetGuid.TargetDir)Com.CurtisRutland.WpfHotKeys.dll"/>
        </Component>
        ...
    </ComponentGroup>
    
    <Feature>
        <ComponentGroupRef Id="ThirdPartyLibs"/>
    </Feature>
    
    + update Product Version 
    + add MajorUpgrade element and message 

- Creating a Bootstrapper 
    + what to do with prerequrest? 
    + bootstrapper, a tool kick off installation process 
    + Burn is the wix tool to help create bootstrapper, start from version 3.6 in wix 
    + low overhead .exe that starts the setup process 
    + small file size 
    + packager 
    package type        file extension      wix markup 
    window installer    .msi                <WixPackage>
    Executable          .exe                <ExePackage>
    Windows intaller patch .msp             <MsPackage>
    window update       .msu                <MsuPackage>
        
    + burn is a chainer, is execute the installer base specified 
    + downloader for dependencies 
    + flexible UI options 
    + burn manages bundles, which bundles are a unique package, each bundle will display a progress bar during install 
    + demo 
        * add bootstrapper project 
        * check the source code 
        <Wix xmlns=""
             xmlns:bal="http://../wix/BalExtension">
            <Bundle Name="GetGuiSetup" Version="2.0.0" Manufacture="Company" UpgradeCode>
            <BootstrapperApplicationRef Id="WixStandardBootstrapperApplication.RtfLicense"/>
            <Chain>
                <MsPackage SourceFile="path\to\your.msi">
            </Chain>
        </Wix>
        
        Properties of Bundle element 
        Version, don't have the limitation as msi file, could use all four numbers 
        UpgradeCode, is the upgrade code for bundle, the update and install should have the same UpgradeCode
        
        * reference wix net extension, WixNetExtension.dll
        <BootstrapperApplicationRef Id="WixStandardBootstrapperApplication.RtfLicense">
            <bal:WixStandardBootstrapperApplication LicenseUrl="" ShowVersion="yes">
        </BootstrapperApplicationRef>
        <Chain>
            <PackageGroupId Id="NetFx45Web"/>
            <MsiPackage SourceFile="$(var.GetGuiPackage.TargetPath)"/>
        </Chain>
        
        * the bootstrapper also take care of the uninstall shortcut, we could remove the previous manually created uninstall shortcut 
        
        
http://bit.ly/LocallDs, a list of language IDs



















    
    
    
    
JavaScript 高级程序设计=Nicholas C.Zakas; note = eshang

ECMAScript, IE对JavaScript的实现，JScript
JavaScript 定义包含ECMAScript, DOM, BOM
DOM, 文档对象模型, 规定如何映射基于XML的文档结构
BOM, 浏览器对象模型，支持可以访问浏览器窗口的浏览器对象模型
浏览器只是实现 JavaScript的一种宿主环境

主流浏览器, Netscape, Netscape 6_(Mozilla 0.6.0+), IE, Opera, Safari, Chrome, Firefox

浏览器对JavaScript的兼容性根据与ECMAScript和对DOM的支持情况为准，每个浏览器自己的版本基本无相互关系

HTML中使用JavaScript
<script>元素
属性：charset, defer 可选只脚本可以在等所有文档解析后执行，scr, type text/javascript application/x-javascript 
MIME,脚本语言使用的内容类型
位置，应当放在<head>标签中, defer相当于把脚本放置在文档的最底部
XHMTL， Extensigble HyperText Markup Language 中将<script>标签放置在 <cdata>标签中
<script type = "text/javascript">
//	<![cdata[
		...
//	]]>	
</script>
注释掉cdata的目的是不让javaScript解释器解释cdata语句而留给xhtml解释器解释为文本数据
；
；
文档模型，混杂模型 quirks mode, 标准模型 standards mode, IE5引入准标准模型，IE8引入超级标准模型
可以使用不同的语句来触发，也可以使用<meta >标签关闭，从而较小跨浏览器对javascript 的影响
；
<noscript> 标签，用于浏览器对javascript不支持或禁用的情况才显示

基本概念
区分大小写
；
保留字
break, else, new, var, case, finally, return , void, catch, for switch, while, continue, function, this, with, default, if, throw, delete, if, throw, in, try, do, instnaceof, typeof
ECMA-262第三版定义的全部保留字
abstract, enum, int , short, boolean, export, interface, static, byte, extends, long, super, char, finaly nvative, synchronized, class, float, package, throws, const, goto, private, transient, debugger, implements, protected, volatile, double, import, public
;
推荐不要使用var 定义全局变量
；
typeof返回值:
undefined, boolean, string, number, object, function
;
null 类型，typeof(null)返回object
undefined派生自null, null == undefined 返回true
;
true, false关键字
；
浮点数计算，由于浮点数加减法极易引入舍入精度误差，所以不要将浮点数的结果与准确值进行比较
;
NaN, not a number
;
数值转换
Number(), parseInt(), parseFloat()
;
String,类
\uNNNN,  代表一个unicode 字符
；
Object，类
属性与方法：
constructor(), hasOwnProperty(propertyName), isPrototypeOf(object), propertyIsEnumberable(propertyName), toString(), valueOf()
;
操作符，同C
位操作，^，异或，<<左移， >>带符号右移, >>>无符号右移
具有三元操作符同C
；
循环
for( var varName in collection ) ...
;
标签，用于goto语句
strLabelName:
；
with语句，同VB，将某一变量名作用域作用在指定范围内
with(varName)
{
	... property... //不需要 varName.property
}
;
函数
function Name( varName, varName ){} 不需要指定变量类型，内部可以直接使用return 语句
；
JavaScript没有重载，重定义后的函数名只属于后定义的函数

基本类型与引用类型
动态属性
var objName = new Object();
objName.property = value;
可以动态为对象添加属性，但不要使用var变量直接添加属性，虽然不会出错但代码不易读
；
执行环境与作用域
execution context, 执行环境，定义了变量或函数有权访问的其他数据
全局执行环境认为是window对象，也就是对window对象创建的属性或者方法
；
延长作用域或链
在这两个块中声明的变量都会被添加到执行环境中
try-catch的catch块
with语句
；
没有块作用域

引用类型, 创建对象的方法
属性可以随时动态添加
var person = new Ojbect();
person.name = 'name';
person.age = 34;
或者
var person = {
				name: 'name',
				age: 34
			};
访问
person.name
person["name"]
;
Array, 类型，类似于 python的list
构造
Array(), Array(size), Array("value", number, ... )
objArray = [value, "value", ... ];
访问
objArray[index]; //index = number
可以作为栈，也可以作为队列
with(objArray) //对应的方法
{
	pop();
	push();
	shift();
}
也可以作为list
;
Date，类型
var now = new Date();
var now = new Data(Date.parse(strDataTime));  //strDataTime = "May 25, 2004"
方法
objDate.toLocaleString(), 按照与浏览器设置的地区相同方式显示日期
其他日期实现操作方法
；
RegExp, 类，正则表达式
类似于perl语法，两种方式构造
var expression = new RegExp( strPattern, flags );
var expression = / pattern /flags;
flags = g , global模式
		i, case-insensitive, 区分大小写
		m, multiline, 多行
使用
objMatch = objRegExp.exec( text );
objMatch[index]
objMatch.index
objMatch.input   // text
;
function 类型
内部属性
arguments, this, callee 指向拥有这个arguments对象的函数
使用callee 实现递归：
function factorial(num)
{
	if( num <= 1 ) 
	{
		return 1;
	}
	else
		return num * arguments.callee(num-1);
}
属性
length, 只函数希望接手的参数个数
prototype, 保存它所有实例方法的真正存在
;
number 类型，方法
objNumber.toFixed(length);  //来返回指定长度的坐标轴显示、
；
String 类
具有内建HTML方法，可以在WEB上格式化字符串，但是一般不要使用，因为有可能不能正确显示
；
；
内置对象，ECMA-262，是有ECMAScript 实现提供的
Global, 对象
例如一些常用的内建方法都是Global对象的属性
isNaN(), isFinite(), parseInt(), parseFloat(), encodeURI(), encodeURIComponent()对URI的一部分进行编码，对不属于URI的字符进行转换，例如冒号等
eval() 接收字符串作为javaScript语句执行
属性：
undefined, NaN, Infinity, Object, Function, Boolean, String, Number, Date, RegExp, Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError
ECMAScript没有指出如何访问Global对象，但Global对象的所有属性都是作为Window对象的一部分
window.eval()
或者自定义的全局变量或者全局方法等
；
Math, 对象

创建对象，有多种方法
1.定义object实例，并对其进行扩展
var person = new Object();
person.name = "nicolas";
person.age = 29;
person.sayName = function(){ alert(this.name) };
;
2.工厂模式
function createPerson(name, age)
{
	var o = new Ojbect();
	o.name = name;
	o.age = age;
	o.sayName = function () { alert(this.name ) };
	return o;
}
;
var persion1 = new Person("nicholas", 29 );
;
任何函数只要通过new 操作符来调用，那它就可以作为构造函数，任何构造函数如果不通过new 调用那么它和普通函数没有区别
;
在javaScript中，函数是一个对象，所以如果类中包含函数元素那么在实例化的时候每个对象都有不同的成员函数对象，这点是于C++不同的。这点可以通过类外定义函数，类内引用来解决

3. 构造函数
function Person(name, age, job)
{
	this.name = name;
	this.age = age;
	this.job = job;
	this.sayName = function(){ alert(this.name) };
}
4. 原型模式, 每个函数都有一个prototype属性，是一个函数指针，指向一个对象，这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。prototype 就是调用构造函数而创建的哪个对象实例的原型对象。好处是可以让所有对象实例共享它说包含的属性和方法。实际相当于类定义。javaScript中的类构造函数已经是实例化的对象了。使用原型prototype就是直接在不可访问的类定义中定义对象原型。
function Person (){}

Person.prototype.name = "Nicholas";
Person.prototype.age = 29;
Person.prototype.sayName = function() { alert(this.name); }

var person1 = new Person();
person1.sayName();

var person2 = new Person();
person2.sayName();

person1.sayName == person2.sayName //true
使用原型函数模型，就是通过调用构造函数而创建哪个对象实例的原型对象
可以使用函数 Class.prototype.isPrototypeof(objSome), 来判断某个对象是否是某种原型生成的对象
;
当对象添加自己的属性的时候会覆盖同名的原型方法
；
in，操作符，用于判断某属性是否在某个对象中
；
在IE中屏蔽不可枚举的实例属性时，不会出现在for-in循环中
；
简单的原型类初始化语法
function Person(){}

Person.prototype = {
						name: "nicholas",
						age:29,
						sayName: function(){ alert( this.name ) }
					}
对原型可以添加方法属性等，但尽量不要在产品类型中新加方法或属性，从而避免污染命名空间
;
组合使用构造函数和原型模式
function Person(name, age)
{
	this.name = name;
	this.age = age;
}
Person.prototype = {
						constructor:Person,
						sayName:function()
								{
									alert(this.name);
								}
;使用
var persion1 = new Person( "Nicholas", 29 );
;
;
动态原型，就是为了将原型初始化放置到构造函数中，避免困惑
function Person( name, job )
{
	this.name = name;
	this.job = job;
	if( typeof this.sayName != "function" )
	{
		Person.prototype.sayName = function()
		{
			alert(this.name);
		}
	}
}
创建的原型可以使用instanceof来检测类型

parasitic function 寄生构造函数，就是用一个方法创建并返回对象，好处是可以用来扩展一个类或者方法。即使这个类的构造函数不可见，也就是再次打包。
function SepcialArray()
{
	var values = new Array();
	values.push.apply( values, arguments);
	values.toPipedString = function()
	{
		return this.join("|");
	};
	return values;
}
;使用
var colors = new SpecialArray("red", "blue", "green");

durable objects, 稳妥对象。适用于一些安全环境中，这些环境中会禁用this, new, 或者防止数据被其他应用程序改动时。
类似于寄生构造函数，但不适用this，new
；
function Person(name, age)
{
	var o = new Ojbect();
	//...可以定义其他私有变量或者函数
	o.sayName = function()
	{
		alert(name);
	};
	return o;
}
也就是直接使用Object 来创建对象
使用稳妥对象创建的对象与构造函数之间没有任何联系，因此instanceof操作没有任何意义

继承，OOP中分为两种，一种是接口继承，另一种是实现继承
ECMAScript中只支持实现继承
；
实现继承的方法
function SuperType()
{
	this.property = true;
}

SuperType.prototype.getSuperValue = function()
{
	return this.property;
};

function SubType()
{
	this.subproperty = false;
}

SubType.prototype = new SuperType();	//继承
SubType.prototype.getSubValue = function()	//也可以直接重写超类方法
{
	return this.subproperty;
};
;
;
借用构造函数，是不用使用原型链的情况下使用的
function SuperType(){}
function SubType()
{
	SuperType.call(this);	//借用构造函数，是经典继承
}
优点是可以向超类中传递参数，传递的参数会直接赋值给属性
function SuperType(name)
{
	this.name = name;
}

function SubType()
{
	SuperType.call(this, "Nicholas");
	this.age = 29;
}
子类中直接继承了name并将其初始化；也就是说this指针式固定的，后面的参数对应构造函数的参数
实际使用的时候可以将两种继承方法组合使用，这样可以使得代码更简洁

所有函数的默认原型都是object的实例
确定原型与实例的关系
varName instanceof Type; //返回boolean

Prototypal Inheritance in JavaScript, 基于原型对象的继承模式
function object(o)
{
	function F(){}
	F.prototype = o;
	return new F();
}
在没有必要兴师动众地创建构造函数，只是需要一个对象与另一个对象保持类似的情况下使用

parasitic， 寄生式继承，与寄生构造函数和工厂模式类似
创一个仅用于封装继承过程的函数，在内部以某种方式来增强对象，最后返回对象
function createAnother(original)
{
	var clone = object (original);
	clone.sayHi = function()
	{
		alert("hi");
	};
	return clone;
}
;
寄生组合式继承
普通的组合继承需要调用两次超类构造函数，使用寄生继承的方式可以减少调用一次构造函数
function inheritPrototyp(subType, superType)
{
	var prototype = object(superType.prototype);
	prototype.constructor = subType;
	subType.prototype = prototype;
}

function SuperType(name)
{
	this.name = name;
	this.colors = ["red", "blue"];
}

SuperType.protottype.sayName = function()
{
	alert(this.name);
}

function SubType ( name, age)
{
	SuperType.call(this, age);
	this.age = age;
}

inheritPrototype(subType, SuperType);
SubType.prototype.sayAge = function {alert("hi");}
;
YUI, Yahoo.lang.extend()方法采用了这种方式，http://developer.yahoo.com/yui/

匿名函数
function(arguments){}
javaScript中函数定义式可以嵌套的定义的，因为函数也是被作为对象来处理的
；
function CreateFunction()
{
	return function(){alert("I'm created");}
}
匿名函数的直接调用
function([arguments]){}([inputArguments]);
;
;
递归, 函数调用本身使用arguments.callee代表当前的执行函数名，同this指针的概念
；
闭包，有权访问另一个函数作用域的函数，简单地说就是一个函数内的函数；闭包相对于函数占用内存较大；
内部函数的变量作用域取决于外部函数；
;
尽量不要在闭包中使用this对象，因为默认闭包内的this对象是具有全局性
为了访问外层函数可以使用中间变量来传递this指针;
arguments对象也一样
；
闭包容易诱发循环变量引用，从而导致内存泄露，最好的方式是调用完无用的变量或元素则将其赋值为null，或者使用中间值变量来减少引用

javaScript没有块作用域
不会警告变量重复定义
匿名函数可以模仿块作用域
(function()
{
	//块作用域
}());
使用小括号将匿名函数包裹的原因是为了将函数声明转化为函数表达式，否则会导致出错；
块作用域的好处是不会扰乱全局命名空间，还可以减少闭包占用的内存，因为用完后马上销毁；

所有的变量都是公有的，除了函数内部定义的私有变量以外
；
特权方法，有权访问私有变量和似有函数的公有方法；使用闭包函数来完成
有两种创建方式
第一种，使用构造函数，缺点必须使用构造函数模式
function MyObject(0
{
	var privateVariable = 10;
	function privateFunction(){}
	
	//特权方法			就是在对象类型中增加属性，并返回函数作用域内变量
	this.publicMethod = function()
	{
		privateVariable++;
		return privateFunction();
	}
}
；
第二种，静态私有变量
(
	function ()
	{
		var privateVar = 10;
		function privateFunction()
		{
			return false;
		}
		
		//构造函数，并没有使用VAR关键字，初始化未声明的变量总是创建一个全局变量
		MyObject = function()
		{
			
		};
		
		MyObject.prototype.publicMethod = function()
		{
			privateVariable++;
			return privateFunction
		}
	}
)();
是一种在JavaScript中模拟静态变量的方法，因为JavaScript中没有真正的静态变量，只有保持一个变量至少有一个引用存在才能保证变量不被回收

模块模式
；
var singleton = 
{
	name:value,
	method:function()
	{
		...
	}
}
;
var singleton = function()
{
	var privateVariable = 10;
	function privateFunction()
	{
		return false;
	}
	
	return 
	{
		publicProperty:true,
		publicMethod : function()
		{
			privateVariable++;
			return privateFunction();
		}
	}
}();  //匿名函数没有包含在()中的原因是其放在了表达式中，与函数声明中不同
(function (){})();
;
增强的模块模式，在单例模式中加入类型检查
var singleton = function()
{
	var privateVariable = 10;
	function privateFunction()
	{
		return false;
	}
	
	var object = new CustormType();
	//添加特权共有属性方法
	object.publicProperty = true;
	object.publicMethod = function()
	{
		privateVariable++;
		return privateFunction();
	};
	return object;
}();

BOM, 浏览器对象模型, 核心window 对象，是ECMAScript规定的Global对象
；
所有全局变量、函数都会成为window对象的属性与方法
;
Window Mobile平台的IE不允许直接使用
window.property = value; 创建 window对象的方法，但是使用全局对象仍然可以创建window对象的属性或者方法
；
窗口关系及框架
如果浏览器中有多个frame对象，则每个frame对象都有自己的window对象
<frameset rows = "160,*" >
	<frame src = "hrame.htm" name = "topFrame"/>
	<frameset cols = "50%,50%">
		<frame src = "anotherframe.htm" name = "leftFrame" />
		<frame src "yetanotherframe.htm" name = "rightFrame" />
	</frameset>
</fremeset>
;
引用window.frames[0]或者windowsframes["topFrame"]
;
window.open()打开新浏览器窗口
；
javaScript是但线程语言，可以设置超时值和间歇时间值来调度代码在特定的时候执行
timeoutId = setTimeout(functionOrStringToExcute, timeGap);
会返回一个ID，是全局唯一，来标示超时调用的计划代码。可以用于取消下次超时调用
clearTimeout(timeoutId);
;
间歇调用，参数同超时调用
setInterval()；
；
常常使用超时调用来模拟间歇调用
；
系统对话框
confirm(string);
alert(string);
prompt(string, defaultValue);
;
显示查找，打印
window.print();
window.find();
;
location对象
提供了当前窗口中加载有关的信息，还提供一些导航功能
即是window对象属性，又是document对象属性
它将URL解析为独立的片段，开发人员可以访问这些不同的属性片段
属性：
属性名		例子				说明
hash		"#contents"			URL中的hash,#后跟零或多个字符，无则返回空字符串
host		"www.xx.com:xx"		服务器名和端口号
hostname	"www.xx.com"		不带端口号的服务器名
href		"http:..."			当前加载页面的完整URL同location.tostring()
pathname	"/xx/"				URL中目录和文件名
port		"xxx"				端口号
protocol	"http:"				返回页面使用的协议
search		"?q=javascript"		返回URL的查询字符串，以问号开头
；
分割查询参数
location.search().substring(1)
string.split("&")
decodeUriComponnet()
;
位置操作
location.assign(URLString);
立刻打开一个新URL，并在浏览器历史记录中生成一条新记录
同样的操作是使用window.location, location.href赋值。实际也是location.assign()来完成的
location.repalce(URLString);浏览器地址立即改变，并且不在浏览器历史记录中生成新记录，也就是不能通过前进后退来返回页面
location.reload(); //有可能从缓存加载
location.reload(tru); //从服务器加载
；
Navigator对象，用于识别客户端浏览器类型，每个浏览器都有自己的实现方法，下面列出公共方法
appcodeName 浏览器名
appName 完整的浏览器名
appMinorVersion 次版本
plugins, 浏览器中安装的插件
cookieEnabled, cpuClass, platform, product, registerContentHandler, securityPolicy, systemLanguage, userAgent, userLanguage, userProfile, vendor, vendorsub
...
例如：浏览器插件检测
function hasPlugin(name)
{
	name = name.toLowerCase();
	for( var i = 0; i < navigator.plugins.length; i ++ )
	{
		navigator.plugins[i].name 
	}
}
；
IE以COM对象的方式实现插件的，所以需要知道插件的标示符，就是插件的注册名字
；
screen 对象， 表示客户端的能力
通用属性：
availHeight, availeft, availTop, availWidth, bufferDepth, colorDepth, deviceXDPI, deviceYDPI, fontSmoothingEnabled, height, left, logicalXDPI, logicalYDPI, pixelDepth, top, updateInterval, width
例如调整浏览器窗口大小
window.resizeTo(screen.availWidth, screen.availHeight);
;
History 对象
保存用户的上网记录
histroy.go(-1); historygo(2);...
history.go("baidu.com"), 跳转到最近的百度页面

客户端检测
检测不同客户端浏览器的不同，或者叫怪癖quirk, 也就是缺陷
;
识别浏览器支持特性的模式
if(object.propertyInQuestion)
{
  //use property
}
;
;
测试是否有DOM1级别的能力
var hasDOM1 = !!(document.getElementById && document.createElement && document.getElementsByTagName)
;
IE中存在不枚举DontEnum的问题
Safari3.0之前存在会枚举隐藏属性的问题
检测：
var hasEnumShadowsQuirk = function()
{
	var o = { toString: function (){} };
	var count = 0;
	for( var prop in o )
	{
		if ( prop == "toString" )
		{
			count++;
		}
	}
	return count > 1
}

用户代理检测
navigator.userAgent属性访问，服务器用其检测客户端浏览器。而在客户端选用的较少
；
Mozilla/5.0(平台；加密类型；操作系统或CPU；语言）。。。
;
检测，识别呈现引擎，主要有五类
IE, Gecko, WebKit, KHtml, Opera
;
Google Chrome与Safari 都采用WebKit做呈现引擎
；
之后使用正则表达式检测各个浏览器特点
；
识别平台
navigator.platform
;
识别移动设备
Mozilla/5.0 (iPhone; ... )
Mozilla/5.0 (iPod; ... )
Mozilla/5.0 ( SymbianOS/9.2... )
;
识别游戏系统
Opera /9.1 ( Nintendo ... ) 任天堂Wii
Mozilla/5.0 ( Playstation 3.... ) playstation 3

DOM, 文档对象模型
每一个HTML文档只有一个DOM，HTML元素通过元素节点表示，特性(attribute)通过特性节点表示，文档类型通过文档类型节点表示，注释通过注释表示，共有12种节点类型
;
Document
	->Element html
		->Element head
			->Element title
				->Text Sample Page
	->Element body
		->Element p
			->Text Hellow world!
;
DOM1定义了Node接口，DOM中所有节点实现
Node.nodeType表明节点属性，一共有12个枚举值
Node.ELEMENT_NODE(1)
Node.ATTRIBUTE_NODE(2)
Node.TEXT_NODE(3)
Node.CDATA_SECTION_NODE(4)
Node.ENTITY_REFERENCE_NODE(5)
Node.ENTITY_NODE(6)
Node.PROCESSING_INSTRUCTION_NODE(7)
Node.COMMENT_NODE(8)
Node.DOCUMENT_NODE(9)
Node.DOCUMENT_TYPE_NODE(10)
Node.DOCUMENT_FRAGMENT_NODE(11)
Node.NOTATION_NODE(12)
;
判断
if( someNode.noteType == 1 ) ...
;
检测完之后可以使用属性
nodeName, nodeValue
对于元素节点，nodeName 保存标签名，nodeValue为null
;
每个节点有childNodes对象，保存着NodeList对象，是DOM查询的结果集，类似于Array
将其转换为Array对象
var aryObject = Array.prototype.slice().call(someNode.childNodes, 0);
在IE中的childNodes是COM对象，不能使用上面代码，需要使用手动枚举所有节点的方式
；
hasChildNodes()来测试是否有子节点
;
节点 ownerDocument 属性用来之名节点属于的文档
;
文档写入
document.write(...);
;
Element类型，对元素标签名，子节点及特性的访问
noteType equal to 1
;
HTMLElement
object.getAttribute(name);
object.createElement()
;
Text类型
noteType is 3
;
滚动, object
scrollIntoView()
scrollIntoViewIfNeeded
scrollByLines()
scrollByPages
;
内容
innerText, innerHTML
;
动态样式
loadStyles(cssFileName);

DOM2和DOM3
增加命名空间处理
isDefaultNamespace()
lookupNamespaceURI()
lookupPrefix()
;
增加框架类型处理
HTMLFrameElement
;
访问样式
object.style.attribute
;
元素大小
offsetHeight
offsetWidth
client dimension, 客户区，是元素内容及其边框
scroll dimension, 是包含滚动内容的元素大小
；
结点迭代器, NodeIterator
document.createNodeIterator()
document.treeWalker

:DOM, DOM2, DOM3事件处理
>DOM, onclick, onload
>DOM2, addEventlistener...， EventUtil.addHandler
>DOM3, 大部未支持

:表单
对应javascript， 的HTMLFormElement，继承自HTMLElement
>属性
acceptChart, action, elements, enctype, length, method, name, reset(), submit(), target 发送请求与接收请求的窗口名

:错误类型
ECMA-262定义
>类型
Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError

:Ajax与JSON
xhr = new XMLHttpRequest();
老版本可能有不同对象
>方法
xhr.get(), open(), send()
>返回值
responseText, responseXML, status, statusText
>HTTP头信息
accept, 浏览器能够处理的内容类型
accept-charset, 浏览器能显示的字体
accept-encoding,浏览器能接收的压缩编码
accept-language, 浏览器当前的语言
connection, 浏览器与服务器的连接类型
user-agnet, 当前用户使用的代理字符串
>参训字符串格式必须使用encodeURIComponent()编码
>一般流程
xhr = new HTTPRequest();
xhr.open("get/post", "url", true);
xhr.setRquestHeader(...);
xhr.send(serialize(domFormObject));
>IE8,跨域请求
XDomainRequest对象
；
与XHR区别
cookie不随请求发送，也不会返回
只能设置请求中的content-type
不能访问响应头部信息
只支持GET和POST请求
XDR只能访问access-control-allow-origin投资字段设置的资源
>crockford, http://www.json.org/js.html具有JSON系列化解释器

:高级技巧
>作用域安全的构造函数
创建对象的时候检查输入的对象是否为当前类
>惰性载入
载入函数的代码只运行一次
>函数绑定
在特定环境中以指定参数调用另一个函数
>函数柯里化，function currying
函数的包装
function add(num1, num2)
{
    return num1 + num2;
}
function curriedAdd(num2)
{
    return add(5, num2);
}
>高级定时器
setTimeout(), setInterval(), JavaScript是运行于单线程的，定时器的执行时机是不能保证的
使用 setTimeout()代替setInterval()
>Yielding Process
javascript不允许长时间运行，防止恶意程序，使用定时器来绕开这个限制
>函数节流
连续尝试过多的DOM操作可能会导致浏览器挂起
>自定义事件
EventTarget.prototype
>拖放
检测mouseDown，mouseMove，mouseUp事件

:客户端存储
>http cookie, 要求服务器对任意http请求发送set-cookie http头作为响应的一部分
>成分
名称，大小写不敏感，必须是url编码的
值，存储在cookie中的字符串
域，对于那个域是有效的
路径，对于指定域中的那个路径
失效实际那
安全标志，只有在使用SSL连接的时候才发送到服务器
>javascript中的cookie
document.cookie
>DOM storage
>sessionStorage
>globalStorage
>localStorage

:编程规范
>可维护代码
可理解，直观，适应性，扩展性，调试性
>松散耦合
解耦HTML与javascript
解耦CSS与javascript
解耦应用逻辑与事件处理
    勿将event传给其他方法
    任何可以在应用层面的动作都应该尅在不执行任何事务处理程序的情况下执行
    任何事件处理程序都应该处理事件，然后交给应用处理程序
>避免全局变量，使用作用域
var nameSpance = {}
>避免与null进行比较，尝试使用一下技术替代，instanceof，typeof
使用常量，由于本身不提供常量，所以使用命名空间的形式定义
var Constant = { constantString:value, ...};
>执行速度
比C慢5000倍
比java慢100倍
比perl慢10倍
>使用document对象的时候尽量先引用, 避免全局查找
var doc = document;
>尽量不要使用with语句，而是使用局部变量
>最小化语句
多个变量声明
var cont = 5,
    color = "blue",
    ...
    end = value;
    
:HTML5
http://www.w3org/html/wg/html5
>canvas
html
<canvas id="drawing" width="200" height="200"></canvas>
;
javascript 引用
var drawing = document.getElementById("drawing");
context = drawing.getContest();
context.fillStyle = style;
context.fileRect()
arc(,,,)
arcTo()
line(to)
moveTo()
fillText()
strokeText()
;
变换
rotate
scale
translate
transform(), 将变换矩阵乘上以上矩阵
setTransform
>离线支持
navrigator.onLine
>数据库存储window.openDatabase()
>拖放支持
dragstart事件等
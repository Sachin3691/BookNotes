Window debugging;Note = Erxin

# automatic dump file generation
## window debug environment
- Debugging environments
After you install Visual Studio and the WDK, you have six available debugging environments:
	+ Visual Studio with integrated Windows debuggers
	+ Microsoft Windows Debugger (WinDbg)
	+ Microsoft Kernel Debugger (KD)
	+ NTKD
	+ Microsoft Console Debugger (CDB)
	+ Microsoft NT Symbolic Debugger (NTSD)
All of these debugging environments provide user interfaces for the same underlying debugging engine, which is implemented in dbgeng.dll. This debugging engine is called the Windows debugger, and the six debugging environments are collectively called the Windows debuggers.
- window debug msdn
http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=VS.85).aspx
- setup kernel mode in VS
http://msdn.microsoft.com/en-us/library/windows/hardware/hh439376(v=vs.85).aspx


## generate dump file
- environment
window server 2008 
reliability and performance monitor
select the user define tree node, add dump file trigger, name as "CPU spike Alert" for monitor CPU uses above 80 percent
add a action to run some app or send email
create a batch file to generate the dump file for the specify process
	@echo off
	logman stop "CPU spike Alert"
	adplus -quiet -hang -pn w3wp.exe -o c:\temp
	logman stop "CPU spike Alert"
- open the dump file with windbg, some of the windbg command is shown below
!runaway, show the app spend time
.loadby sos mscorvks, load the sos debug extension for debug the managed code
~17e !clrstack, display the call stack when the dump file generated
- download the window debug tool
http://www.microsoft.com/whdc/devtools/debugging/default.mspx
- download the window symbol package
http://msdn.microsoft.com/en-us/windows/hardware/gg463028
- window hardware development and driver development
http://social.msdn.microsoft.com/Forums/en-us/wdk/threads
http://code.msdn.microsoft.com/windowshardware, samples
- developer training website
http://www.azius.com/dt-courses.php
- support for hardware kits, tools, certification, and dashboard
http://msdn.microsoft.com/en-US/windows/hardware/gg454528
- *.pdb and *.dbg files
The .PDB extension stands for "program database." It holds the new format for storing debugging information that was introduced in Visual C++ version 1.0
The .DBG extension stands for "debug." The .DBG files created with the 32-bit NT toolset are in the Portable Executable (PE) file format. They contain sections with COFF, FPO, and in some cases Codeview information.
- how to generate symbol files
compiler add these parameters
	+ Enable /Z7 for Visual C++ .NET
	+ Enable /Zi for Visual C++ 6.0
	+ Enable /O2
Linker
	+  Select/INCREMENTAL:NO
	+  Select /DEBUG:Yes
	+  Select /OPT:REF
	+ Select /OPT:ICF
Enable Debugging in a Release Build in Visual C++ 6.0
To enable debugging in a release build in a Visual C++ 6.0 development environment, follow these steps:1.On the Project menu, click Settings.
2.Click Win32 Release configuration.
3.On the C/C++ tab, click General, and then set the following:◦Set Optimizations to Maximize Speed or to Minimize Size.
◦Set Debug Info to Program Database.
4.On the Link tab, click General, and then set the following: ◦Make sure that you click to select Generate debug info.
◦Make sure that you clear the Link incrementally check box.
5.Edit the Project options directly, and then add /opt:ref,icf.
- get the help information of ADPlus, running ADPlus –help, or by viewing the debuggers help file (Debugger.chm). 
	+ -hang
	This switch configures ADPlus to run in hang mode. You must use this switch with the -iis, -pn, or -p switches. You cannot use -hang with the -crash switch.
	Note When ADPlus is running in hang mode, you must start ADPlus after the process stops responding or is consuming a high percentage of the CPU.
	
	+ -crash
	This switch configures ADPlus to run in crash mode. You must use this switch with the -iis, -pn, or -p switches. You cannot use -crash with the -hang switch.
	Note When ADPlus is running in crash mode, you must start ADPlus before the process quits unexpectedlys or becomes unstable.
	
	+ -pn process name
	The -pn switch is used to specify a process name that you want ADPlus to analyze. To specify more than one process, use multiple -pn process name switches. For example:
	-pn process1.exe -pn process2.exe
	
	+ -p process ID
	The -p switch is used to specify the process ID (PID) of a process that you want ADPlus to analyze. To specify more than one process, use multiple -p PID switches. For example:
	-p 1896 -p 1702
	
	+ -scspawning command
	Unlike the -pn and -p switches, which specifiy processes that are already running to attach the debugger to, the -sc switch defines the application and parameters to be started (or spawned) in the debugger. For example: 
	-sc "c:\windows\system32\notepad.exe
	
	+ -iis
	The -iis switch is used for debugging server computers that are running Internet Information Server (IIS) 4.0 or later. When you use ADPlus with the -iis switch, ADPlus monitors all the IIS in-process (Inetinfo.exe) and out-of-process (Mtx.exe/Dllhost.exe) applications. You can use the -iis switch with the -pn switch or the -p switch, or you can use it alone to analyze IIS and all running MTS/COM+ applications in either crash mode or hang mode.
	 If you are trying to analyze a server computer running IIS 3.0 or earlier, use the -pn switch and specify Inetinfo.exe as the process to monitor.
	 
	+ -notify computer name or user name
	This switch is only valid when ADPlus is running in crash mode. This switch instructs ADPlus to alert the specified user name or computer name of a crash. When the debugger detaches from the process because of a second chance exception, or when a user presses CTRL+C to stop debugging, a notification is sent to the remote user or computer through the local messenger service. This notification occurs only if the local messenger service is started on the computer that is being debugged.
	
	+ -quiet
	This switch instructs ADPlus to suppress all modal dialog boxes. This switch is useful if you are running ADPlus from a remote command shell where modal dialog boxes can cause ADPlus to wait indefinitely for a user to click OK. For best results, make sure that this is the first switch that is passed to ADPlus.vbs.
	
	+ -o output directory
	This switch instructs ADPlus where to put the debug output files. If you use long file names, you must enclose them in double quotation marks. Additionally, you can use a UNC path (\\server\share). If you use a UNC path, ADPlus creates a new folder immediately below the UNC path that you specified. The folder is named for the server where ADPlus is running (for example, \\server\share\Web1 or \\server\share\Web2). This switch is useful if ADPlus is running on multiple computers in a web farm that are all putting their output on the same network share.
- run the adplus for the first time
You may be prompted to change your default script interpreter from Wscript.exe to Cscript.exe. Microsoft strongly recommends that you allow ADPlus to configure CSCript as the default script interpreter.
- Process stops responding or consumes 100 percent CPU utilization
	* generate the dump file normally
	ADPlus -hang -p 1896
	This command runs ADPlus in hang mode and produces a full memory dump file of a process that has the PID 1896. 

	ADPlus -hang -pn myapp.exe
	This command runs ADPlus in hang mode and produces full memory dump files of all processes that are named Myapp.exe. 

	ADPlus -hang -iis -pn myapp.exe -o c:\temp
	This command runs ADPlus in hang mode and produces full memory dump files of IIS, all instances of Mtx.exe or Dllhost.exe, and all processes that are named Myapp.exe. It then puts the memory dump files in the C:\Temp folder. 
	* In certain rare situations, the debugger may not be able to attach to the process after the 100 percent CPU condition or hang has occurred. If you run ADPlus in hang mode after the problem has occurred. It may be best to attach the debugger before the problem has occurred, run ADPlus in crash mode: 
	ADPlus -crash -p 1896
	This command runs ADPlus in crash mode for a process that has the PID 1896. ADPlus waits for an exception to occur, or for a user to press CTRL+C in the minimized debugger window, to generate a memory dump file and to detach the debugger.
	
	ADPlus -crash -pn myapp.exe
	This command runs ADPlus in crash mode for the process named Myapp.exe. ADPlus waits for an exception to occur, or for a user to press CTRL+C in the minimized debugger window, to generate a memory dump file and to detach the debugger.

	ADPlus -crash -iis -pn myapp.exe -o c:\temp
	This command runs ADPlus in crash mode for all instances of the processes named Myapp.exe and Inetinfo.exe, and for all instances of Mtx.exe or Dllhost.exe. ADPlus waits for an exception to occur, or for a user to press CTRL+C in one or more of the minimized debugger windows, to generate the memory dump file (or files) and to detach the debugger (or debuggers). ADPlus puts the memory dump files and the log files in the C:\Temp folder.
	* Process quits unexpectedly
	ADPlus -crash -iis
	This command runs ADPlus in crash mode and causes it to attach the CDB debugger to Inetinfo.exe and to all Mtx.exe or Dllhost.exe processes that are running on the computer. ADPlus then waits for any first chance and second chance exceptions to occur. By default, ADPlus puts all files in a subfolder of the installation folder because the -oswitch is omitted.

	ADPlus -quiet -crash -iis -notify remote computer -o c:\temp
	This command runs ADPlus quietly (no dialog boxes, log all output to the event log) in crash mode and causes it to attach the CDB debugger to Inetinfo.exe and to all Mtx.exe or Dllhost.exe processes that are running on the computer. Because the -notifyswitch is used, the debuggers notify all users who are logged on to the computer named remote computer whenever a crash is detected or when the process that is being monitored quits. Because the -oswitch is used, ADPlus puts all output in the C:\Temp folder. If the folder does not exist, ADPlus creates it. 

	ADPlus -crash -iis -o \\server\share
	This command is the same as the previous command except that it logs all output to a network server. ADPlus creates a new subfolder in \\server\share and names the subfolder for the local computer. Therefore, if you are running ADPlus in a web farm, each server in the farm that has ADPlus running logs its own unique folder under \\server\share. (You do not have to create unique folders for each server. ADPlus does this automatically.) 
	* MTS or COM+ server application quits unexpectedly
	Custom Component Object Model (COM) components that run in an MTS or COM+ server application actually run in a surrogate process (Mtx.exe or Dllhost.exe). 
	By default, MTS or COM+ server applications are configured to quit after three minutes of idle time. To make sure that these processes remain running while the debugger is attached and monitoring for exceptions, you must configure them to Leave running when idle. 
	Additionally, MTS and COM+ implement a failfast. A failfast is a safeguard that is designed to fail (or quit) MTS/COM+ processes that generate unhandled access violations.

	 By default, the failfast is enabled in MTS or COM+ applications that raise unhandled access violation exceptions. As a result, a failing MTS/COM+ server application cannot raise a second chance access violation exception (that is, it quits after the first chance acess violation). By default, ADPlus is configured to produce only a mini memory dump record when first chance exceptions occur.

	 To successfully debug MTS/COM+ server applications, followthese steps: 
	1.Configure the MTS/COM+ server application to Leave running when idle.
	2.Use the FullOnFirst switch to create full dump files on first chance exceptions.
	3.Run ADPlus in crash mode, and then wait for the application to fail.

	Note Because MTS and COM+ shut down a server application, and because the failfast policy prevents the process from raising a second chance exception, you may only be able to obtain a first chance access violation memory dump file. 
- window debugging tools
	+ adplus.vbs, it will automatically call the command line debugger cdb.exe
	hang mode is use to attach the process and generate the dump and detattach from the process
		* could grab multiple dump files to make sure catched the bug codes
	crash mode is use to wait for the app crash and generate the dump file
	+ cdb.exe, it will generate the memory dump
	+ windbg, check the dump files
	open the generated dump files in windbg
	.cls, clear the screen
	!runaway, give the thread
	.time, display process time
	~<threadId>s, tell the debugger from now on all the command is associate with the specify logical thread id.
		ex. ~17s
	k, dump call stack of kernel 
	!clrstack, will display the managed codes' stack, it's in the microsoft extension debugging tool of sos, need to load the extendtion dll
	.loadby sos mscorwks, load the sos extendsion match the ms clr version
	check the dump stack and file the suspicious of the function name, if you have the right to check the source code then find the function and check the detail. 
	.name2ee, will display the assembly name relative with the specify symbol.
		ex. !name2ee * functionName
	!savemodule, this command will save the module relative with the specify address, the module address could be found by the !.name2exe
		!savemodule address save_full_path
	use the refactor to check the .net dll to get the source code
- Run in crash mode remotely adplus
share the remote server by using the Remote.exe utility, create a batch file that starts a command shell on the remote server, and then schedule this batch file to run on the target server by using the AT command. (The AT command causes the command shell to run non-interactively, similiar to a service.) The remote command shell is then connected to a local workstation or client computer that uses the same Remote.exe utility that you used to start the command shell.
	+ On the remote server
	 Assume that the debuggers are installed to C:\Debuggers. Follow these steps:1.In the C:\Debuggers folder, create a new batch file named Remoteshell.cmd.
	2.Add the following line to this batch file:
	c:\debuggers\remote.exe /s "cmd.exe" remoteshell

	3.At the console on the server, or in a Terminal Services session, open a new command shell, and then type the following command: 
	AT 15:00 c:\debuggers\remoteshell.cmd
	where 15:00 is one minute later than the current time. For example, if the current time is 14:59, type 15:00.
	4.Wait for the AT command to run.
	5.At the command prompt, type AT with no parameters to verify that the task has run with no errors.

	+ On the local client: 
	Install the debuggers on the local client computer or (at a minimum) copy the Remote.exe utility locally. (By default, the utility is installed with the debuggers in the root installation folder.) 

	Assume that the debuggers and the Remote.exe utility are installed to C:\Debuggers. Follow these steps: 1.At a command prompt, switch to the C:\Debuggers folder.
	2.Type the following command: 
	remote.exe /c remote server remoteshell
	where remote server is the name of the remote server.
	3.Your local command shell is now connected to the remote command shell that is running on the server, and all commands that you type locally will be carried out on the remote server (the DIR c:\ command lists the contents of drive C on the remote server).
	4.In the remote command shell, you can now run ADPlus in crash mode as if you were running it locally from the console. However, you must use the -quiet switch to supress all dialog boxes that ADPlus generates by default. If you do not use the -quiet switch, the remote command shell will stop responding after you run ADPlus, and will not return to a prompt. If this problem occurs, you must quit the remote command shell (Cmd.exe) on the server, and then start a new instance.
	5.To send a debug break (CTRL+C) to a process that ADPlus is currently debugging remotely through crash mode, you must use the Breakin.exe utility. By default, Breakin.exe is installed with the debuggers in the root of the debuggers folder. For example, to stop debugging IIS (Inetinfo.exe) that is running with a process ID of 1975, type the following command in the remote command shell: 
	breakin.exe 1975
	Alternately, you can use the Kill.exe command (located in the root debuggers folder) to quit any processes that are being debugged.
- run adplus with advance config setting
<ADPlus>
 <Settings>
  <RunMode> CRASH </RunMode>
 </Settings>  <PreCommands>
  <Cmd> !load clr10\sos</Cmd>
 </PreCommands>  <Exceptions>
  <Option> NoDumpOnFirstChance </Option>
  <Option> NoDumpOnSecondChance </Option>
  <Config>
   <!-- This is for the CLR exception -->
   <Code> clr </Code>
   <Actions1> Log </Actions1>
   <CustomActions1> !clr10\sos.cce System.Runtime.InteropServices.COMException 1; j ($t1 = 1) '.dump /ma /u c:\dumps\exceptiondump.dmp;gn' ; 'gn' </CustomActions1>
   <ReturnAction1> GN </ReturnAction1>
   <Actions2> Void </Actions2>
   <ReturnAction2> GN </ReturnAction2>
  </Config>
 </Exceptions>
</ADPlus>
As you can see you can easily adjust the config so that it gets a dump on any other exception. The dump will be saved in c:\dumps, so you should also make sure that this folder exists. When you're ready, run adplus with the following syntax:

adplus -c myconfig.cfg -pn w3wp.exe


## debug with visual studio
- set symbols with vs
	+ Setting the Symbol Path by Using a Property Page
	1.On the host computer, in Microsoft Visual Studio, choose Options from the Tools menu. 
	2.In the Options property box, navigate to Debugging>Symbols. 
	3.If you want to get symbols from a Microsoft symbol server, check Microsoft Symbol Servers.
	4.If you want to get symbols from folders on the host computer, check Environment Variable: _NT_SYMBOL_PATH. Then set the _NT_SYMBOL_PATH environment variable.
	+ in the debugger immediate window .sympath (Set Symbol Path) command.
	+ in the Debugger Immediate Window, enter the .exepath (Set Executable Path) command.
- Remote debugging
1.On the remote computer, in Visual Studio, choose Connect to Remote Debugger from the Tools menu.
2.In the Connect to Remote Debugger dialog box, enter a connection string, and click Connect.
- view the call stack
	+ window | call stack
	+ In the Debugger Immediate Window, you can view the call stack by entering one of the k (Display Stack Backtrace) 
- Configure Exception and Events in VS 
You can configure the Windows Debugger to react to specified exceptions and events in a pre-determined way
	+ sxe 
	+ sxd 
	+ sxn 
	+ sxi 
	+  Use the SXE, SXD, SXN, or SXI command in the Debugger Command window.
		(CDB only) Use the -x, -xe, -xd, -xn, or -xi option on the CDB command line. 
		(CDB only) Use the sxe or sxd keyword in the Tools.ini file. 
		(WinDbg only) Click Event Filters on the Debug menu to open the Event Filters dialog box, and then choose the options that you want.
	+ reference
	http://msdn.microsoft.com/en-us/library/windows/hardware/ff539287(v=vs.85).aspx
- Keeping a debug log file
	+ open a log file
	To open a new log file, enter the .logopen (Open Log File) command. If you use the /t option, the date and time are appended to your specified file name. If you use the /u option, the log file is written in Unicode instead of in ASCII.
	+ append to a existing log file
	To append text to an existing log file, enter the .logappend (Append Log File) command.
	+ closing a log file
	 .logclose (Close Log File) command. 
	+ check log file status
	 .logfile (Display Log File Status) command.
- enabling Postmortem Debugging
http://msdn.microsoft.com/en-us/library/windows/hardware/ff542967(v=vs.85).aspx
- debuger operation
	+ Debugging Using Visual Studio 
	+ Debugging Using WinDbg 
	+ Debugging Using KD and NTKD 
	+ Debugging Using CDB and NTSD 
	+ Controlling the Target 
	+ Enabling Postmortem Debugging 
	+ Using the Debugger Command Window 
	+ Using the WinDbg Graphical Interface 
	+ Using Debugger Extensions 
	+ Performing Remote Debugging 
	+ reference
	http://msdn.microsoft.com/en-us/library/windows/hardware/hh406271(v=vs.85).aspx
- debug with windbg
	+ http://msdn.microsoft.com/en-us/library/windows/hardware/hh406283(v=vs.85).aspx
	+ command line options
	http://msdn.microsoft.com/en-us/library/windows/hardware/ff561306(v=vs.85).aspx
- debug with kd and ntkd
http://msdn.microsoft.com/en-us/library/windows/hardware/hh406279(v=vs.85).aspx
- debug with cdb and ntsd
http://msdn.microsoft.com/en-us/library/windows/hardware/hh406277(v=vs.85).aspx
- processor architecture
http://msdn.microsoft.com/en-us/library/windows/hardware/ff553442(v=vs.85).aspx
- bug checks(Blue screens)
	+ general tips for blue screen
	+ blue screen data
	+ blue check code reference
	http://msdn.microsoft.com/en-us/library/windows/hardware/hh450912(v=vs.85).aspx
- debug engine and extension apis
http://msdn.microsoft.com/en-us/library/windows/hardware/ff540525(v=vs.85).aspx
- debug technicals
	+ standard
	+ specialize
	+ reference
	http://msdn.microsoft.com/en-us/library/windows/hardware/ff541398(v=vs.85).aspx
- crash dump files
	+ kernel mode
	+ user mode
	+ extracting information from a dump files
	+ refernece
	http://msdn.microsoft.com/en-us/library/windows/hardware/ff539316(v=vs.85).aspx
- reference msdn
http://msdn.microsoft.com/en-us/library/windows/hardware/hh406281(v=vs.85).aspx
- glossary
http://msdn.microsoft.com/en-us/library/windows/hardware/ff549655(v=vs.85).aspx
	
    
## understand virtial memory with perfmon
- get virtual memory
long _1gb = 1000000000;
//this line will regist to the system require 1gb virtual memory but not need allocated immediately
LPINT startAddress = (LPINT)VirtualAlloc(0, _1gb, MEM_RESERVE, PAGE_READWRITE);  
//this line will ask for the registed 1gb virtual memory and allocated the resource
VirtualAlloc(startAddress, _1gb, MEM_COMMIT, PAGE_READWRITE);
- the memory keywords
	* private bytes, is been commited virtual memory and the paging files to keep tracking the virtual memory
	* vitual bytes, is the  the reserved and commited virtual memory
	* working set, is the real pysical memory

    
# create 32bit dump from 32bit task manager on 64bit task manager 
c:\windows\syswow64\taskmanager.exe


# Setup window debugging 
https://blogs.msdn.microsoft.com/jankrivanek/2012/10/26/setting-up-windows-debugging/
















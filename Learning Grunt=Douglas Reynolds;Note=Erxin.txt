Learning Grunt = Douglas Reynolds;
Note = Erxin

	 # Preface
	 - what you need for this book
	any os
	text editor
	command line terminal
	node.js and angular.js basic knowledge

	 - who this book is for , javascript developer
	 - conventions
	 + a blok of code is et
	 + command line input
	 + note / tip

	 - feedback
	 - customer support
	 + download example code
	 + errata

	 # Chapter 1.Grunt Dependencies
	 - Grunt is a javascript task runner
	 - dependencies for grunt
	 + npm
	 + jsHint, runs javascript validation(lint)
		this runs code analyzes javascript for errors or syntax that has the potential be a bug
		 + uglify, this task minifies files by removing all excess characters from code without changing or breaking functionality of the code
		 + less, this is a task that compiles less files into css
		 + watch this responds to additions, changes and deletions of files by running preconfigured tasks if you wish to build your project or run lint on files every time the file is changed

		 + plugins maintained by grunt team
		Official plugins are prefixed with contrib - , so the naming of plugins listed previously would be found as contrib - jshint, contrib - uglify, contrib - less, and contrib - watch a

		 + common unofficial plugins
		concurrent
		newer, runs tasks on source files that have changed
		open, opens urls and files from a task
		notify, provides automatic desktop notifications

		 - upgrading or installing node.js
		 + check version
		$ node--version

		 + clean npm cache directory
		$ npm cache clean - f

		 + upgrade nodejs with n module
		$ sudo npm install - g n

		$ n state
		will get the stable version, this is only works for linux

		 + upgrade on windows
		$ npm cache clean
		$ npm update - g

		 - adding your installation path of node to path
		 + window
		 + linux
		$ nano.bash_profile
		add PATH = $PATH : /usr/local / bin /

			 - install grunt

			 # Chapter 2.Fundation for creating an app using Angular.js
			 - grunt exists as the build system used in a project called yeoman
			http : //yeoman.io/

			 - install git
			 - creating the angular seed project
			 - dependencies of angular seed
			git
			node.js

			 - cloning the angular seed project to create a angular project structure
			$ git clone--depth = 1 https : //github.com/angular/angular-seed.git [Your Project Name]

			 + install angular seed dependencies
			$npm install

			 + for mac may required isntall xcode developer tool
			$ xcode - select - install

			 - running the seed app
			$ npm start

			 # Chapter 3 all about grunt plugins
			 - obtaining grunt plugins
			 - plugins overview, http : //gruntjs.com/plugins, officially maintained plugins are prefixed with contrib- and have the image of a star next to them

		 - install grunt plugin with npm
		$ npm install[package name]–save - dev

		 - other install options
		$ npm install[package name]--save
		$ npm install[package name]--save - optional

		 - common grunt plugins and their purposes
		 + linting javascript contrib - jshint
		 * refer https : //www.npmjs.com/package/grunt-contrib-jshint:
		$ grunt jshint
		this lints javascript manually

		 * this plugin is aim to help with identifying potential problems

		 * install plugin
		$ npm install grunt - contrib - jshint--save - dev

		 * contrib - jshint plugin is jshint, any of the options available in jshint can be passed into contrib - jshint, refer http : //jshint.com/docs/options/

		curly, this enforces that curly braces are used in code blocks
		undef, ensures that all variable have been declared
		maxparams, checks to make sure that the number of arguments in a method do
			not exceed a specificed amount

			suppress warning by ignore_warning potion

			 + minifying javascript contrib - uglify https : //www.npmjs.com/package/grunt-contrib-uglify
			$ npm install grunt - contrib - uglify--save - dev

			The contrib - uglify plugin is configured to process specific files as defined in the gruntfile.js configuration file.Additionally, contrib - uglify will have defined output destination files that will be created for the processed minified JavaScript.

			it also support revert minified code for debugging

			reference package.json file in order get information
			pkg : grunt.file.readJSON('package.json')
			This creates a pkg object whose properties are the contents of package.json.Once created, each property found in package.json can be accessed via the dot notation.

			support wildcard match, such as ** /*.js. This is useful when you want to minify all of the contents in a directory.

			+ compile less, refer to https://www.npmjs.com/package/grunt-contrib-less
			$ grunt less
			compiles less to css manually

			 * install
			$ npm install grunt-contrib-less –save-dev

			 * config using path and file option
			paths, directories that should be scanned
			compress, compress output to remove whitespace
			plugins, include additional plugins in the flow of processing
			banner, the banner to use in the compiled destination files

			+ desktop notifications for automated tasks notify https://www.npmjs.com/package/grunt-notify

			 * install
			$ npm install grunt-notify –save-dev

			 * options
			title
			message


			+ opening files and URLs automatically open

			 * install
			$ npm install grunt-open –save-dev

			+ optimizing images, contrib-imagemin, this plugin will compress images in the following formats, .gif, .jpg, .png, and .svg

			 * install
			$ npm install grunt-contrib-imagemin --save-dev

			 * options
			optimizationLevel, 0-7 with 7 being the highest level
			progressive, lossless conversion to progressive .jpg to improve image loading
			interlaced, provides interlaced .gif for progressive loading
			svgoPlugins, allws the customization of .svg plugins that are used in the .svg optimization process

			+ running tasks only on files that changed, newer

			 * install
			$ npm install grunt-newer --save-dev

			 * options
			cache, this defines a custom cache directory
			override, this allows tasks to run on a file even though it has not been modified

			+ performaing ssh and sftp tasks with ssh
			 * install
			npm install grunt-ssh --save-dev

			 * options
			files, files will be copied as key-value paires
			unsername, the remote server username credential
			password, this is the remote server password credential
			host, this is the remote host that files will transfer to
			port, this is the ssh port to use

			sshexec configuration is similar

			+ the minification of css contrib-cssmin, reduce the css file size

			 * install
			$ npm install grunt-contrib-cssmin --save-dev

			 * options
			banner
			keepSpeacialComments
			report
			combine
			minify

			+ concatenate files, contrib-concat, refer to  https://www.npmjs.com/package/grunt-contrib-concat , allow to define all of the files to be concatenated

			 * install
			$ npm install grunt-contrib-concat --save-dev

			 * options
			separator
			banner
			footer
			stripBanners
			process
			sourceMap
			sourceMapName
			sourceMapStyle

			+ cleaning up files and folders with contrib-clean
			 * install
			$ npm install grunt-contrib-clean --save-dev

			+ minify html files
			 * install
			$ npm install grunt-contrib-htmlmin --save-dev

			+ watch for chaing files, contrib-watch watching files manually
			 * install
			$ npm install grunt-contrib-watch –save-dev

			 * options
			event
			reload
			livereload


			# Configuration of Grunt Tasks
			- using the angular seed project and we will focus on the package.json, gruntfile.js, these two are grunt configuration files

			when install a plugin package.json is updated

			- reviewing the installation of grunt tasks
			$ npm install [package name] --save-dev

			+ installing contrib-jshint with npm
			$ npm install grunt-contrib-jshint –save-dev

			the installation will automatic update the package.json file
			"devDependencies" : {
			...
			"grunt-contrib-jshint" : "^0.11.3",
			...
			}

			- installing contrib-uglify with npm
			- installing contrib-less with npm
			- discussing package.json and gruntfile.js these two files provide an automated build system

			+ package.json file, we have registered our project's plugins in the devDependencies section

			+ gruntfile.js gruntile should be locate at the root of the project and part of your project source code

			a gruntfile will include a wrapper function

			module.exports = function(grunt) {
			// grunt related code
			};

			in the wrapper function we will call the grunt.initConfig method

			module.exports = function(grunt) {
			grunt.initConfig({
			pkg: grunt.file.readJSON('package.json'),
			banner: '/*! <%= pkg.name %>' + ' <%= grunt.template.today("yyyy-mm-dd") %> */
			 \ n ',
			            uglify: {
			              options: {
			                    banner: ' <  %= banner %  > '
			              },
			                ...{
			                }
			            }
			        });
			        grunt.loadNpmTasks(' grunt - contrib - uglify ');
			        grunt.registerTask(' default',[' jshint ',' uglify ',' less ']);
			        grunt.task.loadTasks(pathToFile)
			    };

			    the pkg property we assigned to the content of package.json

			    This will be used as a banner comment in the minified JavaScript created by contrib-uglify. The banner property string uses template string variables identified by <% %>, will be replaced with <%= pkg.name %>

			    loadNpmTasks is used to load npm modules

			    registerTask method takes an array of tasks as an argument, we can define multiple tasks to run as our default task.

			    task.loadTasks/grunt.loadTasks(pathToFile) method is used to load external javascript files

			    contrib-jshint configuration. The files parameter defines the files that will be linted:
			    files: [' gruntfile.js ', ' src /**/
			 * .js ', ' test /**/
			 * .js ']

			    + full example
			module.exports = function (grunt) {
				grunt.initConfig({
					pkg : grunt.file.readJSON(' package.json '),
					concat : {
						options : {
							separator : ';
			'
						},
						dist : {
							src : [' src /**/
			 * .js '],
							dest : ' dist /  <  %= pkg.name %  > .js '
						}
					},
					uglify : {
						options : {
							banner : ' /*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */
			 \ n '
						},
						dist : {
							files : {
								' dist /  <  %= pkg.name %  > .min.js ' : [' <  %= concat.dist.dest %  > ']
							}
						}
					},
					qunit : {
						files : [' test /**/
			 * .html ']
					},
					jshint : {
						files : [' Gruntfile.js ', ' src /**/
			 * .js ', ' test /**/
			 * .js '],
						options : { // options here to override JSHint defaults
							globals : {
								jQuery : true,
								console : true,
								module : true,
								document : true
							}
						}
					},
					watch : {
						files : [' <  %= jshint.files %  > '],
						tasks : [' jshint ', ' qunit ']
					}
				});
				grunt.loadNpmTasks(' grunt - contrib - uglify ');
				grunt.loadNpmTasks(' grunt - contrib - jshint ');
				grunt.loadNpmTasks(' grunt - contrib - qunit ');
				grunt.loadNpmTasks(' grunt - contrib - watch ');
				grunt.loadNpmTasks(' grunt - contrib - concat ');
				grunt.registerTask(' test ', [' jshint ', ' qunit ']);
				grunt.registerTask(' default', [' jshint ', ' qunit ', ' concat ', ' uglify ']);
			};

			- introduction the grunt api
			    + The initConfig method is an alias for the grunt.config.init method. The purpose of grunt.initConfig

			    + The grunt.template.today method is a helper function that can be used to obtain and format today' s date.

			 + loading npm tasks
			grunt.loadNpmTasks('grunt-contrib-uglify');

			 + creating tasks
			grunt.registerTask('test', ['jshint', 'qunit']);

			 + fail api
			The grunt.warn method will display an error and abort Grunt.There is a flag that can be used in order to warn and continue processing tasks, the force flag.The grunt.fatal method will also display an error and abort Grunt.

			 + event api
			grunt.event.on(event, listener):
			This adds a listener to the array of listeners for the event defined in the method
			grunt.event.once(event, listener)
			grunt.event.off(event, listener)
			grunt.event.removeAllListeners([event])

			 + grunt file api
			grunt.file.read
			grunt.file.write
			grunt.file.copy
			grunt.file.delete
			grunt.file.mkdir
			...

			 + grunt log api
			grunt.log.write
			grunt.log.writeLn
			grunt.log.error
			grunt.log.ok
			grunt.log.okLns

			 + grunt option API
			grunt.option.flags
			grunt.option.init

			 + grunt template API
			grunt.template.process
			grunt.template.setDelimiters
			grunt.template.today

			 + grunt task API
			grunt.task.registerTask
			grunt.task.exists
			grunt.task.renameTask

			 # Task setup in the sample_project application
			 - defining requirements of sample_project
			 - an overview of user stories
			as a character, i want to...

			 + example
			As a developer, I want automated builds to automate repetitive tasks
			As a developer, I want tasks chained to changes so that defined tasks run automatically when files change
			As a developer, I want automated JS linting to ensure code quality
			As a developer, I want automated code minification to improve performance

			 - gruntfile.js wrapper and configuration
			 + wrapper function contains all of the grunt - related code within its body

			grunt.config.init method to initialize the grunt configuration object

			 + grunt - ini - gruntfile
			$ grunt - init - version
			checking for the current version in terminal

			 + gruntfile.js configuration, example http : //gruntjs.com/sample-gruntfile

			module.exports = function (grunt) {};

			this allows the module to be imported by grunt

			there are two basic types of configuration that can be configured for jshint, enforcing(error / warning)and relaxing(warning)

			 # Building the sample project
			 - understanding task loading
			grunt.loadNpmTasks('name-of-task');

			it is a method that loads plugins installed locally with npm, and that have been installed relative to the gruntfile

			In order to load tasks not installed with NPM, one would use grunt.loadTasks, an alias for grunt.task.loadTasks.

			 - calling plugins using the loadNpmTasks method
			grunt.loadNpmTasks('grunt-contrib-jshint');

			 - using the devDependencies object looping method
			Object.keys(require('./package.json').devDependencies).forEach(function (dep) {
				grunt.loadNpmTasks(dep);
			});

			By looping through the devDependencies object to get each one of the dependencies defined within,

			 - the defaulttask configuration
			 + basic task configuration syntax is
			grunt.registerTask(task_name, task_list);
			grunt.registerTask(taskName, [task1, task2, task3, etc...]);

			 - a custom task configuration, We could define a custom task named dev that will not include any minification of JavaScript or CSS but still provides tasks for linting of JavaScript

			grunt.registerTask('dev', ['jshint', 'less', 'imagemin', 'notify', 'open', 'watch']);

			grunt.registerTask('local', 'description of local task', function (a, b, c) {
				grunt.task.run([a, b, c]);
			});

			 - functional testing, The process for testing individual tasks is simple:
			we will only register the task we wish to test and then inspect the result of the task to ensure that what we expected to happen has indeed happened

			The terminal syntax for testing each plugin configuration will be the same, the only difference being the name of the plugin that gets passed in to the callback function
			$ grunt testing : plugin - name

			 # Advanced grunt concepts
			 - creating a grunt plugin
			 - using the grunt plugin scaffold, Grunt provides you with a plugin module creation with grunt - init - gruntplugin, which will scaffold your plugin authoring environment.

			$ git clone git : //github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin.

			grunt - contrib - jshint file is installed by defaultin this process, so a.jshintrc file is also created.Additionally, grunt - contrib - clean and grunt - contrib - nodeunit are installed

			For this purpose, we will need two node.js libraries:
			zlib, which will provide the actual gzip functionality, and fs, which will provide file system methods needed by the plugin

			 + example create gzip grunt plugin
			/* * grunt-gz * https://github.com/DougReynolds/grunt-gz * * Copyright (c) 2016 Douglas Reynolds * Licensed under the MIT license. */
			'use strict';
			var zlib = require('zlib');
			var fs = require('fs');
			module.exports = function (grunt) {
				grunt.registerMultiTask('gz', 'Grunt gzip task', function () {
					var gzip = zlib.createGunzip();
					var processComplete = this.async(); // create sourceFiles array and populate it
					var sourceFiles = [];
					grunt.file.recurse(grunt.config.get('gz.files.source'), function (abspath, rootdir, subdir, filename) {
						sourceFiles.push(filename);
					});
					// Async function which obtains files from source directory
					//  configuration and archives them in gzip format to a
					//  distribution directory.
					function gzip_sourceFiles() {
						// Check sourceFiles array to see if any files left to process
						if (sourceFiles.length <= 0) {
							processComplete();
							return;
						}
						// set value to removed file from array
						var srcFile = sourceFiles.pop();
						// the source distribution directories
						var src = grunt.config.get('gz.files.source');
						var dist = grunt.config.get('gz.files.dist');
						// create the distribution directory if it does not exist
						if (!fs.existsSync(dist)) {
							fs.mkdirSync(dist);
						} else {
							// recurse the distribution directory to check for hidden files
							grunt.file.recurse(dist, function (abspath, rootdir, subdir, filename) {
								// skip hidden files
								if (filename.indexOf('.') === 0) {
									console.log('Hidden file ' + filename);
									gzip_sourceFiles();
									return;
								}
							});
						}
						// the file to be gzipped
						var fileToZip = grunt.file.read(src + '/' + srcFile, {
								encoding : null
							});
						if (srcFile.indexOf('.') === 0) {
							console.log('hidden file 2 ' + srcFile);
							gzip_sourceFiles();
							return;
						}
						grunt.log.writeln("Compressing " + srcFile + " ...");
						// zlib gzip method to compress the file and write to distribution directory
						zlib.gzip(fileToZip, function (err, gzipped) {
							grunt.file.write(dist + '/' + srcFile + '.gz', gzipped);
							grunt.log.ok("Compressed file written to " + dist);
							// recursively call ourself
							gzip_sourceFiles();
						});
					}
					// start the gzip process
					gzip_sourceFiles();
				});
			};
            
    + pulish the plugin as npm package 
    $ npm publish 
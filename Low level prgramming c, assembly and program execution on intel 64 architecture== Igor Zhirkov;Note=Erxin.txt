Low level prgramming c, assembly and program execution on intel 64 architecture== Igor Zhirkov;Note=Erxin


# Assembly language and computer architecture 
- basic computer architecture 
general purpose registers. They are interchangeable and can be used in many different commands.

Name    Alias       Description 
r0      rax         kinds of an accumulator 
r3      rbx         base addressing in early processor module 
r2      rdx         data input/output 
r4      rsp         address of the top most element in the hardware stack 
r5      rbp         stack frame's base 
r6      rsi         source index in string manipulation 
r7      rdi         destination index in string manipulation 
r8  
r9...r15            r10 which save cpu lfags


d for double word—lower 32 bits;

w for word—lower 16 bits;

b for byte—lower 8 bits.

r7b is the lowest byte of register r7;

r3w consists of the lowest two bytes of r3; and

r0d consists of the lowest four bytes of r0.

- Protection rings are one of the mechanisms designed to limit the applications’ capabilities for security and robustness reasons. 

- The rsp register holds an address of the topmost element of the stack. The instructions perform as follows

    + Stack grows toward zero address
    
    + Almost all kinds of its operands are considered signed integers and thus can be expanded with sign bit. 

    push with an argument B9_16 will result in the following data unit being stored on the stack 
    
    0xff b9, 0xffffffb9 or 0xff ff ff ff ff ff ff b9.

    push uses an 8-byte operand size. Thus an instruction push -1 will store 0xff ff ff ff ff ff ff ff on the stack
    
    
    + Most architectures that support stack use the same principle with its top defined by some register. 
    
    

# Assembly language
- environment 

complete assembler and C assignments:

Debian GNU\Linux 8.0 as an operating system.

NASM 2.11.05 as an assembly language compiler.

GCC 4.9.2 as C language compiler. This exact version is used to produce assembly from C programs. Clang compiler can be used as well.

GNU Make 4.0 as a build system.

GDB 7.7.1 as a debugger.

The text editor you like (preferably with syntax highlighting). We advocate ViM usage.

- window subsystem official guide located at: https://msdn.microsoft.com/en-us/commandline/wsl/install_guide .

    + install linux subsystem, run powershell in administrator 
    $ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
    
    check window version 
    win+r, type winver, the version should be 19041 
    or 
    $ ver 
    
    enable virutal platform 
    $ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
    
    + open window store and pick the linux version 
    
    + check current installed WSL1/2
    $ wsl --list --all
    
    $ set specific version 
    $ wsl --set-version <distribution name> <versionNumber>
    
    $ set default 
    $ wsl --set-default-version 2
    
- first assembly program 
global _start

section .data
message: db 'hello, world!', 10

section .text
_start:
    mov     rax, 1           ;system call number should be stored in rax
    mov     rdi, 1           ; argument #1 in rdi: where to write (descriptor)?
    mov     rsi, message     ; argument #2 in rsi: where does the string start?
    mov     rdx, 14          ; argument #3 in rdx: how many bytes to write?
    syscall                  ; this instruction invokes a system call
    
- program structure 
- Assembly language is, in general, case insensitive, but label names are not!
db—bytes;

dw—so-called words, equal to 2 bytes each;

dd—double words, equal to 4 bytes; and

dq—quad words, equal to 8 bytes.

//hello.asm
message: db 'hello, world!', 10

Intel architecture the term word was indeed used to describe a 16-bit data entry

- basic instructions 

mov, write a value into either register or memory 

The syscall instruction is used to perform system calls in *nix systems

    + rax, hold system call's number 
    + registers should hold its arguments, rdi, rdx, r10, r8 and r9 
    + execute syscall instruction 
> nasm -felf64 hello.asm -o hello.o
> ld -o hello hello.o
> chmod u+x hello

launch hello 
> ./hello 
hello, world! 

- terminate the program in a correct way 

section .data
message: db 'hello, world!', 10

section .text
global _start

_start:
    mov     rax, 1           ; 'write' syscall number
    mov     rdi, 1           ; stdout descriptor
    mov     rsi, message     ; string address
    mov     rdx, 14          ; string length in bytes
    syscall

    mov     rax, 60          ; 'exit' syscall number
    xor     rdi, rdi
    syscall                                                    
    
- output register contents 
section .data
codes:
    db      '0123456789ABCDEF'

section .text
global _start
_start:
    ; number 1122... in hexadecimal format
    mov rax, 0x1122334455667788

    mov rdi, 1
    mov rdx, 1
    mov rcx, 64
   ; Each 4 bits should be output as one hexadecimal digit
   ; Use shift and bitwise AND to isolate them
   ; the result is the offset in 'codes' array
.loop:
    push rax
    sub rcx, 4
   ; cl is a register, smallest part of rcx
   ; rax -- eax -- ax -- ah + al
   ; rcx -- ecx -- cx -- ch + cl
    sar rax, cl
    and rax, 0xf

    lea rsi, [codes + rax]
    mov rax, 1

   ; syscall leaves rcx and r11 changed
    push rcx
    syscall
    pop rcx

    pop rax
   ; test can be used for the fastest 'is it a zero?' check
   ; see docs for 'test' command
    test rcx, rcx
    jnz .loop

    mov     rax, 60 ;          invoke 'exit' system call
    xor      rdi, rdi
    syscall
    
- local labels,  . loop: it starts with a dot. This label is local.

- relative addressing 

lea rsi, [codes + rax]

;square brackets denote indirect addressing; the address is written inside them 

mov rsi, rax—copies rax into rsi 

mov rsi, [rax]—copies memory contents 

; lea means “load effective address.”

mov rsi, [rax]—copies memory contents (8 sequential bytes) starting at address, stored in rax, into rsi.

- order of execution 

Conditional jumps rely on contents of rflags register. jz address jumps to address only if zero flag is set. incorporates writing 1 in rbx if rax < 42, and 0 otherwise. 

cmp subtracts the second operand from the first; it does not store the result anywhere, but it sets the appropriate flags based on it

a test or a cmp instruction to set up necessary flags 

```
    cmp rax, 42
    jl yes
    mov rbx, 0
    jmp ex
yes:
    mov rbx, 1
ex:
```

ja (jump if above)/jb (jump if below) for a jump after a comparison of unsigned numbers with cmp.
jg (jump if greater)/jl (jump if less) for signed.
jae (jump if above or equal), jle (jump if less or equal) and similar.

- function calls 

The address now stored in the stack (former rip contents) is called return address. Any function can accept an unlimited number of arguments. The first six arguments are passed in rdi, rsi, rdx, rcx, r8, and r9

```
push rip
jmp <address>
```

two types of registers 
    + Callee-saved registers must be restored by the procedure being called. rbx, rbp, rsp, r12-r15, a total of seven registers.
    
    If you change rbx, rbp, rsp, or r12-r15, change them back!
    
    + Caller-saved registers should be saved before invoking a function and restored after. The other registers should be saved by yourself. 
    
    + the pattern of calling a function 
    
    1. Save all caller-saved registers you want to survive function call (you can use push for that).

    2. Store arguments in the relevant registers (rdi, rsi, etc.).

    3. Invoke function using call.

    4. After function returns, rax will hold the return value.

    5. Restore caller-saved registers stored before the function call.
    
never use rbp and rsp. They are implicitly used during the execution. rbp is the base pointer, rsp is the stack pointer 

system call saved arguments in different registers compare to function call such as fourth argument is in r10 but function is in rcx. system call implicit use rxc. System calls cannot accept more than six arguments.

example 
```
section .data

newline_char: db 10
codes: db '0123456789abcdef'

section .text
global _start

print_newline:
    mov rax, 1            ; 'write' syscall identifier
    mov rdi, 1            ; stdout file descriptor
    mov rsi, newline_char ; where do we take data from
    mov rdx, 1            ; the amount of bytes to write
    syscall
   ret

print_hex:
    mov rax, rdi

    mov rdi, 1
    mov rdx, 1
    mov rcx, 64           ; how far are we shifting rax?
iterate:
    push rax              ; Save the initial rax value
    sub rcx, 4
    sar rax, cl           ; shift to 60, 56, 52, ... 4, 0
                          ; the cl register is the smallest part of rcx
    and rax, 0xf          ; clear all bits but the lowest four
    lea rsi, [codes + rax]; take a hexadecimal digit character code

    mov rax, 1            ;

    push rcx              ; syscall will break rcx
    syscall               ; rax = 1 (31) -- the write identifier,
                          ;   rdi = 1 for stdout,
                          ; rsi = the address of a character, see line 29

    pop rcx

    pop rax               ; ˆ see line 24 ˆ
    test rcx, rcx         ; rcx = 0 when all digits are shown
    jnz iterate

    ret
_start:
    mov rdi, 0x1122334455667788
    call print_hex
    call print_newline

    mov rax, 60
    xor rdi, rdi
    syscall                                          
```
- working with data, different processors have different conventions on how the bytes are stored 

Big endian multibyte numbers are stored in memory starting with the most significant bytes.

Little endian multibyte numbers are stored in memory starting with the least significant bytes

    + Intel 64 is following the little endian convention. 
    
    + Big endian is a native format often used inside network packets (e.g., TCP/IP). 
    
    + example Little Endian and Big Endian for quad word number 0x1234
    
address     le      be 
demo        0x34    0x00 
demo+1      0x12    0x00 
demo+2      0x00    0x00    
demo+3      0x12    0x00 
demo+4      0x00    0x00
demo+5      0x12    0x00 
demo+6      0x00    0x12
demo+7      0x12    0x34 

    + Middle endian is a not very well-known notion. Assume we want to create a set of routines to perform arithmetic with 128-bit numbers. 
    
    7 6 5 4 3 2 1 0, 16 15 14 13 12 11 10 9 8
    
- strings 

    + strings start with their explicit length 

db 27, 'Selling England by the Pound'

    + special character denotes the string ending. traditionally the zero code is used called null-terminated 

db 'Selling England by the Pound', 0

- constant precomputation 

lab: db 0
...
   mov rax, lab + 1 + 2*3
   
- pointers and different addressing types. The pointer size is 8 bytes. Data usually occupies several memory cells (i.e., several consecutive addresses). The pointers hold no information about the pointed data length. We need to specify the size 

```
section .data
test: dq -1

section .text

mov byte[test], 1 ;1
mov word[test], 1 ;2
mov dword[test], 1 ;4
mov qword[test], 1 ;8
```

    + immediately 
    
    mov rax, 10
    
    + through a register 
    
    mov rax, rbx
    
    + direct memory addressing, transfers 8 bytes starting at the tenth address into rax
    
    mov rax, [10]
    
    + precomputation 
    buffer: dq 8841, 99, 00
    ...
    mov rax, [buffer+8]
    
    + base-indexed with scale and displacement 
    
    Address = base + index * scale + displacement
    
    * Base is either immediate or a register;
    * Scale can only be immediate equal to 1, 2, 4, or 8;
    * Index is immediate or a register; and
    * Displacement is always immediate.
     
    mov rax, [rbx + 4* rcx + 9]
    
    + all examples 
```
mov rax, [4*r9]
mov rdx, [rax + rbx]
lea rax, [rbx + rbx * 4]     ; rax = rbx * 5
add r8, [9 + rbx*8 + 7]
```

similar to push with data size 
push word 1

- assignment, input/output library 

































- reference 

https://asmtutor.com/
https://www.nasm.us/
https://www.nasm.us/xdoc/2.15.04/nasmdoc.pdf
https://llvm.org/docs/GettingStartedTutorials.html


# Setting up the network lab environment 
- EVE-NG installation steps and Red Hat KVM, WMware ESXi


# Virtual Memory

































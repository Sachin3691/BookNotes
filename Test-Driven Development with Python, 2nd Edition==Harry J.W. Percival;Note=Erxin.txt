Test-Driven Development with Python, 2nd Edition==Harry J.W. Percival;Note=Erxin

# Prerequisities and Assumptions 
- environment python 3.6 
- using PythonAnywhere (the PaaS startup I work for)
- basic HTML tutorial; there are a few at http://www.webplatform.org/
- taking a look at a Django tutorial. DjangoGirls is the best, most beginner-friendly tutorial
- tools 
python 3.6 
firefox 
django 1.11 
geckodriver, selenium 
virtualenv 
- companion video 
http://oreil.ly/1svTFqB


# part I. The basics of TDD and Django 
- obey the testing goat. do nothing until you have a test 
from selenium import webdriver

browser = webdriver.Firefox()
browser.get('http://localhost:8000')

assert 'Django' in browser.title

- get django up and running 
$ django-admin.py startproject superlists .

# Extending our functional test using the unittest model 
- import unittest model 
from selenium import webdriver
import unittest

- Using Selenium to Test User Interactions


# Saving user input: testing the database 

# Ensuring test isolation in functional test 

# Working incrementally 
- small design when necessary 


# Web development sine qua nons 

# Getting to a production-ready deployment 
- Gunicorn will need to know a path to a WSGI server, which is usually a function called

- Systemd to Make Sure Gunicorn Starts on Boot

- Saving our progress 
Donâ€™t use Django to serve your static files
Don' use django dev server in production 
Check your settings.py for dev-only settings 
Security 

# Automating deployment with fabric 
- Fabric is a tool which lets you automate commands that you want to run on servers. 
$ pip install fabric3 

- $ fab --help

# Spliting our tests into multiple files and a generic wait helper






















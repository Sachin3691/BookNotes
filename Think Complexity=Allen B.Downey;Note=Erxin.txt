Think Complexity=Allen B.Downey;Note=Erxin

# preface
- source for this book
http://greenteapress.com/comlexity
http://code.google.com/p/complexity

- outline of the course and notes
https://sites.google.com/site/compmodolin

- suggestions for autodidact, continue to be a work in progress at
http://www.facebook.com/thinkcomplexity

- contributor list, send email to 
downey@allendowney.com


# complexity science
- complex system, which are systems with many interacting components
http://en.wikipedia.org/wiki/Complex_systems

- paradigm shift
- the axes of scientific modules, complexity systems are often based on simple rules and implemented as compuations
deterministic -> stochastic
one, zero -> many
...

- a new kind of model
predictive -> explanatory
...

- a new kind of engineering
centralized -> decentralized
isolation -> interaction
design -> search, search for solution
...

- a new kind of thinking
Aristotelian logic -> many-valued logic, fuzzy logic to handle indeterminacy vagueness
Frequentist probability -> Bayesianism
Objective -> subjective
Physical law -> theory -> model, law likely to believe taht is objectively true, theory concede that it is subject to revision and model concedes that is based on simplification and approximation


# graphs
- what's a graph, is an abstraction used to model a system that contains discrete interconnected elements
    + the element are represented by nodes/vertices
    + interconnections are represented by edges
    + degree of a node is the number of edges it is connected to
    + wiki
    http://en.wikipedia.org/wiki/graph_(mathematics))
    
- complex system example, radioactive decay
http://en.wikipedia.org/wiki/Radioactive_decay

common useful process in applying graph algorithms
reduce, a real-world problem
apply, a graph algorithm
interpret, the result of the computation in terms of a solution to the original problem

- representing graphs, for example implementing a graph as dictionary of dictionaries
class Graph(dict):
    def __init__(self, vs=[], es=[]):
        '''create a new graph, (vs) is a list of vertices; (es) is a list of edges'''
        for v in vs:
            self.add_vertex(v)
            
        for e in es:
            self.add_edge(e)
            
    def add_vertex(self, v):
        self[v] = {}
        
    def add_edge(self, e):
        '''add (e) to the graph by adding an entry in both directions'''
        v, w = e
        self[v][w] = e
        self[w][v] = e

    a vertex is just an object that has a label attribute
    class Vertex(object):
        def __init__(self, label=''):
            self.label = label
            
        def __repr__(self):
            return 'Vertex(%s)' % repr(self.label)
            
        __str__ = __repr__
    

    class Edge(tuple):
        def __new__(cls, *vs):
            return tuple.__new__(cls, vs)
            
        def __repr__(self):
            return 'Edge(%s, %s)' % (repr(self[0]), repr(self[1]))
            
        __str__ = __repr__
    for mutable objects is most common to override __init__ and use the default implementation of __new__, but tuple is immutable, so you can't modify the elements of the tuple in __init__
       
- random graphs
http://en.wikipedia.org/wiki/Erdos-Renyi_model
http://www.renyi.hu/~p_erdos/1960-10.pdf

phase change
http://en.wikipedia.org/wiki/phase_transition

biography follow
http://en.wikipedia.org/wiki/paul_erdos
- connected graphs, there is a path from every node to every other node, generate it by breadth-first-search

- iterate from a dictionary
items(), iteritems(), iteritems is a iterator will be fast that items to travel a dictionary
        
limitation, iterators don't support index operations

iterator is a object support next() method

- generators, easiest way to make an iterator write a generator, which is a function that contains a yield statement
        
        
# analysis of algorithms
        
        






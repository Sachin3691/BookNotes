Windows iis7 and iis7.5 setup;Note =eshang

:For Asp.net developer
>Install iis7 from control panel and check 
    -iis metabase and ii6 configuration compatibility
    -asp.net
    -windows authentication
    -iis management consol
>run iis management from "run", typing inetmgr
>combine the visual studio website project to iis
    -create a new web site from iis
    -type full path to visual studio web site folder into "Physical path"
    -enable windows authentication change from disabled to enable
>In visual studio, change web site project configuration to use iis7 instead of asp.net development server
    -solution explore, select "website|start|options", change the section to something like this "use costom server and base url"

:Como configurar php y sobre ii7 in windows 7
>add application
>ejecutable add php.dll

:Installing iis7 or iis7.5 for roksbox
>iis manager
>righ hand sidebar, under actions, click on advanced settings
    -modify the physical path
    -turn on directory browsing, doulbe click directory browsing, click it to set to enable
    -add MP4 MIME type so iis will server MP4 files to MIME types
        -File name extension "mp4"
        -MIME type: "video/mpeg"
>enable Basic Authentication in iis to allow the some of the user browse the website. anonymouse authentication to allow everyone browse the website

:installing root certification, csr
>intermediate certificates
    -http://www.trustis.com/pki/healthcare/ops/fpsroot-der.crt
    -http://www.trustis.com/pki/healthcare/ops/healthcarett-der.crt
    -use "mmc" to install certificates snap
        -run mmc
        -click file and select add/remove snap
        -select computer account and click next
        -select local computer and click finish
        -click ok to close the add or remove snap-ins box
        -return to mmc
    -installing the root ca certificate
        -right click trusted root certification authorities, select all task
        -import
        -next, locate the root ca certificate file you downloaded earlier and click next
    -installing the issuing ca certificate
>certificate signing request generation
    -iis manager
    -server certificates
    -create certificate request...
    -a request window appear, the common name field should be "fully qualified domain name(FQDN)"
    -the customers connect to using ssl
    -for cryptographic service provider, choose microsoft rsa schannel cryptographic provider, bit length set 2048 
    -enter a file name and location to save your csr. you need this csr to enrol for your iis ssl certificate
>installing your ssl server certificate
    -paste the csr into an approperiately name text file
    -run iis manager
    -complete certificate request...
    -enter the location details and friendly name for the file you just created

:Everything a developer needs to know about iis7 and iis 7.5
>iis architecture
    -integrated pipeline & creating modules
    -choose between asp.net, classic, asp, php, perl, coldfusion, ruby, ...
    -WAS, Web Application Stress Tool
    -architecuture graphic
        user mode
        {
            configuration
            svchost.exe
            {
                www publishing service(w3svc)
                windows process activation service(was)
            }
            application pool
            {
                w3wp.exe
                {
                    extentions
                    ...
                }
            }
        }
        --------------------------------------------------------
        kernel mode
        {
            http.sys
        }
    -http request processing
        client request->http.sys->w3svc->was->w3wp.exe{begin, authenticate, authorize, ..., end}
                                               applicationHost.config
    -iss architecutre -configuration files
        machine.config->root web.config->{                        {
                                            site web.config         application web.config
                                            <system.web>        ->  <system.web>
                                            <system.webServer>      <system.webServer>
        applicationhost.config         ->}                        }
    -web.config has a 100kb file size limit
        on hklm\software\microsoft\inetstp\configuration
        create maxWebConfigFileSizeInKB(DWORD) with your value
>application pools
    -a set of w3wp.exe, that share the same configuration
    -isolation, better security, reliability and availability
    -consider: predefined application pool, classic .net appPool vs. defaultAppPool
    -security
    -web garden and other configurations
    -classic .net appPool, classic mode(pipeline)
        -backward compatibility with iis6.0
        -aspnet_isapi.dll is responsible for asp.net
        shoulbe be used only if the integrated mode fails
    -defaultAppPool - integrated mode(pipleline)
        iis and asp.net runtime is integrated
        based on modules
    -identity, determines the identity of the w3wp.exe
        application pool identity, when accessing all files necessary for the execution of w3wp
                                   accessing web.config
                                   running fastCGI
                                   running asp.net applications (default)
        authenticated user, when accessing static files
                            running isapi extensions
                            running cgi(default)
                            fastCGI( if impersonation is enable )
                            running asp.net(if impersonation is enable)
        virDir fixed credential, when accessing all application content                    
>integrated pipeline & creating modules
    -allow services provided by both native and managed modules to apply to all request
    -eliminates duplication of several ffeatures in iis and asp.net
    -simplifies site and application management
    -allows easy iis extensibility by managed modules
    -Modules
        system.web.iHttpModule
    -handlers
        system.web.iHttpHandler or system.web.iAsyncHttpHander
    -creating modules
        use class library template
        add reference to system.web.dll
        implement the interface system.web.iHttpModule
        on init(http.Applicationcontext context) subscribe for the appropriate event
        write the code for the event
        Deploy
            option1, bin folder of your site(if site specific)
            option2, GAC
        add to pipeline
>hosting applications & wcf services
    -applications can have their own application pool, virtual directories cannot
    -different applications running on the same site can have different configurations
    -hosting WCF services
        WAS, windows process activation service
        Non-Http protocols,
            tcp listener adapter
            named pipes listener adapter
            msmq listener adapter
        no hosting code required, but requires a *.svc file
        <%@serviceHost language="c#" service="namespace.class">
    enable WCF non-http activation components, windows components
    bind desired web site( usually defaut ) to a non-http port to support non-http-based activation
        appcmd set site "default web site" -+ bindings.[protocol='net.tcp', bindgInformation='808:*']
        appcmd set app "default web site/myWCFService"/enabledProtocols:http, net.tcp, net.pipe
        
        
        
        
        
        
        
        
        
        
        
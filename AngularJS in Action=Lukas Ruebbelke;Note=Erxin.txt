AngularJS in Action=Lukas Ruebbelke;Note=Erxin

# Introduction 
- the angularjs big picture 
    + module, serve as containers
    + config, config block of an angularjs application 
    + routes, allow you to define ways to navigate to specific states 
    + views, the view in angularjs is what exists after angularjs has compiled and rendered the dom with all of the javascript wiringin place 
    + $scope, is essentially the glue between the view and controller and rendered the dom with all of the javascript wiring in place 
    + controller, the controller is responsible for defining methods and properties that view and be bindto andinteract with 
    + directive, an extension of a view in angularjs which allows you to create custom reusable elements that encapsulate behavior, you can think of directives as components or decorators for your html 
    + service, services provide common functionality to an angularjs application 
    
- angularjs application structure 
module <html ng-app="modulename">
|
V
config 
|
V
routes 
|
+----------------------+
|                      |
V                      V
view<----$scope------->controller 
|                       |
V                       V
directive               service 

- build your first angularjs application, source code git repository 
https://github.com/angularjs-in-action/angello-lite

- the module, modules in angularjs serve as container to help you organize your application into logical units 

var myModule = angular.module("module-name", dependencies);

the second parameter is an array that accepts other sub-modules to provide addtional functionality.

after create module we could create necessary components 

myModule.factory("submodule-name", function(){
});

add module name to the ng-app attribute to set where you want the angularjs application to add in 
<html ng-app="modulename">
</html>

- views and controllers, model-view-viewModel 

    + use ng-controller directive to add controller 
    <div ng-controller="MainCtrl">
        {{MainCtrl.property}}
    </div>
    
    the name also support alias name, MainCtrl as alia-name 
    
    // app.js
    myModule.controller(’MainCtrl’, function () {
    	var main = this;
    	//...
    	main.stories = [{
    			title : ’First story’,
    			description : ’Our first story.’,
    			criteria : ’Criteria pending.’,
    			status : ’To Do’,
    			type : ’Feature’,
    			reporter : ’Lukas Ruebbelke’,
    			assignee : ’Brian Ford’
    		}, 
            ...
    	];
    	//...
    });
    
    use ng-repeat directive to bind multiple properties 
    ng-repeat="story in MainCtrl.stories"
    
    <!-- index.html -->
    <div ng-controller="MainCtrl as main">
        <div class="col-md-4">
            <h2>Stories</h2>
            <div class="callout"
                ng-repeat="story in main.stories"
                ng-click="main.setCurrentStory(story)">
                <h4>{{story.title}}</h4>
                <p>{{story.description}}</p>
            </div>
        </div>
    </div>

    binding event by ng-click 

- servies
    + create a custom service 
    // app.js
    myModule.service("customServiceName", function () {
        var service = this,
        stories = [{
                title : ’First story’,
                description : ’Our first story.’,
                criteria : ’Criteria pending.’,
                status : ’To Do’,
                type : ’Feature’,
                reporter : ’Lukas Ruebbelke’,
                assignee : ’Brian Ford’
            },
            //...
        ];
        service.getStories = function () {
            return stories;
        };
    });

    + use the custom service by automatic inject the service to the controller contructor function 
    // app.js
    myModule.controller(’MainCtrl’, function(customServiceName) {
    var main = this;
    //...
    main.stories = customServiceName.getStories();
    //...
    });

    + service are used for sharing common state and functionality 

- directive 
    + create a custom directive 
    // app.js
    myModule.directive(’story’, function(){
        return {
            scope: true,
            replace: true,
            template:’<div><h4>{{story.title}}</h4><p>{{story.description}}</p></div>’
        }；
    });

    the function return a directive definition object(DDO), that define how the directive is supposed to be configured 
    
    <div ng-controller="MainCtrl as main">
        <div class="col-md-4">
            <h2>Stories</h2>
            <story class="callout"
                ng-repeat="story in main.stories"
                ng-click="main.setCurrentStory(story)">
            </story>
            <!-- ... -->
        </div>
    </div>
    
    
# Structuring your angularjs application 
- hello angello 
- angularjs application structure 
/client
    /assets 
    /src 
        /app-name 
            /app 
                /animations 
                /controllers 
                /modules 
                /services 
                app.js 
            /dashboard 
                /controllers 
                /directives 
                /tmpl 
                dashboard.js 
            /login 
                /controllers
                /tmpl 
                login.js 
            /storyboard 
                /controllers 
                /directives 
                /tmpl 
                storyboard.js 
            /user 
            app-name.js 
    /tests 
    /vendor 
    index.html 
/node_modules 

in the index.html should reference angular.js and add ng-app tag to a html element 

in the app-name.js file we should create the angular modules for the app and declare sub module dependencies for the app-name module 

// client/src/angello/Angello.js
var myModule = angular.module(’Angello’,
		[
			’ngRoute’,
			’ngAnimate’,
			’firebase’,
			’ngMessages’,
			’Angello.Common’,
			’Angello.Dashboard’,
			’Angello.Login’,
			’Angello.Storyboard’,
			’Angello.User’,
			’auth0’,
			’angular - jwt’,
			’angular - storage’
		]);
        
// client/src/angello/storyboard/Storyboard.js
angular.module(’Angello.Storyboard’, [’Angello.Common’]);

the Storyboard module need to have access to the user story, it will be part of Angello.Common and it will be shared with Angello.Common 

// client/src/angello/storyboard/controllers/StoryboardController.js
angular.module(’Angello.Storyboard’)
.controller(’StoryboardCtrl’,
    function () {
        //...
});
     
don't put an empty array as the second parameter which may overwrite the module dependencies definition 

- basic routes and navigation, ngRoute, 
    + check full feature of ui router  https://github.com/angular-ui/ui-router
    
    routes allow you to define and route to a unique state of the application based on the current URL 
    
    in our main application we'll call myModule.config and pass in the $routeProvider service 
    
    // client/src/angello/Angello.js
    myModule.config(function ($routeProvider) {
    	$routeProvider
    	.when(’ / ’, {
    		templateUrl : ’src / angello / storyboard / tmpl / storyboard.html’,
    		controller : ’StoryboardCtrl’,
    		controllerAs : ’storyboard’
    	})
        .otherwise({redirectTo:"/"});
    });
     
    ngRoute is generally usedn tandem wth ng-view. When a route is matched with the $routeProvider it will look for the ng-view directive and then load and compile the template into it 
    
    <!-- client/index.html -->
    <html ng-app="Angello">
        <head></head>
        <body ng-controller="MainCtrl as main">
            <div class="navbar navbar-fixed-top navbar-default"></div>
            <div ng-view=""></div>
            <div class="modal"></div>
        </body>
    </html>
     
    you're only allowed to declare one ng-view on your page 
    
    we could make a route table by the $routeProvider service 
     
    // client/src/angello/Angello.js
    myModule.config(function ($routeProvider) {
    	$routeProvider
    	.when(’ / ’, {
    		templateUrl : ’src / angello / storyboard / tmpl / storyboard.html’,
    		controller : ’StoryboardCtrl’,
    		controllerAs : ’storyboard’
    	})
    	.when(’ / dashboard’, {
    		templateUrl : ’src / angello / dashboard / tmpl / dashboard.html’,
    		controller : ’DashboardCtrl’,
    		controllerAs : ’dashboard’
    	})
    	.when(’ / users’, {
    		templateUrl : ’src / angello / user / tmpl / users.html’,
    		controller : ’UsersCtrl’,
    		controllerAs : ’users’
    	});
    });
    
    we could have used ng-click and $location service to change the route 
    
- best practices 
    + controller should be lightweight and specific to the view they control 
    
    + controller should be oblivious to the world around
    
    + service should hold yourdomain model and do all of the leavy lifting include server sidecommunication
    
    + keep your declarative markup outside of your controllers, conversely keep your imperative logic outside of your views 
    
    + if you must programmatically manipulate the dom, then do it in the link function in a directive. a exception is a modal service 
    
    + keep your methods fine-grained and as functional as possible to make testing them easier 
    
    + style guide 
    Todd Motto’s Style Guide—https://github.com/toddmotto/angularjs-styleguide
    John Papa’s Style Guide—https://github.com/johnpapa/angularjs-styleguide
     
     
- reference book, Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin


# Make something with angularjs 
- what a view is in angularjs 
view is the html afterit has been compiled by angularjs 

controller is a javascript object which contain method and properties 

scope is the  glue between view and controller 

manually compile template 
$compile(element.contents())(scope);,
the content is the html and the scope object compile to the final output html 

- what is an angularjs controller 
    + a digest cycle in angularjs which keeps the view nad controller synchronized 
    template -compile-> view -change to view update model-> model 
                         A                                  |
                         +----change to model update view---+
                         
    + digest cycle
    dirty checking is the simple process of comparing a value with its previous value 
    angularjs perform dirty checking via a digest cycle that's controlled by $digest.$digest, it doesn't require to be called directly. if you want to init a digest cycle then use $apply, it calls $digest but has error-handling built around it 
    
    during the compilation phase $scope evaluates all of its properties and creates a watch expression for each one. the watch expression could be manually created too. automatic created watch expression will use angular.equals to compare 
    during the $digest cycle all watch expression for a scope object are evaluated 
    occasionally a property is chantged without angularjs knowing about it. manually kick off a digest cycle via $apply 
    
        * Event loop          |
        Event queue(wait) ----|---->    AngularJS 
            A                 |      $apply(function) ---> function()
            |                 |                              |
            |                 |                              V
            |                 |                              $eval 
            |                 |                          asynchronous queue 
            |                 |                             A        |
            |                 |                             |        |
            |                 |                             |        V 
            DOM render <------|----------------------------$digest loop  
           Native             |           JavaScript
                              |
    + controller as syntax, a new convention was introduced for working with controllers known as the controller-as syntax.
    ng-controller ="StoryboardCtrl as storyboard".  binding to a controller property from template, {{controller.someProperty}}
    
        * define a controller 
    
    angular.module('module-name')
            .controller('controller-name', function($scope){...}){
                var storyboard = this; //reference to the controller object 
                
                $scope.scopeProperty = 'value';
            };
    
    + angularjs events, angular event system use $broadcast and $emit 
    
    listening and responding to a specific event is handled by $on 
    $emit, sends event from a child upward to its parent 
    $broadcast, sends from a parent scope downward to its children 
    
    to broadcast an event from a service, you need to inject $rootScope
    
    + properties and expressions 
        * display stories with ng-repeat
        //define an array of data in controller 
        angular.module('Angello.Storyboard')
        .controller('StoryboardCtrl', function () {
        	var storyboard = this;
        	storyboard.stories = [{
        			"assignee" : "1",
        			"criteria" : "It tests!",
        			"description" : "This is a test",
        			"id" : "1",
        			"reporter" : "2",
        			"status" : "To Do",
        			"title" : "First Story",
        			"type" : "Spike"
        		},
                ...
            ];
        });
        
        //bind the property in template 
        <div class="list-area">
            <div class="list-wrapper">
                <ul class="list" ng-repeat="status in storyboard.statuses">
                    <h3 class="status">{{status.name}}</h3>
                    <hr/>
                </ul>
            </div>
        </div>
        
        angularjs is able to keep the instances of each item separate by implicity creating a child scope for each template that's created by ngRepeat 
        
        * one-way data binding, from angularjs 1.3 introduces a one-time binding {{::expression}}
        
        the one-way binding starts with :: 
        
        * there are some special properties created on the local scope of each ng-repeat instance, these incude $index, $first, $even 
        // Hypothetical Scenario
        <ul>
            <li ng-repeat="item in items" ng-click="ctrl.currentIndex == $index" >
                <h2>{{item.title}}</h2>
                <p ng-if="ctrl.currentIndex == $index”>
                    {{item.longDescription}}
                </p>
            </li>
        </ul>
        * using ng-repeat to iterate over a object 
        // Hypothetical Scenario
        <ul>
            <li ng-repeat="(key, item) in items">
                <h2>{{key}}</h2>
                <h3>{{item.title}}</h3>
            </li>
        </ul>
    
        * filters, filters allow you to filter the contents of a collection to give you exactly what you want based on some sort of predefined criteria. adding a pipe symbol and then declaring a filter. | filter: {status:status.name}
    
        <li class="story" ng-repeat="story in storyboard.stories| filter: {status:status.name}">
        
        * expressions, angularjs comme with some powerful built-in directives to capture user interactions, such as ngClick, ngBlur, ngFocus, ngSubmit, and so on 
        
        angular also allow for binging the input of form to a data structure using ngModel which allows for the implicit two-way binding of an input to a property in your controller 
        
        * display a story's details 
        angular.module('Angello.Storyboard')
            .controller('StoryboardCtrl', function() {
                var storyboard = this;
                storyboard.currentStory = null;
                storyboard.editedStory = {};
                ...
                storyboard.setCurrentStory = function(story) {
                storyboard.currentStory = story;
                storyboard.editedStory =
                angular.copy(storyboard.currentStory);
            };
        });
        
        <li class="story"
        ng-repeat="story in storyboard.stories | filter: {status:status.name}" ng-click="storyboard.setCurrentStory(story)">
            <article>
                <div>
                    <button type="button" class="close">×</button>
                    <p class="title">{{story.title}}</p>
                </div>
                    <div class="type-bar {{story.type}}"></div>
                <div>
                    <p>{{story.description}}</p>
                </div>
            </article>
        </li>
        
        The simplest element to work with in an AngularJS form is a text input, because you can bind the value of the input to a property using ngModel. 
        
        <input type="text" id="inputTitle" name="inputTitle" placeholder="Title"  ng-model="storyboard.editedStory.title" ng-required="true" ng-minlength="3" ng-maxlength="30" class="form-control">
        
        * populate options in a select control. AngularJS provides a similar directive called ngOptions that was created specifically for populating options in a select control
        
        <!-- client/src/angello/storyboard/tmpl/storyboard.html -->
        <select id="inputReporter" name="inputReporter"
            ng-model="storyboard.editedStory.reporter" ng-required="true"
            ng-options="user.id as user.name for user in storyboard.users"
            class="form-control">
            <option value="">Please select...</option>
        </select>
        
        * update/create story, use ng-click to trigger the update/create function from the controller 
        <button class="btn pull-right btn-default" ng-disabled="!storyboard.detailsForm.$valid" ng-click="storyboard.updateStory()">Update Story</button>
        
    + best practices and testing 
    
- Models and services 
- directives 
- animations 
- structuring your site with routes 
- forms and validations 

# Setting up Karma 

# Setting up a Node.js server 

# Setting up a firebase server 

# Running the app 











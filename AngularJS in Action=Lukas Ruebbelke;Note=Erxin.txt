AngularJS in Action=Lukas Ruebbelke;Note=Erxin

# Introduction 
- the angularjs big picture 
    + module, serve as containers
    + config, config block of an angularjs application 
    + routes, allow you to define ways to navigate to specific states 
    + views, the view in angularjs is what exists after angularjs has compiled and rendered the dom with all of the javascript wiringin place 
    + $scope, is essentially the glue between the view and controller and rendered the dom with all of the javascript wiring in place 
    + controller, the controller is responsible for defining methods and properties that view and be bindto andinteract with 
    + directive, an extension of a view in angularjs which allows you to create custom reusable elements that encapsulate behavior, you can think of directives as components or decorators for your html 
    + service, services provide common functionality to an angularjs application 
    
- angularjs application structure 
module <html ng-app="modulename">
|
V
config 
|
V
routes 
|
+----------------------+
|                      |
V                      V
view<----$scope------->controller 
|                       |
V                       V
directive               service 

- build your first angularjs application, source code git repository 
https://github.com/angularjs-in-action/angello-lite

- the module, modules in angularjs serve as container to help you organize your application into logical units 

var myModule = angular.module("module-name", dependencies);

the second parameter is an array that accepts other sub-modules to provide addtional functionality.

after create module we could create necessary components 

myModule.factory("submodule-name", function(){
});

add module name to the ng-app attribute to set where you want the angularjs application to add in 
<html ng-app="modulename">
</html>

- views and controllers, model-view-viewModel 

    + use ng-controller directive to add controller 
    <div ng-controller="MainCtrl">
        {{MainCtrl.property}}
    </div>
    
    the name also support alias name, MainCtrl as alia-name 
    
    // app.js
    myModule.controller(’MainCtrl’, function () {
    	var main = this;
    	//...
    	main.stories = [{
    			title : ’First story’,
    			description : ’Our first story.’,
    			criteria : ’Criteria pending.’,
    			status : ’To Do’,
    			type : ’Feature’,
    			reporter : ’Lukas Ruebbelke’,
    			assignee : ’Brian Ford’
    		}, 
            ...
    	];
    	//...
    });
    
    use ng-repeat directive to bind multiple properties 
    ng-repeat="story in MainCtrl.stories"
    
    <!-- index.html -->
    <div ng-controller="MainCtrl as main">
        <div class="col-md-4">
            <h2>Stories</h2>
            <div class="callout"
                ng-repeat="story in main.stories"
                ng-click="main.setCurrentStory(story)">
                <h4>{{story.title}}</h4>
                <p>{{story.description}}</p>
            </div>
        </div>
    </div>

    binding event by ng-click 

- servies
    + create a custom service 
    // app.js
    myModule.service("customServiceName", function () {
        var service = this,
        stories = [{
                title : ’First story’,
                description : ’Our first story.’,
                criteria : ’Criteria pending.’,
                status : ’To Do’,
                type : ’Feature’,
                reporter : ’Lukas Ruebbelke’,
                assignee : ’Brian Ford’
            },
            //...
        ];
        service.getStories = function () {
            return stories;
        };
    });

    + use the custom service by automatic inject the service to the controller contructor function 
    // app.js
    myModule.controller(’MainCtrl’, function(customServiceName) {
    var main = this;
    //...
    main.stories = customServiceName.getStories();
    //...
    });

    + service are used for sharing common state and functionality 

- directive 
    + create a custom directive 
    // app.js
    myModule.directive(’story’, function(){
        return {
            scope: true,
            replace: true,
            template:’<div><h4>{{story.title}}</h4><p>{{story.description}}</p></div>’
        }；
    });

    the function return a directive definition object(DDO), that define how the directive is supposed to be configured 
    
    <div ng-controller="MainCtrl as main">
        <div class="col-md-4">
            <h2>Stories</h2>
            <story class="callout"
                ng-repeat="story in main.stories"
                ng-click="main.setCurrentStory(story)">
            </story>
            <!-- ... -->
        </div>
    </div>
    
    
# Structuring your angularjs application 
- hello angello 
- angularjs application structure 
/client
    /assets 
    /src 
        /app-name 
            /app 
                /animations 
                /controllers 
                /modules 
                /services 
                app.js 
            /dashboard 
                /controllers 
                /directives 
                /tmpl 
                dashboard.js 
            /login 
                /controllers
                /tmpl 
                login.js 
            /storyboard 
                /controllers 
                /directives 
                /tmpl 
                storyboard.js 
            /user 
            app-name.js 
    /tests 
    /vendor 
    index.html 
/node_modules 

in the index.html should reference angular.js and add ng-app tag to a html element 

in the app-name.js file we should create the angular modules for the app and declare sub module dependencies for the app-name module 

// client/src/angello/Angello.js
var myModule = angular.module(’Angello’,
		[
			’ngRoute’,
			’ngAnimate’,
			’firebase’,
			’ngMessages’,
			’Angello.Common’,
			’Angello.Dashboard’,
			’Angello.Login’,
			’Angello.Storyboard’,
			’Angello.User’,
			’auth0’,
			’angular - jwt’,
			’angular - storage’
		]);
        
// client/src/angello/storyboard/Storyboard.js
angular.module(’Angello.Storyboard’, [’Angello.Common’]);

the Storyboard module need to have access to the user story, it will be part of Angello.Common and it will be shared with Angello.Common 

// client/src/angello/storyboard/controllers/StoryboardController.js
angular.module(’Angello.Storyboard’)
.controller(’StoryboardCtrl’,
    function () {
        //...
});
     
don't put an empty array as the second parameter which may overwrite the module dependencies definition 

- basic routes and navigation, ngRoute, 
    + check full feature of ui router  https://github.com/angular-ui/ui-router
    
    routes allow you to define and route to a unique state of the application based on the current URL 
    
    in our main application we'll call myModule.config and pass in the $routeProvider service 
    
    // client/src/angello/Angello.js
    myModule.config(function ($routeProvider) {
    	$routeProvider
    	.when(’ / ’, {
    		templateUrl : ’src / angello / storyboard / tmpl / storyboard.html’,
    		controller : ’StoryboardCtrl’,
    		controllerAs : ’storyboard’
    	})
        .otherwise({redirectTo:"/"});
    });
     
    ngRoute is generally usedn tandem wth ng-view. When a route is matched with the $routeProvider it will look for the ng-view directive and then load and compile the template into it 
    
    <!-- client/index.html -->
    <html ng-app="Angello">
        <head></head>
        <body ng-controller="MainCtrl as main">
            <div class="navbar navbar-fixed-top navbar-default"></div>
            <div ng-view=""></div>
            <div class="modal"></div>
        </body>
    </html>
     
    you're only allowed to declare one ng-view on your page 
    
    we could make a route table by the $routeProvider service 
     
    // client/src/angello/Angello.js
    myModule.config(function ($routeProvider) {
    	$routeProvider
    	.when(’ / ’, {
    		templateUrl : ’src / angello / storyboard / tmpl / storyboard.html’,
    		controller : ’StoryboardCtrl’,
    		controllerAs : ’storyboard’
    	})
    	.when(’ / dashboard’, {
    		templateUrl : ’src / angello / dashboard / tmpl / dashboard.html’,
    		controller : ’DashboardCtrl’,
    		controllerAs : ’dashboard’
    	})
    	.when(’ / users’, {
    		templateUrl : ’src / angello / user / tmpl / users.html’,
    		controller : ’UsersCtrl’,
    		controllerAs : ’users’
    	});
    });
    
    we could have used ng-click and $location service to change the route 
    
- best practices 
    + controller should be lightweight and specific to the view they control 
    
    + controller should be oblivious to the world around
    
    + service should hold yourdomain model and do all of the leavy lifting include server sidecommunication
    
    + keep your declarative markup outside of your controllers, conversely keep your imperative logic outside of your views 
    
    + if you must programmatically manipulate the dom, then do it in the link function in a directive. a exception is a modal service 
    
    + keep your methods fine-grained and as functional as possible to make testing them easier 
    
    + style guide 
    Todd Motto’s Style Guide—https://github.com/toddmotto/angularjs-styleguide
    John Papa’s Style Guide—https://github.com/johnpapa/angularjs-styleguide
     
     
- reference book, Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin


# Make something with angularjs 
- what a view is in angularjs 
view is the html afterit has been compiled by angularjs 

controller is a javascript object which contain method and properties 

scope is the  glue between view and controller 

manually compile template 
$compile(element.contents())(scope);,
the content is the html and the scope object compile to the final output html 

- what is an angularjs controller 
    + a digest cycle in angularjs which keeps the view nad controller synchronized 
    template -compile-> view -change to view update model-> model 
                         A                                  |
                         +----change to model update view---+
                         
    + digest cycle                      
- creating controllers to manage views 
- declaring properties and methods in a controller 
- binding to properties and methods in a controller 
- binding to properties and expressions in an angularjs template 
- best practices for creating views and controllers and how to test them 














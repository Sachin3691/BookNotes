Rust programming language;Note=Erxin

# Foreword
- https://doc.rust-lang.org/book/foreword.html


# Getting started
- installation 

    + linux or macos 
    $ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
    
    + on windows 
    
    https://www.rust-lang.org/tools/install
    https://visualstudio.microsoft.com/visual-cpp-build-tools/
    Windows 10 SDK and the English language pack components are included
    
    + update and uninstalling 
    $ rustup update
    
    + uninstall 
    $ rustup self uninstall
    
- hello world project 
    + create directory 
    + add main.rs 
    + add content 
    
```
fn main() {
    println!("Hello, world!");
}
```

    + run shell
```
$ rustc main.rs
$ ./main
Hello, world!
```

- an automatic formatter tool called rustfmt is under development. If you want to stick to a standard style across Rust projects, rustfmt will format your code in a particular style.

- hello cargo 

    + Cargo is Rust’s build system and package manager.

    $ cargo new hello_cargo
    
    + Cargo.toml, TOML (Tom’s Obvious, Minimal Language) format
    
```
[package]
name = "hello_cargo"
version = "0.1.0"
authors = ["Your Name <you@example.com>"]
edition = "2018"

[dependencies]
```

    Cargo expects your source files to live inside the src directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code. 

    + build 

    $ cargo build
    
    + check code 
    $ cargo check
    
    + release build and benchmark 
    $ cargo build --release 
    
    and benchmark with the executable in target/release

- programming a guessing game 

    + setup new project 
    
    + main.rs 
```
use std::io;

fn main() {
    println!("Guess the number!");

    println!("Please input your guess.");

    let mut guess = String::new();

    io::stdin()
        .read_line(&mut guess)
        .expect("Failed to read line");

    println!("You guessed: {}", guess);
}
```

bring the io (input/output) library into scope

an expect method that you can call. If this instance of io::Result is an Err value, expect will cause the program to crash and display the message 

    + default prelude types, prelude is the list of things that Rust automatically imports into every Rust program

    standard library, such as std::io::prelude


    std::marker::{Copy, Send, Sized, Sync, Unpin}. The marker traits indicate fundamental properties of types.
    std::ops::{Drop, Fn, FnMut, FnOnce}. Various operations for both destructors and overloading ().
    std::mem::drop, a convenience function for explicitly dropping a value.
    std::boxed::Box, a way to allocate values on the heap.
    std::borrow::ToOwned, The conversion trait that defines to_owned, the generic method for creating an owned type from a borrowed type.
    std::clone::Clone, the ubiquitous trait that defines clone, the method for producing a copy of a value.
    std::cmp::{PartialEq, PartialOrd, Eq, Ord }. The comparison traits, which implement the comparison operators and are often seen in trait bounds.
    std::convert::{AsRef, AsMut, Into, From}. Generic conversions, used by savvy API authors to create overloaded methods.
    std::default::Default, types that have default values.
    std::iter::{Iterator, Extend, IntoIterator, DoubleEndedIterator, ExactSizeIterator}. Iterators of various kinds.
    std::option::Option::{self, Some, None}. A type which expresses the presence or absence of a value. This type is so commonly used, its variants are also exported.
    std::result::Result::{self, Ok, Err}. A type for functions that may succeed or fail. Like Option, its variants are exported as well.
    std::string::{String, ToString}, heap allocated strings.
    std::vec::Vec, a growable, heap-allocated vector.

    + read line of code 
    io::stdin()
        .read_line(&mut guess)

- run the program 
$ cargo run 

- using a crate to get more functionality 

Cargo’s use of external crates is where it really shines.

Cargo.toml
```
[dependencies]
rand = "0.5.5"
```

https://crates.io/

Crates.io. Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use

Cargo.lock file, which was created the first time you ran cargo build and is now in your guessing_game directory. It required to explicitly upgrade the package in Cargo.lock file 

- updating a crate to get a new version 
$ cargo update 

- generating a random number 
after add dependency to rand crate to Cargo.toml

```
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng().gen_range(1, 101);

    loop {
        println!("Please input your guess.");

        let mut guess = String::new();

        io::stdin()
            .read_line(&mut guess)
            .expect("Failed to read line");

        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {}", guess);

        match guess.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}
```

Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies 


# Common programming concepts 
- variable with mut keyword 
- data types 
    + A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. 
    
        * number 
    
8-bit	i8	u8
16-bit	i16	u16
32-bit	i32	u32
64-bit	i64	u64
128-bit	i128	u128
arch	isize	usize

Decimal	98_222
Hex	0xff
Octal	0o77
Binary	0b1111_0000
Byte (u8 only)	b'A'

        * float point 
        
fn main() {
    let x = 2.0; // f64

    let y: f32 = 3.0; // f32
}

according to the IEEE-754 standard. The f32 type is a single-precision float, and f64 has double precision.

        * bool type 
        
let t = true;

let f: bool = false; 

        * character type, four types in size and represents a unicode scalar value 
let c = 'z';

from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive

    + compound types, can group multiple value into one type 
    
        * tuple 
let tup: (i32, f64, u8) = (500, 6.4, 1);

//pattern matching destruct 
let tup = (500, 6.4, 1);

let (x, y, z) = tup;

let x: (i32, f64, u8) = (500, 6.4, 1);

let five_hundred = x.0;

let six_point_four = x.1;

        * array type, every element should have the same type, on stack, want to ensure you always have a fixed number of elements.

let a = [1,2,3,5];

    + array type, have fixed length 
    
let a = [1, 2, 3, 4, 5];
    

let a: [i32; 5] = [1, 2, 3, 4, 5];

let a: [type:length] = [...];

let a = [3;5];
let a = [init_value;times];

    + accessing array elements, 

    let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];

- functions 
fn main() {
    println!("Hello, world!");

    another_function();
}

rust don't care the define sequence of the function 

    + function parameters 

fn another_function(x: i32) {
    println!("The value of x is: {}", x);
}

    + function body contain statements and expression 
Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, {}, is an expression

Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement. statement don't return a value;

fn main() {
    let x = 5;

    let y = {
        let x = 3;
        x + 1           //<- expression 
    };

    println!("The value of y is: {}", y);
}

    + function with return value 
fn five() -> i32 {
    5
}

fn main() {
    let x = plus_one(5);

    println!("The value of x is: {}", x);
}

fn plus_one(x: i32) -> i32 {
    x + 1
}
- comments 

//single comment 

- control flow 

    + if expression 
fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}

    + return value from a loop

fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {}", result);
}

the break keyword with the value counter * 2. After the loop, we use a semicolon to end the statement that assigns the value to result.

    + loops with while 
while number != 0 {
    println!("{}!", number);

    number -= 1;
}

    + loop through a collection with for 
let a = [10, 20, 30, 40, 50];

for element in a.iter() {
    println!("the value is: {}", element);
}


for number in (1..4).rev() {
    println!("{}!", number);
}
println!("LIFTOFF!!!");


# Understanding ownership 
- understand stack and heap, stack is fast than heap 
- string type 


let s = String::from("hello");

A String is made up of three parts, a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. The data is saved in the memory on the heap that holds the contents.

- In C++, this pattern of deallocating resources at the end of an item’s lifetime is sometimes called Resource Acquisition Is Initialization (RAII)

- ways variables and data interact, move 

let x = 5;
let y = x;

- Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.

- by default the assignment is shadow copy
let s1 = String::from("hello");
let s2 = s1;   //shadow copy 

- deap copy 
let s1 = String::from("hello");
let s2 = s1.clone();

println!("s1 = {}, s2 = {}", s1, s2);
    
- types that are Copy on stack:

All the integer types, such as u32.
The Boolean type, bool, with values true and false.
All the floating point types, such as f64.
The character type, char.
Tuples, if they only contain types that are also Copy. For example, (i32, i32) is Copy, but (i32, String) is not.

- ownership and functions 

```
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function...
                                    // ... and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it’s okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s. But because s's value was moved, nothing
  // special happens.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called. The backing
  // memory is freed.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope. Nothing special happens.
```

- return values and scope 

```
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
  // moved, so nothing happens. s1 goes out of scope and is dropped.

fn gives_ownership() -> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("hello"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// takes_and_gives_back will take a String and return one
fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}
```

    + return multiple value 
fn main() {
    let s1 = String::from("hello");

    let (s2, len) = calculate_length(s1);

    println!("The length of '{}' is {}.", s2, len);
}

fn calculate_length(s: String) -> (String, usize) {
    let length = s.len(); // len() returns the length of a String

    (s, length)
}

- references and borrowing 

```
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

we pass &s1 into calculate_length and, in its definition, we take &String rather than String.

s {name:ptr, value} -> s1 { name:ptr, len:5, capacity:5} -> heap data {index:0, h, index:1, e...}
























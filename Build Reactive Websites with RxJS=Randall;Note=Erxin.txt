Build Reactive Websites with RxJS=Randall;Note=Erxin

# Introduction
- RxJS,  “Reactive eXtensions to JavaScript”
- Other JavaScript libraries that implement the observable pattern include mobx, BaconJS, and Kefir.  These either focus on a specific use case for observables 
- reference 
https://pragprog.com/titles/rkrxjs/source_code

https://pragprog.com/book/rkrxjs/build-reactive-websites-with-rxjs



# Creating Observables 
- Introducing Rx Concepts 

Observables are like arrays in that they represent a collection of events, but are also like promises in that they’re asynchronous

This is distinct from a collection of promises (like Promise.all) in that an observable can handle an arbitrary number of events, and a promise can only track one thing. 

let myObs$ = clicksOnButton(myButton);

odd dollar sign hanging onto the end of the variable name.  This is a convention in the Rx world that indicates that the variable in question is an observable.

Observables only run when they know someone’s listening in to the data they’re emitting.

- building a stopwatch 
​import​ { Observable } ​from​ ​'rxjs'​;
​
​let​ tenthSecond$ = ​new​ Observable(observer => {
    ​​let​ counter = 0;
    ​observer.next(counter);
​    let​ interv = setInterval(() => {
        ​counter++;
    ​observer.next(counter);
    ​}, 100);
​   return​ ​function​ unsubscribe() { clearInterval(interv); };
});

- Rx ships with a whole bunch of these creation operators for common tasks. Such as create interval 

- An operator is a tool provided by RxJS that allows you to manipulate the data in the observable as it streams through.

​import​ { interval } ​from​ ​'rxjs'​;
​import​ { exampleOperator } ​from​ ​'rxjs/operators'​;
​
​interval(100)
​.pipe(
​   exampleOperator()
);

You can import operators from ’rxjs/operators’.

- manipulating data in flight with map,  Rx provides a map operator of its own
- work with event 

​let​ mouseDown$ = fromEvent<MouseEvent>(draggable, ​'mousedown'​);

- using a subscription,  a subscription is used to keep track of a specific subscription to that observable

​let​ someNewObservable$ = anObservable$.pipe(​   map(x => x * 2)​ );

​let​ aSubscription = someNewObservable$.subscribe(console.log);

aSubscription.unsubscribe();

- experimenting with observables

    + The of constructor allows for easy creation of an observable out of a known data source
​ 	​import​ { ​of​ } ​from​ ​'rxjs'​;
​ 	
​ 	​of​(​'hello'​, ​'world'​, ​'!'​)
​ 	.subscribe(console.log);

    + The take operator is related to that, but it simplifies things.  It’s passed a single integer argument, and takes that many events from the observable before it unsubscribes
    
​ 	​import​ { interval } ​from​ ​'rxjs'​;
​ 	​import​ { take } ​from​ ​'rxjs/operators'​;
​ 	
​ 	​// interval is an infinite observable​
​ 	interval(1000)
​ 	.pipe(
​ 	  ​// take transforms that into an observable of only three items​
​ 	  take(3)
​ 	)
​ 	​// Logs 0, 1, 2 as separate events and then completes​
​ 	.subscribe(console.log);

    //first three players get points 
    answer$
​ 	.pipe(
​ 	  filter(isAnswerCorrect),
​ 	  take(3)
​ 	)
​ 	.subscribe(updateScore);

    + The delay operator is passed an integer argument and delays all events coming through the observable chain by that many milliseconds









# Manipulating Streams 


# Managing Asynchronous Events 


# Advanced Async 


# Multiplexing Observables 


# Using HTTP in Angular 


# Building Reactive Forms in Angular 


# Advanced Angular 


# Reactive Game Development 




















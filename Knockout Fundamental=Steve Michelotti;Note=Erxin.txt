Knockout Fundamental=Steve Michelotti;Note=Erxin

# introduction 
- primary feature, introduction each parts and basic example 
- knock out course modules 
    + introduction 
    + observables 
    + bindings 
    + data features 
    
- what is knockout 
    + javascript mvvm fremework 
    mvvm - model-view-view model 
    model is object of your business domain 
    view user actually see 
    view model code representing data/operation on a UI 
    
- complementary to other javascript frameworks 
    * e.g. jquery coffeescript, prototype, etc 
    
- knockout elevator pitch, higher level view 
    + declarative bindings 
    + automatic ui refresh 
    + dependency tracking 
        
- a javascript tool that is indispensable for any javascript developer 
http://www.jsfiddle.net 

the main screen split into four parts, html, javascript, css and result, the result will display base on the content of the other three parts 

use the left panel to add additional resource to the current fiddle, such as knockout js library uri 
https://github.com/knockout/knockout/releases/download/v3.3.0/knockout-3.3.0.js
    + data-bind format 
    <element data-bind="property_name: view_model_property_name, [valueUpdate:'default/afterkeydown'], ..."/>
    
    + past html in the html panel 
//the default binding value change behavior is lost focus 
Name: <input type="text" data-bind="value: name"/>
//could custom the default bind value change behavior by 
Name: <input type="text" data-bind="value: name, valueUpdate:'afterkeydown'"/>
<input type="checkbox" data-bind="checked: nameVisible"/>
<p>
    Hello, <span data-bind="text: name, visible: nameVisible"></span>
</p>
<button data-bind="click: changeName">change name</button>

    + javascript content 
$(function(){
    var viewModel = {
        name: "bob",   //simple javascript string is not change notification, we required to use observable
        name: ko.observable("bob"), //use ko.observable type will include change notifications
        changeName: function(){
            this.name = "steve";
        },
        nameVisible: ko.observable(true)
    };
    ko.applyBindings(viewModel); //this is the core sentence make the knockout works 
});

- knockout resources to know from day1 
    + knockout home 
    http://knockoutjs.com 
    + documentation 
    + tutorials 
    
    + blogs 
    http://www.knockmeout.net 
    http://blog.stevensanderson.com
    + forms 
    http://groups.google.com/group/knockoutjs 
    
- summary 

# Observables 
- introduction 
- observables, three types, observable is implemented JavaScript functions, because not all browser supported javascript getters/setters 
    + internally KO's bindings observe the observables 
    //read a value 
    var name = viewModel.name();
    
    //write a value 
    viewModel.name("Steve");

    + the observables are function is important to understand this concept 
    
    + there are three types of observables 
        * observable, used for view model properties 
        * observable arrays, used for collections 
        * dependent observables, encapsulate one or more other observables, will automatic updated when any of the encapsulated observable changed 
    
- dependent observable 
    + encapsulate one or more observables 
    + need to manage this pointer 
    + syntax to create a dependent observable 
var viewModel = {
    firstName: ko.observable("joe"),
    lastName: ko.observable("blow")
};

viewModel.fullName = ko.dependentObservable(function(){
    return this.firstName() + " " + this.lastName();
}, viewModel);
    
//the reason why need to pass the viewModel instance is in javascript we need to management the this pointer 
    
- javascript reference, javascript this scope
http://stackoverflow.com/questions/710542/jquery-javascript-this-pointer-confusion
http://ryanmorr.com/understanding-scope-and-context-in-javascript/
http://www.quirksmode.org/js/this.html
http://www.learningjquery.com/2007/08/what-is-this

    + online javascript compiler 
http://math.chapman.edu/~jipsen/js/
    
scope is function-based and is unique to each invocation   
context is object-based Context is always the value of the this keyword which is a reference to the object that “owns” the currently executing code

    + When a function is called as a method of an object, this is set to the object the method is called on
var obj = {
    foo: function(){
        alert(this === obj);    
    }
};

obj.foo(); // true

    + when invoking a function with the new operator to create an instance of an object. When invoked in this manner, the value of this within the scope of the function will be set to the newly created instance
function foo(){
    alert(this);
}

foo() // window
new foo() // foo

    + execution context, Each invocation of a function from this point on will result in the creation of a new execution context.
    
- closures, Accessing variables outside of the immediate lexical scope creates a closure, This encapsulation allows us to hide and preserve the execution context from outside scopes while exposing a public interface and thus is subject to further manipulation. 

    + One of the most popular types of closures is what is widely known as the module pattern
var Module = (function(){
    var privateProperty = 'foo';

    function privateMethod(args){
        // do something
    }

    return {

        publicProperty: '',

        publicMethod: function(args){
            // do something
        },

        privilegedMethod: function(args){
            return privateMethod(args);
        }
    };
})();

    + Another type of closure is what is called an immediately-invoked function expression (IIFE), to preserve the global namespace as any variables declared within the function body will be local to the closure but will still live throughout runtime. 
(function(window){
          
    var foo, bar;

    function private(){
        // do something
    }

    window.Module = {

        public: function(){
            // do something 
        }
    };

})(this);

    + call and apply, These two methods inherent to all functions allow you to execute any function in any desired context. The call function requires the arguments to be listed explicitly while the apply function allows you to provide the arguments as an array
function user(firstName, lastName, age){
    // do something 
}

user.call(window, 'John', 'Doe', 30);
user.apply(window, ['John', 'Doe', 30]);
    
//ECMAScript 5 (ES5) introduced the Function.prototype.bind method that is used for manipulating context. here is the code for the unsupported browser
if(!('bind' in Function.prototype)){
    Function.prototype.bind = function(){
        var fn = this, 
        context = arguments[0], 
        args = Array.prototype.slice.call(arguments, 1);
        return function(){
            return fn.apply(context, args.concat([].slice.call(arguments)));
        }
    }
}
What is interesting to note here is that the arguments object is not actually an array 

this is useful for context is commonly lost; object-orientation and event handling. This is necessary because the addEventListener method of a node will always execute the callback in the context of the node the event handler is bound to. if you require the callback to be a method of instance, you will be required to adjust the context 
function MyClass(){
    this.element = document.createElement('div');
    this.element.addEventListener('click', this.onClick.bind(this), false);
}

MyClass.prototype.onClick = function(e){
    // do something
};

    + eval function will use the current data context to determine the this 
    
- dependent observables demo 
$(function(){
    var viewModel = {
        name: "bob",   //simple javascript string is not change notification, we required to use observable
        name: ko.observable("bob"), //use ko.observable type will include change notifications
        changeName: function(){
            this.name = "steve";
        },
        nameVisible: ko.observable(true)
    };
    viewModel.displayName = ko.dependentObservable(function(){
        return this.name() + " is" + (!this.nameVisible() ? " not":"") + "visible.";
    }, viewModel);
    ko.applyBindings(viewModel); //this is the core sentence make the knockout works 
});
    
use the dependentObservable property by 
<span data-bind="text: displayName"></span>
    
- observable arrays
    + use with collections 
    + detect changes to collection - add/remove 
    + use knockout array methods 
        * cross browser 
        * dependency tracking 
        * clean syntax 
        
    + primary methods in the observable array 
list.indexof
list.slice 
list.push 
list.pop 
list.unshift, inserts item at beginning 
list.shift, remove first item 
list.reverse 
list.sort
list.remove
list.removeAll

- observable arrays demo 
$(function(){
    var data = [{name:"bob"}, {name: "joe"}, {name: "john"}];
    
    var viewModel = {
        list: ko.observableArray(data),
        
        addItem: function() {
            this.list.push({name: "steve"});
        },
        
        removeItem: function(){
            this.list.pop();
        }
    };
    
    ko.applyBindings(viewModel);
});

use the viewModel 
<button data-bind="click: addItem">Add</button>
<button data-bind="click: removeItem">Remove</button>

<ul data-bind="template: {name: 'listTempl', foreach: list}">
</ul>

<script id="listTempl" type="text/html">
    <li data-bind="text: name"></li>
</script>
//use the template support by the knockout to display an observable arrays 
- summary 
    
    
# Bindings 
- introduce to bindings, 4 types of built-in bindings 
    + text and appearance 
    + forms 
    + control flow 
    + templates 
    
    + custom bindings 
- overview of bindings 
    + text and appearance 
    visible, toggle visible/invisible of dom element 
    text, text value 
    html, raw html of dom element 
    css, css classes of dom element 
    style, raw style attribute of dom element, rare to use 
    attr, any arbitrary attribute of dom element
    
    + binging relative for forms 
    click, handler invoked when dom element clicked 
    event, handler invoked for arbitrary event 
    submit, handler invoked when form submitted 
    enable, dom element enable if true 
    disable, dom element disabled if true 
    value, value of dom element 
    checked, attached to checkbox and radio button 
    options, collection of elements in dropdown or multi-select 
    selectedOptions, currently  selected item(s) of dropdown or multi-select 
    uniqueName ensure dom element has name attribute 
    
    + control flow, like a type of template binding 
    if, executes if condition is true 
    if not, executes if condition is false 
    foreach, executes for each item in collection 
    with, executes for object specified (child models), if you have a viewmodel that's got a child object and you can say with that child object, you can set the binding context to be that child object 

    + templates 
    javascript templates, traditional javascript template in <script> tag, jquery template is a old way to do it, knockout does dependent on that 
    
    containerless control flow(anonymous), template-less comment-based syntax 
    
- setup visual studio for knockout, use nuget to get knockout 
- old school templating with jquery templates 
    + add reference path to the js file have several benefit
/// <reference path="...js"/>

        * make visual studio type intelligence
        * self document the js file by explicit say the depended js files 
        
    + demo 
$(function (){
    var data = [
    ...];
    
    var viewModel = {
        tags: ko.observableArray(data), 
        tagToAdd: ko.observable(""), 
        
        //behaviors 
        addTag: function(){
            this.tags.push({Name: this.tagToAdd()});
        }
    };
    
    ko.applyBindings(viewModel);
});


//reference the viewmodel in html, the old way to use the template 
...
<div data-bind="template: tagsTempl"></div>
...
<script id="tagsTempl" type="text/html">
    <ul>
        {{each tags}}
            <li class="tagItem">
                <span>${Name}</span>
                <div>
                    <a href="#" class="tag-edit">Edit</a>
                    <a href="#" class="tag-delete">Delete</a>
                </div>
            </li>
        {{/each}}
    </ul>
</script>
...
<script src="@Url.Content("~/Scripts/bp-index.js")" type="text/javascript"></script>

- optimize binding with foreach, the previous template binding will update the whole observable arrays whenever the collection is changes. to make it more scalable we need to use foreach template binding, then don't required the {{each tags}} template tag, it's also a jquery template 
<ul data-bind="template: {name: 'tagsTempl', foreach: tags}"></ul>
...
<script id="tagsTempl" type="text/html">
    <li class="tagItem">
        <span>${Name}</span>
        <div>
            <a href="#" class="tag-edit">Edit</a>
            <a href="#" class="tag-delete">Delete</a>
        </div>
    </li>
</script>

- templating with native knockout templates, the previous example are dependent on the jquery template 
....
<ul data-bind="template:{name: 'tagsTempl', foreach: tags}">
...
<span data-bind="text: Name"></span>
...

//and remove all the jquery relative template syntax 

- control flow template, the previous template definition required to find the defined template names, if there are lots of template and reference the code may become ugly. the control flow template is used to solve this kinds of issues
    + comment base syntax 
<ul>
    <!--ko foreach: tags -->
        <li class="tagItem">
            <span data-bind="text: Name"></span>
            <div>
                <a href="#" class="tag-edit">Edit</a>
                <a href="#" class="tag-delete">Delete</a>
            </div>
        </li>
    <!--/ko-->
</ul>

//all the other script and template data-bind are not required 
    
    + data-bind base syntax 
<ul data-bind="foreach: tags">
    <li class="tagItem">
        <span data-bind="text: Name"></span>
        <div>
            <a href="#" class="tag-edit">Edit</a>
            <a href="#" class="tag-delete">Delete</a>
        </div>
    </li>
</ul>

- jquery-style event handling with ko.dataFor()
$(document).on("click", ".tag-delete", function(){
    var itemToRemove = ko.dataFor(this); //reference the DOM element binding to the user clicked 
    viewModel.tags.remove(itemToRemove);
});

- parent binding contexts 
var viewModel = {
    tags: ko.observableArray(data),
    tagToAdd: ko.observable(""),
    selectedTag: ko.observable(null),
    
    //behaviors 
    addTag: function(){
        this.tags.push({Name: this.tagToAdd()});
        this.tagToAdd("");
    },
    
    selectTag:function(){
        console.log("inside selectTag");
        viewModel.selectTag(this); 
    }
};

//use the selectTag event handler 
<ul data-bind="foreach:tags">
    //because  the selectTag callback is define in the parent viewModel to use it have to use the binding reference syntax $parent.property_name
    <li class="tagItem" data-bind="click: $parent.selectTag">
    ...
    </li>
</ul>

also support the $root, which is the template root not the document root 
    + parent binding contexts 
    $data, current data bound item 
    $parent, item from parent binding context 
    $parents, array containing all parent bindings contexts 
    $root, item at the top of the binding 

- nested observable, to support edit item in the grid, we need to use control flow template, the keywords is with 
<div id="tagDialog" data-bind="with: selectedTag">
    Tag Name:
    <input type="text" data-bind="value: Name"/>
</div>

//add jquery event handler 
$(documnt).on("click", ".tag-edit", function(){
    $("#tagDialog").dialog({
        buttons:{
            Save:function(){$(this).dialog("close");},
            Cancel:function(){$(this).dialog("close");}
        }
    });
});

there is a knockout mapping plugin to help create observable models 

- custom bindings 
    + do not limit yourself to built-in bingings
    + custom bindings, the most useful extensibility point of knockout, there are two kinds of function at your disposal 
    
ko.bindingHandlers.yourBindingName = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel){
    //first binded 
    },
    update: function(element, valueAccessor, allBindingsAccessor, viewModel){
    //called when binded value changed 
    }
};
    
- custom binding demo 
    + use event binding to support use enter as the input method 
event:{keypress: keyPressEventHandler}

    + another way to implement it is used custom binding 
ko.bindingHandlers.executeOnEnter = {
    init: function(element, valueAccessor, allBindingAccessor, viewModel){
        var value = valueAccessor(); //the returned value is a function 
        $(element).keypress(function(event){
            var keyCode = (event.which? event.which : event.keyCode);
            if(keyCode == 13){ //enter keycode 
                value.call(viewModel);  //pass the view model is used to set the this 
                return false;
            }
            return true;
        });
    }
}

var viewModel = {
    ...
    addTag: function(){
        this.tags.push({Name: this.tagToAdd()});
        this.tagToAdd("");
    },
    ...
};
//use the custom binding in the html 
data-bind="executeOnEnter:addTag"


# Data features 
- KO utilities
ko.utils.unwrapObservable
ko.utils.compareArrays
ko.utils.arrayRemoveItem
ko.utils.arrayPushAll
ko.utils.arrayMap(arrayInstance, func)
ko.utils.arrayIndexOf
ko.utils.arrayForEach
ko.utils.arrayFirst
ko.utils.arrayFilter

- demo, use protected observable to undo any unwanted changes for a observable property 
    + extend the protected observable object 
ko.protectedObservableItem = function(item){
    for(var param in item){
        if(item.hasOwnProperty(param)){
            this[param] = ko.protectedObservable(item[param]);
        }
    }
    
    this.commit = function(){
        for(var property in this)
        {
            if(this.hasOwnProperty(property) && this[property].commit)
            {
                this[property].commit();
            }
        }
    }
}

ko.toProtectedObservableItemArray = function(sourceArray){
    var drillItems = ko.utils.arrayMap(sourceArray, function(item){
        return new ko.protectedObservableItem(item);
    });
    
    return drillItems;
}
- data features 
    + ko.toJS(ko.observalbeObjs), javascript object with just data and no knockout constructs 
    + ko.toJSON(ko.observalbeObjs), produces JSON string representing view model's data (calls ko.toJS() internally)
    
    + these methods are convenience method to works with ajax call 
- debugging with ko.toJSON 
<div data-bind="text: ko.toJSON($data)"></div>

the $data is the root of the knockout viewmode, it is a parent binding contexts 

- putting it all together 
    + use event binding to binding to mouseover event 

    + use css binding to change the element display, such as high light 

    + use the control flow to control the item display, to dynamic change the editable or readonly view, use comment control flow is clearly display which kinds of template is used by edit or display 

- resources 
knockout, http://knockoutjs.com 
knock me out, http://knockmeout.net 
knockout tutorials, http://learn.knockoutjs.com
knockout source, https://github.com/SteveSanderson/knockout/
stackoverflow
steve michelotti blog, http://geekswithblogs.net/michelotti
plugins, https://github.com/knockout/knockout/wiki/Plugins
recipes of knockout, https://github.com/knockout/knockout/wiki/Recipes



















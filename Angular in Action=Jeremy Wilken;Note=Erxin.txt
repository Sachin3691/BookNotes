Angular in Action=Jeremy Wilken;Note=Erxin

# Introduction 
- release time 2018

# A modern web platform 
- after version 2.0 it is called Angular instead of AngularJS 
- features 
dedicate cli 
offline rendering 
desktop, mobile, browser based execution env 
comprehensive ui component library such as material design(http://material.angular.io)

- primary use cases 
    + server rendering 
    + performance in the browser 
    + SEO, Universal rendering means we can detect crawlers and render the site for them
    + multiple platforms 
    
- mobile 
    + ionic 
    + nativescript 
    + react native, it is possible to use react native engine to render angular for mobile 
    + window universal 
    + electron
    + progress web apps 
    
- UI libraries 
    + angular material, https://github.com/angular/material2 
    + covalent https://teradata.gihub.io/covalent, it is extend the angular material
    + clarity, https://vmware.github.io/clarity, from wmware 
    + ng-bootstrap, https://ng-bootstrap.github.io 
    + kendo ui, https://www.telerik.com/kendo-angular-ui/ 
    + primeng, http://www.primefaces.org/primeng/ rich collection of ui components 
    + wijmo, http://wijmo.com/angular2/ containing compex data grid components 
    + ionic, promarily for mobile 
    + fuel-ui, http://fuelinteractive.github.io/fuel-ui/
    
- custom elements, www.w3.org/TR/custom-elements/, Every Angular component is a custom element and fulfills the four tenets (and more) that we expect to get from a custom element.

- Shadow DOM, http://www.w3.org/TR/shadow-dom, isolate styling behaviors inside of a component. Shadow DOM provides a way to truly encapsulate your component HTML and CSS from other parts of the page

Developers should be familiar with the standard Light DOM, defining the standard DOM behaviors with regard to element styling and visibility. When you write a CSS rule, the CSS selector is the only way to limit which elements receive that particular styling. Light DOM with these systems, it doesn’t change the underlying behavior that someone could still manage to break your whole application by adding a single rule that doesn’t adhere to the guidelines.

- templates, https://www.w3.org/TR/html5/semantics-scripting.html#the-template-element. allow us to create isolated fragments of the DOM to use in our components. Our custom elements need to have some kind of internal structure, and often we’ll need to be able to reuse this markup

Templates are often used with the Shadow DOM because it allows you to define the template and then inject it into the shadow root. 

- javascript modules 
- observables, explain how observable works, http://www.manning.com/books/rxjs-in-action
- typescript 


# Build your first angular app 
- javascript reference 
https://developer.mozilla.org/en-US/docs/Web/JavaScript

- component 
the styleUrls property contains an array of links to any CSS files that should be loaded for this component.

- App module, tell angular what's available to render 
- The application must be bootstrapped at runtime to start the process of rendering.
- Pipes only modify the data before it is displayed, and do not change the value in the controller
- The host selector is a way to specify that you want the styles to apply to the element that hosts the element, so in this case it will look at the Summary component element itself rather than the contents inside it


# App essentials 
- entities in angular 
    + modules, help you organize dependencies into discrete units 
    + components, new elements that will compose the majority of your application's structure 
    + directives, objects that modify elements to give them new capabilities or change behaviors 
    + pipes, functions that format data before it's rendered 
    + services, reusable objects that fill niche roles such as data access or helper utilities 
    
- modules, decorating with @NgModule 
@NgModule({
    declarations:[],
    imports:[],
    bootstrap:[AppComponent],
    export class AppModule{}
})
export class AppModule{}

- components 
encapsulation 
isolation 
reusability 
event-based 
customizable 
declarative 

- directives 
    + built in 
NgClass, conditionally apply a class to a element 
NgStyle, Conditionally apply a set of styles to an element 
NgIf, Conditionally insert or remove an element from the dom 
NgFor, 
NgSwith, Conditionally display an item from a set of options 
    + customize directives 

- Pipes, using |, start with a colon(:). change the data format and keep the data unchanged in the controller 
- Services, code does repetitive tasks 
@Injectable()
export class service{}

- how angular begins to render an app 
    + just in time Jit compiler and ahead of time compiler 
    + Jit, compiling after all asset have loaded 
    + Aot, render the content before send to the browser 
    + dependency injection 
    + change detection 
    angular creates a special class known as change detector 
    
    Two mode for changes to be triggered OnPush mode and Default mode 
    + template expressions and bindings 
- interpolation 
{{expression}}
- property binding 
<p [textContent]="user.name"></p>

- attribute bindings 
<input id="username" type="text" [attr.aria-required]="isRequired()" />

- event binding 


# Component basics 
- example code 
git clone -b start https://github.com/angular-in-action/datacenter.git

- composition and lifecycle of a copmonent 
    + component requires 
    @Component() 
    Template 
    Controller, The controller is the class that is decorated with @Component(), and it contains all the properties and methods for the component
    
    + Optional injection modifiers 
    Inputs 
    Providers and hosts 
    
    + Optional output modifiers 
    Outputs 
    Animations 
    
    + injection and output modifiers 
    Styles and encapsulation 
    Lifecycle hooks 

- reference 
https://angular.io/api/core/Component

- Components have several distinct parts 
    + requirements
@Component, component metadata decorator 
Template 
Controller 

    + Optional injected modifiers 
Inputs 
Providers 
Lifecycle hooks 
Styles and encapsulation 
Outputs 
Animations 

- lifecycle
component registered with the module 
template includes a component 
component is instantiated 
controller constructor() called 
compiler renders any child components in template 
|                                       A
|                                       |
component lifecycle hoooks begin        when component needs to be updated
|
V                                       |
application state changes --------------+
        |
        when component is no longer needed 
        | 
        V 
        component removed from view 
        
    + lifecycle hooks 
    OnInit 
    OnChanges, fires any time the input bindings have changed 
    OnDestroy 
    DoCheck, any time that change detection runs to determine whether the aplication needs to be updated. Let you impelent your own type of change detection 
    AfterContentInit, fire when angular checks the content children 
    AfterViewInit 
    AfterViewChecked 
    
-  Any component passed in through NgContent would be considered a Content Child.
- Types of components 
    + App component, root app 
    + display component, stateless component that reflects the values passed into it 
    + data component, helps get data into the app 
    + route component, using the router, each route will render a component 

- Input basics, Input decorator, which is used to decorate any property that you want to define as an input.

@Input() 
public set prop(v){
    ...
}

@Input fieldName:type;


# Advanced components 
- how to use the OnPush capability to reduce the amount of work Angular has to do to improve rendering efficiency. 
- Change detection and optimizations. Changes are always triggered by some asynchronous activity. 
- Angular has two change detection modes: Default and OnPush. 
- You can also use the OnPush mode, which explicitly tells Angular that this component only needs to check for changes if one of the component inputs has changed.

Change detection starts at the top and goes down the tree by default, or with OnPush only goes down the tree with changed inputs.

https://vsavkin.com/change-detection-in-angular-2-4f216b855d4c

    + example 
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';     


 @ Component({
    selector: '[app-nodes-row]',
    templateUrl: './nodes-row.component.html',
    styleUrls: ['./nodes-row.component.css'],
    changeDetection: ChangeDetectionStrategy.OnPush     
})
class C implements OnChanges {
    @Input('used') value;
    @Input('available') max;
    
    ngOnChanges(changes) {
        if (changes.value && isNaN(changes.value.currentValue)) this.value = 0;
        if (changes.max && isNaN(changes.max.currentValue)) this.max = 0;    
    }
}

    + if only the value input was changed in the parent, then only the change.value property will be set on the lifecycle hook.
    
    + There’s another way to intercept and detect changes using the OnChanges lifecycle hook. This allows you to run some logic that can check for changes that exist in your component that Angular can’t detect automatically. 
    
- Communicating between components 

Inputs are the way to push data down the component tree to children, and events are the way to pass data and notifications up through the component tree to parents.
    
View child access to a child component controller in a component controller. local variable access to a child component controller in a component's template. ViewChild is a decorator for a controller property, like Inject or Output, which tells Angular to fill in that property with a reference to a specific child component controller. It only limited to directly derived component.

define the child controller in the parent controller, then we can access child controller properties 
 @ViewChild(DashboardComponent) dashboard: DashboardComponent;     
 

- Output events and template variables 
child event onRefresh we defined Output
 @Output() onRefresh: EventEmitter<null> = new EventEmitter<null>();     

in the parent template 
<app-navbar (onRefresh)="dashboard.generateData()"></app-navbar>

- Adding styles to a component

    + include a linked CSS file into your application index.html file or reference the file in the .angular-cli.json file styles property (which we already did for Ng-bootstrap). These styles are generic and will be applied to any matching elements in the page. 
    
    + inline css 
    + component-linked css, using the component's styleUrls property. 
    + component-inline css 
    + Global css 
    + inline css style element 
    + inline declaration 
    + component styles 
    + styleUrls property linked to a css file 
    
- style encapsulate
    + none, avoid to do so 
    styles bleed out 
    
    global styles bleed in 
    
    templates are unmodified, :host or :shadow have no context because no Shadow DOM 
    + emulated, simulate by adding unique css selectors to your css rules at runtime 
    styles are isolated, styles and markeup adds the unique attributes to ensure that CSS rules don't collide with global styles 
    
    styles bleed in, global styling can still bleed into the component 
    
    unique selectors, the rendered DOM gets a unique attribute
    
    
    + native, use native shadow dom 
    Native browser support for Shadow DOM is limited and can be checked at http://caniuse.com/#feat=shadowdom. 
    
    there is also a good polyfill to backfill the support at http://webcomponents.org/polyfills/shadow-dom/
    
    angular injecting shared styles into different shadow-dom 
    
- dynamically rendering component 
 
use the encapsulation property of the component metadata to set it like
encapsulation: ViewEncapsulation.None 

    + using ng-bootstrap modal for dynamic components 
import {
    NgbActiveModal
}
from '@ng-bootstrap/ng-bootstrap';
  

@ Component({
    selector: 'app-nodes-detail',
    templateUrl: './nodes-detail.component.html',
    styleUrls: ['./nodes-detail.component.css']
})export class NodesDetailComponent {
     @ Input()node;
         
    constructor(public activeModal: NgbActiveModal) {}
}

    + open the src/app/dashboard/dashboard.component.html file and add the following code line to the bottom of the template—we need to give the Modal service a place to render the component:
    <tempalte ngbModalContainer></template>
    
    + Secondly, we need to add a new entry to our App module. When the CLI processes Angular, it needs to know what components might be rendered dynamically

    + dynamically creating a component and rendering it 
    ViewContainerRef, a reference to an element in the application that angular understands.  a ViewContainerRef. It will get the element based on the template variable and then parse it as a ViewContainerRef type
    
    ViewChild, give us the ability to reference an element in our controller as a ViewContainerRef type 
    
    ComponentFactoryResolver, an angular service that gets us the component factory 


# Services 
- types 
    + Non-injectableservices are JavaScript objects that aren’t tied into Angular’s DI system and are just imported into the file
    
    + Injectable services are the typical Angular services that provide a feature for the application and work with Angular’s DI system to be injected into components
    
    + Helper services are services that make it easier to use a component or feature
    
    + Data services are for sharing data across the application
    
- Components are for displaying the UI, and services are meant to help manage data or other reusable snippets of logic.

    + we can provide a different class that will be injected as the same name

providers: [  { provide: PostsService, useClass: PostsServiceV2 }],

    + module level providers are injected from the module, component level providers create individual instances at their level in the component tree 

- ways to override a provider 
    + alias, injector remap one service to another 
    + class, the injector can inject a new instance of a different service 
    + factory, construct the instance of a service yourself 
    + value, can be injected in place of a service 

- HTTPINtercepter services 
import { HttpEvent, HttpInterceptor, HttpResponse, HttpHandler, HttpRequest } from '@angular/common/http';

https://angular.io/api/common/http/HttpRequest.


# Routing
- reference 
https://angular.io/api/router/Routes

- Instead of using the term page to describe different places the user can access, I’ll use the term view to describe these different contexts, such as login view or dashboard view.

- define a router 
import {
    RouterModule,
    Routes
}
from '@angular/router';

const appRoutes: Routes = [{
        path: 'login',
        component: LoginComponent
    }, {
        path: '',
        redirectTo: '/forums',
        pathMatch: 'full'
    }, {
        path: '**',
        component: NotFoundComponent
}, ];

imports: [    BrowserModule,    FormsModule,    ClarityModule.forRoot(),    ForumsModule,    RouterModule.forRoot(appRoutes)  ],

<div class="content-container">  
    <div class="content-area">    
        <router-outlet></router-outlet>  
    </div>
</div>

- route properties 
path, a string or wildcard, defines the URL path to use for a route
component
redirect to, a string of another valid route
pathMatch, 'full' 'prefix', determines the matching startegy 
children, an array of routes 
outlet, string of a named outlet 
loadChildren, a string with a path to a module 
canActivate, array of references to guards, allows you to prevents a route from being used under certain conditions 

- Angular provides a service that contains the currently active route metadata. It gives you access to a wealth of information, described at https://angular.io/api/router/ActivatedRoute

this.route.params.subscribe((params: Params) => {
    this.threads = this.forumsService.forum(params['forum_alias']).threads;     
});
     
- Secondary routes also called auxiliary routes, where some part of the application appears but maintains a different state from the main application.. Secondary routes are designed to allow the user to draft an email while continuing to use the email application.

    + navigation between secondary routes 

    + five types of gards 
    CanActive 
    CanActiveChild 
    CanDeactivate 
    CanLoad 
    Resolve, access route data and pass data to the component's list of providers 
    
- best practices 
keep url short 
favor path aprameters over query variables 
prefer to spell out words 
use hyphens when using multiple words 
limit the use of seconary routes 
carefully consider the correct guard to use for your use case 
use feature modules so you can use lazy loading 
keep it simple 


# Build custom directives and pipes 
- why need?
reuse in template 
improve component matainability 
testability 

- directives, A structural directive can render DOM, but an attribute directive can only modify properties. 
    +  recall that you must prefix ngIf with *—for example, *ngIf="loaded = true". This means that NgIf is a structural directive and is able to control whether the DOM element is rendered or not. 
    +  ngClass directive is an attribute directive and doesn’t have the * when it’s used, such as [ngClass]="{active: true}". NgClass simply modifies the properties of the element

- Directives can inject services just like a component, which gives you access to some interesting capabilities.
- define attribute directive
import {
    Directive,
    ElementRef,
    Input,
    OnInit
}
from '@angular/core';
     
 @ Directive({
    selector: '[cardType]'      
})export class CardTypeDirective implements OnInit {
    @ Input()cardType: number = 0;
    @ Input()increaseClass = 'increase';
    @ Input()decreaseClass = 'decrease';
    constructor(private el: ElementRef) {}
         
    ngOnInit() {
             
        if (this.cardType) {
                  if (this.cardType >= 0) {
                      this.el.nativeElement.classList.add(this.increaseClass);
                      this.el.nativeElement.classList.remove(this.decreaseClass);
                     
            } else if (this.cardType <= 0) {
                      this.el.nativeElement.classList.add(this.decreaseClass);
                      this.el.nativeElement.classList.remove(this.increaseClass);
                     
            } else {
                      this.el.nativeElement.classList.remove(this.increaseClass);
                      this.el.nativeElement.classList.remove(this.decreaseClass);
                     
            }
                 
        }
             
    }
         
}

- define structural directive
import {
    Directive,
    Input,
    TemplateRef,
    ViewContainerRef
}
from '@angular/core';
     

import {
    Directive,
    Input,
    TemplateRef,
    ViewContainerRef
}
from '@angular/core';
     

setTimeout(() => {
          this.viewContainer.createEmbeddedView(this.templateRef);
         
}, ms);
     
}
      constructor(     

    private templateRef: TemplateRef < any > ,       private viewContainer: ViewContainerRef     ) {}
     
}

- reference, to learn how angular view works https://angular.io/api/core/ViewContainerRef and is a good place to go to learn more in-depth about how views work in Angular.

- crafting custom pipes. There are fundamentally two types of pipes: pure and impure. Pure pipes maintain no state information, and impure pipes maintain state.

import {
    Pipe,
    PipeTransform
}
from '@angular/core';
     

import {
    CurrencyPipe,
    PercentPipe
}
from '@angular/common';
import {
    StockInterface
}
from '../services/stocks.service';

 @ Pipe({
    name: 'change'      
})     export class ChangePipe implements PipeTransform {
    constructor(private currencyPipe: CurrencyPipe, private percentPipe: PercentPipe) {}
         
    transform(stock: StockInterface, showPercent: boolean = true): any {
             
        let value = `${this.currencyPipe.transform(stock.change, 'USD', 'symbol', '.2')}`;
        if (showPercent) {
                  value += ` (${this.percentPipe.transform(stock.changeInPercent, '.2')})`;
        }
        return value;
             
    }
}
  

reference in the component 
<span class="mdl-layout-title">{{'Stock Tracker' | changeDetector}}</span>
  
  
# Form 
- reactive forms and template forms 
-  by adding the NgModel directive we can turn it into an Angular form control.
<input name="customer" mdInput placeholder="Customer Name" [(ngModel)]="customer.name">
  
<md-card-content>  
<md-input-container>    
<input name="customer" mdInput placeholder="Customer Name" [(ngModel)]="customer.name">     
</md-input-container>  
<md-input-container>    
<input name="email" mdInput type="email" placeholder="Email" [(ngModel)]="customer.email">     
  
- form control validation properties 
valid, valid for all validations 
invalid has at least one invalid validation 
disabled 
enabled 
errors, contains keys with validations that are invalid or null when all are valid 
pristine, has not yet been changed by the user 
dirty 
touched, in focus 
untouched 

- G_VALIDATORS contains a list of default validation dependencies,
- It automatically implements an NgForm on a form even if you don’t declare a directive 

<form *ngIf="customer" #form="ngForm" (ngSubmit)="save()">

- reactive forms, where you have immutable data structures and your views never mutate them directly. That means no two-way binding is allowed.

 Template-driven forms only have one shared model, and because values are being constantly synced between the two, there may be timing issues of values changing in multiple places.
 
reactive forms is that you can use an observable to watch a particular form control for changes

    + implementation 
export class InvoiceFormComponent implements OnInit {
invoiceForm: FormGroup;

invoice: Invoice;
customer: Customer;
customers: Customer[];
total = 0;
constructor(private loadingService: TdLoadingService, private invoicesService: InvoicesService, private router: Router, private dialogService: TdDialogService, private customersService: CustomersService, private formBuilder: FormBuilder, private route: ActivatedRoute) {
    this.invoiceForm = this.formBuilder.group({

            id: [''],
            service: ['', Validators.required],
            customerId: ['', Validators.required],

            rate: ['', Validators.required],
            hours: ['', Validators.required],
            date: ['', Validators.required],
            paid: ['']
        });
}

- watching changes 

Observable.combineLatest(this.invoiceForm.get('rate').valueChanges, this.invoiceForm.get('hours').valueChanges).subscribe(([rate = 0, hours = 0]) => {
    this.total = rate * hours;
});

- custom validators with reactive forms 
import { AbstractControl, ValidatorFn } from '@angular/forms';

export function HoursValidator(control: AbstractControl) : { [key: string]: any } {     
  return (Number.isInteger(control.value * 4)) ? null : { hours: true };     
}


//using the validator 
this.invoiceForm = this.formBuilder.group({
        id: [''],
        service: ['', Validators.required],
        customerId: ['', Validators.required],
        rate: ['', Validators.required],
        hours: ['', [Validators.required, HoursValidator]],
             
        date: ['', Validators.required],
        paid: ['']
    });

- custom form controls, Angular provides the ControlValueAccessor interface as a way to implement a custom control that works with forms


# Testing your application 
- End-to-end (e2e) testing, also called integration testing, is a way of testing the application as a whole.
- common side effects of a service and why you should stub them 
Asynchronous 
external dependencies 
internal state 
redirects 

- recommend using fakeAsync when you can, but note that it doesn’t help you deal with HTTP calls.
- e2e tests using Protractor, a tool that uses the WebDriver API to remotely control a browser. Protractor was written for AngularJS
- e2e tests should focus on user flows, and unit tests should focus on the specific entity’s behavior.
- When I fix a bug, I try to write a test to verify that the bug won’t happen again. I suggest you make it a habit


# Angular in production 
- production build 
$ ng build --prod 

use production environment 
use minification 
bundle assets 
sets the base 
filename hashing 
file copying 
tree shaking
AoT, ahead of time compilation 

- optimize for target browser 
- progressive web apps, https://developers.google.com/web/progressive-web-apps
reliable 
fast 
engaging, feel like a natural app on the device 

- internationalization (i18n)
    + identify format and static messages i an application 
    + extract the messages from the application with $ng xi18n will generate a Xliff 1.2, Xliff 2 or XMB format file 
    + a translator will taking the list of original language into other language 
    + using the CLI 

- server side rendering or pre-rendering 

























































  
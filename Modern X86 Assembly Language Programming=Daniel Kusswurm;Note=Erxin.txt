Modern X86 Assembly Language Programming=Daniel Kusswurm;Note=Erxin

# Introduction
- assembly language enable developer to take full advantage of a processor's entire computational resource suite 

- Development tool 
visual studio 

c++ and microsoft macro assembler 

- sample code requirements 
http://www.apress.com/9781484200650

- create sample code and modules are callble from C++ 

- terminology and conventions 
function, subroutine or procedure 

thread, is the smallest unit of execution that is managed and scheduled by an operation system 

task or process, is a collection of one or more threads that share the same logical memory space 

application or program, is a complete software package that contains at least one task 

x86-32 and x86-64, describe 32-bit and 64-bit aspects, resources or capabilities of a processor 

x86-SSE, streaming SIMD extension

x86-AVX for advanced vector extension 

- additional resources 

Intel 64 and IA-32 arechitectures software developer's manual -- combined volumes 1, 2A, 2B, 2C, 3A, 3B and 3D(order number 325462)

references, http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html


# X86-32 Core Architecture 
- SIMD, single instruction multiple-data operations 

SSE2, extended the floating point capabilities 
SSE3, hyper-threading

- Data Types, a wide variety of data types 
signed/unsigned integers, scalar, single-precision and double precision floating point values, characters and text strings and packed values 

- fundamental data types, 
byte, 8b            character, integers, binary coded decimal (BCD) values 
word, 16            character, integers  
double word, 32     integers, single precision floating point 
quadword 64         integers, double precision floating point, packed integers 
quintword 80         double extended precision floating point 
double quadword 128 packed integers, packed floating point 
quad quadword 256    packed integers, packed floating point 

80bit quintword is used by the x87 FPU to support double extended-precision floating-point and packed BCD values 

fundamental data types larger than a single byte are sored in consecutive memory location starting with the least significant byte at the lowest memory address. 

this type of in-memory data arrangement is called little endian 

all the fundamental data type is align at the lower bit in the memory 

normally x86 process does not require proper alignment of multi-byte fundamental data types in memory except for x86 SSE and x86 AVX instruction set 

recommended all multi-byte fundamental data types be properly aligned whenever possible in order to avoid potential performance penalties 

- numerical data types, can be divided into type subtypes, scalar and packed. scalar data types are used to perform calculation with discrete values 
signed integers     8       char 
                    16      short 
                    32      int, long 
                    64      long long 
unsigned integers   8       unsigned char 
                    16      unsigned short 
                    32      unsigned int, unsigned long 
                    64      unsigned long long 
floating point      32      float 
                    64      double 
                    80      long double 
                    
c/c++ support for the 80 bit double extended precision floating point data encoding is not universal 

x86 fpu supports three different scalar floating point encoding ranging in length from 32 to 80 

- Advanced Vector Extensions (AVX) are extensions to the x86 instruction set architecture for microprocessors

- packed data types which are employed to perform SIMD calculations using either integers or floating point values 

package size(bits)        data element type             number of items 
64                         8bit integers                    8 
                            16                              4 
                            32                              2
128                         8                               16 
                            16                              8
                            32                              4
                            64                              2
                            single precision floating point 4 
                            double precisoin floating point 2 
256                         ...                    

- miscellaneous data types, including strings, bit field, bit strings, and binary-coded decimal values 

an x86 string is contiguous block of bytes, words or doubleword. it used to support c/c++ char and wchar_t implemented using byte or word 

binary-coded-decimal (BCD) type is a representation of a decimal digit 0-9 using a 4 bit unsigned integer 

- internal architecture x86-32 processor partition into several distinct execution units 
    + core execution unit 
    + x87 FPU 
    + SIMD execution units 

an execution task must use the core execution unit and the other two is optional 

register list 
    + segment registers, define a logical memory model for program execution and data storage. segment register initialization and management is normally handled by the operation system. a segment register contain a segment selector which is used to index a segment descriptor table which define the segment operation characteristics 
    CS, code 
    DS, data 
    SS, stack 
    ES, 
    FS,
    GS
    + general purpose registers. used to perform logical arithmetic and address calculations 
    can be employed for temporary storage as pointer to data items that stores in memory 
    AL, BL, CL, DL is the lower 8 bit of EAX, EBX, ECX, EDX, AX,BX, CX, DX is the lower 16 bit 
    general-purpose registers the x86-32 instruction set impose some noteworthy restrictions how they can be used. for example, imul(signed multiply) and idiv(signed divide) instruction use the EDX register to hold the high-order double word of a product or dividend 
    string instruction require that the address of the source and destination operands be placed in the ESI and EDI, ECX as the count register. 
    EAX 
    EBX 
    ECX 
    EDX 
    ESI 
    EDI 
    EBP, used as a base pointer to access data items that are stored on the stack. ESP can also be a base pointer. EBP can be a general purpose too 
    ESP, use to support stack related operations such as function calls and returns. always point to the stack top most item of stack. it is possible to use as general purpose register but strongly discouraged 
    + program status and control. 
    EFLAGS 
    + instruction pointer 
    EIP 
    + x87 register stack MMX registers 
    R7 (MM7)
    R6 (MM6)
    R5 (MM5)
    R4 (MM4)
    R3 (MM3)
    R2 (MM2)
    R1 (MM1)
    R0 (MM0)
    + AVX/SSE registers
    YMM0/XMM0 
    YMM1/XMM1 
    YMM2/XMM2 
    YMM3/XMM3 
    YMM4/XMM4
    YMM5/XMM5 
    YMM6/XMM6 
    YMM7/XMM7 
    + x87 Control, status, and tag registers 
    + AVX/SSE control and status 
    MXCSR 
    
- segment registers, a segment register contains a segment selector. use segment registers to define a logical memory model for program execution and data storage 
    
- general purpose registers

EAX     AX AH AL 
32      15    7 0 
    
- convention uses for general purpose register which start from 8086. modern programming perspective is that certain register usage is tend to be observed when writing x86-32 assembly code 

EAX, accumulator 
EBX, memory pointer, base register 
ECX, loop control, counter 
EDX, integer multiplication, integer division 
ESI, string instruction source pointer, index register 
EDI, string instruction destination pointer, index register 
ESP, stack pointer 
EBP, stack frame base pointer 

the convention is not the same as a calling convention define in high-level programming language such as c++ 

- EFLAGS register, a series of status bit 
bit name                        symbol             use 
0   carry flag                    cf               status 
1   reserved                                       1
2   parity flag                   pf               status     
3   reserved                                       0 
4   auxiliary carry flag          af               status  
5   reserved                                       0        
6   zero flag                     zf               status 
7   sign flag                     sf               status 
8   trap flag                     tf               system 
9   interrupt enable flag          if               system 
10  direction flag                df               control 
11  overflow flag                 of               status 
12  i/o privilege level bit 0     iopl             system
13  i/o privilege level bit 1     iopl             system
14  nested task                    nt              system 
15  reserved                                       0 
16  resume flag                    rf               system 
17  virtual 8086 mode              rf               system 
18  alignment check                ac               system 
19  virtual interrupt flag         vif              system 
20  virtual interrupt pending       vip              system 
21  id flag                         id              system
21-31 reserved                                      

the most important bits in the EFLAGS register are the following status flags: auxiliary carry flag (AF), carry flag (CF), overflow flag (OF), parity flag (PF), sign flag (SF), and zero flag (ZF). 

The auxiliary carry flag denotes a carry or borrow condition during binary-coded decimal addition or subtraction. 

The carry flag is set by the processor to signify an overflow condition when performing unsigned integer arithmetic. It is also used by some register rotate and shift instruction

which defines the auto increment direction (0 = low-to-high addresses, 1 = high-to-low addresses) of the EDI and ESI registers during execution of the string instructions. 

The remaining bits in the EFLAGS register are used exclusively by the operating system to manage interrupts, restrict I/O operations, and support program debugging. They should never be modified 

- instruction pointer 

The jmp (Jump) and jcc (Jump if Condition is Met) instructions also transfer program control by modifying the contents of the EIP register. 

- Instruction operands 
    + example 
        * immediate 
        
        mov exa, 42 
        imul ebx, 11h 
        
        * register 
        mov eax, ebx 
        inc ecx 

        * memory 
        mov eax, [ebx]
        add eax, [val1]
        sub word ptr [edi], 12   

The multiplicative product’s high-order and low-order doublewords are stored in EDX and EAX, respectively.

the word ptr is used in the final memory example is an assembler operator acts like a C++ cast operator. 

the last example, the value 12 is subtracted from a 16 bit value whose memory location is specified by the contents of edi register
equal to *(short*)edi -= 12 in cpp 

- memory addressing modes, four separate components to specify a
memory operand. The four components include a fixed displacement value, a base register, an index register, and a scale factor.

Effective Address = BaseReg + IndexReg * ScaleFactor + Disp

The base register (BaseReg) can be any general-purpose register; the index register (IndexReg) can be any general-purpose register except ESP; displacement (Disp) values are constant offsets that are encoded within the instruction; valid scale factors (ScaleFactor) include 1, 2, 4, and 8. The size of the final effective address (EffectiveAddress) is always 32 bits. 

    + support eight different memory operands 

Disp                                mov eax,[MyVal]
BaseReg                             mov eax,[ebx]
BaseReg + Disp                      mov eax,[ebx+12]
Disp + IndexReg * SF                mov eax,[MyArray+esi*4]
BaseReg + IndexReg                  mov eax,[ebx+esi]
BaseReg + IndexReg + Disp           mov eax,[ebx+esi+12]
BaseReg + IndexReg * SF             mov eax,[ebx+esi*4]
BaseReg + IndexReg * SF + Disp      mov eax,[ebx+esi*4+20]

The scale factors facilitate easy access to the elements of arrays that contain fundamental data types such as integers, single-precision floating-point values, and double precision floating point values.

- instruction set overview the status flags in the EFLAGS register

Condition Codes,        Mnemonic Suffixes, and Test Conditions
Above,                  A,                 CF==0 && ZF==0
Neither below or equal, NBE, 
Above or equal,         AE,                 CF==0
Not below,              NB,  
Below,                  B,                  CF == 1         
Neither above nor eq,   NAE
Below or eq,            BE                  CF==1||ZF==1 
Not above,              NA,                 
Equal,                  E,                  ZF==1 
Zero,                   Z,                  ZF 
Not equal,              NE,                 ZF==0
Not zero,               NZ,                 
Greater,                G,                  ZF==0 && SF==0F 
Neither less nor eq,    NLE                 
Greater or equal,       GE,                 SF==0F 
Not less                NL                  
Less,                   L,                  SF!=0F
Neither greater nor eq, NGE,                
Less or equal,          LE,                 ZF==1 || SF!=0F
Not greater,            NG 
Sign,                   S,                  SF==1
Not sign,               NS                  SF==0
Carry,                  C,                  CF==1
Not carry,              NC,                 CF==0
Overflow,               O,                  OF==1
Not overflow            NO,                 OF==0
Parity,                 P,                  PF==1
Parity even,            PE,               
Not parity,             NP,                 PF==0 
Parity odd,             PO

- instruction group into 
data transfer 
data comparison 
data conversion 
binary arithmetic 
logical 
rotate and shift 
byte set and bit strings 
string 
flags 
control transfer 
miscellaneous 

- data transfer, GPR, general purpose register 
mov, copies data to a GPR or memory location from a GPR or immediate value 
cmovcc, conditionally copied data from a memory or GPR to a GPR, cc in the mnemonic denotes a condition code 
push, push GPR, memory location or immediate value onto stack 
pop
pushad, pushes the contents of all eight GPRs onto the stack 
popad, pop the stack to restore the contents of all GPRs the stack value for ESP is ignored  
xchg, exchange data between two GPRs or a GPR and a memory location, the processor uses a locked bus cycle if the register-memory form of the instruction is used 
xadd, exchanges data between two GPRs or a GPR and memory location. the sum of the two operands is then saved to the destination operand 
movsx, sign-extend the contents of a GPR or memory location and copies the result value to a GPR 
movzx, zero-extend the contents of a GPR or memory location and copies the result to a GPR 

- binary arithmetic perform addition, subtraction, multiplication, division using signed and unsigned integers etc 

add, 
adc, adds the source operand destination and teh state of EFLAGS.CY 
sub, 
sbb, subtract the sum of the source operand and EFLAGS.CY from the destination operand 
imul, performs a signed multiply between two operands support multiple forms, include AL, AX, EAX as an implicit operand 
mul, performs an unsigned multiply between the source operanda nd the AL 
idiv, perform a signed division 
div, 
inc, adds one to the specified operand. not affect the value of EFLAGS.CY 
dec, 
neg, computes the two's complement value of the specified operand 
daa, adjusts the contents of the AL register following an add instruction using packed BCD values in order to produce a correct BCD result 
das, adjusts the contents of the AL register following a sub instruction using packed BCD values in order to produce a correct BCD result 
aaa, adjusts the contents of the AL register following an add instruction using unpacked BCD values 
aas, adjusts the contents of the AL register following a sub instruction using unpacked BCD values in order to produce a correct BCD result 
aam, adjusts the contents of the AX register following a mul instruction using unpacked BCD values in order to produce a correct BCD result 
aad, adjusts the content of the AX register to prepare for an unpacked BCD division. this instruction is applied before a div instruction that uses unpacked BCD values 

- data comparison 
cmp, compare two operands by substracting the source operand from the destination and then sets the status flag 
cmpxchg, compares the contents of register AL, AX, EAX with the destination operand and performs an exchange based on the results 
cmpxchg8b, compares EDX:EAX with an 8 byte memory operand and performs an exchange based on the result 

- data conversion , sign-extend an integer value in the AL, AX, or EAX etc 

cbw, sign-extends AL and saves the result in AX 
cwde, AX to EAX 
cwd, AX to pair DX:AX 
cdq, EAX to EDX:EAX 
bswap, reverse the bytes of a value in 32 bit GPR which converts the original value from little endian ordering to big endian ordering or vice versa 
movbe, loads the source operand into a temporary register, reverse the bytes and saves the result to destination operand. one of the operands must be a memory location and other is GPR 
xlatb, covnerts the value contained in the AL register to another value using a lookup table pointed to the EBX register 

- logical, the processor updates status EFLAGS.PF, EFLAGS.SF EFLAGS.ZF 

and, bitwise AND 
or, bitwise inclusive OR 
xor, exclusive OR
not 
test, calculates the bitwise AND of the source and destination operand and discard the results. it is used to set the status flag 

- rotate and shift 
rcl, rotate to left and include EFLAGS.CY 
rcr, to right include EFLAGS.CY 
rol, rotate to left 
ror, rotate to right 
sal/shl, arithmetic left shift of the specified operand 
sar, arithmetic right shift of the specified operand 
shr, logical right shift of the specified operand 
shld, double precision logical left shift using two operands 
shrd, right shift 

- byte set and bit string 














































Modern X86 Assembly Language Programming=Daniel Kusswurm;Note=Erxin

# Introduction
- Development tool 
visual studio 

c++ and microsoft macro assembler 

- sample code requirements 
http://www.apress.com/9781484200650

- terminology and conventions 
funcion, subroutine or procedure 

thread, is the smallest unit of execution that is managed and scheduled by an operation system 

task or process, is a collection of one or more threads that share the same logical memory space 

application or program, is a complete software package that contains at least one task 

x86-32 and x86-64, describe 32-bit and 64-bit aspects, resources or capabilities of a processor 

x86-SSE, streaming SIMD extension

x86-AVX for advanced vector extension 

- additional resources 

Intel 64 and IA-32 arechitectures software developer's manual -- combined volumes 1, 2A, 2B, 2C, 3A, 3B and 3D(order number 325462)

references, http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html


# X86-32 Core Architecture 
- SIMD, single instruction multiple-data operations 

SSE2, extended the floating point capabilities 
SSE3, hyper-threading

- Data Types, a wide wariety of data types 
signed/unsigned integers, scalar, single-precision and double precision floating point values, characters and text strings and packed values 

- fundamental data types, 
byte, 8b            character, integers, binary coded decimal (BCD) values 
word, 16            character, integers  
double word, 32     integers, single precision floating point 
quadword 64         integers, double precision floating point, packed integers 
quintword 80         double extended precision floating point 
double quadword 128 packed integers, packed floating point 
quad quadword 256    packed integers, packed floating point 

80bit quintword is used by the x87 FPU to support double extended-recision floating-point and packed BCD values 

fundamental data types larger than a single byte are sored in consecutive memory location starting with the least significant byte at the lowest memory address. 

this type of in-memory data arrangement is called little endian 

all the fundamental data type is align at the lower bit in the memory 

normally x86 process does not require proper alignment of multi-byte fundamental data tpes in memory except for x86 SSE and x86 AVX instruction set 

- numerical data types 
signed integers     8       char 
                    16      short 
                    32      int, long 
                    64      long long 
unsigned integers   8       unsigned char 
                    16      unsigned short 
                    32      unsigned int, unsigned long 
                    64      unsigned long long 
floating point      32      float 
                    64      double 
                    80      long double 
                    
c/c++ supportfor the 80 bit double extended precision floating point data encoding is not universal 

x86 fpu supports three different scalar floating point encoding ranging in length from 32 to 80 

- packed data types which are employed to perform SIMD calculations usingeither integers or floating point values 

package size(bits)        data element type             number of items 
64                         8bit integers                    8 
                            16                              4 
                            32                              2
128                         8                               16 
                            16                              8
                            32                              4
                            64                              2
                            single precision floating point 4 
                            double precisoin floating point 2 
256                         ...                    

- miscellaneous data types, including strings, bit field, bit strings, and binary-coded decimal values 

an x86 string is contiguous block of bytes, words or doubleword. it used to support c/c++ char and wchar_t 

- internal architecture x86-32 processor partition into several distinct execution units 
    + core execution unit 
    + x87 FPU 
    + SIMD execution units 

an execution task must use the core execution unit and the other two is optional 

register list 
    + segment registers, define a logical memory model for program execution and data storage. segment register initialization and management is normally handled by the operation system. a segment register contain a segment selector which is used to index a segment descriptor table which define the segment operation characteristics 
    CS, code 
    DS, data 
    SS, stack 
    ES, 
    FS,
    GS
    + general purpose registers. used to perform logical arithmetic and address calculations 
    can be employed for temorary storage as pointer to data items that stores in memory 
    AL, BL, CL, DL is the lower 8 bit of EAX, EBX, ECX, EDX, AX,BX, CX, DX is the lower 16 bit 
    general-purpose registers the x86-32 instruction set impose some noteworthy restrictions how they can be used. for example, imul(signed multiply) and idiv(signed divide) instruction use the EDX register to hold the high-order doubleword of a product or dividend 
    string instruction require that the address of the source and destination operands be placed in the ESI and EDI, ECX as the count register. 
    EAX 
    EBX 
    ECX 
    EDX 
    ESI 
    EDI 
    EBP, used as a base pointer to access data items that are stored on the stack. ESP can also be a base pointer. EBP can be a general purpose too 
    ESP, use to support stack related operations such as function calls and returns. always point to the stack top most item of stack. it is possible to use as general purpose register but strongly discouraged 
    + program status and control. 
    EFLAGS 
    + instruction pointer 
    EIP 
    + x87 register stack MMX registers 
    R7 (MM7)
    R6 (MM6)
    R5 (MM5)
    R4 (MM4)
    R3 (MM3)
    R2 (MM2)
    R1 (MM1)
    R0 (MM0)
    + AVX/SSE registers
    YMM0/XMM0 
    YMM1/XMM1 
    YMM2/XMM2 
    YMM3/XMM3 
    YMM4/XMM4
    YMM5/XMM5 
    YMM6/XMM6 
    YMM7/XMM7 
    + x87 Control, status, and tag registers 
    + AVX/SSE cotnrol and status 
    MXCSR 
    
- convention uses for general purpose register which start from 8086. modern programming perspective is that certain register usage is tend to be observed when writting x86-32 assembly code 

EAX, accumulator 
EBX, memory pointer, base register 
ECX, loop control, counter 
EDX, integer multiplication, integer division 
ESI, string instruction source pointer, index register 
EDI, string instruction destination pointer, index register 
ESP, stack pointer 
EBP, stack frame base pointer 

the convention is not the same as a calling convention define in high-level programming language such as c++ 

- EFLAGS register, a series of status bit 
bit name                        symbol             use 
0   carry flag                    cf               status 
1   resreved                                       1
2   parity flag                   pf               status     
3   reserved                                       0 
4   auxiliary carry flag          af               status  
5   reserved                                       0        
6   zero flag                     zf               status 
7   sign flag                     sf               status 
8   trap flag                     tf               system 
9   interrup enable flag          if               system 
10  direction flag                df               control 
11  overflow flag                 of               status 
12  i/o privilege level bit 0     iopl             system
13  i/o privilege level bit 1     iopl             system
14  nested task                    nt              system 
15  reserved                                       0 
16  resume flag                    rf               system 
17  virtual 8086 mode              rf               system 
18  alignment check                ac               system 
19  virtual interrupt flag         vif              system 
20  virtual interrup pending       vip              system 
21  id flag                         id              system
21-31 reserved                                      0                 













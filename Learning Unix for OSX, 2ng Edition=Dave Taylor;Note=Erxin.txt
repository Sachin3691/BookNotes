Learning Unix for OSX, 2ng Edition=Dave Taylor;Note=Erxin

# Preface 
- unix is the core of the mac 
- os x is built on top of darwin a version of unix based on BSD 4.4 Lite, FreeBSD, NetBSD and mach microkernel 

- interfaces to unix
    + os x includes a simple terminal application for accessing the command-line 
    
- menu symbols 
^, control 
^|, shift 
\-, option 
::, command 

- use ps -acx command you will see that it adds a line of headers or column to the output 
pid, process id 
tty, tell you the terminal is running in, the question marks(??) that means the process isn't associated with a specific terminal window or display 
time, tell you the amount of time it took to run that particular process 
cmd, gives you the specific command that's being run 

- use grep command to filter the result 
- batch renames and extracting file lists 
- copy command cp 
- current home directory ~
- finding hidden files, 
$ ls -af 

- folders and directories? 
- free applications 
- built-in ftp program like fetch, ftp 
- the open command which is special to OS X, it is supposed to open a file with associated application 
$ open file-name 

- display all unix commands, hold the shift key and press esc, or press control-x followed by shift-l to get an shift-l to get an examation mark 

- 10 most command unix command 
ls, list files 
cp, copy file 
mv, move fle 
rm, remve a fle 
pwd, display your present working directory 
cd, change to the specify directory 
man, display the built-in document 
less, display a long text file 
grep, pattern filenames 
top, show you which aplications and processes are running on our system 

- syntax of a unix command
- simple commands 
date, get today's date and time 
who, list logged-in users 
who -u, finger, or w, obtain more information about users 
who am i, find out who is at your terminal 
who am i;date, enter two commands in the same line 

- change terminal preferences, go to terminal preference, this opens the complicated prefereces window 

- shell, is the environment in which you work on the unix side of things. shell also offer their own scripting language 

- bash shell, the choice of shell in os x includes 
/bin/bash 
/bin/csh
/bin/ksh 
/bin/tcsh 
/bin/zsh 
/bin/sh 

- paste selection to shell 
command + shift + v 

- accelerate shortcut for the terminal window 
use control+c to terminate a executing command or command+c 
control+u to erases the whole input line 
control+s to pauses output from a program that's writing to the screen 
control+q, restarts output that after a control+s 
control+d, signals the end of input for some program such as cat 

- change login shell by command chsh 
$ chsh 

will tell shell which you'd like to use in the next time 

- escape sequences for bash prompts, use .profile file to config bash in your home directory $PS1="$"
\w, curent working directory 
\W the trailing element of the current working directory with ~ substitution 
\! current command history number 
\H full hostname 
\@ the time of day in 12 hoe a.m./p.m.
\A time of 24 hour 
\u the user name 
\$ a # if the effective id is zer(root) or a $ otherwise 

- create alias for command 
$ alias ls="/bin/ls -aF"
- clear terminal screem, control+L 

- try a terminal is responds 
press return key 
try job contrl control+z, this suspend the program running in the foreground and gives you a new shell prompt 
press control+c or command+c 
type control+q, this restarts the previously pasused process 
type control+d once at the begining of a new line, for a program may wait for a input of a user 


# File Management 
- a file is a unit of a os x
- findout where your home directory is 
$ echo ~ 
/users/taylor 

go to root 
$ cd / 

- your working directory is the directory in which you're currently working 

- find out your working directory by 
$ pwd 
path working directory 

- directory tree 
/
    \application 
    \library 
    \system
    \users 
        \john 
            \documents 
            \music 
        \carol 

- create a empty file 
$ touch file-name 

- file permissions, file mode has 10 characters the first character shows the file type (d for directory or - for a plain file). the other characters come in sets of three 
    + example 
    File Type|owner's file permission|Group File permission|other file permission 
    d|rwx|r-x|--- 
    owner's permission rwx 
    other file permission

- calculating file size by du command, disk usage 
$ du file-uri 

- calculate available disk space 
$ df -h

- exercise exploring the filesystem 

- setting permission with chmod, get file info by command+i 
$ chmod permissions directory-or-file 

use + to add use - to delete or specify it exactly = 

$ chmod a-w file-name 
delete everyone's write permission 

$ chomd u+w filename 
only allowed owner to write the file 

$ chmod ug=rw * 
set group permission exactly without setting for each single file 

- changing the group and owner, chgrp program sets the group owner of a file 
$ gropus 
members of other groups should have no access 

- change your own password 
$ passwd 

- superuser privileges with sudo, for example search cross disk without worrying about disk permissions 

- exploring external volumes, any network-based disks are all mounted onto the filesystem under the /Volumes directory 
$ ls /Volumes 


# Finding files and information 
- use power user's find command 
- search inside files with grep command 
$ grep pattern file 

    + options 
Usage: grep [OPTION]... PATTERN [FILE]...
Search for PATTERN in each FILE or standard input.
PATTERN is, by default, a basic regular expression (BRE).
Example: grep -i 'hello world' menu.h main.c

Regexp selection and interpretation:
  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)
  -F, --fixed-strings       PATTERN is a set of newline-separated strings
  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)
  -P, --perl-regexp         PATTERN is a Perl regular expression
  -e, --regexp=PATTERN      use PATTERN for matching
  -f, --file=FILE           obtain PATTERN from FILE
  -i, --ignore-case         ignore case distinctions
  -w, --word-regexp         force PATTERN to match only whole words
  -x, --line-regexp         force PATTERN to match only whole lines
  -z, --null-data           a data line ends in 0 byte, not newline

Miscellaneous:
  -s, --no-messages         suppress error messages
  -v, --invert-match        select non-matching lines
  -V, --version             display version information and exit
      --help                display this help text and exit

Output control:
  -m, --max-count=NUM       stop after NUM matches
  -b, --byte-offset         print the byte offset with output lines
  -n, --line-number         print line number with output lines
      --line-buffered       flush output on every line
  -H, --with-filename       print the file name for each match
  -h, --no-filename         suppress the file name prefix on output
      --label=LABEL         use LABEL as the standard input file name prefix
  -o, --only-matching       show only the part of a line matching PATTERN
  -q, --quiet, --silent     suppress all normal output
      --binary-files=TYPE   assume that binary files are TYPE;
                            TYPE is 'binary', 'text', or 'without-match'
  -a, --text                equivalent to --binary-files=text
  -I                        equivalent to --binary-files=without-match
  -d, --directories=ACTION  how to handle directories;
                            ACTION is 'read', 'recurse', or 'skip'
  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;
                            ACTION is 'read' or 'skip'
  -r, --recursive           like --directories=recurse
  -R, --dereference-recursive  likewise, but follow all symlinks
      --include=FILE_PATTERN  search only files that match FILE_PATTERN
      --exclude=FILE_PATTERN  skip files and directories matching FILE_PATTERN
      --exclude-from=FILE   skip files matching any file pattern from FILE
      --exclude-dir=PATTERN  directories that match PATTERN will be skipped.
  -L, --files-without-match  print only names of FILEs containing no match
  -l, --files-with-matches  print only names of FILEs containing matches
  -c, --count               print only a count of matching lines per FILE
  -T, --initial-tab         make tabs line up (if needed)
  -Z, --null                print 0 byte after FILE name

Context control:
  -B, --before-context=NUM  print NUM lines of leading context
  -A, --after-context=NUM   print NUM lines of trailing context
  -C, --context=NUM         print NUM lines of output context
  -NUM                      same as --context=NUM
      --color[=WHEN],
      --colour[=WHEN]       use markers to highlight the matching strings;
                            WHEN is 'always', 'never', or 'auto'
  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)
  -u, --unix-byte-offsets   report offsets as if CRs were not there
                            (MSDOS/Windows)

'egrep' means 'grep -E'.  'fgrep' means 'grep -F'.
Direct invocation as either 'egrep' or 'fgrep' is deprecated.
When FILE is -, read standard input.  With no FILE, read . if a command-line
-r is given, - otherwise.  If fewer than two FILEs are given, assume -h.
Exit status is 0 if any line is selected, 1 otherwise;
if any error occurs and -q is not given, the exit status is 2.

Report bugs to: bug-grep@gnu.org
GNU grep home page: <http://www.gnu.org/software/grep/>
General help using GNU software: <http://www.gnu.org/gethelp/>

- finding file with local, local program is use to find files in your filesystem 

    + build the local database 
    $ man 8 local.updatedb 
    
    + find file with local command 
    $ local file-name-pattern 
    
- use find to explore your filesystem 
$ find flags 

    + options 

Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

default path is the current directory; default expression is -print
expression may consist of: operators, options, tests, and actions:

operators (decreasing precedence; -and is implicit where no others are given):
      ( EXPR )   ! EXPR   -not EXPR   EXPR1 -a EXPR2   EXPR1 -and EXPR2
      EXPR1 -o EXPR2   EXPR1 -or EXPR2   EXPR1 , EXPR2

positional options (always true): -daystart -follow -regextype

normal options (always true, specified before other expressions):
      -depth --help -maxdepth LEVELS -mindepth LEVELS -mount -noleaf
      --version -xdev -ignore_readdir_race -noignore_readdir_race

tests (N can be +N or -N or N): -amin N -anewer FILE -atime N -cmin N
      -cnewer FILE -ctime N -empty -false -fstype TYPE -gid N -group NAME
      -ilname PATTERN -iname PATTERN -inum N -iwholename PATTERN -iregex PATTERN
      -links N -lname PATTERN -mmin N -mtime N -name PATTERN -newer FILE
      -nouser -nogroup -path PATTERN -perm [-/]MODE -regex PATTERN
      -readable -writable -executable
      -wholename PATTERN -size N[bcwkMG] -true -type [bcdpflsD] -uid N
      -used N -user NAME -xtype [bcdpfls]
      -context CONTEXT


actions: -delete -print0 -printf FORMAT -fprintf FILE FORMAT -print
      -fprint0 FILE -fprint FILE -ls -fls FILE -prune -quit
      -exec COMMAND ; -exec COMMAND {} + -ok COMMAND ;
      -execdir COMMAND ; -execdir COMMAND {} + -okdir COMMAND ;

Report (and track progress on fixing) bugs via the findutils bug-reporting
page at http://savannah.gnu.org/ or, if you have no web access, by sending
email to <bug-findutils@gnu.org>.

- find permission string permission string are specifiec as string 
who op perm 
who can be a(all), u(user), g(group) or o(other). op value for find permission string can only be =. 
perm could be r, read, w write, x execute, s special set-user-id-on-execution or set-group-id-on-execution permission 

- shining a light on spotlight, spotlight builds what apple calls a metadata database that has a lot of information about the files on the system 

- list spotlight metadata with mdls, explore with mdls are the pictures you take with a digital camera 
$ mdls *.jpg 
the camera used 
the dimensions of the image 
the resolution of the image 
various other digital photodata 

- find files with mdfind, mdfind command match files that meet a specific criterion or set of criteria 


# Redirect I/O 
- standard input and standard output 

- the tr, character translator program allows us to demonstrate input redirection, because it reads from standard input 

$ tr 'xxx' 'xxx' < file-name 

- putting text in a file >
- append with >> 
- pipes and filters, |
- wc program is shortname for word count, report just -c character, -w words, -l lines 
- tr is another similar helpful program for command pips. replace all occurences of one character with another character 

it also could turn lower case letter to upper case letter 
$ tr "[:lower:]" "[:upper:]" < file1 

- grep command 
- mdfind is a part of spotlight 
- head and tail return the head of a file or a tail of a file 
- sort arranges lines of text alphabetically or numberically 
- uniq, give uniq a stream of input 
- piping out to a pager such as less 
- printing use lp command series 
lpstat, shows everything about the known printers 

use lpstat -t printer-name to get more detail about one printer 
- pr command only change the format of file on screen or on the printed copy 

send output to the deafult os x printer instead of to the terminal by 
$ pr -2 -h "restaurants" food |lpr 

# Multitasking 
- run multiple program from terminal with job control 
- running a command in the background 
$ command-line &

- check a status of a background running process 
$ ps -fp PID 

- kill a process 
$ kill PID 

- use bg command to make a previous command running in the background 
$ sort hugefile1 hugefile2 > sorted 
^Z
$ bg 
$ run other tasks 

- checking on a process 
ps, process status command, tty is the terminal process name 
$ ps  
PID TTY           TIME CMD  
409 ttys000    0:00.04 -bash  
813 ttys001    0:00.02 -bash
$ tty/dev/ttys000

    + check process which is running under certain user 
    $ ps -U username 

- os kernel extensions module, kextd, the configuration management demon configd and the audio utility coreaudiod. low level disk management program diskarbitrationd, core services etc. 

- use top command to check which process is taking up the most resource 
$ top -l  |head -8 

- swapping is based on the idea that the memory needed for an application can be broken into pages as many as need for the app at that particular moment 

the process of swapping an older page for a newer one is called a pageout and swapout 

$ top -o cpu 
display cpu usu 

- watching system processes 
$ ps -ax 
tells you which system processes are running 
$ ps --help
Usage: ps [-aefls] [-u UID] [-p PID]

Report process status

 -a, --all       show processes of all users
 -e, --everyone  show processes of all users
 -f, --full      show process uids, ppids
 -h, --help      output usage information and exit
 -l, --long      show process uids, ppids, pgids, winpids
 -p, --process   show information for specified PID
 -s, --summary   show process summary
 -u, --user      list processes owned by UID
 -V, --version   output version information and exit
 -W, --windows   show windows as well as cygwin processes

With no options, ps outputs the long format by defaul

use command 
$ tail -f /var/log/system.log 
to monitor system log 

- cancel process, kill 
$ kill pid 
in mac also offer forece quite by command+csc 

- sleep command make program run as a background process

- kill all, by killall command. 
$ killall -s pattern 
with -s option to show that it'll do without actually killing anything 

- some process may hard to kill, to kill these kinds of process by 
$ kill -9 pid 

or try 
$ killall -9 name 
most unix folk refer to the -9 option as "terminate with extreme" prejudice

- launching GUI applications 
    + use open command 
    $ open file-name 
    
    + create a file and save on mac 
    $ touch filename 
    
    

# Tasking unix online 
- remote login , system setting\sharing\remote login. then we could use ssh, secure shell client to connect your mac 

- ssh and openssh on window use PuTTY, the terminal window which is used to remote connection will add ip address when type who command 
$ who

- web access 
- remote access and the outside world. allow remote users to connect by using the AirPort Utility and following these steps 
    + select your base station 
    + click network button in the toolbar 
    + user port setting cilck the add(+) button to add a public TCP port 
    
- remote access with ssh 
$ ssh remote-user@remote-hostname 

rsh, rlogin, ssh generally will assume your remote username is same as local username. if different you need to provide your remote username 

- transferring files, scp and rcp, secure copy and remote copy 
$ rcp hostname:pathname hostname:pathname 

    + another option is use ftp, for security reason you could use sftp to secure your user name and password to prevent network snoopers 
    
    + a faster way to download a file is with the curl, copy from url command. 
    $ curl -O ftp://file-uri 
    the -O option which is a capital letter O. curl dumps the file to the standard output. 
    
    + mount remote directory with finder. choose go connect to server then type ftp://server-uri 
    
    use unmount to disconnect 
    $ umount /Volumes/ftp.oreilly.com 
    
    + other ftp options, fetch, flashFTP, transmit, YummyFTP and viper FTP 
    

# Of windows and x11 
- x11 is the standard graphical user interface for almost all unix and linux systems quartz compositor, opengl and coregraphics 

x.org 

- using x11, launch a new xterm window by selecting the terminal item from menu or use command+N 

- x11 directory 
/opt/X11/bin/

- expose x11 path to environment
$ PATH=${PATH}:/usr/X11/bin ; export PATH

- x11 utilities 
bitmap 
glxgears 
glxinfo 
oclock 
xcalc 
xeyes 
xhost 
xkill 
xload, display cpu load 
xwud, an image display program for x11 

- copy past accelerate keys 
command+c, command+v 

command key is called option key in mac 

- GIMP is the x11 graphic editor 


# where to go from here 
- documentation 
$ man command-name 

- os x also includes a command called apropos, it an alias for man -k to help you locate a command if yo have a idea of what it does but aren't quite sure of its currect name 

$ sudo periodic weekly 
to let the periodic command to build the index database 

- documentation on the internet 
- reference book, unix in a nutshell 



















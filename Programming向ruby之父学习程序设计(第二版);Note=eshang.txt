Programming向ruby之父学习程序设计(第二版);Note=eshang

:XP, eXtreme Writing

:字符串，双引号单引号都可以
；
显示输出
print(string)
puts(string)    #一定会换行
p object        #按照不同类型显示不同内容，例如数字与字符串有区分
pp object        #pretty print的缩写，先需要require "pp"导入库
;
p方法输出时间日期字符串的时候可能会出现乱码，执行ruby程序要加上-Ks，-Ke之类的环境参数
ruby -Ks rubyScriptFileName.rb

:导入rb库
；
导入math
include Math
调用sin，cos等函数
;
require "libraryName"

:注释
#, 单行
=begin ... =end, 多行

:结构控制
if condition [then]
...
elsif condition [then]
...
else
...
end
;
;
while condition do
...
end
;
;
number.times
{
...
}

:比较运算符
==, >=, <=

:定义方法
def functionName
...
end

:数据结构
;
;
数组, 是存放对象的数组
[]
;
[].size()
[].each
{|varName|    #每个数组的值付给变量varName
...
}
;
;
字典,Hash,杂凑
{}
;
定义
font_table={"normal"=>"+0", "small"=>"-1"}
;
取
font_table["normal"]
；
{}.each
{|varKey,varValue|
...
}

:正则表达式, Regular Expression
/表达式/ =~ 想要匹配的字符串
返回匹配成功的位置，失败这返回nil
Regexp

:读取文件
fileHandle=open(fileName)
text=fileHandle.read
...
fileHandle.close
;
read, 读取全部
gets, 读取一行并停止
;
while text=fileHandle.gets
...
end

:ruby主要对象
数值
字符串
正则表达式
时间
文件
目录
数组
字典
类

:变量类型，根据变量名称决定类型
局部，小写或_开头
全局，$开头
实例，@开头
类，@@开头
虚拟变量，具有特定名称的，如true, false, self
变量存储空间是不同的，所以虽然同名类型不同也不会覆盖
；
常量，必须大写字母表示
具有一定的内建常量，RUBY_VERSION, RUBY_PLATFORM, ARGV
;
some_variable_name, 多用于方法，变量
SomeVariableName，多用于类，模块名

:保留字
BEGIN, END, do, next, then, else, nil, true, alias, elsif, not, undef, and, end, or, unless, begin, ensure, redo, until, break, false, rescue, when, case, for, retry, while, class, if, return, yield, def, in, self, __FILE__, define?, module, super, __LINE__

:判断相等
==, object.eql?
eql?, 可以在类中重写
；
分号是行分隔符，不推荐使用

:条件判断
if, unless, case
;
真假值
真，false与nil之外的所有值，包含0
;
对于返回真假值得方法，ruby习惯在方法名后加?
string.empty?
;
unless, 与if相反
unless condition [then]
...
else
...
end
;
case, 如同switch
case item
when value0 [then]
...
when value1 [then]
...
else
...
end
;
=== 与 case表达式
===，当比较数值与字符串 与 == 相同
===, 在正则表达式时与 =~ 相同
===, 看右边的对象是否是左侧的实例

:循环语句
times, for, while, until, each, loop
;
方法, times, each, loop
语句, for, while, until
;
number.times{|varName|}
number.times do ... end
;
until是反的while
;
object.each{}
;
loop{}, 无结束条件
；
>循环控制
break, next, redo条件相同重做

:方法
def functionName(parameters)
    ...
    return
end

:类与模块
>建立新对象使用new方法
newClassObj = className.new
>知道对象所属的类
obj.class
>继承
-保存原来的功能,并追加新功能
-重新定义原有的功能,使其具有不同的行为
-接着原来的定义扩充更多动作
;
instance_of, 方法可以检测实例是否属于某个类
is_a, 方法用于检测有继承关系的父类
>定义类
class HelloWorld
    def initialize(myname="ruby)
        @name = myname  #初始化实例
    end
end
b = HelloWorld.new("bobo")
类名一定要以大写字母开始
;
>@varName, 实例变量,是与类的实例相关的变量,与类的实例存在的时间相同
;
>访问方法, 类似于C#中的属性方法, 专门针对实例变量的改变设置的
class HelloWorld
    ...
    def name
        return @name
    end
    def name=(value)
        @name = value
    end
end
ruby提供了attr_reader, attr_writer, attr_accessor来快速定义这类方法
    attr_accessor:name
>类方法, 有三种方式定义
-一般定义
class className
    def functionName()
    end
end
-箭头方向
class << className
    def functionName()
    end
end
-使用self
class className
    def self.functionName()
    end
end
;
className.functionName
className::functionName
>常数
无需加@符号
class className
    constName = value
end
;
className::constName
>类内变量
@@varName
>扩充类
class string
    def functionName
        ary = self.splite(/\s+/)
        return ary.size
    end
end
>继承
>限制方法调用
class className < parentClass
..
    def initialize()
        super(parentClassInitParameter)
    end
    
    def functionName()
    end
    private:functionName
    public  #下面定义的所有方法都是public
    def functionName0()
    end
end
;
pubilc, private, protected
>Duck Typing, 行为决定类型
对象的特征并不是依照其实际种类,而是依照对象具有什么行为来决定的
>模块
命名空间
-获取文件信息, FileTest 模块
-以Mix-in方式提供将类方法包括到类定义中
-自定义模块
module MyModule
...
    self #引用模块本身
end
class className
    include MyModule
end

:异常处理
>意外
begin
    ...
    rasie [exceptionType], message
rescue [ExceptionType]=> varException
    ...
    retry   #重新执行
ensure
    ... #一定执行的代码
end
>控制程序流, 如果有指定的标签被抛出则中断catch块的执行
def test_throw
    throw(:labelName)
end
...
catch(:labelName)
{
    ...
    test_throw()
    ... #不会执行到这里
}
;
catch(:done)
{
    loop
    {
        throw(:done[, value])
    }
}

:使用类
>numeric, 数值类
fixnum普通整数, float, 数值常量, 算数运算, 类型转换, 位运算, 数数, integer, bignum大整数
;
-常数
0dXXX,  十进制
0XXX, 八进制
0xXXX, 十六
0b101, 二进制
?a, 字符a的ascii码
?\t, tab键的ascii码
?\c-a, ctrl+a的指令码
;
-算数运算
%, 求余数
**, 幂
-方法
divmod(y), 返回商与余数
math模块
;
-类型转换
number.to_f, to_i
;
位运算
同C, ^异或
;
数数
number.times{|i|}
number.upto(number0){}
number.downto(number0){}
number.step(number0, step){}

:数组
Array
>建立
Array.new
;
使用%w
元素师字符串,且不含有空格可以使用%w建立数组
ary = %w(ruby perl python)
p ary # =>["Ruby", "Perl", "Python"]
;
obj.to_a,  转换为数组
;
string.split
>索引
a[index]
a[index, len]
arrayObject.values_at(index0, index1, ...), 取指定位置的数组
>数组作为集合操作
&, ary0 & ary1
|, ary0 | ary1  并
+, ary0 + ary1 保留相同合并
|-, ary0 |- ary1  差
>作为队列
push, shift, pop, last
>加入元素
unshift(item), 前方加入
push,
ary0.cancat(ary1), 连接
>删除元素
pop, shift
存在对属于元素具有破坏性的方法时,习惯上在命名的时候前面加上 !. 这里的破坏性指的是对元素内容, 位置等存在改变
array.sort!, 原数组基础上排序
array.sort, 返回排序后的新数组
array.compact!, 直接删除原数组内容, 删除数组中的nil
array.compact, 建立新数组
array.delete(x)
>多维数组
Array.new(number, [...]), 建立3个指向同一个一位数组的索引
Array.new(3)([...]), 建立一个3维, 指定列数的数组
;
多个数组相同的元素一并处理
ary0.zip(ary1, ary2)
{|a0, a1, a2|
...
}

:字符串类
>"...", ""..."",定义
>#{}, 框住的部分会作为ruby语句执行
>%q/%Q, 建立其中含有'或"的字符串
    -%q|ruby said, 'hello'|
    -%Q{ruby said, 'hello'}
>嵌入文档
message<<"结束">>
    可嵌入的字符串
结束记号
EOF, end of file
EOB, end of block
EOS, end of statement
;
print << "EOB"
>pack, unpack将数组转换为二进制数据,二进制数据转换为数组
>连接字符串
+, <<
>比较
==, !=
>处理换行符
chop, chop!, 一定会删除字符串里的最后一个字符
chomp, chomp!, 只会删除换行符
>查找
string.index()
string.rindex()
>取代
sub,gsub
>编码变换
nfk库和iconv库

:杂凑(Hash)类
{key => value}
Hash.new
;
键值推荐类型
字符串, 数字, 符号, 日期

:正则表达式
Regexp类
Regexp.new(initString)
;
字符串内如果有/字符使用%r来建立比较方便
%r(), %r<>, %r||, %r!!
;
>匹配
regexpObj =~ stringObj
&开头,$结尾
>忽略所有转义字符
Regexp.quote(string)
>回溯参考
()内的部分,引用$index, $1, $2

:IO类
>标准输入,会设置内奸常数STDIN, 也可以从全局变量$stdin获取
>标准输出, STDOUT, $stdout
>标准错误输出, STDERR, $stderr
>文件读写, File类
f = open(filename, mode)
f = File.open(filename, mode)
f.close
>管道pipe, 网络通信socket
open("http://www.ruby-lang.org"/"ftp:...")
{|io|
pus io.read
}
>stringio, 用于对输出进行缓存, 建立后可以作为io对象使用
io = stringio.new
io.puts(outPutString)
>基本输入输出操作
io.gets([rs]), each([rs]), readlines([rs]), rs可以指定换行的方式
io.lineno, 可以取得当前的行
io.getc 读取一个字符, io.each_byte
;
io.puts
io.putc
io.print, 自动转换参数为string
io.write(parameter), parameter不是string则自动进行转换
>文件指针
io.pos, 读取的文件位置
io.seek(offset, whence)
>二进制文件读取
io = open(fileName, mode)
io.binmode
io.write
>缓冲
io.flush
io.sync=(state), true可以要求所有对缓冲区的写入直接flush
>与指令交换数据
IO.popen(command, mode), 与指令
;
fileName = ARGV[1] #命令行的来的第一个参数
IO.popen("gunzip -c #{fileName}")
;
也可使用open方法加上管道重定向
open("|command", mode)

:File类与Dir类
Dir.glob, 与shell一样支持通配符*,?
Dir.open(path)
;
File.stat(fileName), 取得文件信息
>临时文件库tempfile.rb
tempfile.new(basename[,tempdir])
tempfile.close(real), real为true则文件被删除
>fileutils提供各种便利的文件操作方法

:Time类与Date类
t = Time.new
>事件格式
Time#strftime(format)
Time.strftime(format)

:Ruby的其他补充知识
>命令行选项
ruby -ks *.rb
    -c, 语法检查
    -d, 调试模式
    -s, 用实参对脚本指定变量
    -w, 警告模式
    -c, 版权
    -v, 版本
    -h, 帮助
    -e 'command', 执行单行程序
    -0[octal], 指定行尾符
    -a, 自动分割
    -Fpattern, 设定自动分割模式样式
    -n, 循环执行脚本
    -l, 指定行尾处理
    -Idirecotry, 最佳$LOAD_PATH
    -i[extension], 编辑实参所指定的文件
    -rlibrary, 执行前读取程序库
>环境变量
PATH, RUBYLIB, RUBYOPT, HOME指Dir.chdir默认移动方向, LOGDIR, RUBYPATH, RUBYLIB_PREFIX
>常数
指令直接输出,类似于python中的os.system()]
`command`
;
符号, object.to_s
;
内嵌表达式
#{}, 字符串内
>内建变量
$开始的变量,有些全局变量$< 实际是ARGF的别名
;
包含
$_, $&, $~, $`, $', $+, $1, $?, $!, $@, $SAFE, $/, $\, $, , $;, $., $<, $>, $0, $*, $$, $DEBUG, $FILENAME, $LOAD_PATH, $stdin, $stdout, $stderr, $VERBOSE, $KCODE处理的文字编码
>内建常量
STDIN, STDOUT, STDERR, DATA, ENV, ARGF 实参或者标准输入建立的虚拟文件对象, ARGV 命令行参数, RUBY_VERSION, RUBY_REALEASE_DATE, RUBY_PLATFORM当前工作的OS
>支持多重复值
x, y, z = 1, 2, 3
>命令行
ruby ... BEGIN{} END{}
程序之前要执行的, 程序之后要执行的
;
为现有方法取别名, alias
alias otherName
def functionName()
end
取消别名
undef otherName
undef:otherName
>虚拟变量
self, nil, true, false, _FILE_ 表示执行中的ruby文件名, _LINE_行号

:运算符
>支持, +=等
>范围运算, 
range.new(start, end)
;
也可以使用 x..y, x...y
a = [2..4]

:迭代器
使用yield方法
;
区块调用的典型写法
obj.method(arg1, arg2, arg3, ..., argn)
{|变量行|
}
>Enumerable模块, 可以使用很多种迭代器调用
each, collect, sort, sort_by
;
array.sort
{|a, b|
    a <=> b
}
>实现迭代器
    yield(varName)
>区块传递方法
区块是以方法结尾地方用{~}括起来的形式进行传递的, 还可以使用Proc对象方式进行传递
def functionName(a, b, &block)
    block.call(a, b)
    end
使用&传递的区块使用call方法调用
block.call(a, b)
区块变量, 就是指{|区块变量|...}

:Mix-in
与继承很像, 是用来扩充类与模块的,是想要新增的部分定义成模块,再将模块嵌入到类里去
;
Comparable 模块, 要求定义<=>方法
例如对某个类扩展比较方法
class myClass
    include Comparable
    def functionName()
    end
end
;
Enumerable模块,要求定义each方法
>当包含的类中与本类有同名方法的时候以本类方法为主
>多个包含的类中有同名方法以最后读入的为主

:gdbm程序库,类似于Hash的数据库模块
GDBM::NEWDB

:附录
>文字编辑器
-unix下可以使用vi
-Eclipse上得RDT, 
    http://homepage2.nifty.com/sakazuki/rde-index.html
    http://rubyeclipse.sourceforge.net
>参考手册
-http://www.ruby-lang.org/ja/man
-使用方法,看一遍要使用的类,然后再查看父类方法
>网页上的信息
-home page
    http://www.ruby-lang.org
-原信一郎个人管理的网站
    http://blade.nagaokaut.ac.jp/ruby
-ruby相关的网站
    http://www.rubyist.net/~kazu/samidare/index.html
-rubyForge
    http://rubyforge.org

:后记
我辈皆愚,勤能补拙




Python beyond the basics=Austin Bingham, Robert Smallshire;Note=Erxin

# python 101, prerequest
- working python environment, 3.0
- use dunder to reference the python special method __<method name>__, dunder is stand for double underscore


# packages
- module, is a single python code file
- repl, is python interactive 
- load a module by 
import module_name

- package, a module which can contain other modules include other packages
    + the distinction between module and package are package have __path__ property which point to the physical path of the package but module don't have

    + packages are generally directories
    + modules are generally files

    + how does python locate modules
        * locate from sys.path
        * sys.path is a list of directories searches for modules

        if you start python without argument the first value of the sys.path is ''
        sys.[0] is ''

        * manually add some directory to sys.path to tell python search the aim directory

        * the other by to add directory to PYTHONPATH environment variable then when python start will add the variable into sys.path

        * check more detail from python documentation
        
- basic package structure
path_entry/
    |
    +-> my_pakcage/  #package root
        |
        +-> __init__.py # the package a init file
        

for example add a reader package and create a reader module contain a Reader class. in this scenario use __init__.py to do the import logic could pull the Reader class up to the package level, add these code into the __init__.py

from reader.reader import Reader 

- subpackages, add packages into another packages
- relative import
from .reader import Reader

only support to modules in the same package

my_package/
    |
    +-> __init__.py
    +-> a.py
    +-> nested/
        |
        +-> __init__.py
        +-> b.py
        +-> c.py
in the c.py web could use relative import
from ..a import A
from .b import B

general advice is to avoid them in most cases

- controlling imports with __all__, list of attribute names imported via from module import * 
this attribute is used for control which module is expose when your module is loaded

in the __init__.py
from reader.compressed.bzipped import opener as bz2_opener
from reader.compressed.gzipped import opener as gzip_opener

__all__ = ['bz2_opener', 'gzip_opener']

- namespace packages, packages split across several directories, importing namespace packages, each sub package is treat as normal package from programmer point of view
    + namespace packages have no __init__.py, this avoids complex initialization ordering problems
    + python scans all entries in sys.path
    + if a matching directory with __init__.py is found, a normal pacakge is loaded
    + if foo.py is found then it is loaded
    + otherwise, all matching directories in sys.path are considered part of namespace package
    
defined in PEP420

example
path1/
|
+-> split_farm
    |
    +-> bovine
        |
        +-> __init__.py
        +-> common.py
path2/
|
+-> split_farm
    |
    +-> bird
        |
        +-> __init__.py
        +-> chicken.py

to import split_farm you have to make sure both path1 and path2 are in the sys.path
>>> import sys
>>> sys.path.extend(['path1', 'path2'])
>>> import split_farm
>>> import split_farm.bird
>>> import split_farm.bovine

check PEP420 for more detail

- executable directories, directories containing an entry point for python execution
normal if you path a directory to python.exe in command line
a directory contain __main__.py will treat as executable directory for python

executable zip file is same as executable directory
python module.zip

- recommended layout
project_name
|
+-> __main__.py
|   |
|   +-> project_name
|   +-> more_source.py
|   +-> subpackage1/
|       |
|       +-> __init__.py
|       +->test
|           |
|           +-> __init__.py
+-> setup.py

- duck tails, modules are singletons, modules are only executed once when first imported
module initialisation


# beyond basic functions
- function review
    + position argument
    + keyword argument
    + example
    def func(arg1, arg3=..):
        '''doc '''
        pass
        [return value] 
        
    the default value is only be evalue only during the module import

    + function is callable object
- callable instances and the __call__(), special method
    + use callable object could easily add cache for function
    for example catch the socket result
    
    class resolve(object):
        def __init__(self, host):
            self._cache = {}
            
        def __call__(self, host):
            if host not in self._cache:
                self._cache[host] = socket.gethostbyname(host)
            return self._cache[host]
            
        def clear(self):
            self._cache.clear()
    
- pycharm, is a python syntax highlighter
- callable classes, class is callable oject which is invoke the constructor by default
def sequence_class(immutable):
    return tuple if immutable else list

- conditional expression 
result = true_value if condition else false_value

- lambda, Alonzo Church, develop the lambda calculation
lambda arg: return_expression
    + cannot have docstrings
    + hard to test
    + body is single expression and the return value is the expression

- detecting callable object, use built-in function callable
- extended formal argument syntax

- forwarding argument













































Visual Studio 2017 C C++ language reference document;Note=Erxin

# C++ language reference 
- reference 
https://docs.microsoft.com/en-us/cpp/cpp/cpp-language-reference?view=vs-2017
- keywords
__abstract 	__alignof Operator	__asm	__assume
__based	__box 	__cdecl	__declspec
__delegate __event	__except	__fastcall
__finally	__forceinline	__gc 	__hook 
__identifier	__if_exists	__if_not_exists	__inline
__int16	__int32	__int64	__int8
__interface	__leave	__m128	__m128d
__m128i	__m64	__multiple_inheritance	__nogc 
__noop	__pin __property 	__raise
__sealed __single_inheritance	__stdcall	__super
__thiscall	__try/__except	__try/__finally	__try_cast 
__unaligned	__unhook __uuidof	__value 
__virtual_inheritance	__w64	__wchar_t	abstract
alignas	array	auto	bool
break	case	catch	char
char16_t	char32_t	class	const
const_cast	constexpr	continue	decltype
default	delegate	delete	deprecated 
dllexport dllimport do	double
dynamic_cast	else	enum	enum class
enum struct	event	explicit	extern
false	finally	float	for
for each in	friend	friend_as	gcnew
generic	goto	if	initonly
inline	int	interface class	interface struct
interior_ptr	literal	long	mutable
naked namespace	new	new
noexcept	noinline noreturn 	nothrow 
novtable 	nullptr	operator	private
property	property 	protected	public
ref class	ref struct	register	reinterpret_cast
return	safecast	sealed	selectany 
short	signed	sizeof	static
static_assert	static_cast	struct	switch
template	this	thread 	throw
true	try	typedef	typeid
typeid	typename	union	unsigned
using declaration	using directive	uuid 	value class
value struct	virtual	void	volatile
while
https://docs.microsoft.com/en-us/cpp/cpp/keywords-cpp?view=vs-2017

- microsoft specific identifiers are precede with two underscores 
you can disable Microsoft extensions by specifying the ANSI-compatible /Za command-line option

For backward compatibility, single-underscore versions of all the double-underscored keywords except __except, __finally, __leave, and __try are supported. In addition, __cdecl is available with no leading underscore.

The __asm keyword replaces C++ asm syntax. asm is reserved for compatibility with other C++ implementations, 

The __based keyword has limited uses for 32-bit and 64-bit target compilations

- Operators 
https://docs.microsoft.com/en-us/cpp/cpp/cpp-built-in-operators-precedence-and-associativity?view=vs-2017


# Welcome back to C++ Modern C++ 
- modern c++ emphasizes 
    + stack based scope 
    + auto type inference 
    + smart pointers 
    + std::string and std::wstring instead of raw char[]
    + standard library containers vector, list, map 
    + standard library algorithms instead of manually coded 
    + exceptions to report and handle error conditions 
    + lock free inter-thread communication 
    + inline lambda functions 
    + range-based for loops to write more robust loops 
    
    + example 
#include <memory>
#include <vector>

void f()
{
    // ...
    auto p = make_shared<circle>( 42 );
    vector<shared_ptr<shape>> v = load_shapes();

    for( auto& s : v )
    {
        if( s && *s == *p )
        {
            cout << *s << " is a match\n";
        }
    }
}
    



















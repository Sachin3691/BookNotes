C++ 14 Quick Syntax Reference(Second Edition)=Mikael Olsson;Note=Erxin

# Hello World 
- choosing a IDE 
    + VS 
    + NetBeans 
    + Eclipse CDT 
    
- hello world 

#include <iostream>
using namespace std;

int main()
{
    cout << "Hello world";
    cin.get();
}

# Compile and run 
- console compilation, GNU compiler collection(GCC), install it by minGW or cygWin

$ g++ MyApp.cpp -o MyApp.exe 

- comments 
//single-line comment 
/* mlti-line comment*/

# variables 
- data types 
data type       size(byte)      description
char            1 
short           2 
int             4 
long            4 or 8 
long long       8 
float           4 
double          8 
long double     8 or 16 

the int type will have the same size as the process's word size. 32bit system will be 32 

- declaring variables 
type variable-name;

- assigning avriables 
variable-name = value;
type variable-name = value;
int variable-name(value); //constructor initalization 

int x = 1, y = 2, z; 

- variable scope, have globally and locally scope 
    + global, define outside of any code blocks. it is accessible from anywhere after defined 
int global;

    global variable automatic init to zero 
    
    + local, declare in funciton, willl not automatic initialize 
int main(){
    int local;
}

- initeger types 
char myChar = 0; // -128 to +127
short myShort = 0; // -32768 to +32767
int myInt = 0; // -2^31 to +2^31-1
long myLong = 0; // -2^31 to +2^31-1

    + c++ 11 added 
long long myL2 = 0; // -2^63 to +2^63-1

    + determine the exact size of a data type by. it will return the bytes number  
sizeof(variable-name);

    + fixed-sized integer types added in C++ 11. these types belong to the std namespace 
#include <cstdint>
using namespace std;
int8_t myInt8 = 0; // 8 bits
int16_t myInt16 = 0; // 16 bits
int32_t myInt32 = 0; // 32 bits
int64_t myInt64 = 0; // 64 bits

- singed and unsigned integers, by default MS VC is signed integer
signed char myChar = 0; // -128 to +127
signed short myShort = 0; // -32768 to +32767
signed int myInt = 0; // -2^31 to +2^31-1
signed long myLong = 0; // -2^31 to +2^31-1
signed long long myL2= 0; // -2^63 to +2^63-1

unsigned char myChar = 0; // 0 to 255
unsigned short myShort = 0; // 0 to 65535
unsigned int myInt = 0; // 0 to 2^32-1
unsigned long myLong = 0; // 0 to 2^32-1
unsigned long long myL2= 0; // 0 to 2^64-1

short and long data types are abbreviations of short int and long int 
short myShort; // short int
long myLong; // long int

- numberic literals, integers can be assigned b usig octal or hexadecimal notation 
int myOct = 062; //octal notation 
int myHex = 0x32; //hexadecimal notation 

    + c++ 14 there is a binary notation whcih uses '0b' as its prefix 
int mybin = 0b010'1010'1010;   // binary notation "'" is a digit separator for easier to read long numbers 

- floating point types 
float t; //~7 digits 
double dt; //~15 digits 
long double ldt; //typically same as double 

    + can be assigned by using either decimal exponential notation or exponential notation 
t = 3e2; //3*10^2  300 

- literal suffixes. integer can be combination of U and L for unsigned and long respectiely 
int i = 10 ;
long i = 10L;
unsigned long ul = 10UL;

    + floating type suffix, without suffix a floating literal is double 
float f = 1.23F;
double d = 1.23;
long double ld = 1.23L;

- char type. commonly used to represent ascii characters 
char c = 'x';

- bool type 
bool b = false;

# operators 
- operator types can be gropued into five 
arithmetic 
assignment 
logical 
biwise 

- arithmetic 
int x = 3 + 2; // 5 // addition
x = 3 - 2; // 1 // subtraction
x = 3 * 2; // 6 // multiplication
x = 3 / 2; // 1 // division
x = 3 % 2; // 1 // modulus (division remainder)

explici convert value 
float f = 3 / (float)2; // 1.5

- assignment operators 
=
- compbined assignment operators 
x += 5; // x = x+5;
x -= 5; // x = x-5;
x *= 5; // x = x*5;
x /= 5; // x = x/5;
x %= 5; // x = x%5;

- increement and decrement operators 
x++; // x = x+1;
x--; // x = x-1;

- comparison operators 

bool b = (2 == 3); // false // equal to
b = (2 != 3); // true // not equal to
b = (2 > 3); // false // greater than
b = (2 < 3); // true // less than
b = (2 >= 3); // false // greater than or equal to
b = (2 <= 3); // true // less than or equal to

- logical operator, if the result already determined then the right-hand side of the and and or operator will not be evaluated 
bool b = (true && false); // false // logical and
b = (true || false); // true // logical or
b = !(true); // false // logical not

- bitwise operators 
int x = 5 & 4; // 101 & 100 = 100 (4) // and
x = 5 | 4; // 101 | 100 = 101 (5) // or
x = 5 ^ 4; // 101 ^ 100 = 001 (1) // xor
x = 4 << 1; // 100 << 1 =1000 (8) // left shift
x = 4 >> 1; // 100 >> 1 = 10 (2) // right shift
x = ~4; // ~00000100 = 11111011 (-5) // invert

    + bitwisze operators have combined assignment operators 
int x=5; x &= 4; // 101 & 100 = 100 (4) // and
x=5; x |= 4; // 101 | 100 = 101 (5) // or
x=5; x ^= 4; // 101 ^ 100 = 001 (1) // xor
x=5; x <<= 1;// 101 << 1 =1010 (10)// left shift
x=5; x >>= 1;// 101 >> 1 = 10 (2) // right shift

- operator precedence 
pre     operator                    pre     operator        
1       ::                          9       == !=
2       () [] . -> x++ x--          10      &
3       ! ~ ++x --x x* x& (type)    11      ^
4       .* ->*                      12      |
5       * / %                       13      &&
6       + -                         14      ||
7       << >>                       15      ?: = op=
8       < <= > >=                   16      ,

- logical and && binds weaker than  relational operators 
bool b = 2+3 > 1*4 && 5/5 == 1; // true

better way 
bool b = ((2+3) > (1*4)) && ((5/5) == 1); // true


# pointers 
- pointer is a variable that contains the memory address of another variable, called pointee 
- create pointers 
int* p; // pointer to an integer
int *q; // alternative syntax

    + retrieve address or a variable. use address-of operator(&)
int* p; // pointer to an integer
int *q; // alternative syntax

- dereferencing pointers, dereference operator(*)
*p;






    



















Firefox extension development=Firefox doc;Note=Erxin

# enable truClient firefox debugging 
- enable plugin debugging, hold alt to display the menu and click Tool|Web Developer|Developer Toolbar enable the debug relative setting 
option to enable the dark theme 

- install developer extension 
https://addons.mozilla.org/en-US/firefox/addon/extension-developer/

or use developer profile to easy setup development environment 

- the extensions.xpiState
{
	"app-profile": {
		"firebug@software.joehewitt.com": {
			"d": "C:\\Users\\shange\\AppData\\Local\\Temp\\LRWEB2UI_Profiles\\18256764\\extensions\\firebug@software.joehewitt.com",
			"e": true,
			"v": "2.0.11",
			"st": 1439533217657,
			"mt": 1439360978081
		},
		"TruClient@hp.com": {
			"d": "C:\\Program Files (x86)\\HP\\LoadRunner\\dat\\FFProfile\\extensions\\TruClient@hp.com",
			"e": true,
			"v": "12.00",
			"st": 1438761090230,
			"mt": 1437568475000
		}
	},
	"winreg-app-user": {
		"dict@www.youdao.com": {
			"d": "C:\\Users\\shange\\AppData\\Local\\Youdao\\Dict\\Application\\stable\\extensions\\firefox",
			"e": true,
			"v": "1.81",
			"st": 1435729455642,
			"mt": 1341488246000
		}
	},
	"app-global": {
		"{972ce4c6-7e08-4474-a285-3208198ce6fd}": {
			"d": "C:\\Program Files (x86)\\HP\\LoadRunner\\bin\\Firefox\\browser\\extensions\\{972ce4c6-7e08-4474-a285-3208198ce6fd}",
			"e": true,
			"v": "37.0.2",
			"st": 1438761048316,
			"mt": 1429136986000
		}
	},
	"winreg-app-global": {
		"{D19CA586-DD6C-4a0a-96F8-14644F340D60}": {
			"d": "C:\\Program Files (x86)\\Common Files\\McAfee\\SystemCore",
			"e": true,
			"v": "15.1.0",
			"st": 1400671173109,
			"mt": 1400670201625
		},
		"fiddlerhook@fiddler2.com": {
			"d": "C:\\Program Files (x86)\\Fiddler2\\FiddlerHook",
			"e": true,
			"v": "2.4.4.5",
			"st": 1435728273058,
			"mt": 1369327018000
		},
		"otis@digitalpersona.com": {
			"d": "C:\\Program Files (x86)\\Hewlett-Packard\\HP ProtectTools Security Manager\\Bin\\FirefoxExt",
			"e": false,
			"v": "5.0.0.5551",
			"st": 1439172913384,
			"mt": 1375686806000
		}
	}
}

- development command flags 
As of Gecko 2 (Firefox 4), JavaScript files are cached ("fastload"). The -purgecaches command-line flag disables this behavior. Alternatively, you can set the MOZ_PURGE_CACHES environment variable.

- enable debug environment settings or manually set by about:config 
https://addons.mozilla.org/en-US/firefox/addon/devprefs/

- firefox global installation directory 
Copy the .xpi file into the <installation directory>\extensions

If you want to do a silent administrative install that immediately makes the extension available to limited users

     to uncompress the .xpi file yourself (as a ZIP file) to an appropriately named (extension's ID) folder. On Linux/Unix platforms you can use a helper script to determine extension IDs in an automated fashion. 
     
start Firefox as a user who has write permissions to <installation directory>\extensions and agree to have the items installed; then Firefox will uncompress the .xpi file to the extension's folder.      

- installation directory 
Windows

Examples of default installation directories:
Firefox	C:\Program Files\Mozilla Firefox\
Firefox (64-bit Windows) 	C:\Program Files (x86)\Mozilla Firefox\
Thunderbird	C:\Program Files\Mozilla Thunderbird\
Mozilla Suite	C:\Program Files\mozilla.org\Mozilla\
SeaMonkey 1.x 	C:\Program Files\mozilla.org\SeaMonkey\
SeaMonkey 2.0 	C:\Program Files\SeaMonkey\

Example search for Firefox: firefox.exe


Linux
Examples of default installation directories (32-bit Linux):
Firefox	/usr/lib/firefox-<version>
For example, if using Firefox 1.0: /usr/lib/firefox-1.0 

- install firefox extension in other directory 
    + reference 
    https://developer.mozilla.org/en-US/Add-ons/Setting_up_extension_development_environment?redirectlocale=en-US&redirectslug=Setting_up_extension_development_environment#Development_preferences
    
    + create a extension locate in other directory by 
        * get the extension id from the extension's install.rdf file 
        
        * create a file in the 'extension' directory under your profile directory with the extension's id as the file name. rather use GUID we could use name@domain, then the proxy file name will be same as that id, with no curly brackets{} 
        
        * the contents of this file should be the path to the directory that contains your install.rdf file 
        
        * place the file in the extension folder of your profile adn restart the application
        
- truClient addon install directory 
C:\Program Files (x86)\HP\LoadRunner\dat\FFProfile\extensions\TruClient@hp.com

- package.json, package.json are written into the install manifest when the add-on is built using jpm xpi.
    + reference, https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/package_json#engines
    
    + access the manifest data by in any oher module 
    var title = require("./package.json").title;
    
    + some useful keys 
    
- install manifest is the file an add-on manager-enabled XUL application, format is RDF/XML. must be called install.rdf at the top level of XPI file 
    + simple sample 
<?xml version="1.0" encoding="UTF-8"?>

<RDF xmlns="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:em="http://www.mozilla.org/2004/em-rdf#">
  <Description about="urn:mozilla:install-manifest">
    <!-- properties -->
  </Description>
</RDF>

    + reference, https://developer.mozilla.org/en-US/Add-ons/Install_Manifests
    + relative properties 
    bootstrap, tells the application whether the extension is boot-strappable.only works for appliction with em:type="2"
    type, 2 extension, 4 themes, 8 locale, multiple item package, spell check dictionary 
    unpack, include xpcom them must be false 
    
- structure of an installable bundle 
https://developer.mozilla.org/en-US/docs/Bundles
/install.rdf, install manifest 
/application.ini, launch manifest
/bootstrap.js, for extensions not requiring a restart, other files and directories chrome.manifest, components, default in bootstrapped extensions are not processed by supporting application 
/chrome.manifest, chrome registration manifest 
/components/*, xpcom components(*.js, *.dll), interface files from *.xpt 
/defaults, /preferences/*.js, default preferences 
/plugins/*, NAPI plugins 
/chrome/icons, /default/*, window icons 
/icon.png, extension icon 32px x 32px 
/icon64.png, extension icon 64px x 64px 
/options.xul, extension options for display in the add-ons manager 
Additional resources (such as chrome:// or resource:// providers can be registered in the chrome.manifes

- firebug manifest file contain a setting 
content firebug content/firebug/ contentaccessible=yes

contentaccessible doesn't contain in truClient manifest 

- set the bootstrap to true setting in extension.json in the profile folder is force display the debug button but truClient plugin will not be loaded properly 

- chrome, is any visible aspect of aside from the webpages themselves(toolbar, menu, tabs), chrome manifest 
mozilla locates chrome.manifest file for extensions and themes, a supplier fr chrome for a given window type is called chrome provider, three basic types 
    + content, main source file for a window description comes from content provider 
    + local, localizable applications keep all their localized information in local provider 
    + skin, a skin provider is responsible for providing a complete set of files that describe the visual appearance of the chrome 
    
    + character @#;:?/ are not allowed in the packagename 
    
    + syntax instructions 
COMMENTS, # 
mainifest, maifest subdirectory/foo.manifest [flags]
binary-component, binary-component components/*.dll [flags]
interfaces, component/mycomponent.xpt [flags]
component, component {0000-000-00...} components/mycomponent.js [flags],  a component CID implemented by an XPCOM component implemented in JavaScript (or another scripting language, if applicable). 
contract, contract @foobar/mycontract;1 {00000-000...}[falgs]
category, category entry-name value [falgs], register an entry in the category manager 
content, content packagename uri/to/files/ [flags], register a location to use when resolving the URI chrome chome://packagename/content/... the uri ma be absolute or relative to the location of the manifest file must end with '/'
local, locale packagename localname uri/to/files/ [flags], chrome://packagename/locale/... .
skin, skin packagename skinname uri/to/files/ [flags], a skin package 
overlay, overlay chrome://URI-to-be-overlaied chrome://overlay-URI [flags]
style style chrome://URI-to-style chrome://stylesheet-URI [flags], style overlay (custom css which will be applied to a chrome page)
override, override chrome://package/type/original-uri.whatever new resolved-uri [flags]
resource, resource aliasname uri/to/files/ [flags]

        * flags 
application 
appversion 
platform version 
contentaccessible 
os 
osversion 
abi, it can specify which ABI/OS by using this directive. The value is taken from the nsIXULRuntime OS and XPCOMABI values  
platform 
process 
xpcnativewrappers 
remoteenabled, uri will always be loaded into chrome process, true then the page will be loaded in the same process in the as the browser that loaded it 
remoterequired, the default is that a given chrome, uri will always be loaded into the chrome process, set to true then will be loaded into a child process  

        * supported in bootstrapped add-ons 
manifest
content
locale
skin
override

    + platform specific files, use manifest file 
    
- extension packaging 
MIME type recognized by Firefox for XPI files is application/x-xpinstall
    + submit addon https://developer.mozilla.org/en-US/Add-ons/Submitting_an_add-on_to_AMO
    + install extension files directly, you can install the extension files directly to <appdir>/extensions/<extensionID>
    
    + including add-ons in a customized application, A customized application can include add-ons (including extensions and themes) by placing the unpacked (that is, not the XPI files, but the packages' contents) in the <appdir>/distribution/bundles directory.
    
    + adding extensions using the window registry, https://developer.mozilla.org/en-US/docs/Adding_Extensions_using_the_Windows_Registry
    
    
- install firefox extension from registry 
https://developer.mozilla.org/en-US/docs/Adding_Extensions_using_the_Windows_Registry

- boostrapped extensions, instead of use overlays. it programmatically insert themselves into the application. this is using a special script file 
    + startup and shutdown process. when extension startup, it must manually inject its user interface and other behavior into the application 
        * startup(), add interface and behavior 
        called when extension is first isntall 
        becomes enable 
        application startup with extension enable 
        
        * shutdown(), clean 
        uninstall 
        become disable 
        quits the application and extension is enable 
        
    + notes on modifying the application user interface, chrome.manifest file 
    make addon content available via chome://uri  using content, local skin ...
    replace existing chrome://uris with your content 
    
    you still cannot register XUL overlays from a boostrapped add-on 
    
    + adding user interface manually. need to lookup relevant application UI by their id calling document.getElementbyId(), then manipulate to inject your UI 
    
    get access to the menu bar in Firefox with document.getElementById("main-menubar").
    
    + creating a boostrapped extension <em:boostrap>true</em:boostrap>
    
    + boostrap entry points, several specific functions 
    void startup(data, reason)
    
    data, https://developer.mozilla.org/en-US/Add-ons/Bootstrapped_extensions#Bootstrap_data
    reason, https://developer.mozilla.org/en-US/Add-ons/Bootstrapped_extensions#Reason_constants
    
    void shutdown(data, reason)
    
    void install(data, reason), this function is called before the frst call to startup after extension is install 
    
    void uninstall(), called after the last call to shutdown() before uninstalled. It's important to keep in mind that uninstall() can be called even on extensions that are currently disabled, or are not compatible with the current application,  fires on downgrade and upgrade as well...
    
    + add-on debugger support ff 31+
    + localization same 
    + js and jsm files using property files you have to use property files(https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/Property_Files)
    
    have example 
    + xul and html files using entities from dtd files 
        * have to change the html file's extension to be .xhtml 
        * doctype must be defined point to a dtd file in your local folder such as <!DOCTYPE html SYSTEM "chrome://l10n/local/mozilla.dtd">
        
        * must add xmlns attribute to html tag 

    + convert overlay to restartless 
    https://flagfox.wordpress.com/2014/01/19/writing-restartless-addons/
    https://developer.mozilla.org/en-US/Add-ons/How_to_convert_an_overlay_extension_to_restartless
    
- how bootstrapped extensions work
    + boostrapped extension 
    https://developer.mozilla.org/en-US/Add-ons/Bootstrapped_extensions#Bootstrap_data
    
    From Firefox 31 onwards, you can use the Add-on Debugger to debug bootstrapped add-ons.
    + addon manager 
    https://developer.mozilla.org/en-US/Add-ons/Add-on_Manager/AddonManager
    + references 
    https://developer.mozilla.org/en-US/Add-ons/How_to_convert_an_overlay_extension_to_restartless
    
    + requirement, XUL overlays and windows, jsm files, chrome& resource mappings with localization. no xpcom components of your own 
    + minimum version fireforx 17 
    + steps 
        * services.jsm, do so via privileged javascript code 
        Components.utils.import("resource://gre/modules/Services.js")
        
        * no more resource://URIs for files internal to your bundle 
        
        * load your jsm from chrome://
        
        * audit any remaining resource://URI usage internal to your extension 
        
        * no more nsIFile access for files internal to your bundle 
        use addon manager api to load data 
        use nsIZipReader to load data 
        use XMLHttpRequest to load data 
        
        * maually handle default peferences,
        reference default preference, the key part of any extension is the default settings that come with it. 
        https://developer.mozilla.org/en-US/docs/Default_Preferences
        
         User supplied prefs are set using the GUI and also by modifying a profile's prefs.js file (which uses the user_pref() function)
         
        for packed extension, you can either load a module similar to firebug's preLoader.js or load this work around module 
        
        * no more internal JAR files 
        
        * no more xul overlays, XUL element you need to create for your add-on to add your interface, it needs to go into a XUL window 
        
        details on adding elements dynamically to chrome XUL window 
        
        * manually handle golbal css stylesheets 
        
        * window icons 
        
        * bootstrapjs, in the root of you xpi 
        
        * bypass when loading properties files 
        
        * put it all together, the new entry point of your add-on is via bootstrap.js:startup() rather than a load hadnler in a XUL overlay 
        
- legacy extensions, use XUL overlays to specify the interface, apis available to previleged code such as tabbrowser and javascript modules to interact with the application and content 
  
it is superseded by restartless extensions and add-on sdk 

- working with multiprocess firefox, migrate to chrome style 

- compare extension thechniques 
    + reference 
    https://developer.mozilla.org/en-US/Add-ons/Working_with_multiprocess_Firefox
    sdk > restartless > legacy 
    + add-on sdk with high level api(https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs) and low level api(https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs). only work with high level api could also support android 
    
    all sdk based extension is restartless 
    + manually boostratpped restartless extensions, more low level way to develop extensions than the sdk 
    for mobile need a new code base. it support wrap android widgets 
    
    in manually boostrapped and code running in a traditional overlay extension it automatic chrome previleges giving it access to browser objects like tabbrowser and xpcom
    
    restartless extensions have relatively complex cleanup requirements that they must satisfy when they are disabled or uninstalle
    
    + legacy overlay based restartful extensions, use XUL to define the user interface. it doesn't works with android
    
    after install the user must restart. javascript code automatic get chrome previleges. give access browser objects like tabbrowser as well as XPCOM objects
        * advantage XUL overlays are very powerful and can integrate very deeply with the browser's UI.
        * disadvantage 
        don't works with android 
        xul is large complex and mozilla specific 
        required restart browser 
        compatibility of the apis your code relies on is not guaranteed across versions of the host applications 
    
- XUL migration guide, https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/XUL_Migration_Guide  should you migrate? 
    + your add-on can accomplish everything it needs using only the supported api, it's a good candidate for migration 
    + needs lots of thrid party packages low-level apis or xpcom, then the cost of migrating is high, may be not worth it 
    + it is possible to migrate the code from overlay to restartless, but no XPCOM components of your own. 
    
    required to use a experimental feature of the sdk 
    https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Chrome_Authority
    var {Cc, Ci} = require("chrome");
    Cc an alias for components.classes 
    Ci, an alias for components.interfaces 
    Cu, an alias for components.utils 
    Cr, an alias for components.results 
    Cm, an alias for components.manager 
    
    minifest generation, manifest is a list included in the generated xpi, which specifies which modules have requested require() access to which other modules. it also record which module requested chrome access. this list is genearted by scanning all included modules for require(xyz)
    
- content scripts 
    + reference https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts
    + add-on's main code including "main.js" and other module in "lib" can use the high-level and low-level 
    + content scripts can't use the sdk's api but can access web content 
    + sdk apis that use content scripts like page-mod, tabs provide functions that enable the add-on's main code to load content scripts into web pages 
    + content script can be loaded in as strings 
    + message-passing api allows the main code and content scripts to communicate with each other 
    
    + high-level sdk modules can use content scripts to modify web pages 
    page-mod, enables you to attach content scripts 
    tabs, exports a tab object for working with a browser tab 
    page-worker, lets you retrieve a web page without displaying it 
    content-menu, use a content script to interact with the page in which the menu is invoked 
    
    
# technologies used in developing extensions 
- reference https://developer.mozilla.org/en-US/Add-ons/Overlay_Extensions/Firefox_addons_developer_guide
- role of each technology 
    + XUL, skeleton 
    + css, skin 
    + javascript, muscle
    + xpcom, brain
    
 AJAX (Asynchronous JavaScript and XML);    
    
- introduce to XUL
display content of certain xul file by 
$ firefox -chrome file_uri.xul 

another way is use window.openDialog('another.xul', '_blank', 'chrome,all,dialog=no');

    + common attribute 
id, 
class, 
orient, 
align and pack, used to specify layout in a box 
flex, indicates the element should be expanded to take up all of a window's height or width 
oridinal, following their order of appearance in the source code 
box size, explicity use widht height 
hidden and collapsed, turn off the display of elements 
disabled 
tooltiptext 
persist, record and store a xul element's state after it has be changed by a user 

    + widgets that can be used in xul 
        * root, use windowType attribute general root elemetns 
window 
page, for sidebar panels and other xul documents 
dialog 

    + menus, executing commands when selecting menu items, use onclick onkeypress event handler 
        * special menu items 
raido button 
checkbox 
Contextual menus 
Buttons 
Toobar buttons 

    + input control 
label 
Checkboxes 
RadioButtons, radio
TextBox 
AutoComplete 
MenuList
    + Special elements 
Embedding images 
Browser and tabbrowsers, you can set the src attribute of an iframe element to the URI of another XUL document or web page, iframe is rarely use in XUL, the browser element is used more often . 

keyboard shortcut 
    
    + elements related to box layout 
spacer 
grid 
stack
tab 

    + xul functions 
overlays give you the ability to combine mutiple XUL documents and process them as a single xul document 

specified by the xul-overlay will be read in at the same time as the current XUL document.

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="chrome://global/skin/"?>
<?xul-overlay href="overlayDocument.xul"?>
<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <hbox id="box1">
    <label id="label1" value="Text label"/>
  </hbox>
  <hbox id="box2">
    <label id="label2" value="Text label"/>
  </hbox>
</window>
    + appending elements 
<?xml version="1.0" encoding="UTF-8"?>
<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <button label="Button 1"/>
  <button label="Button 2"/>
  <button label="Button 3"/>
</overlay>

    + external entities, also use entity references based on DTD
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="chrome://global/skin/"?>
<!DOCTYPE window SYSTEM "chrome://testapp/locale/testapp.dtd">
<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <button label="&button.1.label;"/>
  <button label="&button.2.label;"/>
</window>

    + substituting css for attribute declarations 
    
tabbrowser .tabbrowser-strip {
  -moz-box-ordinal-group: 2;
}
tabbrowser tabpanels {
  -moz-box-ordinal-group: 1;
}

    + icons corresponding to filetypes moz-icon://.PDF?size=16
    + spin buttons 
    + slider 
    
- using xpcom implementing advanced processes 
    + javascript lacks function for open files and character code conversion... 
    + xpcom, is a framework for developing platform independent components 
    + reference materials 
    api, https://rndwiki.corp.hpecorp.net/confluence/display/TruClientSTORM/Step+by+Step+Guid+to+Enable+Add-on+JavaScript+Debugging+in+FireFox?flashId=717399462
    
    xpidl, https://developer.mozilla.org/en-US/docs/Mozilla/XPIDL
    
    mozilla cross reference, http://mxr.mozilla.org/
    
    + calling xpcom from xpconnect, each component identify with a contract id form @domain_name/module_name/component_name;version_number
    
    interfaces names usually have the forms nsIxxx 
    
    some of the component need create instance by getService() for other may required use createInstance(), don't instead of other can cause problems 
    
    demo create xpcom reference 
    <script type="application/javascript">
        <![CDATA[
        var ioService = Components.classes['@mozilla.org/network/io-service;1']
                       .getService(Components.interfaces.nsIIOService);
        alert(ioService);
        ]]>
    </script>
    + grant privileges without manual confimation for a specific file by 
    user_pref("capability.principal.codebase.test.granted", "UniversalXPConnect");
    ...
    
    + frequently used XPCOM functions 
    Get window, nsIWindowMediator 
    
    ...
    
    + manipulating files using nsILocalFile 
    
    + Traversing directories, nsILocalFile.append()
    
    + binary file, nsIFileInputStream 
    
    + character encoding conversion, nsIScriptableUnicodeConverter 
    
    + using method from XUL elements 
    
    
# stackoverflow firefox addon questions, http://stackoverflow.com/questions/tagged/firefox-addon-sdk

# using javascript code modules 
- concept introduced in Gecko 1.9, javascript code module is JavaScript code located in a registered location 

XUL script or javascript xpcom script using Components.utils.import() or Components.utils["import"]()

- create a javascript code module 
//my_module.jsm 
var EXPORTED_SYMBOLS = ["foo", "bar"];

function foo() {
  return "foo";
}

var bar = {
  name : "bar",
  size : 3
};

var dummy = "dummy";

//import the my_module

Components.utils.import("resource://app/my_module.jsm");

alert(foo());         // displays "foo"
alert(bar.size + 3);  // displays "6"
alert(dummy);         // displays "dummy is not defined"

- url for a code module, code modules can only be load using a chrome:(), resource:, or file:uri 
    + extension for firefox 4 already have chrome.manifest with content instructions, then put your code module in your content folder and reference it like other content files via 
    chrome://<yourextension>/content/<module_name.jsm>

- sharing objects using code modules, Components.utils.import() is cached the module, two imported module in different js file will use the same cache version. so the changes in both js file will effect each other 
multiple import will not reload the loaded module 

- unloading code modules, Components.utils.unload unload a previously imported code module 
- extending resource urls, Gecko 2.0 te most common way to load code modules was using resource:urls 
resource://<alias>/<relative-path>/<file.js\jsm>

multiple pre-defined aliases setup by the xul runtime 
app, alias to the location of the xul application 
gre, alias to the location of the xul runtime 

alias must be unique to your add-on 

- using chrome.manifest, add custom aliases by registering an alias chrome manifest 

resource aliasname uri/to/files/

- programmatcally add alias, aliases to paths that can be represented as nsILocalFile can be programmatically added as well 
// Import Services.jsm unless in a scope where it's already been imported
Components.utils.import("resource://gre/modules/Services.jsm");

var resProt = Services.io.getProtocolHandler("resource")
                      .QueryInterface(Components.interfaces.nsIResProtocolHandler);

var aliasFile = Components.classes["@mozilla.org/file/local;1"]
                          .createInstance(Components.interfaces.nsILocalFile);
aliasFile.initWithPath("/some/absolute/path");

var aliasURI = Services.io.newFileURI(aliasFile);
resProt.setSubstitution("myalias", aliasURI);

- custom modules and xpcom components
    + prior to Gecko 2.0 javascript xpcom components are loaded before chrome registration, you have to moving the call the Components.utils.import() into the XPCOM constructor 
    
    + you should not typically put your javascript code modules in a jar file in your add-on 
    
- importing commonjs modules, with component.utils.import 
const { require } = Cu.import("resource://gre/modules/commonjs/toolkit/require.js", {})

this will import require() 

you can import add-on sdk modules in just the same as the way you could from an sdk add-on 

import other module by 
var myModule = require("resource://path/to/my/module.js");

# js-ctypes 
- introduction 
js-ctypes allows application and extension code to call back and forth to native code written in C. C++ support is possible through vtable pointers see Using COM from js-ctypes

other work made possible by js-ctypes is JNI, this is elaborated in the JINI.jsm. The JNI.jsm JavaScript code module abstracts all of the js-ctypes required for writing JNI code.

https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/JNI.jsm

- js-ctypes is only available from chrome code that is ctypes is not available to websites only application and extension code 

- using js-ctypes 

//import 
Components.utils.import("resource://gre/modules/ctypes.jsm")

    + load native library 
var lib = ctypes.open("user32.dll");

    + library search path 
    application dir 
    system dir 
    16-bit system 
    windows directory 
    
    + close library 
lib.close();

- call window api 
Components.utils.import("resource://gre/modules/ctypes.jsm");

var lib = ctypes.open("C:\\WINDOWS\\system32\\user32.dll");

/* Declare the signature of the function we are going to call */
var msgBox = lib.declare("MessageBoxW",
                         ctypes.winapi_abi,
                         ctypes.int32_t,
                         ctypes.int32_t,
                         ctypes.jschar.ptr,
                         ctypes.jschar.ptr,
                         ctypes.int32_t);
var MB_OK = 0;

var ret = msgBox(0, "Hello world", "title", MB_OK);

lib.close();

- declare function by 
const clock = lib.declare("clock", ctypes.default_abi, ctypes.unsigned_long);

console.log("Clocks since startup: " + clock());

    + return values, if return value could be fit into javascript nubmers(32bit or smaller, or is a double or float) then just use javascript number, other wise will return a ctypes object 

- declaring and using callbacks, A callback is declared by using ctypes.FunctionType The first argument is the calling convention, the second argument is the return type, and the third is an array of arguments the callback expects. 

var myFuncTypeDeclaration = ctypes.FunctionType(ctypes.default_abi, ctypes.boolean, [ctypes.int, ctypes.voidptr_t]);

function myJSCallback(cInt, cPtr) {
    return true; // as the return of the FunctionType was ctypes.boolean we must make our javascript callback return boolean otherwise js-ctypes will throw error saying unexpected type return
}

var myCCallback = myFuncTypeDeclaration.ptr(myJSCallback);

//callback return void and no arguments 
var myFuncTypeDeclaration = ctypes.FunctionType(ctypes.default_abi, ctypes.void_t, []);

function myJSCallback() {
    return undefined; // as the return of the FunctionType was ctypes.void_t we must return undefined OR dont return at all otherwise js-ctypes will throw an error saying unexpected type
}

var myCCallback = myFuncTypeDeclaration.ptr(myJSCallback);

- using callbacks 
function myJSCallback(foo, bar) { .... };
var funcType = ctypes.FunctionType(...);
var funcPtrType = funcType.ptr;
var regularFuncPtr = funcPtrType();
var callback = funcPtrType(myJSCallback);

//or use online code 
var callback = ctypes.FunctionType(...).ptr(function(...) {...});

    + js-ctypes automatically handles the conversion between arguments and return values, for complex tpes temporary CData objects will be created 

- declaring types 

    + primitive types 
var i = ctypes.int32_t(5);

some_c_function(i.address());

    + declaring new primitive types 
const DWORD = ctypes.uint32_t 

    + structure, Structures are declared using the ctypes.StructType() constructor. 
const struct_tm = new ctypes.StructType("tm",
                        [ { "tm_sec": ctypes.int },
                          { "tm_min": ctypes.int },
                          { "tm_hour": ctypes.int },
                          { "tm_mday": ctypes.int },
                          { "tm_mon": ctypes.int },
                          { "tm_year": ctypes.int },
                          { "tm_wday": ctypes.int },
                          { "tm_yday": ctypes.int },
                          { "tm_isdst": ctypes.int } ]);

    + Opaque structures, whose content fields are not known. You can then define the fields in the opaque structure later by calling the CType object's define() method.
    
var someStructure = ctypes.StructType("someStructure");
var anotherStruct = ctypes.StructType("anotherStruct", [ {field1: opaque.ptr} ]);
someStructure.define([ { ptrToAnotherStruct: anotherStruct.ptr } ]);

    + arrays, To declare a new array type, you use the ctypes.ArrayType() 
    
    //declare with unspecify length 
const FILE = new ctypes.StructType("FILE").ptr;      // Create FILE as a FILE * type
const FileArray = new ctypes.ArrayType(FILE);        // Create a FileArray type

    //declare with specify length 
const FileArray = new ctypes.ArrayType(FILE, 20);

    + pointers 
const IntPtr = new ctypes.PointerType(ctypes.int);

//point to user 

- memory management, when binary code hands back a pointer/handle to allocated memory the js code must make sure to free that memory with the correct allocator. usually will need a free function from the library 

- keep objects alive 
    + a function or static data declared using declare() will hold that library alive 
    + directly access the contents of a CData object using address(), addressOfElement() or contents will not keep the object alives 
    
    + closure 
    + when in doubt, malloc(), positively need data around you cn use malloc()
    
- standard os libraries 
    + reference https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Standard_OS_Libraries
    + winapi 
    + com 
    + gdk 
    + gtk+ 
    + x11
    + mac os x
    + cocoa 
    + android can be used by js-ctypes through the JNI libraries 
    
- type conversion 
    + reference https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Type_conversion
    + implicit convert, done automatically in the function callback method 
    
    + explicit convert, js-ctypes, data could be converted explicitly when passing to CData constructor 
    ctypes.int32_t("123");
    
    explicit convert will try implicit convert first. then use the constructor function to convert the value 
    
- working with ArrayBuffers, ArrayBuffer's are simply byte arrays. In js-ctypes this is a ctypes.uint8_t.array(###) (ctypes.unsigned_char are also ctypes.uint8_t).
    
// context is a CanvasRenderingContext2D of some canvas
var imageData = context.getImageData(x, y, w, h);
var array = imageData.data; // array is a Uint8ClampedArray
var buffer = imageData.data.buffer; // buffer is a ArrayBuffer

// incomingBuffer is a TypedArray
var imageData2 = context.createImageData(w, h);
imageData2.data.set(incomingBuffer);

- working with data, data types for use with js-ctypes are represented by CType objects. 
//create an array 
let arrayType = ctypes.ArrayType(ctypes.int32_t);
let myArray = new arrayType(5);

//type casting 
var newObj = ctypes.cast(origObj, newType);

reference, https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Working_with_data

- ctypes open 


# xpcom 
- javascript xpcom development 
https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/platform_xpcom
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Building_components_in_JavaScript
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface
- implementation 
    + define interface 

# all firefox extesnion required to be signed 
- https://wiki.mozilla.org/Addons/Extension_Signing#FAQ

# firefox development for future 
- reference 
https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/
- WebExtension, it is a syntax works for chroe, safari or opera extension, microsoft edge too 
    + will be signed through addons.mozilla.org(AMO) through the developer's website 

    + fully compatible with Electrolysis 
    + add-ons based on the JetPack SDK will work well as long as they don't use require('chrome') or some low-level apis to touch o bjects in the content process 
    + add-ons that touch content will happen via cross-process object wrappers (CPOWs)
    
- work with multiprocess firefox 
    + add-on development guidelines 
    https://developer.mozilla.org/en-US/Add-ons/Working_with_multiprocess_Firefox
    
    + test add-ons wth electrolysis enabled 
    Opens|General check Enable multi-process and restart the browser 
    
    + update add-ons as requried to remove the reliance on CPOWs make them electrolysis-compatible 
    + start consider how existing extensions will make use of the WebExtensions 
    
    + November 3rd will enable beta 
    + June 2016 may release, addon compatibility test http://arewee10syet.com/, install the addon and tell the behavior 
    
- signing, requrie to submit extension and signed by mozilla 
- Deprecation of XUL, XPCOM, and the permissive add-on model 
Add-ons that are built using the new WebExtension API will continue to work. We will also continue supporting SDK add-ons as long as they don’t use require(‘chrome’) or some of the low-level APIs that provide access to XUL elements

- moving forward
- common ask questions 
https://wiki.mozilla.org/WebExtensions/FAQ

- webextension api wiki page 
https://wiki.mozilla.org/WebExtensions

- google extension 
https://developer.chrome.com/extensions

- Opera extension 
https://dev.opera.com/extensions/

- forum for firefox add-on dev 
https://discourse.mozilla-community.org/c/add-ons/development

- mozilla question forum 
https://ask.mozilla.org/questions/

- add-on compatibility test result tables 
http://arewee10syet.com/

- webextension wiki 
https://wiki.mozilla.org/WebExtensions

- electrolysis wiki 
https://wiki.mozilla.org/Electrolysis

- question about js-xpcom 
https://discourse.mozilla-community.org/t/does-js-xpcom-will-be-deperacated-in-the-future-too/4105/3

# Working with multiprocess Firefox 
- reference urls, https://developer.mozilla.org/en-US/Add-ons/Working_with_multiprocess_Firefox
- if you use the new WebExtension API you won't be affected 
- if you only use the add-on sdk's high-level APIs you wont' be affect 
- don't access web content, you won't affected 
- load XUL content into tabs via chrome:URLs, you won't be affected 
- you probably will be affected 
overlay extension 
boostrapped extesion 
low-level sdk apis 
window/utls
tabs/utls 

- limitation of chrome scripts, https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Limitations_of_chrome_scripts
- test your add-on with mutiple processes  
    + use firefox nightly 
    + disable shims 
   
- adapting to multiple processes 
    + webextension api 
    + add-on sdk's high level apis 
    + communicate with content process, https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Multiprocess_Firefox_and_the_SDK
    
    + process scripts or frame scripts both kinds of script run in the content process. They communicate with the rest of the extension using a message passing api 
        * process script run once per content process, set up singleton like observers and content policies for extensions 
        * frame script run once per tab, allow access tab's top-level window and docshell, frame script could be used to modify DOM
    
    + updating your code 
    factor the part of your extensions that access web content into one or more separate frame/process scripts 
    
    register chrome 


# Plugin 
- relative resource, https://developer.mozilla.org/en-US/docs/Plugins/Guide/Plug-in_Basics  
- window 
Directory pointed to by MOZ_PLUGIN_PATH environment variable.
%APPDATA%\Mozilla\plugins, where %APPDATA% denotes per-user Application Data directory.
Plug-ins within toolkit bundles.
Profile directory\plugins, where Profile directory is a user profile directory.
Directories pointed to by HKEY_CURRENT_USER\Software\MozillaPlugins\*\Path registry value, where * can be replaced by any name.
Directories pointed to by HKEY_LOCAL_MACHINE\Software\MozillaPlugins\*\Path registry value, where * can be replaced by any name.
- plug-ins are platform-specific, you must port them to every operating system and processor platform upon which you want to deploy your plug-in.

- life cycle 
    + check for a plug-in with a matching MIME type
    + load the plug-in code into memory
    + initialize the plug-in
    + create a new instance of the plug-in

    + The browser calls the plug-in API function NPP_New when the instance is created. Multiple instances of the same plug-in can exist (a) if there are multiple embedded objects on a single page, or (b) if several browser windows are open and each displays the same data type.
    
    + A plug-in instance is deleted when a user leaves the instance's page or closes its window; Gecko calls the function NPP_Destroy to inform the plug-in that the instance is being deleted.
    
    + If multiple plug-ins handle the same MIME type, the first plug-in registered handles the MIME type. 
    
    + A plug-in is a dynamic code module that is native to the specific platform on which the browser is running. It is a code library, rather than an application or an applet, and runs only from the browser. 

# WebSecurity 
- same origin policy 
https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy    

# C++ portability guide 
- reference links 
https://developer.mozilla.org/en-US/docs/Mozilla/C++_Portability_Guide

# Mozilla documents 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla

# Firefox command line options 
https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options
- start js debugger 
$ firefox -jsdebugger

# ctypes open native files 
https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/ctypes.open#Custom_Native_File
    
# IRC 
- extdev 
erxin	Does anyone know, if the extension developed with XPCOM will be deprecated in the new version of Firefox? Thanks.
10:42	gkatsev	erxin: it's at least a year out
10:49	erxin	So what is the best technology to developing an add-on to fit for the future Mutiprocess Firefox(Electrolysis). 
10:53	erxin	I plan to use JavaScript+CSS+Html + js-ctypes with necessary native logics. Does this will work in the future? Thanks.
10:54	noida	no other options erxin
10:54	noida	the webext api is under development
10:54	noida	which uses xpcom itself lol so im not sure
10:54	noida	i just keep going like normal
10:57	erxin	@noida So during the mid ages we still have to use XPCOM?
10:57	noida	yep
10:57	noida	i think though webext api and sdk abstract things so they'll change the underlying xpcom to servo whenever that happens
10:57	noida	so try using those without using require('chrome')

- firefox 
Does anyone know, if the XPCOM extension will be deprecated in the new version of Firefox? Thanks. 
09:47	Mardeg	erxin: I'm not familiar with an extension of that name, got a link?
09:48	erxin	XPCOM is not a extension. It is a technology supply by mozilla which is like the MS COM
09:48	erxin	https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM
09:49		*** Cydrobolt quit (Quit: oooh...what does THIS button do?)
09:49		*** Matthew quit (Quit: This computer has gone to sleep...)
09:49	Mardeg	erxin: yeah they're deprecating that over the next year, but your use of "the new version" made it sound like you were worried about a specific extension
09:50	erxin	Yes currently our product have a Firefox extension which is implemented with native c++ XPCOM
09:51	erxin	Does this kinds of extension will be deprecated? As I known XPCOM also support implemented with JavaScript
09:52		*** Cydrobolt joined #firefox
09:52	erxin	So I'm curious if the XPCOM will be deprecated or not in the future. 
09:53	Mardeg	firebot: xpcom end bugs
09:53	ssokolow	Ugh. Well, I found a workaround. It was trivial to modify my export_tab_groups.py script so it would read Session Manager saved sessions so now I can just waste my entire afternoon reinventing Tab Groups in a more trustworthy manner.
09:53	Mardeg	well they weren't helpful results
09:54		*** jrgill quit (Ping timeout: 121 seconds)
09:54		*** joe9 joined #firefox
09:55	ssokolow	I'd say "this sort of thing is why Firefox lost so much market share" but Chrome has a history of actually losing session recovery DATA rather than just losing the metadata.
09:55	erxin	There are lots of documents, I'm diving into the sea of docs.. x(. Is there a technical roadmap for mozilla?
09:55		*** Matthew joined #firefox
09:56	Mardeg	erxin: looks like your extension will be among those talked about at https://wiki.mozilla.org/WebExtensions/FAQ#Which_add-ons_will_stop_working_when_XUL.2FXPCOM_is_deprecated.3F
09:58	erxin	Yes current it is implement with XUL/XPCOM. I'm the one who is chosen to upgrade it to fit for the new standard.  
09:59		*** bbondy quit (Connection closed)
10:00		*** mastizada1 joined #firefox
10:00		*** bbondy joined #firefox
10:00	Mardeg	erxin: in that case you should /join #extdev
10:00	erxin	So, does the XPCOM will be deprecate or just the XUL layout? 
10:00		*** mastizada quit (Ping timeout: 121 seconds)
10:00		*** mastizada1 is now known as mastizada
10:01	Mardeg	and ask more specific questions in that channel
10:01	markh	erxin: I think both of them are aspirational goals rather than something that will happen soon
10:01	erxin	@Mardeg Thank you.
10:01	Mardeg	don't expect your extension to still work in 2017 onwards, just sayin' 
10:02	markh	I'd say 2019 
10:03	markh	(but there are 2 questions here - what we prevent extensions doing vs what Firefox itself does. For Firefox itself, we also want to get rid of xpcom and xul, but we have no plan on how to do that or what will replace them)
10:03	Mardeg	erxin: if the extensions isn't signed by Mozilla then it'll stop working in Firefox 42 anyway
10:33	erxin	@Mardge If we just install manually install the extesion into the firefox profile. Then do we have to sign the extension?
10:34	erxin	@Mardeg,  sorry for the typo 
10:35	Mardeg	yes, there won't be a way to circumvent it in normal Firefox
10:37	erxin	Thank you, for let me know that. 
10:37	Mardeg	erxin: see https://wiki.mozilla.org/Addons/Extension_Signing#FAQ
10:40	erxin	@Mardeg, Got it. Thank you! 
10:41	Jan\	erxin: there is a blog post about this
10:41	erxin	?
10:42		*** marco left #firefox ("")
10:42	Jan\	erxin: https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/
10:43	Jan\	erxin: have you read that post before ?
10:43	erxin	Does it means the best way to implement a extension is use pure JavaScript+CSS+Html + js-ctypes with necessary native logics. This will fit for the future multiprocess version of Firefox?
10:44	Jan\	erxin: did you read the blg post ?
10:45	erxin	@Jan, I did read it before. Thank you Jan.
10:45	erxin	I didn't read it -.-. sorry @Jan
10:47	erxin	Mistake input again. x_x...
10:48	markh	erxin: https://groups.google.com/d/msg/mozilla.dev.platform/XPhyLaFdH3o/NDmLF7kpLAAJ may help in terms of the recommended future way to incorporate binaries with your addon
10:48	markh	(the entire thread is probably worth reading)
10:52	erxin	OK. Lots of tabs are opened. I will read them all. ~ Thank you @markh

# w3c browser testing groups 
http://www.w3.org/testing/browser/

# build firefox nightly 
- reference, https://developer.mozilla.org/en-US/docs/Simple_Firefox_build
- command 
get code 
$ hp clone https://hg.mozilla.org/mozilla-central

configure build option, https://developer.mozilla.org/en-US/docs/Configuring_Build_Options, 
$ ./configure --help 

modify the .moziconfig

build 
$ ./mach build 

run 
$ ./mach run 
or 
$ ./mach run -P profile-name 
if the profile doesn't exist then will be create at <objdir>/tmp/scratch_user

rebuilding 
$ ./mach build 

rebuild parts 
$ ./mach buld path/to/dir 

update code 
$ hg pull -u 

# devtools hacking 
- after build firefox, https://wiki.mozilla.org/DevTools/Hacking
- do a clobber build 
 $ ./mach clobber
 $ ./mach build
 
clobber similar to make clean 

- open firefox and type about:config, add 
browser.dom.window.dump.enabled = true
to all windows which logs strings to stdout 

- mozilla source code structure 
https://developer.mozilla.org/en-US/docs/Mozilla_Source_Code_Directory_Structure


# xpcshell, is a XPConnect-enabled javascript shell, lets you run javascript code, it enable to run XPCOM functionality 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_bindings/XPConnect/xpcshell
- execute 
$ ./run-mozilla.sh ./xpcshell

xpcshell is almost always in the same directory as run-mozilla.sh

- using the latest version of javascript by add -v 180 to enable the new features such as let statement

# firefox source code hg list 
https://hg.mozilla.org/ 

# firefox bugzilla 
https://bugzilla.mozilla.org/

# get mozilla source code from mercurial
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial

# firefox xulrunner application 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/XULRunner/1.9.2#Windows_3

# replace activity manager with HAR
- reference 
https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html
https://www.maxcdn.com/one/visual-glossary/har-file/
- how to generate har file in firefox 
https://groups.google.com/forum/?fromgroups=#!topic/http-archive-specification/cw1asMOehO0
    + answers
One possibility is to use following configuration: 

* Firefox - the famous web browser 

* Firebug - extension for Firefox that allows to monitor HTTP 
communication for specific URL (see the Net panel for more info, some 
docs: http://www.softwareishard.com/blog/firebug/firebug-net-panel-timings/) 

* NetExport - extension for Firebug/Firefox that allows to export data 
collected by the Net panel into HAR file - http://www.softwareishard.com/blog/netexport/ 

Honza 
    + relative blogs 
http://www.softwareishard.com/blog/firebug/firebug-net-panel-timings/
http://www.softwareishard.com/blog/netexport/

- firebug project 
http://getfirebug.com/

source code 
https://github.com/firebug/firebug


# Firefox extension logging 

# Firefox extension reviewer 
https://wiki.mozilla.org/AMO:Reviewers

# Firefox extension signing wiki 
https://wiki.mozilla.org/Addons/Extension_Signing

# Build firefox xulrunner 
- build prerequest 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Windows_Prerequisites
- pymake 
https://developer.mozilla.org/en-US/docs/pymake
- creating xulrunner apps with the ozilla build system 
https://developer.mozilla.org/en-US/docs/Creating_XULRunner_Apps_with_the_Mozilla_Build_System
- window specify questions 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Mozilla_build_FAQ#Win32-specific_questions

- CDOT, FF relative opensource group 
http://zenit.senecac.on.ca/wiki/index.php/Main_Page

- mozilla build instruction for FF 
https://www.savarese.org/software/mozie/build.html

- build xulrunner 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/XULRunner/Build_Instructions
- articles tagged build documentation 
https://developer.mozilla.org/en-US/docs/tag/Build%20documentation?page=1
- xulrunner project document page 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/XULRunner
- talk history with Eyal 
Here is my mozilla FF repo. It could be use to build FF nightly. Does the XULRunner in this folder contain the same content with the downloaded one?

it might be, tough it is a differen tcompilation. Yet, i guess it is.

I think I could try two things
1. wait for the converting process end then try to compile again
2. revert my FF source repo to 41.0.2 then compile FF and copy the compiled xulrunner binaries. Is it OK?

I would suggest another thing.... 
They just have a bad check in the client.mk file. Let it try to compile now.
Anyway, I have created a batch file for you for futer compilations... Make it easier....

it uses pymake to compile in parallel.... with external config file.
Also, you might have issues with the debug build, since from 37.0 they don't link with msvcrd dkk
therefore, debug and release uses msvcr which will probably file with our code.

Let me know if this happens for you and we can fix it together.

OK. Thank you!!!
No problem. it sesms to start compiling now. Yes
:) :)

I am going for lunch. Let me know how it turns out. Basically I have created a batch file to receive the mozconfic and a command to execute. That is all/. 
OK have a good lunch :) I will g
o
Thanks ! bye for now. bye bye. :)

    + compile error information 
...
182:30.37 gencfu writes dummy out/build/icudt52l/confusables.cfu because of UCON
FIG_NO_REGULAR_EXPRESSIONS and/or UCONFIG_NO_NORMALIZATION and/or UCONFIG_NO_FIL
E_IO, see uconfig.h
182:32.42 generating out/tmp/icudata.lst (list of data files)
182:44.40    Creating library ../lib/icudt.lib and object ../lib/icudt.exp
182:44.43 genccode: --match-arch cpu=332 bits=32 big-endian=0
182:44.43 pkgdata: link.exe /nologo /release /out:"../lib/icudt52.dll" /DLL /NOE
NTRY /MANIFEST:NO  /base:0x4ad00000 /implib:"../lib/icudt.lib" "./out/tmp\icudt5
2l_dat.obj" "./out/tmp/icudata.res"
182:46.51 Note: rebuild with "c:/mozilla-build/mozmake/mozmake.EXE VERBOSE=1 all
-local" to show all compiler parameters.
182:46.73 d:/SampleProjects/xulrunner/mozilla-release/config/recurse.mk:32: reci
pe for target 'compile' failed
182:46.73 mozmake.EXE[3]: *** [compile] Error 2
182:46.73 d:/SampleProjects/xulrunner/mozilla-release/config/rules.mk:549: recip
e for target 'default' failed
182:46.73 mozmake.EXE[2]: *** [default] Error 2
182:46.73 d:/SampleProjects/xulrunner/mozilla-release/client.mk:401: recipe for
target 'realbuild' failed
182:46.73 mozmake.EXE[1]: *** [realbuild] Error 2
182:46.74 client.mk:171: recipe for target 'build' failed
182:46.74 mozmake.EXE: *** [build] Error 2
182:46.77 132 compiler warnings present.
2

- reference all from the developer guide 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide

- Gmake vs. Pymake, gmake use unix style path, pymake use window style path 
if using the default objdir, you might type in the root of your source tree: mkdir obj-i686-pc-mingw32; cd obj-i686-pc-mingw32; python ../build/pymake/make.py -f ../client.mk

https://developer.mozilla.org/en-US/docs/Gmake_vs._Pymake

- mach, automatic choose pymake or gmake 
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/mach

    + basic configuration rules 
1.If a .mozconfig file exists in the current directory, use that.
2.If the MOZCONFIG environment variable is set, use the file pointed to in that variable.
3.If the current working directory mach is invoked with is inside an object directory, the mozconfig used when creating that object directory is used.
4.The default mozconfig search logic is applied.

- firefox build debug symbols 
https://developer.mozilla.org/en-US/docs/Building_Firefox_with_Debug_Symbols

- firefox cross compile lizard
https://developer.mozilla.org/en-US/docs/Cross-Compiling_Mozilla

- make file variables 
https://developer.mozilla.org/en-US/docs/How_Mozilla%27s_build_system_works/Makefile_-_variables

- how mozilla build system works 
https://developer.mozilla.org/en-US/docs/How_Mozilla%27s_build_system_works

when use mach, there are three high-level phases that occur 

    + system detection and validation 
    + preparation of the build backend 
    + invokation of the build backend 
    
    + phase 1 configure, configure.in is written in M4 and processed using autoconfig 2.13 to get the final configure script 

    the primary output files is config.status which is different from normal which is written in python! 
    
    + phase 2 build backend preparation and the build definition 
    
    config.status is charged with the task of tell a tool how to build the tree. it first scan the build system definition 
    
    config.status starts with the main moz.build file per directory or pet set of related directories. each mozilla.build file defines how its part of the build config works 
    
    + phase 3 invokation of the build backend, header files are installed c++ file are compiled etc. 
    
        * recursive make backend, The recursive make backend is the tried and true backend used to build the tree. start from the root and recursive throw the child directories until it's done 
        
        each tier consists of 3 sub-tiers: export, libs and tools. this roughly correspond to the actions of pre-build, main-build and post-build 
        
        export is used to do things like copy headers into place 
        libs is reserved for most of the work, like compiling c++ source files 
        tools is used to installing tests and other support tools 
        
        to view information about the tiers you can execute the following special make targets 
        
        make echo-tiers, show the final list of tiers 
        make echo-dirs, show the list of non-static source directories to iterate over as determined by the tier list 
        make echo-variable-STATIC_DIRS, show the list of static source to iterate over 
        
    + moz.build files 
    you can think each moz.build file as a data structure telling the build system what to do     
    
    An individual moz.build file is actually a Python script, but can performing a limit set of operations 
        * calling functions that are explicitly made available to the moz.build environment 
        * assigning to a well-defined set of variables whose name is UPPERCASE 
        * creating new variables whose ame is not UPPERCASE (include defining functions)
    
    mozilla build can't     
        * import module 
        * open files 
        * use print statement or function 
        * reference many of python's buil-in/global functions 
        
    you can assign to the DIRS list to define which directories to traverse into looking for additional moz.build files
    
    The output of the execution of an individual moz.build file is a Python dictionary. This dictionary contains the UPPERCASE variables directly assigned to as well as special variables indirectly assigned to by calling functions 
    
    + moz.build UPPERCASE variables and functions 
    The set of special symbols available to moz.build files is centrally defined and is under the purview of the build config module. To view the variables and functions available in your checkout of the tree
    
    $ mach mozbuild-reference 
    
    + how moz.build processing works 
    sandbox.py, contains code for a generic python sandbox 
    reader.py, contains the code that defines the actual moz.build sandbox. the latter is the buildReader class 
    the stream of MozbuildSandbox produced by the BuildReader is typically fed into the TreeMetadataEmitter class from emitter.py. The role of TreeMetadataEmitter is to convert the low-level MozbuildSandbox dictionaries into higher-level function-specific data structures. The structure is define in data.py  
    
    + legacy content, make file basic format in mozilla 
DEPTH           = ../../../..
topsrcdir       = @top_srcdir@
srcdir          = @srcdir@
VPATH           = @srcdir@

include $(DEPTH)/config/autoconf.mk

# ... Main body of Makefile goes here ...

include $(topsrcdir)/config/rules.mk

# ... Additional rules go here ...

The DEPTH variable should be set to the relative path from your Makefile.in to the toplevel Mozilla directory.
topsrcdir is substituted in by configure, and points to the toplevel mozilla directory.
srcdir is also substituted in by configure, and points to the source directory for the current directory. In source tree builds, this will simply point to "." (the current directory).
VPATH is a list of directories where make will look for prerequisites 

One other frequently used variable not specific to a particular build target is DIRS. DIRS is a list of subdirectories of the current directory to recursively build in
DIRS = \
  public \
  resources \
  src \
  $(NULL)
The terminating $(NULL) is a method for consistency; it allows you to add and remove lines without worrying about whether the last line has an ending backslash or not.

    + building libraries, there are three main types of libraries that are built in mozilla 
        * components ahre shared libraries  installed to dist/bin/components 
    
//link several static libraries to create a component 
DEPTH           = ../..
 topsrcdir       = @top_srcdir@
 srcdir          = @srcdir@
 VPATH           = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MODULE          = layout
 LIBRARY_NAME    = gklayout
 EXPORT_LIBRARY = 1
 IS_COMPONENT    = 1
 MODULE_NAME     = nsLayoutModule
 
 CPPSRCS         = \
                 nsLayoutModule.cpp \
                 $(NULL)
 
 SHARED_LIBRARY_LIBS = \
                 $(DIST)/lib/$(LIB_PREFIX)gkhtmlbase_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkhtmldoc_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkhtmlforms_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkhtmlstyle_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkhtmltable_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkxulbase_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkbase_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkconshared_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkxultree_s.$(LIB_SUFFIX) \
                 $(DIST)/lib/$(LIB_PREFIX)gkxulgrid_s.$(LIB_SUFFIX) \
                 $(NULL)
 
 include $(topsrcdir)/config/rules.mk
 
        * non-component shared libraries include libraries such as libxpcom, libmozjs, these are install to dist/bin 
DEPTH           = ../../..
 topsrcdir       = @top_srcdir@
 srcdir          = @srcdir@
 VPATH           = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MODULE          = msgbaseutil
 LIBRARY_NAME    = msgbaseutil
 EXPORT_LIBRARY = 1
 SHORT_LIBNAME   = msgbsutl
//only real change from the component example above is that IS_COMPONENT is not set. When this is not set, a shared library will be created and installed to dist/bin.

        * static libraries often used as intermediate steps to building a shared library 
DEPTH           = ../../..
 topsrcdir       = @top_srcdir@
 srcdir          = @srcdir@
 VPATH           = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MODULE          = layout
 LIBRARY_NAME    = gkbase_s
 
 # REQUIRES and CPPSRCS omitted here for brevity #
 
 # we don't want the shared lib, but we want to force the creation of a static lib.
 FORCE_STATIC_LIB = 1
 
 include $(topsrcdir)/config/rules.mk
// setting FORCE_STATIC_LIB = 1. This creates libgkbase_s.a (on unix) and gkbase_s.lib on Windows, and copies it to dist/lib. 

        * building jar files, are used for packaging chrome files(XUL, javascript and css )
 DEPTH           = ../../../..
 topsrcdir       = @top_srcdir@
 srcdir          = @srcdir@
 VPATH           = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 include $(topsrcdir)/config/rules.mk
 
    + there are also several make file examples for mozilla 

- build mozilla firefox in window 8 
https://developer.mozilla.org/en-US/docs/Windows_8
    
# install older version of firefox 
https://support.mozilla.org/en-US/kb/install-older-version-of-firefox?redirectlocale=en-US&redirectslug=Installing+a+previous+version+of+Firefox
    
    
# firefox release notes 
https://developer.mozilla.org/en-US/Firefox/Releases


# disable firefox automatic update
1.Close Firefox.
2.Navigate to the following location based on your operating system. •Windows XP/Vista/7/8/10 – “%APPDATA%\Mozilla\“
Unix/Linux – “~/.mozilla/“
Mac OS X – “~/Library/Mozilla/” or “~/Library/Application Support/“

3.Open the “Profiles” folder.
4.Open the folder that represents the profile you would like to edit. The name of the folder will vary. It is usually a bunch of characters, followed by “.default”.
5.Open the prefs.js file with a text editor like Notepad.
6.Look for a line that contains “app.update.enabled”. If it doesn’t exist, add a line for it in the file and set it as desired using these examples: •user_pref(“app.update.enabled”, true); = Automatic updates enabled
•user_pref(“app.update.enabled”, false); = Automatic updates disabled


# get mosilla repositories such as central and release 
- reference
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Mercurial
- release
hg clone https://hg.mozilla.org/releases/mozilla-release release
cd release

- beta 
hg clone https://hg.mozilla.org/releases/mozilla-beta/ beta

cd beta12345

- central 
hg clone https://hg.mozilla.org/mozilla-central/ firefox


# Firefox about config settings 
- about:config is a feature of mozilla application which lists application settings known as preferences that are read from profile files prefs.js and user.js 

    + modify the configuration, the item support three types
    string, integer and boolean 

    + filter i nthe search bar support regular expression /regexp/i switch i is ignore the case 
- prefs.js 
http://kb.mozillazine.org/Prefs.js_file

if you use application's user interface to change settings from default values, these will be written to prefs.js 

some extension also save their settings in prefs.js 

it only contain the changes made to the defaults 

it is locate in the profile folder. it used by mozilla appliation such as firefox to store settings 

user.js is optional the content will be used to overwrite the existing prefs.js settings 
- user.js 
http://kb.mozillazine.org/User.js
    
- editing configuration 

change application behavior by extensions and themes 
    
modifying preferences. 

configuration editor can be access from firefox by about:config 

use user.js file to make a configuration changes for many profile 

    + developer toolbar 
    
support change configuration from firefox 16 
$ pref set <preference name> <value> 

set to default 
pref reset <preference name> 

show current setting use command line 
$ pref show <preference name> 


    + modifying appearance, modify the way in which pages and e-mails are displayed you should edit the userContent.css file 
    
    to modify the appearance of the application itself, you should edit the userChrome.css file 
    
    + chromeEit extension, provides a convenient way of editing your configuration files 
    
- UserContent.css, it use to change the way web sites and e-mails look. it need to create manually in a new profile 

it only effect the local firefox display 

- User.js file 
it is a alternative method of modifying perferences. important, once an entry for a preference setting exists in the user.js file any change you make to that setting in the options and preference dialogs or via about:config wil be lost. user.js will overwrite it 

"user.js" inside your profile folder

    + add user.js entries 
// Don't show bookmark icons
user_pref("browser.chrome.site_icons", false);

for window require two backslashes 
// Relocate parent directory for browser cache
user_pref("browser.cache.disk.parent_directory", "D:\\Mozilla\\Firefox\\");

- about config entries
    + full entries of browser preferences 
    http://kb.mozillazine.org/Category:Preferences
    
    http://kb.mozillazine.org/About:config_entries
    
- get the commons for about:config by extension 
https://addons.mozilla.org/en-US/firefox/addon/config-descriptions/

- preference api 
https://developer.mozilla.org/en-US/docs/Mozilla/Preferences
https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Preferences#XPCOM_interfaces_for_preferences_system

    
    
# update firefox 
Jakov, Eyal 18:32: 
browser.dictionaries.download.url 
https://addons.mozilla.org/%LOCALE%/firefox/dictionaries/ 
Jakov, Eyal 18:38: 
Add new component to LT\LT-TPS\win32_release\Default\components 
LT\LT-TPS\win32_release\Default\components\tps_firefox-36.0.xml 

Jakov, Eyal 18:32: 
browser.dictionaries.download.url 
https://addons.mozilla.org/%LOCALE%/firefox/dictionaries/ 

https://blog.mozilla.org/addons/2015/05/04/dropping-support-for-binary-components/ 
Jakov, Eyal 17:05: 
https://ftp.mozilla.org/pub/xulrunner/releases/40.0.3/ 

    
# other reference 
- compare xul with webextension, https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Comparison_with_XUL_XPCOM_extensions
    
- content security policy, https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy
    
https://content-security-policy.com/
    
    
# developer communication 
https://wiki.mozilla.org/Add-ons/developer/communication
    
    
# Xray vision 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Xray_vision
    
    
# setup browser security policy 
http://www-archive.mozilla.org/projects/security/components/ConfigPolicy.html  
    
    
# export privileged method to none privileged scope 
- export function 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.exportFunction
    
- frame script 
https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Frame_script_environment

https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Limitations_of_frame_scripts

- content utils sandbox 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.Sandbox


# Firefox developer tools debugger API 
https://developer.mozilla.org/en-US/docs/Tools/Debugger-API


# Firefox message manager
- reference 
 https://developer.mozilla.org/en-US/Firefox/Multiprocess_Firefox/Message_Manager/Message_manager_overview

- for legacy extension in multip process Firefox message communication and frame script, process script 


# XUL interface 
- reference 
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/XUL_Reference

- browser 
gBrowser.selectedBrowser is a browser object 
    
https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/browser
    
    
# User observer service 
https://developer.mozilla.org/en-US/docs/Observer_Notifications
    
    
# WebExtension web-ext command reference 
https://github.com/mozilla/web-ext
    
# Load webextension experimental after FF 57, https://discourse.mozilla.org/t/is-there-a-way-to-enable-firefox-loading-webextension-experimental-extension-after-firefox-57/19563    


# Tab container 
- reference 
https://hacks.mozilla.org/2017/10/containers-for-add-on-developers/















Firefox JavaScript Document;Note=Erxin

# EMCAScript 6 support in mozilla 
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla


# Web workers
- reference 
https://html.spec.whatwg.org/multipage/workers.html

- introduction, scope 
var worker = new Worker('worker.js');
worker.onmessage = function (event) {
    document.getElementById('result').textContent = event.data;
};

The postMessage() method is used to send a message back to the page when a prime is found

- worker used for background i/o 

var ticker = new Worker('ticker.js');

// SEARCHER
var searcher = new Worker('searcher.js');
function search(query) {
 searcher.postMessage(query);
}

function select(newSymbol) {
 symbol = newSymbol;
 ticker.postMessage(symbol);
}
...

ticker.onmessage = function (event) {
     var data = event.data.split(' ');
     document.getElementById('symbol').textContent = data[0];
     document.getElementById('value').textContent = data[1];
   };

searcher.onmessage = function (event) {
    var data = event.data.split(' ');
    var results = document.getElementById('results');
    while (results.hasChildNodes()) // clear previous results
        results.removeChild(results.firstChild);
        
    for (var i = 0; i < data.length; i += 1) {
        // add a list item with a button for each result
        var li = document.createElement('li');
        var button = document.createElement('button');
        button.value = data[i];
        button.type = 'button';
        button.onclick = function () { select(this.value); };
        button.textContent = data[i];
        li.appendChild(button);
        results.appendChild(li);
    }
};

- shared workers introduction
This section introduces shared workers using a Hello World example. Shared workers use slightly different APIs, since each worker can have multiple connections.

var worker = new SharedWorker('test.js');
var log = document.getElementById('log');
worker.port.onmessage = function(e) { // note: not worker.onmessage!
    log.textContent += '\n' + e.data;
}

//javascript worker 
onconnect = function(e) {
    var port = e.ports[0];
    port.postMessage('Hello World!');
}
    + improved example 
    
var worker = new SharedWorker('test.js');
var log = document.getElementById('log');
worker.port.addEventListener('message', function(e) {
    log.textContent += '\n' + e.data;
}, false);
worker.port.start(); // note: need this when using addEventListener
worker.port.postMessage('ping');

//javascript worker 
onconnect = function(e) {
  var port = e.ports[0];
  port.postMessage('Hello World!');
  port.onmessage = function(e) {
    port.postMessage('pong'); // not e.ports[0].postMessage!
    // e.target.postMessage('pong'); would work also
  }
}

- sharing state using shared worker 

- delegation, With multicore CPUs becoming prevalent, one way to obtain better performance is to split computationally expensive tasks amongst multiple workers
var worker = new Worker('worker.js');
worker.onmessage = function (event) {
 document.getElementById('result').textContent = event.data;
};

// settings
var num_workers = 10;
var items_per_worker = 1000000;

// start the workers
var result = 0;
var pending_workers = num_workers;
for (var i = 0; i < num_workers; i += 1) {
  var worker = new Worker('core.js');
  worker.postMessage(i * items_per_worker);
  worker.postMessage((i+1) * items_per_worker);
  worker.onmessage = storeResult;
}

// handle the results
function storeResult(event) {
  result += 1*event.data;
  pending_workers -= 1;
  if (pending_workers <= 0)
    postMessage(result); // finished!
}

- infrastructure, There are two kinds of workers; 
    + dedicated workers, and shared workers. 
    Dedicated workers, once created, are linked to their creator; but message ports can be used to communicate from a dedicated worker to multiple other browsing contexts or workers. 
    
    Shared workers, on the other hand, are named, and once created any script running in the same origin can obtain a reference to that worker and communicate with it.

- the event loop, Each WorkerGlobalScope object has a distinct event loop, separate from those used by units of related similar-origin browsing contexts. This event loop has no associated browsing context

Once the WorkerGlobalScope's closing flag is set to true, the event loop's task queues must discard any further tasks that would be added to them (tasks already on the queue are unaffected except where otherwise specified). Effectively, once the closing flag is true, timers stop firing, notifications for all pending background operations are dropped,


# standard built-in objects 
- value properties 
    + Infinity, number infinitiy value 
console.log(Infinity         ); /* Infinity */  
console.log(Infinity + 1     ); /* Infinity */  
console.log(Math.pow(10,1000)); /* Infinity */  
console.log(Math.log(0)      ); /* -Infinity */  
console.log(1 / Infinity     ); /* 0 */

    + NaN, not a number 
NaN === NaN;        // false
Number.NaN === NaN; // false
isNaN(NaN);         // true
isNaN(Number.NaN);  // true

function valueIsNaN(v) { return v !== v; }
valueIsNaN(1);          // false
valueIsNaN(NaN);        // true
valueIsNaN(Number.NaN); // true

    + undefined, primitive value undefined, its a reserved keyword can be used in any scope instead of global scope 
var x;
if (x === undefined) {
   // these statements execute
}
else {
   // these statements do not execute
}

var x;
if (typeof x === 'undefined') {
   // these statements execute
}

if(x === undefined){ // throws a ReferenceError

}

void operator and undefined 
var x;
if (x === void 0) {
   // these statements execute
}

// y has not been declared before
if (y === void 0) {
   // throws a ReferenceError (in contrast to `typeof`)
}

    + null, is a literal representing null or "empty" value it's one of the primitive values, differences between equality (==) and identity (===) operators (type-conversion is performed with the former).
typeof null        // object (bug in ECMAScript, should be null)
typeof undefined   // undefined
null === undefined // false
null  == undefined // true

- primitive type  
A primitive (primitive value, primitive data type) is data that is not an object and has no methods. In JavaScript, there are 6 primitive data types: string, number, boolean, null, undefined, symbol (new in ECMAScript 2015).

All primitives are immutable (cannot be changed).

- symbol, A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.
var sym1 = Symbol();
var sym2 = Symbol("foo");

the creater function will create new symbol in each time 
Symbol("foo") === Symbol("foo") //false 

var sym = new Symbol(); //typeerror 
var sym = Symbol("foo");
typeof sym;     // "symbol" 
var symObj = Object(sym);
typeof symObj;  // "object"

when use as a key the wrapper and symbol are same effect 
var sym = Symbol("foo");
var obj = {[sym]: 1};
obj[sym];            // 1
obj[Object(sym)];    // still 1

To create symbols available across files and even across realms (each of which has its own global scope), use the methods Symbol.for() and Symbol.keyFor() to set and retrieve symbols from the global symbol registry.

The method Object.getOwnPropertySymbols() returns an array of symbols and lets you find symbol properties on a given object. Symbols are not visible in for...in iterations. In addition, Object.getOwnPropertyNames() will not return symbol object properties, however, you can use Object.getOwnPropertySymbols() to get these.
var obj = {};

obj[Symbol("a")] = "a";
obj[Symbol.for("b")] = "b";
obj["c"] = "c";
obj.d = "d";

for (var i in obj) {
   console.log(i); // logs "c" and "d"
}

symbols and json.stringify(), symbol keyed properties will be completely ignored 
JSON.stringify({[Symbol("foo")]: "foo"});                 
// '{}'

- function properties 
    + eval(string), evaluates javascript  code represented as string, is a function property of the global object. Do not call eval() to evaluate an arithmetic expression; javascript will do it automatically 

    If the argument of eval() is not a string, eval() returns the argument unchanged
    
    If you use the eval function indirectly, by invoking it via a reference other than eval, it works at global scope rather than local scope;
    function test() {
      var x = 2, y = 4;
      console.log(eval("x + y"));  // Direct call, uses local scope, result is 6
      var geval = eval;
      console.log(geval("x + y")); // Indirect call, uses global scope, throws ReferenceError because `x` is undefined
    }

    eval as a string defining function requires "(" and ")"
    var fctStr1 = "function a() {}"
    var fctStr2 = "(function a() {})"
    var fct1 = eval(fctStr1)  // return undefined
    var fct2 = eval(fctStr2)  // return a function

    + isFinite(testValue), determine whether the passed number is a finite number 
    isFinite(Infinity);  // false
    isFinite(NaN);       // false
    isFinite(-Infinity); // false

    isFinite(0);         // true
    isFinite(2e64);      // true
    isFinite(null);      // true

    isFinite("0");       // true, would've been false with the 
                         // more robust Number.isFinite("0")

    + isNan(testValue), isNaN function has interesting rules; you may alternatively want to use Number.isNaN(). in ECMAScript 6 you can use typeof to determine if the value is Not-A-Number 

isNaN(NaN);       // true
isNaN(undefined); // true
isNaN({});        // true

isNaN(true);      // false
isNaN(null);      // false
isNaN(37);        // false

// strings
isNaN("37");      // false: "37" is converted to the number 37 which is not NaN
isNaN("37.37");   // false: "37.37" is converted to the number 37.37 which is not NaN
isNaN("");        // false: the empty string is converted to 0 which is not NaN
isNaN(" ");       // false: a string with spaces is converted to 0 which is not NaN

// dates
isNaN(new Date());                // false
isNaN(new Date().toString());     // true

// This is a false positive and the reason why isNaN is not entirely reliable
isNaN("blabla")   // true: "blabla" is converted to a number. 
                  // Parsing this as a number fails and returns NaN

    + parseFloat(string), parse a string argument and returns a float. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed

    if not success will return NaN 
    
    A stricter parse function
    var filterFloat = function (value) {
    if(/^(\-|\+)?([0-9]+(\.[0-9]+)?|Infinity)$/
      .test(value))
      return Number(value);
      return NaN;
    }

    + parseInt(string, radix), radix(the base in mathematical number system) default is 10, An integer between 2 and 36 that represents the radix. 

    string start with 0x 0X will use 16 radix by default 
    start with 0 will use decimal by ECMAScript 5 but not all browser keep the pace 
    input string begins with another value is 10 by default 

    + decodeURI(encodedURI), the parameter must be a full uri 
    decodeURI("https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B");
    // "https://developer.mozilla.org/ru/docs/JavaScript_шеллы"


    + decodeURIComponent(), decodeURIComponent("JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B");
// "JavaScript_шеллы"

    + encodeURI(URI), encodeURI by itself cannot form proper HTTP GET and POST requests, such as for XMLHTTPRequests, because "&", "+", and "=" are not encoded. encodeURIComponent, however, does encode these characters.

    + encodeURIComponent(str), encodes a uniform resource identifier component by replacing each instance of cetain characters by one, two three or four escape sequences representing utf-8 encoding 

    encodeURIComponent escapes all characters except the following: alphabetic, decimal digits, - _ . ! ~ * ' ( )
    
    an URIError will be thrown if one attempts to encode a surrogate which is not part of a high-low pair 
    
    To avoid unexpected requests to the server, you should call encodeURIComponent on any user-entered parameters that will be passed as part of a URI.
    
    + escape(str), deprecated, use escapeURI and escapeURIComponent instaed 
    + unescape(str, deprecated
- another way to define javascript getter and setter 
http://ejohn.org/blog/javascript-getters-and-setters/

    function Field(val){
        this.value = val;
    }
     
    Field.prototype = {
        get value(){
            return this._value;
        },
        set value(val){
            this._value = val;
        }
    };

var User = (function () {
  function User (id, nam) {
    Object.defineProperty (this, '__',  // Define property for field values   
       { value: {} });

    this.id = id;
    this.nam = nam;
  }

  (function define_fields (fields){
    fields.forEach (function (field_name) {
      Object.defineProperty (User.prototype, field_name, {
        get: function () { return this.__ [field_name]; },
        set: function (new_value) {
               // some business logic goes here 
               this.__[field_name] = new_value;
             }
      });
    });
  }) (fields);

  return User;
}) ();  

http://devdocs.io/javascript/functions/get
To append a getter to an existing object later at any time, use Object.defineProperty().

var o = { a:0 }

Object.defineProperty(o, "b", { get: function () { return this.a + 1; } });

console.log(o.b) // Runs the getter, which yields a + 1 (which is 1)

- Function object 
    + arguments have a callee property to reference the current calling function 
    + Object, the object constructor creates an object wrapper 
// Object initialiser or literal
{ [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] }

// Called as a constructor
new Object([value])

if value is null or undefined, it will create and return an empty object 

if the value is an object then return the value directly 

        * properties of the object constructor 
.prototype
.prototype.constructor, the function that creates an object's prototype 
.prototype.hasOwnProperty(prop), Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain.
.prototype.isPrototypeOf(obj), tests for an object in another object's prototype chain 
.prototype.isEnumerable(prop), returns a boolean indicating whether the specified property is enumerable
.prototype.toLocalString(), returns a string representing the object, this method is to be overridden by derived objects for locale-specific purposes. by default it calls toString()
.prototype.toString()
.prototype.valueOf(), removes the primitive value of the specificed object. javascript automatically invokes it when encountering an object where a primitive value is expected. If an object has no primitive value, valueOf returns the object itself. If you create a number type object in javascript override this method to return the primitive value of your custom object 

.length, has a value of 1

        * methods 
.assign(target, ...sources), create a new object by copying the value of all enumerable own properties from one or more source objects to a target object. only copies enumerable and own properties from a source object to a target object. t 
unsuitable for merging new properties into a prototype if the merge sources contain getters. For copying property definitions, including their enumerability, into prototypes Object.getOwnPropertyDescriptor() and Object.defineProperty() should be used instead. Object.assign() does not throw on null or undefined source values

.create(proto[, propertiesObject]), creates a new object with the specified prototype object and properties. the second argument if specified and not undefined, an object whose enumerable own properties specify property descriptors to be added to the newly-created object, with the corresponding property names

.defineProperty(obj, prop, descriptor), defines a new property directly on an object, or modifies an existing property on an object, and returns the object. allows precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (for...in loop or Object.keys method), whose values may be changed, and which may be deleted. This method allows these extra details to be changed from their defaults. By default the values added are immutable 
descriptor shares keys 
configurable: true if the type may be changed/deleted, default false
enumerable: true if only this property shows up during enumeration, default false 
value: default undefined 
writabl: true if may be changed with assignement operator default false 
get: function which serves as a getter for the property default undefined
set: function serves as a setter for the property default undefined

.defineProperties(obj, props),  defines new or modifies existing properties directly on an object, returning the object.

.freeze(obj), freezes an obect to prevents properteis changed. we could use this function to create a deep freeze function 

.getOwnPropertyDescriptor(obj, prop), returns a property descriptor for an own property 

.getOwnPropertyNames(obj), returns an array of all properties found directly uppon a given object. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a for...in loop (or by Object.keys()) over the properties of the object. The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.

.getOwnPropertySymbols(obj), returns an array of all symbol properties found directly upon a given object. Note that Object.getOwnPropertyNames() itself does not contain the symbol properties of an object and only the string properties. ES6
var obj = {};
var a = Symbol('a');
var b = Symbol.for('b');

obj[a] = 'localSymbol';
obj[b] = 'globalSymbol';

var objectSymbols = Object.getOwnPropertySymbols(obj);

console.log(objectSymbols.length); // 2
console.log(objectSymbols);        // [Symbol(a), Symbol(b)]
console.log(objectSymbols[0]);     // Symbol(a)

.getPrototypeOf(obj), returns the prototype of the specified object 

.is(v0, v1), determines whether two values are the same value, ES6. 
javascript provide three different value comparision 
    strict equality (or "triple equals" or "identity") using ===,
    loose equality ("double equals") using ==,
    and Object.is (new in ECMAScript 6). determining whether two values are functionally identical in all contexts
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
    
.isExtensible(obj)

.isFrozen(obj), all property are none configurable and non-writable 

.isSealed(obj), true if the object is sealed, otherwise false. An object is sealed if it is not extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable)

.keys(obj), arrary contain all the object's enumerable properties, same order as that provided by a for...in loop

.preventExtensions(obj), prevents new properties. An object is extensible if new properties can be added to it. Object.preventExtensions() marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. 

.seal(obj), Prevents other code from deleting properties of an object.

.setPrototypeOf(obj, prototypes), ES6 

.values(obj), return the enumerable properties values as the same order of for...in 

    + Function([arg1[, arg2[, ...argN]],] functionBody), creates a new function object, every function is actually a Function object. Functions created with the Function constructor do not create closures to their creation contexts; they always are created in the global scope. 

    This is different from using eval with code for a function expression. invoke the Function with or without new have the same effect 
    
        * properties 
.arguments, This is deprecated as property of Function, use the arguments object available within the function instead.

.caller, the function that invoked the currently executing function, NOT STANARD

.length, the number of arguments expected by the function 

.name, the name of the function, NOT STANDARD

        * methods 
.prototype.apply(thisArg, [argsArray]), calls a function with a given this value and arguments provided as an array 

.prototype.bind(thisArg[,arg1[, arg2, [, ...]]]), creates a new function that when called has its this keyword set to the provided value with a given sequence of arguments 
function list() {
  return Array.prototype.slice.call(arguments);
}
var list1 = list(1, 2, 3); // [1, 2, 3]
// Create a function with a preset leading argument
var leadingThirtysevenList = list.bind(undefined, 37);
var list2 = leadingThirtysevenList(); // [37]
var list3 = leadingThirtysevenList(1, 2, 3); // [37, 1, 2, 3]
Bound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored.

.prototype.call(thisArg[, arg1[, arg2]]), call a function with a given this value and arguments provided individually 
call to chain constructors for an object
function{
    foo.call(this, arg);
}
invoke an anonymous function
function(){}.call(context, arg)
invoke a function and specifying the context for 'this'
foo.call(context)

.prototype.toString(), return a string representing the source code of the function, javascript will use this function automatically when any funtion required to be displayed as text 

    + Boolean, an object value for a boolean value, new Boolean([value]), The value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false.

.length, the property whose value is 1 
.prototype 

.prototype.toString()
.prototype.valueOf(), return the primitive value of the boolean object 

    + Symbol([description]), is a unique and immutable data type and may be used as an identifier for object properties. it is a implicit object wrapper for the symbol primitive data type 
var sym1 = Symbol();
Symbol("foo") === Symbol("foo"); // false

        * shared symboles in the global symbol registry. To create symbols available across files and even across realms (each of which has its own global scope), use the methods Symbol.for() and Symbol.keyFor() to set and retrieve symbols from the global symbol registry.
    
        * finding symbol properties on objects, use Object.getOwnPropertySymbols() method to get all symbols from a given object 
        
        * properties 
.length, whose value is 0 
.prototype 

        * well-known symbols, built-in symbols in javascript is not expose till ECMAScript 5 
Symbol.iterator, a method return the default iterator for an object used by for...of 
var myIterable = {}
myIterable[Symbol.iterator] = function* () {
    yield 1;
    yield 2;
    yield 3;
};
[...myIterable] // [1, 2, 3]

Symbol.match, a method that matches against a string also used to determine if an obect may be used as a regular expression. Used by string.prototype.match(). used to identiy if objects have the behavior of regular expressions. 
var re = /foo/;
re[Symbol.match] = false; //if set to true String.startsWith method will throw exception which required string not regular expression 
"/foo/".startsWith(re); // true
"/baz/".endsWith(re);   // false

Symbol.replace, a method that replace the matches the regular expression 
Symbol.search, a method that returns the index within a string that matches the regular expression 
Symbol.split, a method that splits a string 

Symbol.hasInstance, a method determining if a constructor object recognizes an object as its instance, used by instanceof 
Symbol.isConcatSpreadable, a boolean value indicating if an object should be flattened to its array elements, used by array.prototype.concat() 
Symbol.unscopables, an array of string values that property values, these are execlued from the with environment bindings of the associated objects 
Symbol.species, a constructor function that is used to create derived object 
Symbol.toPrimitive, a method converting an object to a primitive value 
Symbol.toStringTag, a string value used for the default description of an object 

        * methods 
Symbol.for(key), searches for exsiting symbols with the given key and return it if found, otherwise a new symbol gets created in the global symbol registry with this key 

// Same global symbol, but not locally
Symbol.for("bar") === Symbol.for("bar"); // true
Symbol("bar") === Symbol("bar"); // false

Symbol.keyFor(sym), retrieves a shared symbol key rom the global symbol registry for the given symbol 
var globalSym = Symbol.for("foo"); // create a new global symbol
Symbol.keyFor(globalSym); // "foo"
var localSym = Symbol();
Symbol.keyFor(localSym); // undefined
// well-known symbols are not symbols registered 
// in the global symbol registry
Symbol.keyFor(Symbol.iterator) // undefined
    
        * prototype 
        
Symbol.prototype.toString(), return a string contain the description of the symbol 
Symbol.prototype.valueOf(), return the primitive value of the Symbol object 
Symbol.prototype[@@toPrimitive], returns the primitive value of the symbol object. converts a symbol object to a primitive value 
Symbol()[Symbol.toPrimitive](hint);

    + primitive is data that is not an object and has no methods. in JavaScript there are 6 primitive data times, string, number, boolean, null, undefined, symbol. all primitive are immutable. primitive wrapper objects are 
    
    String for the string primitive.
    Number for the number primitive.
    Boolean for the Boolean primitive.
    Symbol for the Symbol primitive.

    the valueOf() method of the wrapper object returns the primitive value 

    + Error, new Error([message[, fileName[, lineNumber]]]), creates an error object. instances of errors objects are thrown when runtime errors occur

        * besides the generic error constructor, there are six other core error constructors in javascript
EvalError(), create an instance which occur regarding the global function eval 
RangeError(), create an instance when a numeric variable or parameter is outside of its valid range 
ReferenceError(), de-referencing an invalid reference 
SyntaxError, occurs while parsing code in eval 
TypeError, when variable or parameter is not of a valid type 
URIError, creates an instance representing an error that occurs when encodeURI() or decodeURI() 

        * standard properties 
.prototype.constructor 
.prototype.message, error message 
.prototype.name 

        * vendor specific extensions 
microsoft 
.prototype.description, similar to message 
.prototype.number 

mozilla 
.prototype.fileName
.prototype.lineNumber
.prototype.stack 

        * methods 
.prototype.toString()

- number and dates 
    + Number, wrapper object allowing to work with numerical values. new Number(value); if value can't convert to number it return NaN. non-constructor context, number can be used to perform a type conversion 
    
        * properties 
.EPSILON, smallest interval between two representable numbers 
.MAX_SAFE_INTEGER, maximum safe intger in javascript 
.MAX_VALUE, the largest positive representable number 
.MIN_SAFE_INTEGER
.MIN_VALUE 
.NaN, special 'not a number' value 
.NEGATIVE_INFINITY, returned on overflow 
.POSITIVE_INFINITY, returned on overflow 
.prototype 

        * methods 
.isNaN, deterines whether the passed value is NaN. more robust version of the original global isNaN(), isNaN() function, Number.isNaN() doesn't suffer the problem of forcefully converting the parameter to a number. This means it is now safe to pass values that would normally convert to NaN, but aren't actually the same value as NaN. This also means that only values of the type number, that are also NaN, return true.
Number.isNaN(NaN);        // true
Number.isNaN(Number.NaN); // true
Number.isNaN(0 / 0)       // true
// e.g. these would have been true with global isNaN()
Number.isNaN("NaN");      // false
Number.isNaN(undefined);  // false
Number.isNaN({});         // false
Number.isNaN("blabla");   // false
// These all return false
Number.isNaN(true);
Number.isNaN(null);
Number.isNaN(37);
Number.isNaN("37");
Number.isNaN("37.37");
Number.isNaN("");
Number.isNaN(" ");

.isFinite(value), determine the pass value is a finite number 
Number.isFinite(Infinity);  // false
Number.isFinite(NaN);       // false
Number.isFinite(-Infinity); // false
Number.isFinite(0);         // true
Number.isFinite(2e64);      // true
Number.isFinite('0');       // false, would've been true with
                            // global isFinite('0')

.isInteger(value), determine whether the passed value is an integer 
Number.isInteger("10");    // false 
Number.isInteger(0.1);     // false 
Number.isSafeInteger(value)

.parseFloat(string), same as global function parseFloat() 

.parseInt(string), same as global function parseInt()

        * number instances inherit from Number.prototype 
.prototype.toExponential([fractionDigits]), returns a string representing the number object in expoential notation. If a number has more digits than requested by the fractionDigits parameter, the number is rounded to the nearest number represented by fractionDigits digits

.prototype.toFixed([digits]), format a number using fixed-point notation. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If numObj is greater than 1e+21, this method simply calls Number.prototype.toString() and returns a string in exponential notation. 

.prototype.toLocaleString([locales[, options]]), returns a sring with a language sensitive representation of this number, the local parameter is specify with BCP 47 language tag, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation

.prototype.toPrecision([precision]), returns a string representing the Number object to the specified precision. A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits. 

.prototype.toString([radix]), returns a string representing the specified number base on the given radix(2 to 36)

.prototype.valueOf(), return the primitive value 

    + Math, is a built in object that has properties and methods for mathematical constants 
        * properties 
.E, natral logarithms 
.LN2, natural logarithm of 2 
.LN10, 
.LOG2E, base 2 logarithm of E 
.LOG10E, base 10 logarithm of E 
.PI 
.SQRT1_2, square root of 1/2 
.SQRT2, square root of 2 

        * methods 
.abs(x)
.acos(x)
.acosh(x)
.asin(x)
.asih(x)
.atan(x)
.atanh(x)
.atan2(y, 2), returns the arctangent of the quotient of its arguments 
.cbrt(x), return the cube root of a number 
.ceil(x), smallest integer greater than or equal to a number 
.clz32(x), return leading zeroes of a 32-bit integer 
.cos(x)
.cosh(x)
.exp(x), E^x
.expm1(x), return subtracting 1 from exp(x)
.floor(x), returns the largetst integer less than or equal to a number 
.fround(x), return the nearest signle precision float representation of a number 
.hypot([x[, y[, ...]]), return the square root of the sum of squares of its arguments 
.imul(x, y) returns the result of a 32-bit integer multiplication 
.log(x), returns the natural logarithm 
.log1p(x), returns the natural logarithm of 1 + x(loge, also In) of a number 
.log10(x)
.log2(x)
.max([x[, y[, ...]])


# Standard library 
- Array object 
Array iteration with for...of (Firefox 13)
Array.from() (Firefox 32)
Array.of() (Firefox 25)
Array.prototype.fill() (Firefox 31)
Array.prototype.find(), Array.prototype.findIndex() (Firefox 25)
Array.prototype.entries(),
Array.prototype.keys() (Firefox 28),
Array.prototype.values()
Array.prototype.copyWithin() (Firefox 32)
get Array[@@species] (Firefox 48)

- new map and set object and their weak counterparts 
Map (Firefox 13)
Map iteration with for...of (Firefox 17)
Map.prototype.forEach() (Firefox 25)
Map.prototype.entries() (Firefox 20)
Map.prototype.keys() (Firefox 20)
Map.prototype.values()
Constructor argument: new Map(null) (Firefox 37)
Monkey-patched set() in Constructor (Firefox 37)
get Map[@@species] (Firefox 41)
Set (Firefox 13)
Set iteration with for...of (Firefox 17)
Set.prototype.forEach() (Firefox 25)
Set.prototype.entries(),
Set.prototype.keys(),
Set.prototype.values() (Firefox 24)
Constructor argument: new Set(null) (Firefox 37)
Monkey-patched add() in Constructor (Firefox 37)
get Set[@@species] (Firefox 41)
WeakMap (Firefox 6)
WeakMap.clear() (Firefox 20)
optional iterable argument in WeakMap constructor (Firefox 36)
Constructor argument: new WeakMap(null) (Firefox 37)
Monkey-patched set() in Constructor (Firefox 37)
WeakSet (Firefox 34)
Constructor argument: new WeakSet(null) (Firefox 37)
Monkey-patched add() in Constructor (Firefox 37)

- new math functions 
Math.imul() (Firefox 20)
Math.clz32() (Firefox 31)
Math.fround() (Firefox 26)
Math.log10(), Math.log2(), Math.log1p(), Math.expm1(), Math.cosh(), Math.sinh(), Math.tanh(), Math.acosh(), Math.asinh(), Math.atanh(), Math.hypot(), Math.trunc(), Math.sign(), Math.cbrt() (Firefox 25)

- additions to the number object 
Number.isNaN() (Firefox 16)
Number.isFinite() (Firefox 16)
Number.isInteger() (Firefox 16)
Number.parseInt() (Firefox 25)
Number.parseFloat() (Firefox 25)
Number.EPSILON (Firefox 25)
Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER (Firefox 31)
Number.isSafeInteger() (Firefox 32)

- additions to the object 
Object.prototype.__proto__ has been standardized
Object.is() (Firefox 22)
Object.setPrototypeOf() (Firefox 31)
Object.assign() (Firefox 34)
Object.getOwnPropertySymbols() (Firefox 33)

- additions to the date object 
Date.prototype is an ordinary object (Firefox 41)
generic Date.prototype.toString (Firefox 41)
Date.prototype[@@toPrimitive] (Firefox 44)

- new promise 
Promise 

- new proxy 
Proxy (Firefox 18)
preventExtensions() trap (Firefox 22)
isExtensible() trap (Firefox 31)
getPrototypeOf() and setPrototypeOf() traps (Firefox 49)

- new reflect object 
Reflect 

- additions to the regexp object 
RegExp sticky (y) flag (Firefox 38)
RegExp unicode (u) flag (Firefox 46)
generic RegExp.prototype.toString (Firefox 39)
RegExp.prototype[@@match]() (Firefox 49)
RegExp.prototype[@@replace]() (Firefox 49)
RegExp.prototype[@@search]() (Firefox 49)
RegExp.prototype[@@split]() (Firefox 49)
get RegExp[@@species] (Firefox 49)

- additions to the string object 
String.fromCodePoint() (Firefox 29)
String.prototype.codePointAt() (Firefox 29)
String.prototype.startsWith(), String.prototype.endsWith() (Firefox 17)
String.prototype.includes() (Firefox 40) (formerly String.prototype.contains() (Firefox 17))
String.prototype.repeat() (Firefox 24)
String.prototype.normalize() (Firefox 31)
String.raw() (Firefox 34)
\u{XXXXXX} Unicode code point escapes (Firefox 40)

- new symbol 
Symbol (Firefox 36)
Symbol.iterator (Firefox 36)
Symbol.for() - global Symbol registry (Firefox 36)
Symbol.match (Firefox 40)
Symbol.species (Firefox 41)
Symbol.toPrimitive (Firefox 44)
Symbol.prototype[@@toPrimitive] (Firefox 44)
Symbol.replace (Firefox 49)
Symbol.search (Firefox 49)
Symbol.split (Firefox 49)
Symbol.hasInstance (Firefox 50)

- typed arrays 
Typed arrays are specified as part of ECMAScript 2015 and no longer in their own specification.

ArrayBuffer
get ArrayBuffer[@@species] (Firefox 48)
DataView
Int8Array
Uint8Array
Uint8ClampedArray
Int16Array
Uint16Array
Int32Array
Uint32Array
Float32Array
Float64Array
get %TypedArray%[@@species] (Firefox 48)

- expressions and operators 
new.target (Firefox 41)
Spread operator for arrays (Firefox 16)
use Symbol.iterator property (Firefox 36)
Spread operator for function calls (Firefox 27)
use Symbol.iterator property (Firefox 36)
const (JS 1.5, Firefox 1.0) (ES2015 compliance bug 950547 implemented in Firefox 51)
let (JS 1.7, Firefox 2) (ES2015 compliance bug 950547 implemented in Firefox 51)
Destructuring assignment (JS 1.7, Firefox 2) (ES2015 compliance bug 1055984)
Statements

- statements 
for...of (Firefox 13)
works in terms of .iterator() and .next() (Firefox 17)
use "@@iterator" property (Firefox 27)
use Symbol.iterator property (Firefox 36)

- Functions 
Rest parameters (Firefox 15)
Default parameters (Firefox 15)
Parameters without defaults after default parameters (Firefox 26)
Destructured parameters with default value assignment (Firefox 41)
Arrow functions (Firefox 22)
Generator function (Firefox 26)
yield (Firefox 26)
yield* (Firefox 27)
arguments[@@iterator] (Firefox 46)

- other features 
    + Binary and octal numeric literals (Firefox 25)
    var FLT_SIGNBIT  = 0b10000000000000000000000000000000; // 2147483648
    var FLT_EXPONENT = 0b01111111100000000000000000000000; // 2139095040
    var FLT_MANTISSA = 0B00000000011111111111111111111111; // 8388607
    
    + Template strings (Firefox 34) ``
    
    + Object initializer: shorthand property names (Firefox 33)
    var a = 'foo', 
    b = 42, 
    c = {};

    // Shorthand property names (ES2015)
    var o = {a, b, c};
    
    + Object initializer: computed property names (Firefox 34)
    // Computed property names (ES2015)
    var i = 0;
    var a = {
      ['foo' + ++i]: i,
      ['foo' + ++i]: i,
      ['foo' + ++i]: i
    };    
    
    + Object initializer: shorthand method names (Firefox 34)
    var o = {
      property: function ([parameters]) {},
      get property() {},
      set property(value) {}
    };


# Global attributes for HTML 
- reference 
https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes


# Advanced 
##Inheritance and the prototype chain 
- 

## Strict mode 


## JavaScript typed arrays 

## Memory Management 

## Concurrency model and event loop 
- Runtime concepts 

Stack 




















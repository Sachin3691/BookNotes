Fluent Python, 2nd Edition=Luciano;Note=Erxin

# Preface 
-  Fluent Python is about making the most of Python 3.4
- reference 

https://learning.oreilly.com/library/view/fluent-python-2nd/9781492056348/preface01.html


# Prologue
- special methods __repr__, __abs__, __add__ and __mul__.

import math

class Vector:

    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __repr__(self):
        return f'Vector({self.x!r}, {self.y!r})'

    def __abs__(self):
        return math.hypot(self.x, self.y)

    def __bool__(self):
        return bool(abs(self))

    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Vector(x, y)

    def __mul__(self, scalar):
        return Vector(self.x * scalar, self.y * scalar)

- collection API 
Collection <- {Sequence {__getitem__, __contains__, __iter__, __reversed__, index},
               Mapping {__getitem__, __contains__, __eq__, __ne__, get, items, keys, values}} ...

- special methods overview 

String/bytes representation
__repr__, __str__, __format__, __bytes__, __fspath__


Conversion to number
__abs__, __bool__, __complex__, __int__, __float__, __hash__, __index__


Emulating collections
__len__, __getitem__, __setitem__, __delitem__, __contains__


Iteration
__iter__, __aiter__, __next__, __anext__, __reversed__

Callable or coroutine execution
__call__, __await__


Context management
__enter__, __aenter__, __exit__, __aexit__


Instance creation and destruction
__new__, __init__, __del__


Attribute management
__getattr__, __getattribute__, __setattr__, __delattr__, __dir__


Attribute descriptors
__get__, __set__, __delete__, __set_name__


Class services
__prepare__, __init_subclass__, __instancecheck__, __subclasscheck__


Unary numeric operators
__neg__ -, __pos__ +, __abs__ abs()


Rich comparison operators
__lt__ <, __le__ <=, __eq__ ==, __ne__ !=, __gt__ >, __ge__ >=


Arithmetic operators
__add__ +, __sub__ -, __mul__ *, __truediv__ /, __floordiv__ //, __mod__ %, __divmod__ divmod() , __pow__ ** or pow(), __round__ round(), __matmul__ @


Reversed arithmetic operators
__radd__, __rsub__, __rmul__, __rtruediv__, __rfloordiv__, __rmod__, __rdivmod__, __rpow__, __rmatmul__


Augmented assignment arithmetic operators
__iadd__, __isub__, __imul__, __itruediv__, __ifloordiv__, __imod__, __ipow__, __imatmul__


Bitwise operators
__invert__ ~, __lshift__ <<, __rshift__ >>, __and__ &, __or__ |, __xor__ ^


Reversed bitwise operators
__rlshift__, __rrshift__, __rand__, __rxor__, __ror__


Augmented assignment bitwise operators
__ilshift__, __irshift__, __iand__, __ixor__, __ior__

- len is not called as a method because it gets special treatment as part of the Python Data Model, just like abs. But thanks to the special method __len__, you can also make len work with your own custom objects


# An Array of Sequences
- built-in sequences 

list, tuple, and collections.deque 

- flat sequences 

str, bytes, bytearray, memoryview, and array.array 

- mutable sequences 

list, bytearray, array.array, collections.deque, and memoryview

- immutable sequences 

tuple, str, and bytes 

- list compare and local scope within 

>>> a in <list>

>>> x = 'ABC'>>> codes = [ord(x) for x in x]

- generator expression 

>>> symbols = '$¢£¥€¤'
>>> tuple(ord(symbol) for symbol in symbols)  1
(36, 162, 163, 165, 8364, 164)
>>> import array
>>> array.array('I', (ord(symbol) for symbol in symbols))  2
array('I', [36, 162, 163, 165, 8364, 164])


>>> a, b, *rest = range(5)
>>> a, b, rest
(0, 1, [2, 3, 4])

- nested tuple unpacking 

metro_areas = [
    ('Tokyo', 'JP', 36.933, (35.689722, 139.691667)),   1
    ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),
    ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),
    ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),
    ('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)),
]

print('{:15} | {:^9} | {:^9}'.format('', 'lat.', 'long.'))
fmt = '{:15} | {:9.4f} | {:9.4f}'
for name, cc, pop, (latitude, longitude) in metro_areas:  2
    if longitude <= 0:  3
        print(fmt.format(name, latitude, longitude))

- slice, slice(start, stop, step)
>>> l = [10, 20, 30, 40, 50, 60]
>>> l[:2]  # split at 2
[10, 20]
>>> l[2:]

- slice object, : s[a:b:c] can be used to specify a stride or step c, causing the resulting slice to skip item

>>> s = 'bicycle'
>>> s[::3]
'bye'
>>> s[::-1]
'elcycib'
>>> s[::-2]
'eccb'

- using + and * 

>>> a = [1, 2, 3]
>>> a * 5
[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> 5 * 'abcd'
'abcdabcdabcdabcdabcd'

- augmented assignment with sequences 

+= also applies to *=, which is implemented via __imul__. The __iadd__ and __imul__ special methods are discussed in [Link to Come].
 
- list.sort and the sorted Built-In Function

The list.sort method sorts a list in-place—that is, without making a copy.

random.shuffle(s) function, which shuffles the mutable sequence s in-place, and returns None.

- managing ordered sequences with bisect, The bisect module offers two main functions—bisect and insort—that use the binary search algorithm to quickly find and insert items

bisect(haystack, needle) does a binary search for needle in haystack—which must be a sorted sequence

locate the position where needle can be inserted while maintaining haystack in ascending order

```
import bisect
import sys

HAYSTACK = [1, 4, 5, 6, 8, 12, 15, 20, 21, 23, 23, 26, 29, 30]
NEEDLES = [0, 1, 2, 5, 8, 10, 22, 23, 29, 30, 31]

ROW_FMT = '{0:2d} @ {1:2d}    {2}{0:<2d}'

def demo(bisect_fn):
    for needle in reversed(NEEDLES):
        position = bisect_fn(HAYSTACK, needle)  
        offset = position * '  |'  
        print(ROW_FMT.format(needle, position, offset))  

if __name__ == '__main__':

    if sys.argv[-1] == 'left':    
        bisect_fn = bisect.bisect_left
    else:
        bisect_fn = bisect.bisect

    print('DEMO:', bisect_fn.__name__)  
    print('haystack ->', ' '.join('%2d' % n for n in HAYSTACK))
    demo(bisect_fn)
```

- inserting with bisect.insort, inserting items in sorted sequences, as the following section shows.

```
import bisect
import random

SIZE = 7

random.seed(1729)

my_list = []
for i in range(SIZE):
    new_item = random.randrange(SIZE * 2)
    bisect.insort(my_list, new_item)
    print(f'{new_item:2d} -> {my_list}')
```

- Arrays, If a list will only contain numbers, an array.array is more efficient: it supports all mutable sequence operations (including .pop, .insert, and .extend), and additional methods for fast loading and saving such as .frombytes and .tofile.

>>> from array import array  
>>> from random import random
>>> floats = array('d', (random() for i in range(10**7)))  
>>> floats[-1]  
0.07802343889111107
>>> fp = open('floats.bin', 'wb')
>>> floats.tofile(fp)  
>>> fp.close()
>>> floats2 = array('d')  
>>> fp = open('floats.bin', 'rb')
>>> floats2.fromfile(fp, 10**7)  
>>> fp.close()
>>> floats2[-1]  
0.07802343889111107
>>> floats2 == floats  
True

- memory views,  inspired by the NumPy library (which we’ll discuss shortly in “NumPy”). Travis Oliphant, lead author of NumPy. the memoryview.cast method lets you change the way multiple bytes are read or written as units without moving bits around.

>> from array import array
>>> octets = array('B', range(6))  
>>> m1 = memoryview(octets)  
>>> m1.tolist()
[0, 1, 2, 3, 4, 5]
>>> m2 = m1.cast('B', [2, 3])  
>>> m2.tolist()
[[0, 1, 2], [3, 4, 5]]
>>> m3 = m1.cast('B', [3, 2])  
>>> m3.tolist()
[[0, 1], [2, 3], [4, 5]]
>>> m2[1,1] = 22  
>>> m3[1,1] = 33  
>>> octets  
array('B', [0, 1, 2, 33, 22, 5])

- NumPy is so awesome that a detour is warranted.

- standard packages implement queues 

deque 
queue 
mutiprocessing, SimpleQueue, Queue, JoinableQueue 
asyncio, Queue, LifoQueue, PriorityQueue, JoinableQueue 
heapq


# Dictionary and sets 
- built-in functions are all in __builtins__.__dict__.

>>> a = dict(one=1, two=2, three=3)
>>> b = {'three': 3, 'two': 2, 'one': 1}

- dict comparehensions 

A dictcomp builds a dict instance by taking key:value pairs from any iterable.

collections.defaultdict to provide another elegant solution to the problem, defaultdict is configured to create items on demand whenever a missing key is searched 

```
import sys
import re
import collections

WORD_RE = re.compile(r'\w+')

index = collections.defaultdict(list)     
with open(sys.argv[1], encoding='utf-8') as fp:
    for line_no, line in enumerate(fp, 1):
        for match in WORD_RE.finditer(line):
            word = match.group()
            column_no = match.start()+1
            location = (line_no, column_no)
            index[word].append(location)  

# print in alphabetical order
for word in sorted(index, key=str.upper):
    print(word, index[word])
```

Create a defaultdict with the list constructor as default_factory.

If word is not initially in the index, the default_factory is called to produce the missing value, which in this case is an empty list that is then assigned to index[word]. .append(location) operation always succeeds 

- user-defined mapping type is to subclass collections.UserDict instead of dict

- collections.OrderedDict Maintains keys in insertion order, allowing iteration over items in a predictable order. 

- collections.ChainMap Holds a list of mappings that can be searched as one. The lookup is performed on each mapping in order

- collections.Counter A mapping that holds an integer count for each key. 

```
>>> ct = collections.Counter('abracadabra')
>>> ct
Counter({'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
>>> ct.update('aaaaazzz')
>>> ct
Counter({'a': 10, 'z': 3, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
>>> ct.most_common(3)
[('a', 10), ('z', 3), ('b', 2)]
```












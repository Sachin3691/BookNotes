Scratch Books Notes;Note=Erxin

# Hello Scratch!: Learn to program by making arcade games
- author Sadie Ford, 2017
https://learning.oreilly.com/library/view/hello-scratch-learn/9781617294259/

## Contents 
- offline editor 
Adobe Air. Download it from the official Adobe website (get.adobe.com/air). Next, download the offline editor from the Scratch website (scratch.mit.edu/download) for your appropriate operating system

- Add steps and spirits 
keywords: spirits 

- event blocks 
Events block to kick off your project: Click the word Events to switch to the Events block menu. Click the When Space Key Pressed block.

- toolbar 
Duplicator—This tool allows you to make a copy of your sprite.
File 
Delete 
Grow 
Shrink 
Help 
Globel 

- Meeting the block menu 
Stamp produces a non-permanent, non-programmable clone of a sprite. You can’t even move the copy of the cat you made on the screen. 
Sensing block menu and the blocks will be light blue
More Blocks block menu allows you to make your own Scratch blocks. Reuse long script 
Sprite Zone. Look next to the words New Sprite:

- Target for charpter 1 

How to navigate the five main areas of the Scratch workspace                                       
How to put together a simple program by snapping together blocks                                       
How to clear the Script Area so you can make a new program                                       
How to add a new sprite to your game                                       
How to rename your sprites for an easier time coding                                       
How to make sure you are programming the correct sprite                                       
How to use all the tools you will need to program your game


## Art editor 
- Making your first drawing 

keywords:
pixcels 

- using art tools to make a sprite 
- backdrop art editor
 You should see an option to create a new backdrop. Above the words “New backdrop” is an empty white box labeled Stage
 
 design a background, paint a ground and sky 
 
- target 
How digital space is measured in pixels                                       
How to navigate the Art Editor                                       
How to use the drawing tools on the Side Toolbar                                       
How to build a sprite pixel by pixel                                       
How to make a backdrop to go behind the sprites



## Meeting scratch's key blocks through important coding concepts 
- eight common used blocks 
When Flag Clicked 
Change X by 10 
If/then 
Forever 
Variable 
Touching Color 
Create Clone of Myself Control Menu 
Broadcast Message 

- introduce x,y coordinates 

Your directions—where you want sprites to move or where you want objects to be positioned

Move left, top, right, bottom 
- making loops 

- touch detection

    + boolean 
    + using boolean to detect touch results 
    
- scripting with cloing blocks 
Detect clone with "when I start as a clone"

- broadcasting messages 

add broadcast block to a spirit 

switch to another spirit to recieve the message

add block "when I receive 'message'"

- learning targets 
How to set a starting point for your program so it can run
How to find a sprite’s X and Y coordinates to know its location on the Stage
How to write conditional statements so you can have actions happen at a certain moment
How to create loops to keep pieces of code running indefinitely
How to build variables so you can track information
How to understand Booleans and how important true/false statements are for programming
How to make clones of sprites in the middle of a game
How to broadcast messages between two scripts

## Using condition to build a two player ball-and-paddle game 
- a two player ball and paddle game, pans, egg fly between two pans 
    + draw
        + pans 
        + egg
        + wall to recieve the egg
        + add record for two players 


    + keywords
    direction 
    degrees
    
    + it doesn’t matter where the various scripts for the sprite are in the Script               Area. Although order is important when it comes to lining up the blocks in each individual script, it’s less so when it comes               to how you line up all the scripts applied to a single sprite
    

    + detect on edge add 
    if on edge, bounce block 

    + make a game end script 
    
    + make a reflection script, such as when the edge hit hit the pan and display a message 

    + fix layer issues, make sure the egg is always on the top layer 
    
    Click the egg on the Stage and move it slightly to the left or right. Doing so means that the egg is now the top layer on the Stage. If you move anything else on the Stage, make sure you always end by going back to the egg and jiggling it slightly to make it the last thing clicked on the Stage.

- target to learn

Using an on switch for every script in the game
Sending the egg to the center of the Stage by stating X and Y coordinates
Writing conditional statements to control where the egg goes on the screen
Setting up loops so an action will run indefinitely without additional player input
Creating variables and using them to track the players’ scores
Working with Touching Color blocks and Booleans to change the direction of the egg when it hits the pan
Broadcasting a start message to make the egg start moving
How to use angles in programming to change the direction of the egg and make the game more challenging
How to make virtual paddles that can move up and down
How to add a sound to your game
How to create a points system in a game


## Designing a fixed shooter 
- As the ghosts fall from the sky to attack, you cast a spell with your wand and fire the red sparks seen
- draw the backdrop 
    + night with starts 
    + ground 
    
- explain 
keywords:
scale 
proportion
explain visual interesting position

- learning targets 
How scale is different from proportion
How to tweak proportion to convey an idea about a sprite
How scale affects the difficulty of a game
How to use the Rule of Thirds to make the game visually interesting


## Using conditionals to build your fixed shooter 
- add arrow key to move to different directions
- add stop block to stop all the executed scripts 
- add random block like 

Pick Random 1 to 10 (Operators) block inside the first circle for the X coordinate

- make a clone script, clone the spirit and hide. 
Start with a When Flag Clicked (Events) block.
Slide a Hide (Looks) block underneath the When Flag Clicked block. This block hides the ghost while it generates so the player can’t predict where the ghost will start falling.
Add a Forever (Control) block underneath to start a loop.
Place a Create Clone of Myself (Control) block and a Wait 1 Secs (Control) block inside the Forever block, one on top of the other. The task happens on a continuous loop while the game is in action, creating a clone and then pausing for a second.

- detected start a slone 
when I start as a clone 

add different conditions to handle the relative logic like 

touching barrier line 

touching sparks 

touching wizard 

- add bottom line 

Although there is a bottom edge on the Stage, marked by a Y coordinate number of –180, you’re going to use a boundary line to ensure that Scratch always knows when the ghosts have reached the bottom of the screen

- add spark to move to wizard

Start with a When Flag Clicked (Events) block.
Slide a Hide (Looks) block under the When Flag Clicked block. This will keep the sparks invisible until the player is ready to use them.
Add a Forever (Control) block underneath to start a loop.
Drag a Go to Mouse Pointer (Motion) block inside the Forever block. You don’t want the sparks to go to the mouse pointer. You want them to go to the wizard, so open the drop-down menu and choose the Wizard option.

- Although there is a bottom edge on the Stage, marked by a Y coordinate number of –180, you’re going to use a boundary line to ensure that Scratch always knows when the ghosts have reached the bottom of the screen

- drew the line at the bottom of the Art Editor, exactly where you wanted it to be for the game, you can use that as the transparent center of the sprite, which matches the               center of the Stage.

- learning target 

Using an on switch for every script in the game, including the more unusual When I Start as a Clone block and the When Space Key Pressed block
Moving the ghosts down and the sparks up with X and Y coordinates
Writing conditional statements to detect if the value of the Lives variable is at zero (0) so the game will end
Setting up a loop (in all but two scripts!) to accomplish many tasks, including cloning the ghosts and giving the wizard unlimited sparks for his wand
Using a variable to keep track of the number of ghosts the wizard blasts down with his wand
Working with touching blocks and Booleans to check if the sparks make contact with a ghost
Cloning all the ghosts and sparks for the game from a single copy of each sprite


## Designing a one-player ball-and-paddle game 
- Draw and copy duplicated grass squares 
- Add multiple steps for a spirit to display the animation 
- target to learn 

How texture affects the visual qualities of the sprite and backdrop
How to blend colors to create texture
How to fill in large spaces and then go back in to change the texture with shading
How to make two costumes for the same sprite

- Add logic to support kick the ball and hit the bricks 

    + move the shoe
Start with a When Flag Clicked (Motion) block.
Slide a Forever (Control) block onto the chain to start a loop.
Stack two If/Then (Control) blocks atop one another inside the Forever block.
Drag a Key Space Pressed (Sensing) block into each of the empty hexagonal spaces on the If/Then block. Change the top Key Space Pressed block to Left Arrow and the bottom Key Space Pressed block to Right Arrow using the drop-down menu in the block. This sets the condition so that the action will happen if the left or right arrow keys are pressed on the keyboard.
Slide a Change X by 10 (Motion) block inside each If/Then block. Change the number in the first Change X by 10 block to –7 and the second Change X by 10 block to 7. This will allow the shoe to move seven coordinate spaces to the left or right.

    + update score logic 
Start with a When Flag Clicked (Motion) block.
Switch to Data and make two variables. The first is called HBS (which stands for has been served), and the other is called Score. Uncheck the box next to HBS because you do not want it to appear on the Stage, but leave the box next to Score checked because you want the player to be able to see how well they’re doing. Position the Score variable in the lower left corner of the Stage.
Put two Set Score to 0 (Data) blocks under the When Flag Clicked block. Change the top block to HBS using the drop-down menu. Leave the other block untouched.
Place a Hide (Looks) block at the bottom of the script. This block will hide the ball on the Stage until it is in motion.

    + make a cloning script for the ball 
Start with a When Space Key Pressed (Motion) block.
Move an If/Then (Control) block underneath the When Space Key Pressed block.
Place a Square = Square (Operators) block into the empty hexagonal space in the If/Then block. Slide an HBS (Data) variable block into the left square and type a zero (0) into the right square. The zero (0) stands for false, which means that the condition is “if the ball has been served is false...” Meaning, the ball hasn’t been served.
Drag a Set X to 0 (Motion) block inside the If/Then block. You’re not going to set the X position to a single number because you want the ball to clone in a random place along the bottom of the Stage each time the ball is served. Instead, place a Pick Random 1 to 10 (Operators) block in the number bubble, as seen in figure 9.7.
Change the number in the left bubble of the Pick Random block to –240 and the number in the right bubble to 240. This will use every point along the bottom of the Stage.
Snap a Create Clone of Myself (Control) block under the Set X to Pick Random –240 to 240 block.
Place a Set Score to 0 (Data) block under the Create Clone of Myself block. Change the variable to HBS in the drop-down menu and the value to 1. Why 1? Because 1 is true, and this means the ball has now been served.

    + add ball movement script 
Start with putting a When I Start as a Clone (Control) block into the workspace.
Snap a Go to Front (Looks) block underneath. This sends the sprite to the top layer on the Stage. This block will ensure that the ball doesn’t glitch because it will be the top layer, even if you don’t click and move the ball last while setting up the Stage.
Slide a Show (Looks) block under the Go to Front block. This will reveal the previously invisible clone of the ball.
Place a Point in Direction 90 (Motion) block under the Show block. Change the 90 to 45. You will need to type the number, because 45 degrees is not in the drop-down menu. You want the ball to move on the diagonal, hence you’re using 45 degrees. If you kept it at 90, the ball would move horizontally and never reach the net!
Slide a Forever (Control) block under the Point in Direction 45 block to set a loop.
Place a Move 10 Steps (Motion) block inside the Forever block. Change the 10 to a 7 to slow down the ball a little bit. It’s now the same speed as the shoe.
Put an If on Edge, Bounce (Motion) block underneath the Move 7 Steps block.

    + making a shoe detection script 
Start with a When I Start as a Clone (Control) block.
Slide a Forever (Control) block onto the chain to start a loop.
Put an If/Then (Control) block inside the Forever block to set a condition.
Place a Touching (Sensing) block in the empty hexagonal space in the If/Then block. Use the drop-down menu to choose Shoe.
Slide a Turn Clockwise 15 Degrees (Motion) block inside the If/Then block. The arrow should be moving in the same direction as a clock, as you can see in the completed script in figure 9.12. Change the 15 to a 90. This sets the condition: if the ball is touching the shoe, turn 90 degrees.


    + make a net detection 
Start with a When I Receive (Events) block. Use the drop-down menu to choose New Message. Name this message Rebound. You will write the message sending script when you program the net, which means that you’re writing the receiver script first that will catch that message and cause something to happen.
Snap a Turn Clockwise 15 Degrees (Motion) block underneath. If the ball receives the Rebound message from the net, it will turn 180 degrees.

    + making a ball deduction script, remove the clone ball 
Start with a When I Start as a Clone (Control) block.
Add a Forever (Control) block onto the chain to start a loop.
Slide an If/Then (Control) block inside the Forever block to set a condition.
Put a Touching (Sensing) block into the empty hexagonal space in the If/Then block. Use the drop-down menu to change the option to Bottom Line. This is the barrier line that you will soon position at the bottom of the Stage.
Drag a Set Score to 0 (Data) block inside the If/Then block. Use the drop-down menu to change Score to HBS. Keep the value at zero (0), since zero means false. If the ball is in motion, the variable HBS (or has been served) is true. This part of the script resets it to false so the ball can be served again.
Snap a Delete This Clone (Control) block under the Set HBS to 0 block. This will remove this copy of the ball sprite.

    + make net clone script to generate the whole net 
Start with a When Flag Clicked (Events) block.
Snap a Show (Looks) block next in the chain to make the net appear on the screen.
Drag the single piece of net on the Stage into the top left corner.
Slide a Go to X/Y (Motion) block underneath the Show block. Scratch will automatically set these numbers to your sprite’s position. Mine were X:–217 and Y:170, but yours may be different and that’s okay.
Drag a first Repeat 10 (Control) block and snap it under the Go to X/Y block. Change the number from 10 to 7. Next, drag a second Repeat 10 (Control) block and place it inside the first Repeat 7 block. Change this 10 to an 11. You now have two loops—one that generates the number of sections in each row (11) and one that sets the number of total rows (7).
Drag a Create Clone of Myself (Control) block and place it inside the Repeat 11 block.
Place a Next Costume (Looks) block under the Create Clone of Myself block. This will make the next section black if the current section is white or vice versa.
Slide a Move 10 Steps (Motion) block under the Next Costume block and change the number to 46. This will start the next section of net 46 coordinate spaces over so the sections of net are touching but not running on top of one another. This will be a number you play with in the Troubleshooting section.
Place another Go to X/Y (Motion) block underneath the Repeat 11 block. Look at the placement in figure 9.19 if you’re confused. Change the number for the X position to –217 again. You’re going to do something a little different with the Y position because that will change each time the game starts a new row.
Put a Circle – Circle (Operators) block into the bubble for the Y position in the Go to X/Y block, as in figure 9.19.
Place a Y Position (Motion) block in the left circle. Type the number 24 in the right circle. This typed number will be another number you play with when you get to the Troubleshooting section if you don’t like the way the net looks on the screen. This block is looking at the last Y position for the net and then starting the next row 24 coordinate spaces down.
Slide a Hide (Looks) block at the bottom of the script. This will hide that original net sprite once there are 7 rows of 11 sections of net.

    + make a ball detection for the net 
    
Start with a When I Start as a Clone (Control) block in the Script Area.
Add a Forever (Control) block onto the chain to start a loop.
Slide an If/Then (Control) block inside the Forever block to set a condition.
Place a Touching (Sensing) block inside the empty hexagonal space in the If/Then block. Use the drop-down menu to set the sprite to Ball. The condition will be if the net is touching the ball sprite.
Drag a Change Score by 1 (Data) block inside the If/Then block. Leave the number as 1 because you want the game to reward a point (increasing the value of the variable Score by 1) each time the ball touches a section of net.
Snap a Broadcast Rebound (Events) block underneath the Change Score by 1 block. This will send a message to the earlier Net Detection script, telling the ball that it’s time to turn clockwise 180 degrees.
Put a Delete This Clone (Control) block under the Broadcast Rebound block.

    + programming the odds and ends for the net 
Start with a When Flag Clicked (Events) block in the workspace.
Snap a Go to X/Y (Motion) block under the When Flag Clicked block. This will send the center of the sprite to the center of the Stage. Because your scoreboard sprite fills the Stage, the center of the score board will be the center of the Stage.
Slide a Hide (Looks) block next to hide the scoreboard until you’re ready for it to be revealed at the end of the game. You can see this small script in figure 9.24.

    + make a scoreboard 
Start with a When I Receive Message1 (Events) block.
Snap a Show (Looks) block under the When I Receive Message1 block.

    + making a line positioning script 
Start with a When Flag Clicked (Events) block.
Add a Forever (Control) block underneath to start a loop.
Place a Go to X/Y (Motion) block inside the Forever block and change both numbers to zero (0). This will send the center of the sprite to the center of the Stage.

    + making a line deduction script to deduct a chane when the ball hit the line 
Start with a When Flag Clicked (Events) block.
Navigate to Data and make a new variable called Balls. This will be the chances the player has to clear the board. Make sure the variable is checked because you want it to appear on the Stage. In fact, drag that new variable down to the bottom right corner of the Stage so the player can always see how many chances they have left.
Place a Set Balls to 0 (Data) block under the When Flag Clicked block. Change the zero (0) to a 3, to give the player three balls, or chances, to clear the board.
Add a Forever (Control) block underneath to start a loop.
Place an If/Then (Control) block inside the Forever block. You’re setting a condition.
Put the Touching (Sensing) block into the empty hexagonal space on the If/Then block. Use the drop-down menu to set it to Ball. The condition will be if the line is touching the ball.
Slide a Change Balls by 1 (Data) block inside the If/Then block. Change the 1 to a –1 because you want to remove a ball (not give another ball) whenever the ball touches the line.
Snap a Wait 1 Secs (Control) block under the Change Balls by –1 block. This small pause will ensure that the game doesn’t glitch and deduct more than one chance at a time.

    + making a line game ending script 
Start with a When Flag Clicked (Events) block.
Add a Forever (Control) block underneath to start a loop.
Place an If/Then (Control) block inside the Forever block to set a condition.
Slip a Square = Square (Operators) block into the empty hexagonal space in the If/Then block. Place a Balls (Data) variable in the left square and type zero (0) in the right square because the condition should be “If the value of the Balls variable is zero then...”
Slide a Broadcast Message1 (Events) block inside the If/Then block. This will send the message to the earlier scoreboard script.
Place a Stop All (Control) block under the Broadcast Message1 block to stop all the scripts in the game. You can see the completed script in figure 9.29.

- target to learn 
Using an on switch for every script in the game, including using the spacebar to clone and serve a ball mid-game
Sending the scoreboard to the center of the screen with X and Y coordinates
Writing conditional statements to detect whether the ball is touching the net
Setting up a loop to keep the ball in motion
Using a variable to keep track of how many sections of net have been removed
Working with Booleans to check whether the ball has been served using the HBS variable
Cloning all the sections of net from a single base net rectangle
Broadcasting a message from the barrier line to the scoreboard so the scoreboard knows when the game is over


## Design a simple platformer 
- The games you’ve made so far have only required one backdrop. A side-scrolling platformer requires two or more backdrops to create the illusion of movement. 
- a game add crab, sandcastle
- add a hole in the sand backdrop 
- add water in the sand bcakdrop 
- add the girl 
- add the vine 
- add the crab 
- add logic to let the girl jump over the sandcastle, crab, hole and water
keywords:
velocity 

    + duplicate the crab and sandcastle 
    + let the girl move 
Start with a When Flag Clicked (Events) block.
Snap a Forever (Control) block underneath to start a loop.
Place two If/Then (Control) blocks inside the Forever block.
Slide two Key Space Pressed (Sensing) blocks into the empty hexagonal spaces of the If/Then blocks to set the conditions.
Change the top Key Space Pressed block to Left Arrow using the drop-down menu. Change the bottom Key Space Pressed block to Right Arrow.
Slide a Change X by 10 (Motion) block inside each of the If/Then blocks. Change the first Change X by 10 block to –5. Change the second Change X by 10 block to 5.

    + making a falling velocity script 
Start with a When Flag Clicked (Events) block.
Snap a Forever (Control) block underneath to start a loop.
Place an If/Then (Control) block inside the Forever block.
Slide a Not (Operators) block into the empty hexagonal space of the If/Then blocks to set a condition. This is what will happen if something is not true. If the statement is true, this script won’t run. But if the statement is not true, whatever action you place inside the If/Then block will happen.
Drag a Touching Color (Sensing) block and place it inside the space on the Not block.
Change the color inside the Touching Color block square to the color of the sand. The condition is now if Beachy Buffy is not touching the sand.
Create a variable (Data) called yVelocity. Unclick the variable so it doesn’t show up on the Stage.

    + use backdrop name to check the current backdrop 
    + switch backdrop by switch backdrop block 

    + the girl can grab on the vine to let her pass the water 
...


- target to learn 
Using an on switch for every script in the game, including using receiver hat blocks to kick into gear when they get a broadcasted message
Setting X and Y coordinates to simulate gravity and enable Buffy to jump
Writing If/Then/Else conditional statements to account for two possible situations
Creating loops to have the crabs run back and forth
Building variables to track the location of the vine
Using Booleans to make true or false statements to detect whether Buffy is on the zipline
Broadcasting messages between scripts to switch backdrops


## Making a single screen platformer 
- add a class room, teacher, clock, desks, kids, door with resource editor 
- learning target 
Using an on switch for every script in the game, including using receiver hat blocks to kick into gear when they get a broadcasted message
Setting X and Y coordinates to simulate gravity and enable Buffy to jump
Writing If/Then/Else conditional statements to account for two possible situations
Creating loops to have the crabs run back and forth
Building variables to track the location of the vine
Using Booleans to make true or false statements to detect whether Buffy is on the zipline
Broadcasting messages between scripts to switch backdrops


## Using arrays and simulating gravity in a single-screen platformer
- add script to let the teach walk around 


# Learn to Program with Scratch 
## Introduce the blocks 


## Motion and Drawing 
- introduce the cartesian system 
- introduce repeat 


## Looks and Sound 
- introduce how to change costumes to animate 
- visual effect 
keywords:
effect

- introduce layers


## Procedures 
- Message broadcasting and receiving 
- Introduce the procedure concept of programming by separate the blocks into groups 


## Variables 
- The shape of the blocks stand for the place where the variable/block can be placed 


## Making Decisions 

## Repetition a deeper exploration of loops 

## String processing 
- common operators 
letter of
change ... by 
assign and test 
- introduce compare 
- introduce operators 

## Lists 
- introduce weekdays with list
- dynamic lists, add and remove items 
- introduce basic sort methods 
- map of US to introduce the list items

## Sharing and collaboration 

## Online Resources 


# Scratch by Example: programming for all ages 
## Learning the basic 
- interface 


## Meet the cat 

## Make the cat move 

## Make the cat draw 
- pen block? which version?

## the Playful cat 
- change cat color 
- change cat size 
- change cat cosume 
- add visual effect 

## the noisy cat 
- add sound to the cat 


## Become a programmer
## Control block 

## Sensing blocks 

## Operators 

## Variables 

## Lists 

## WebCam interface 
- video motion on this sprite detects and reports the value of video motion on the sprite. For example, if you have the webcam pointing at you, the webcam shows this on the stage behind the sprite on the stage behind the sprite. If you move your hand over the sprite, the webcam detects the motion and the block reports its value to the script.

- video direction on this spirit, detects and reports the direction that the video motion is going when it passes over the sprite.You can also use a webcam to trigger your script. 

## Broadcast interaction 


## Create your own blocks 


# Scratch programming playground 
- author 
his website http://www.inventwithpython.com/.

. You can also watch video tutorials online at https://scratch.mit.edu/help/videos/ and https://inventwithscratch.com/.

 download from https://www.nostarch.com/scratchplayground/. 
 
- snaaake 
Before you start coding, take a look at the final program at https://www.nostarch.com/scratchplayground/.

- fruit slicer 
Before you start coding, look at the final program at https://www.nostarch.com/scratchplayground/.

- use custom variable to display scores 

- Asteroids is a classic game developed in 1979 by Atari. Since then, many programmers have remade the game, and it’s a great programming project to make in Scratch, too. The player pilots a spaceship that must destroy space asteroids while avoiding the space pieces that break off . . . in space!

- MAKING AN ADVANCED PLATFORMER, just like super mario
look at the final program at https://www.nostarch.com/scratchplayground/.

griffpatch has created several cool Scratch programs using these costumes: https://scratch.mit.edu/users/griffpatch/.

    + hitbox cosume 
Delete these Cat sprite costumes, including the hitbox costume. Create a new hitbox costume that is the right size for the crab. Here’s what the hitbox costume should look like

- other resources 
Scratch Programming Playground Studio (http://www.inventwithscratch.com/studio/) is a place to share your own games 

The Scratch Forums (http://scratch.mit.edu/discuss/) 

Learn to Program with Scratch by Majed Marji (No Starch Press, 2014; https://www.nostarch.com/learnscratch/)

ScratchEd (http://scratched.gse.harvard.edu/), is an online community created for teachers and other educators who use Scratch. 

This book is free to read online at https://inventwithpython.com/, or you can buy it at https://www.nostarch.com/inventwithpython/. 


# Scratch for kids for dummies 
## Introduction 
- MIT Media Lab 
- resources 
Web Extras: www.dummies.com/extras/scratchforkids

Online projects: www.scratch4kids.com/projects

Cheat Sheet: www.dummies.com/cheatsheet/scratchforkids

Updates: www.scratch4kids.com/updates

http://www.dummies.com/cheatsheet/scratchforkids.


# Make your own scratch games 
## Reference 
The website https://itch.io/ is full of hundreds of games. 


# Helping Kids with Coding for Dummies 
- Other programming languages for kids 
Scratch Jr. (https://www.scratchjr.org) is a fabulous, free, symbol-based coding environment for young children

Hopscotch (https://www.gethopscotch.com) is a fun and full-featured new app development environment that’s ideal for youth and tweens;

Kodu (https://www.kodugamelab.com) is a downloadable, desktop program for Windows PC devices and the Xbox;

Alice (http://www.alice.org) is a teaching language developed at Carnegie Mellon University with the goal of helping new coders learn object-oriented programming (OOP) 

One especially great Python IDE for beginners is Thonny (http://thonny.org); 

Another excellent starter tool for learning and working with Python is Python Tutor (http://www.pythontutor.com)

Another excellent way to learn JavaScript is using the free App Lab available at the Code.org website (https://code.org/educate/applab).

An excellent, free IDE that is beginner-friendly is BlueJ (https://www.bluej.org)

Microsoft Make Code site (https://makecode.com) for easy-to-access IDEs that allow young coders to write code for execution on a wide range of hardware products

MicroWorlds EX (http://www.microworlds.com) is a updated of version of the Logo programming language

Tynker (https://www.tynker.com) is an online, Scratch-like programming environment that ramps up from simple tile-based coding to authentic languages including JavaScript.

GameSalad (https://gamesalad.com) is an extremely cool programming environment that allows coders to create real, publishable apps for distribution on Android and iOS devices.

Write your code in the IDE located at the Microsoft Make Code site at https://makecode.microbit.org.

IDE at the Microsoft Make Code site located at https://makecode.microbit.org. Your kid can code using either text mode or tile (block)-based mode.

Scratch starter curriculum, Creative Computing, available at http://scratched.gse.harvard.edu/guide/.

CSTA (http://www.csteachers.org) is the nonprofit governing body that promotes and supports computer science education and computer science teachers. 
 
On Code.Org’s unplugged page (https://code.org/curriculum/unplugged) you find a number of activities aimed at teachers who might be leading the activity in the classroom.

check it out at https://shop.littlebits.cc/products/smart-home-kit.



# Scratch blocks from the documents 
- Motion 
move [] steps 
turn right [] degrees 
turn left [] degrees 
goto [random position]
goto x: [] y:[]
glide [] secs to [random position]
glide [] secs to x: [] y:[]
point in direction []
point towards [mouse-pointer]
change x by []
set x to []
change y by []
set y to []
if on edge, bounce 
set rotation style [left-right]

    + support display the current spirit information with three helpers 
    x position 
    y position 
    direction
    
- Looks 
say [] for [] seconds 
say [] 
think [] for [] seconds 
think [] 
switch costume to []
next costume 
switch backdrop to []
next backdrop 
change size by []
set size to []
change [] effect by []
set [] effect to []
clear graphic effects 
show 
hide 
go to [front] layer 
go [forward] [] layer 
    + helpers 
    costume [number]
    backdrop [number] 
    size 
    
- Sound 
play sound [] until done 
start sound []
stop all sounds 
change [pitch] effect by []
set [pitch] effect to [] 
clear sound effect 
change volumen by []
set volumen to []
    + helpers 
    volume 
    
- Events 
when Flag click 
when [] key pressed 
when this sprite chicked 
when backdrop switches to []
when [loudness] > []
when I receive [message]
broadcast [message]
broadcast [message] and wait 

- Control 
wait [] seconds 
repeat []{
}

forever {
}

if [] then {
}
    
if [] then {
}
else{
}

wait until [] {
}

repeat until []{
}

when I start as a clone 

create clone of [myself]

delete this clone 

- Sensing 
touching [mouse-pointer]?
touching color []?
color [] is touching [] ?
distance to [mouse pointer]
ask [] and wait 
key [] pressed?
mouse down?
mouse x 
mouse y 
reset timer 
current [year]
days since [2000]
    + helpers 
    answer
    loudness 
    timer 
    username 
    
- Operators 
[] + []
[] - []
[] * []
[] / [] 
pick random [] to []
[] > [50]
[] < [50]
[] = [50]
[] and []
[] or []
not []
join [] []
letter [1] of []
length of []
[apple] contains [a]? 
[] mod []
round []
[abs] of []

- Variables
Make a Variable 
my variable //default displayed 
set [] to [] 
change [] by []
    + Make a list 
    add [] to []
    delete [1] of []
    delete all of []
    insert [] at [1] of []
    replace item [1] of [] with []
    item [1] of []
    item # of [] in []
    length of []
    [] contains []?
    
    
    + helpers 
show variable []
hide variable []
show list []
hide list []

- My block 
Make a block //like a subprocess 

- Penn


# Resources 
- ideas 
https://scratch.mit.edu/ideas
- embed scratch project into other webpages 
https://en.scratch-wiki.info/wiki/How_to_Embed_a_Project
- google blocky project 
https://developers.google.com/blockly/
- other tutorials 
https://en.scratch-wiki.info/wiki/Scratch_Wiki:Table_of_Contents/Other_Tutorials
- table of contents, scratch wiki
https://en.scratch-wiki.info/wiki/Scratch_Wiki:Table_of_Contents/Program
- forum
https://en.scratch-wiki.info/wiki/Scratch_Wiki:Table_of_Contents/Forums
- download 
https://scratch.mit.edu/download
- Learn to program with scratch 
The extra resources for this book (available at http://nostarch.com/learnscratch/
- Online editor 
https://scratch.mit.edu/projects/editor/?tutorial=getStarted


# Develop Cases
- Caculator
- Box pyramid
- Car race
- Fish eating 
- pig hit bubbles 
- Simplied plants vs Zombies 
- Music play typing, happy birthday
- Push boxes 
- Avoid hit by rocks
- Catch carrot which drop from the sky 
- Mermaid swim to avoid the jelly fish, requires Octavia to dodge the randomly generating         jellyfish and turtles as she swims forward. But both games share the same ending, which is no ending. Both the road in Spy Hunter and ocean lane in Mermaid Splash continue forever.

- Create traffic lights
- Sun raise to let the flowers bloom and sun set let the flowers close
- Hit the mouse with hammer

- Build a clock 
- Math cat, which will continue ask math questions and check the answer
- maze runner 
- changed rainbow 
- shoot basketball to learn gravity 
- snaaake, snack eat apples to learn list 
- flappy bird 
- interactive commic books 
- simplified balance ball










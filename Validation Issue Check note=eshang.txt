Validation Issue Check note=eshang

:Lin table functions, id 465(done)
>Request From: OuYang, Dawson (Bolton)
We have agreed that the followings will be on the Stroke Operator Advanced Screen:
1.	Mold Open Time (read/write)
2.	Mold Break Distance (read/write)
3.	Mold Protection Force Set Point (read only)
4.	Actual Stroke Force (read only)
Some other addtional variable to be monitor on “Diagnostics” Screen (or valve status screen) and on “Stroke Factory” Screen
>Design idea
When the “View Lin-Table” is clicked, a pop up window will visualize the following lin-tables with a graph
Save Lin-Table” is clicked... 
>Added reason from Teo
All new features should be captured there, not just issues.
>Plan to achieve

:In the EventLog file taken from Bay 9 machine sn5253115, id 10034, 10035(working on)
Can't open the link file

:HPP4.0 oil temp display updates what appears to be every second and to 1 decimal point, id 1056(working on)

Eventlog pass
Event duplicate


:Software version screen
>generate all the dsl file by ruby tool
>open the file and search the screen, such as "machine specification tab"
get this dsl script fragment:
   HmiScreenMachineSpecifications {
      if hpet || hmed
         "013"
      elsif hycap || hycap_hpp
         "012"
      else
         "009"
      end
   }
>for the f10 machine is hypet
    this hypet
>get the screen object definition fragment
   panel(:layout => :horizontal) {
      panel(:layout => :vertical, :screen_text => "Software") {
            screen_object "common_screen_version"
         }   
   }
the screen object is common_screen_version
>get the definition of screen object
   text_setting("common_screen_version") {
      changeable   "imm_machine_specification_edit_enable"
   }
the other value is set to default
have two ways to define the width attribute
unit
>get the configuration of the screen object
   text_setting('common_screen_version') {
      screen_text "Version"
      full_text "Version"
      default_value "2011.2.Dev-001"
      display_width 10
      write_to_device false
   }
some of the screen object is automatic set for the default value. These script are generate automatic by ruby script
>open machine the module "HmiScreenMachineSpecifications.009"
>hmi have two kinds of modules
screen module, contains screen objects self define by husky
>open the all screen modules is slow, so open the one need
"Machine Detail"|"Open Machine Modules", open all the modules
"PCProduction Utility"|ModuleInterface, open one module
>change the dsl file of the module
find the definition and change it
if the definition of the screen object not in the module
search the screen object in the whole dsl file to get the definition of the screen object, find the setting point and then search ".dsl" in up direction
get the definition of the screen object "DomainModelCommon.039"
>open the module DomainModelCommon.039
the number of the module lower than 700 is belong to bolton, the real machine used
shanghai team used the bigger than 700
>before change it, create a test module base the real module
change it and test it, if it pass merge the file 
sync the module from bolton and test it again. if it's ok then close the item
>use the excel tool to create the module
 the tool could be download from tfs, it point to the w drive. Use it in the bolton remote machine to change the bolton w drive module. Use it in shang hai to change the shang hai w drive module
 use the new created moduleName+Number to search the new module
>create a special chart to add the new module into the machine
navigate to "PCProduction Utility"|EditChecklist|Specials, right click any special will open the "Special Database Viewer"
double click any special to open the machine description
use the CTSP number to create the special chart
Note:WHEN PUT IN THE BASE MOUDLE NUMBER, TYPE "'" AT THE HEAD OF THE NUMBER TO TYPE IN STRING
>open the new created module to add 
>open the new special chart to add module or change module
   change_modules {
   DomainModelCommon {{
      "039" => "716"   // previous -> new
      }}
   } 
   change the special name to make it easy to find in "C files"->"CtSP6.c"
   CHART_T ZZ_F10_Z_eshang_Validation_Test_Chart = {
        NULL,
        NULL,
        NULL,
        NULL,
        0,
        CHART,
        Validate_Chart_Vers,
        NULL
    };
    keep three points have the same name, "ctsp6.dsl", "ctsp6.txt", "ctsp6.c"
    add common into the ctsp6.man to declare the change
change ZZ_F10_Z_eshang_Validation_Test_Chart to the desire name
>use the "PCProduction Utility"|ModuleInterface|maintenance to delete module
>edit check list to find the module
navigate to the special tab, select the new added module
add notes
apply the changes
>recompile the machine
>generate the machine


:ConnectStatus
HmiScreenRemoteInterface.014

:Validation excel file password
validation

:Run plc
>project password
leafbox20091
@edit
>copy PLM file to the machine\plc\folder, or generate the machine with tsm file
>Step
-Note, if the development environment is vmware. Make sure it only use one processor. 
-Load plc project file from the machine folder
-change the variable bSimulateMode to TRUE
    *at Resources|IMM Global Variable|Glbconst_IMM(CONSTANT)
    *project|rebuild all
-double click tsm file to load the machine's plc configuration
if the tsm file is generated, don't forget to disable all the io devices
- NC-Configuration|NC-Task|Axes, change all the axes to standard and save
- click the toolbar icon of the twinCat system manager
    generate mapping
    check configuration
    advance configuration
    set/start
- wait for plc start
- Change the plc control to online and login
- start the plc from the taskbar, plc|star
bSimulateMode			: BOOL := FALSE;
bSimulateMode			: BOOL := TRUE;



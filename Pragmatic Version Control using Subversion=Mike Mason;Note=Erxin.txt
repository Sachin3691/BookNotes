Pragmatic Version Control using Subversion=Mike Mason;Note=Erxin

# Preface 
- reference 
http://www.pragmaticprogrammer.com
- typographic conventions 
italic font, indicate a term that is defined or borrow from other language 
files, 
commands, 
output 
cvs hint 


# Introduction 
- source control 
- where do versions come in 
- tag, branch, merge 
- locking options, for resolve conflict 
    + strict locking, can't change by more than two people 
    + conflict resolution, optimistic locking 
- configuration management(CM)

# getting started with subversion 
- install svn and command line tools 
$ svn --help 

- create repo 
$ svnadmin create dir ad

- create a simple project 
    + import the already exist directory structure 
    $ svn import -m "comments"
    
    + import keyword tel subversion we want to import some files to our repository 
    
- start work with 
- check changes 
$ svn diff 

use your own diff command by 
$ svn --diff-cmd 

- updating the repository 
$ svn commit -m "message "

- check the repository log 
$ svn log file_name 

check verbose 
$ svn log --verbose file_name 

- mixed revision working copies 
- set up a message editor, subversion looks at environment variables to determine which editor it should use SVN_EDITOR
$ set SVN_EDITOR=application_name 

- check out on windows 
svn co uri 

- check if there are updates avaliable 
$ svn --show-updates 

- compare local to the latest 
$ svn diff -r HEAD Number.txt 

update 
$ svn update 

- conflict resolution 
fix the conflict and tell subversion the conflict is fixed 
$ svn resolved file_name 

# how to 
- basic philosophy 
- important steps when using version control 
    + secure way to access your repository 

# accessing a repository 
- scheme 
file:///c:/svn-repos/...
scheme, repository location, path within repository

- add a new file 
svn add file_name 

- svn + ssh 
- If you’re using TortoiseSVN you don’t need to worry about installing an SSH client since Tortoise comes with TortoisePlink
- change the client configure on window at %APPDATA% subversion directory, edit the section on tunnels so it looks like this 
[tunnels]
ssh=plink 

$ svn checkout svn+ssh://olio/home/...

- check out reposibory 
$ svn checkout http://...

# common subversion commands 
- check out trunk 
$ svn checkout svn://olio/sesame/trunk

- check out file information 
$ svn info 

- manipulating protperties 
$ svn propset checked-by "name" file_name 

- checkout property list 
$ svn proplist file_name 

check the property set 
$ svn propset svn:keywords ... 

- check repo status 
$ svn status dirctory 

- ignore list bring up an editor for the
svn:ignore property on timelib.

- set svn end line style by 
svn:eol-style 
native, svn will translate the end line symbol 
CRLF
LF
CR 

- executable flags 
- branches are copies of a set of files that provide a snapshot of the repository to a new location 

$ svn copy file_name0 file_name1 

- rename a file by 
$ svn move file_name0 file_name1

- conflict syntax 
<<<<<< .revision0
...
===========
...
>>>>>>>>>>> .revision1 

- revert changes by 
$ svn revert filename 

- after fix the conflict tell svn by 
$ svn resolved file_name 

- check line by line history by 
$ svn blame file_name 

- remove changes to some version 
$ svn merge -r revision0:revision1 file_name 
calculate the changes between revisions 27 and 26 for Contacts.java and apply those changes to our working copy

# file locking and binary file 
- any file can be set to require a lock before it is edited by setting 
- enable lock on a file 
- binary file will be set not merge-able, add need lock property to binary file will help maintain the versions 
$ svn propset svn:needs-lock true CurrencyConversionRates.xls

locks the file before editing it.
$ svn lock CurrencyConversionRates.xls -m "comment "

svn unlock command can be used to release someone else’s lock on a file. --force option because she doesn’t own the lock herself
$ >svn unlock --force svn://olio/sesame/trunk/CurrencyConversionRates.xls


# organizing your repository 
- use single repository at the beginning 

# using tags and branches 
- tag, Tags are really useful for keeping track of important events in the life cycle of your project. 
- You can make your tags directory read-only (or more correctly create-only —new tags should be allowed) by using one of the repository permissions scripts covered in Section A.5, Access Control with Hook Scripts, on page 168
- If you do check in changes to a tag directory, the tag effectively becomes a branch
- tags and branches in practice 
release branches, keep each release of a project onto a separate branch 
release, point at which project is shipped
bug fixes, bugs fix in the release branches and merge into the trunk or create bug branch and use tags to mark the start and end fix for complex bugs 
developer experiments 

- create release branch by copying your project’s trunk to a new directory underneath branches/  best to do this using repository URLs

$ svn mkdir -m "Creating branches directory" svn://olio/sesame/branches
$ svn copy -m "Creating release branch for 1.0" svn://olio/sesame/trunk svn://olio/sesame/branches/RB-1.0

To start actually using the release branch, we’ll need to check it out into a new working copy

- working in a release branch 
$ svn co svn://olio/sesame/branches/RB-1.0 directory

- switching a working copy to a release branch, if the changes is not too much the switch will be fast 
$ svn switch svn://olio/sesame/branches/RB-1.0

switch back to trunck 
$ svn switch svn://olio/sesame/trunk

switch to a  revision 
$ svn switch svn://olio/sesame/trunk --revision revision_number

- generating a release 
the simplest way to create a release tag is to copy the branch to a new directory under tags, this will tag the latest code in the release branch 

tag something which is not the latest code 
$ svn copy -m "Tag release 1.0.0" svn://olio/sesame/branches/RB-1.0 svn://olio/sesame/tags/REL-1.0.0

- fixing bugs in a release branch 
    + simple bug fixex 
        * generate a test to reveal the bug 
        * commit your changes into the repository and remember the new revision number 
        * use the new revision number to merge the change to all other affected branches 
        * 
        * example 
        $ svn commit -m "Fix bug 3065"
        commit bug fix revision number is 38
        
        we go to the trunk working copy and ask Subversion to merge revision 38. ask merge difference between reision 37 and 38 to be merged 
        $ svn update
        $ svn merge -r37:38 svn://olio/sesame/branches/RB-1.0
        $ svn commit -m "Merge r38 (fix bug 3065)"

    + complex bugs 
        * create a branch for the bug 
        * use tags to the bug branch to help identify when we start and finish the fix 
        * tags will help us merge the fix to other branches 
        * Commit your changes into the repository.
        * Once you’re happy with the fix, tag the branch again to mark the end of the bug fix.
        * use the two tags to merge the fix 

        * example 
        $ svn copy -m "create bugfix branch" svn://olio/sesame/branches/RB-1.0 svn://olio/sesame/branches/BUG-1051

        $ svn copy -m "tag bugfix start" svn://olio/sesame/branches/BUG-10512 svn://olio/sesame/tags/PRE-10512

        check out bug branch start fixing
        $ svn checkout svn://olio/sesame/branches/BUG-10512

        several commits....
        
        tag the finished 
        $ svn copy -m "tag bugfix finish" svn://olio/sesame/branches/BUG-10512 svn://olio/sesame/tags/POST-10512

        merge the bug fix to the release branch
        $ cd rb1.0
        $ svn update
        $ svn merge svn://olio/sesame/tags/PRE-10512 svn://olio/sesame/tags/POST-10512
        
        same svn merge command can be used to pull the bug fix into other branches and the trunk.
        
- developer experiments branch 
$ svn copy -m "new hibernate persistence spike" svn://olio/sesame/trunk svn://olio/sesame/branches/TRY-MGM-hbn-spike

If you have a working copy of your project already checked out, you can switch it to the new experimental branch using svn switch. 
$ svn switch svn://olio/sesame/branches/TRY-MGM-hbn-spike
switch back to trunk 
$ svn switch svn://olio/sesame/trunk

Instead of reusing a working copy, you can check out the branch into a new directory.
$ svn co svn://olio/sesame/branches/TRY-MGM-hbn-spike hbn-spike

- merge branches, we nned to know when the branch was created. Fortunately, svn log has a --stop-oncopy option
$ svn log --stop-on-copy svn://olio/sesame/branches/TRY-MGM-hbn-spike
----------------------------------------------------------r47 | mike | 2004-11-12 13:47:13 -0700 (Fri, 12 Nov 2004)
Added hibernate utils
----------------------------------------------------------r46 | mike | 2004-11-12 13:46:27 -0700 (Fri, 12 Nov 2004)
Made Contacts a hibernate mapped class
----------------------------------------------------------r45 | mike | 2004-11-12 12:55:21 -0700 (Fri, 12 Nov 2004)
new hibernate persistence spike
----------------------------------------------------------

this tell us RY-MGM-hbn-spike branch was created at revision 45, we can merge all the changes between revision 45 and HEAD into our trunk working copy

merge the branches into the trunk 
$ cd sesame
$ svn update
$ svn merge -r 45:HEAD svn://olio/sesame/branches/TRY-MGM-hbn-spike


# Creating a project 
- creating the initial, basically three ways 
    + import existing source into a directory in the repository 
    + manually create directories using svn mkdir 
    + convert an existing source code repo, convert cvs, rcs 
    
- import into repo, import existing files into a repository 
$ svn import -m "Wibble initial import" svn://olio/wibble/trunk

manually add directory 
$ svn mkdir -m "Create tags directory" svn://olio/wibble/tags

$ svn mkdir -m "Creating initial structure" \
svn://olio/wibble \
svn://olio/wibble/trunk \
svn://olio/wibble/trunk/src \
svn://olio/wibble/trunk/doc \
svn://olio/wibble/trunk/vendor

- top level files
readme, describe the project and the background 
building, for hint to rebuild the project 
glossory, document all project-specific jargon 

- top level directories 
tags 
branches 
trunk 
    + doc 
    prerequisites
    
    building 
    
    more info 
    
    + data 
    + db
    + src 
    + util 
    + vendor, uses third-party libraries or header files 
    + vendorsrc
    
- sharing code between project, the subversion everything is a directory approach means that your common code will need to live in a shared directory 
    + shore all your projects in a single parent folder, use a build script to manage dependencies 
    + use svn:externals to pull the dependencies for each project 
    
- code sharing with externals, lets you include the contents of another repository in our working copy 
> svn checkout svn://olio/maitai/trunk maitai
A maitai/lib
A maitai/src
Checked out revision 19.
> svn propset svn:externals \
"dataaccess svn://olio/dataaccess/trunk" \
maitai
property 'svn:externals' set on 'maitai' Here we’ve set the svn:externals property to include just a single external. You can use svn propedit to bring up an editor if you have multiple dependencies







matplotlib tutorial;Note = Erxin

# introduction
- reference url
http://www.loria.fr/~rougier/teaching/matplotlib/
- install
    + ipython
    http://ipython.org/install.html#
    + install scientific relative python environment
    anaconda, http://docs.continuum.io/anaconda/index.html
    epd free, https://www.enthought.com/products/epd/free/
    + install pyparsing
    pip install pyparsing

# simple plot
- simple example
from pylab import *

X = np.linspace(-np.pi, np.pi, 256,endpoint=True)
C,S = np.cos(X), np.sin(X)

plot(X,C)
plot(X,S)

show()
- instantiating defaults example
# Import everything from matplotlib (numpy is accessible via 'np' alias)
from pylab import *

# Create a new figure of size 8x6 points, using 80 dots per inch
figure(figsize=(8,6), dpi=80)

# Create a new subplot from a grid of 1x1
subplot(1,1,1)

X = np.linspace(-np.pi, np.pi, 256,endpoint=True)
C,S = np.cos(X), np.sin(X)

# Plot cosine using blue color with a continuous line of width 1 (pixels)
plot(X, C, color="blue", linewidth=1.0, linestyle="-")

# Plot sine using green color with a continuous line of width 1 (pixels)
plot(X, S, color="green", linewidth=1.0, linestyle="-")

# Set x limits
xlim(-4.0,4.0)

# Set x ticks
xticks(np.linspace(-4,4,9,endpoint=True))

# Set y limits
ylim(-1.0,1.0)

# Set y ticks
yticks(np.linspace(-1,1,5,endpoint=True))

# Save figure using 72 dots per inch
# savefig("exercice_2.png",dpi=72)

# Show result on screen
show()
- changing line color and width
figure(figsize=(10,6), dpi=80)
plot(X, C, color="blue", linewidth=2.5, linestyle="-")
plot(X, S, color="red",  linewidth=2.5, linestyle="-")
- setting default x, y limit
xlim(X.min()*1.1, X.max()*1.1)
ylim(C.min()*1.1, C.max()*1.1)
- setting ticks of x and y, which means the display label gaps
interesting values (+/-π,+/-π/2) for sine and cosine. We'll change them such that they show only these values.
- setting ticks label
xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
       [r'$-\pi$', r'$-\pi/2$', r'$0$', r'$+\pi/2$', r'$+\pi$'])
yticks([-1, 0, +1],
       [r'$-1$', r'$0$', r'$+1$'])
\pi will convert to π when display on the chart
this will make the x axis display -π
- moving spines, spines are the data boundaries of a chart
ax = gca()
ax.spines['right'].set_color('none') # will remove it
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.spines['bottom'].set_position(('data',0))
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data',0))
- adding a legend
plot(X, C, color="blue", linewidth=2.5, linestyle="-", label="cosine")
plot(X, S, color="red",  linewidth=2.5, linestyle="-", label="sine")
legend(loc='upper left')
- annotate some points
annotate(r'$\sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$',
         xy=(t, np.sin(t)), xycoords='data',
         xytext=(+10, +30), textcoords='offset points', fontsize=16,
         arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"))
- adjust the tick label to set them with bigger font and with white background box with alpha 0.65
for label in ax.get_xticklabels() + ax.get_yticklabels():
    label.set_fontsize(16)
    label.set_bbox(dict(facecolor='white', edgecolor='None', alpha=0.65 ))
- fast plot elements summary
    + figures, the whole plotting area
    + subplots, a chart to be plot
    + axes
    + ticks, the axes label gap
    + While subplot positions the plots in a regular grid, axes allows free placement within the figure
    + matplotlib calls gca() to get the current axes and gca in turn calls gcf() to get the current figure. If there is none it calls figure() to make one, strictly speaking, to make a subplot(111).
    
# matplotlib detail elements
- figures, A figure is the windows in the GUI that has "Figure #" as title. Figures are numbered starting from 1 as opposed to the normal Python which is a matlab style
    + init argument
    :argument   :default            :description
    num         1                   number of figure 
    figsize     figure.figsize      figure size in in inches (width, height) 
    dpi         figure.dpi          resolution in dots per inch 
    facecolor   figure.facecolor    color of the drawing background 
    edgecolor   figure.edgecolor    color of edge around the drawing background 
    frameon     True                draw figure frame or not 
    + close a figure
    close a figure programmatically by calling close. Depending on the argument it closes (1) the current figure (no argument), (2) a specific figure (figure number or figure instance as argument), or (3) all figures (all as argument).
- subplots, subplot you can arrange plots in a regular grid
    + subplots(row_count, col_count, index)
    0 < index <= row_count * col_count
    0 < row_count
    0 < col_count
    + GridSpec, SubplotSpec, subplot2grid command used to customizing location of subplot
    http://matplotlib.org/users/gridspec.html
- Axes, Axes are very similar to subplots but allow placement of plots at any location in the figure. 
    + such as put a smaller subplots into a bigger one
    axes([0.1, 0.1, .8, .8])
    axes([0.2, 0.2, .3, .3])
- ticks, Well formatted ticks are an important part of publishing-ready figures. Matplotlib provides a totally configurable system for ticks.
There are tick locators to specify where ticks should appear and tick formatters to give ticks the appearance you want.
    + normal common locators
    NullLocator No ticks.
    IndexLocator Place a tick on every multiple of some base number of points plotted.
    FixedLocator Tick locations are fixed.
    LinearLocator Determine the tick locations.
    MultipleLocator Set a tick on every integer that is multiple of some base.
    AutoLocator Select no more than n intervals at nice locations.
    LogLocator Determine the tick locations for log axes.
    + special date locator
    Therefore, matplotlib provides special locators in matplotlib.dates.
- line properties
    alpha (or a) alpha transparency on 0-1 scale   
    antialiased True or False - use antialised rendering   
    color (or c) matplotlib color arg   
    linestyle (or ls) see Line properties   
    linewidth (or lw) float, the line width in points   
    solid_capstyle Cap style for solid lines   
    solid_joinstyle Join style for solid lines   
    dash_capstyle Cap style for dashes   
    dash_joinstyle Join style for dashes   
    marker see Markers   
    markeredgewidth (mew) line width around the marker symbol   
    markeredgecolor (mec) edge color if a marker is used   
    markerfacecolor (mfc) face color if a marker is used   
    markersize (ms) size of the marker in points 
- line style
    - solid line   
    -- dashed line   
    -. dash-dot line   
    : dotted line   
    . points   
    , pixels   
    o circle   
    ^ triangle up   
    v triangle down   
    < triangle left   
    > triangle right   
    s square   
    + plus   
    x cross   
    D diamond   
    d thin diamond   
    1 tripod down   
    2 tripod up   
    3 tripod left   
    4 tripod right   
    h hexagon   
    H rotated hexagon   
    p pentagon   
    | vertical line   
    _ horizontal line 
    - markers
    Symbol
    Description
    Appearance
    0 tick left   
    1 tick right   
    2 tick up   
    3 tick down   
    4 caret left   
    5 caret right   
    6 caret up   
    7 caret down   
    o circle   
    D diamond   
    h hexagon 1   
    H hexagon 2   
    _ horizontal line   
    1 tripod down   
    2 tripod up   
    3 tripod left   
    4 tripod right   
    8 octagon   
    p pentagon   
    ^ triangle up   
    v triangle down   
    < triangle left   
    > triangle right   
    d thin diamond   
    , pixel   
    + plus   
    . point   
    s square   
    * star   
    | vertical line   
    x cross   
    r'$\sqrt{2}$' any latex expression 
- colormaps
    + basic
    + GIST
    + Sequential
    + Diverging
    + Qualitative
    + Miscellaneous
- kinds of plots
text, 3d plots, polar axis, multi plots, grids, quiver plots, pie chart, imshow, contour plots, bar plots, scatter plots, regular plots
- other tutorials
pyplot, image, text, path, transforms
    + pyplot, http://matplotlib.org/users/pyplot_tutorial.html


 
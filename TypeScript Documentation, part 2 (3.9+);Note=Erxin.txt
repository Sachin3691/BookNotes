TypeScript Documentation, part 2 (3.9+);Note=Erxin.txt

# TypeScript 3.9 
- Improvements Promise.all for handling mixed promise with null 
- add awaited operator 

T extends PromiseLike<infer U> ? { 0: Awaited<U> }[U extends any ? 0 : never ] : ...

-  // @ts-expect-error comments. When a line is prefixed with a // @ts-expect-error comment, TypeScript will suppress that error from being reported

// @ts-expect-error
console.log(47 * "octopus");

    + // @ts-expect-error can act as a suppression comment, similar to // @ts-ignore. The difference is that // @ts-ignore will do nothing if the following line is error-free
    
- uncalled function checks in ternary conditionals 

- support commonjs require to auto import javascripts. 

- quick fix for missing return, right click a function to add return 

- breaking changes 
    + parsing differences in optional chaining and no-null assertions, optional chaining (?.) with the non-null assertion operator (!)
    
    foo?.bar!.baz 
    
    //equal to below code in preivous versions 
    
    (foo?.bar).bar 
    
    //now the ! operator should just “disappear” since the intent was to remove null and undefined from the type of bar.
    foo?.bar.baz
    
    //or 
    
    (foo?.bar)!.baz

- The JSX Specification forbids the use of the } and > characters in text positions. TypeScript and Babel have both decided to enforce this rule to be more comformant. 

new way to insert these characters is to use an HTML escape code (e.g. <span> 2 &gt 1 </div>) or insert an expression with a string literal (e.g. <span> 2 {">"} 1 </div>).

- Stricter Checks on Intersections and Optional Properties 
interface A {
    a: number; // notice this is 'number'
}

interface B {
    b: string;
}

interface C {
    a?: boolean; // notice this is 'boolean'
    b: string;
}

declare let x: A & B;
declare let y: C;

y = x;

- intersections reduced by discriminate properties 
declare function smushObjects<T, U>(x: T, y: U): T & U;

interface Circle {
    kind: "circle";
    radius: number;
}

interface Square {
    kind: "square";
    sideLength: number;
}

declare let x: Circle;
declare let y: Square;

let z = smushObjects(x, y);
console.log(z.kind);

- getters and setters are no longer enumerable 

function foo<T extends any>(arg: T) {
    arg.spfjgerijghoied; // no error! in the previous version 
}

- More libdom.d.ts refinements #















Python 开发技术详解=周伟,宗杰;Note=eshang

:Python author, Guido van Rossum, design at 1989, employee of CWI, abc language

:All Python 2.5 keywords
and, as , assert, break, class, continue, def, del, elif, else, except, exec, for, finally, from, global, if, import, in, is, lambda, not, or, pass, print, raise, return, try, while, with, yield

:wide used library
PIL, 图像处理
NumPy, 数学计算
WxPython, GUI
Django, web开发

:Python Main page
www.python.org
;
>other ide
ActivePython, www.activestate.com
PythonWin
Eclipse IDE, PyDev, need to instal the python first

:不同平台下的Python
Jython, java编写，可以运行在有JRE的环境中
IronPython, .net平台实现，可以调用所有.NET库

：优化python编码
python -o *.py

:语法
>导入模块
import
from... import...
;
>注释规则
在文件的开头
1行，简要说明
2行，版权
3行，空行
4-6行，程序许可信息
8-14行，版本与实现功能
16行开始，代码实现
;
>多语言编辑
首行加入，#-*-coding:UTF-8-*-
跨平台需求，#! /user/bin/python
;
>变量作用域
局部，全局
函数内引用全局变量 global varName，如果不使用则不能得到正确结果
；
>常量, 自定义常量
Reference, <python cookbook>
class _const:
    class ConstError(TypeError):pass
    def __setattr__(sel, name, value):
        if self.__dict__.has_key(name):
            raise self.ConstError, "Can't rebind const(%s)" % name
        self.__dict__[name]=value
import sys
sys.modules[__name__]=_const()
;
使用
import const
const.magic = 23
const.magic = 33
;
>数据类型
数字，字符串，元组，列表和字典
;
type类是python__buildin__模块的一个类，返回变量的类型或者创建一个新类型
;
测试变量类型，isinstance(varName, typeName)

:Python的控制语句
if(condition):
...
elif(condition):
...
else:
...
;
实现类似于switch的功能，充分利用字典的功能
from __future__ import division
x = 1
y = 2
operator = "/"
result =
{
    "+": x + y,
    "-": x - y,
    "*": x * y,
    "/": x / y
}
print result.get(operator)
；
while(condition): ...
;
for var in searial:
;
break, continue
;
使用xrange替换range函数

:内置数据结构
>tuple, 元组, (), 不能删除任何元素
>list, 列表
>dict, 字典,dictionary
;
>全局字典, sys.modules, python启动后就加载在内存中的，每次导入模块都会加入到该字典中
>序列，具有索引与切片功能的，包括，元组，列表，字符串

:模块与函数
>python程序包，包含包，模块，函数，必须含有至少一个 "__init__.py"文件是包的注册文件，用于标识当前文件夹是一个包，其内容可以为空
>模块
一个python文件，就称为一个模块，模块中可以定义方法与类
；
使用模块，直接导入或导入部分
import moduleName
使用模块的文件必须与模块在同一目录或者在sys.path可以找到
；
导入方法有两种、
import moduleName, 使用时必须加模块名
from moduleName import function/class, 使用时无需加模块名
；
防止模块多次导入，定义一个模块导入计数的全局变量
moduleCount = 1
def GetImportCount():
    global moduleCount
    moduleCount = moduleCount + 1
    return moduleCount
;
导入模块使用条件语句
if moduleName.moduleCount > 1:
    moduleName.count = 1
else:
    import myModule
print "count = ", moduleName. moduleCount
;
>模块的属性
__name__, 模块运行名字，"__main_"代表是主程序运行
__doc__, 文档
call_ moduleName
;
>模块内置函数
apply(func [, args[, kwargs]]) -> return func
    -func, 是一个函数名
    -args, 是一个不包含自定义函数参数的列表或元组
    -kwargs, 是一个字典，字典中key为参数名，value为参数值
    返回即为func返回值
;
filter(func or None, sequence) -> return sequence
    -func(item), 返回True or False
可以对某一个序列做过滤处理，对定义函数的参数返回结果是"真", 来过滤并一次性返回结果
;
reduce(func, sequence [, initial]) -> return value
    -func, 是自定义的函数，在函数中实现对参数的连续操作
    -sequence, 待处理序列
    -initial, 可以省略，在sequence之前传入func中
对序列的连续操作可以通过循环来处理, 函数的返回值与序列作为下一次函数调用的参数
例如：
def sum(x, y):
    return x+y
print reduce(sum, range(0, 10))
print reduce(sum, range(0, 10), 10)
print reduce(sum, range(0, 0), 10)
;
map(func, sequence0 [, sequence1, ...]) -> return list
    -func(sequence0Item, sequence1Item, ...)
对多个序列每个元素都执行相同的操作，并组成列表返回, 如果参数序列长度不一致，那么短的补充none作为参数
；
常用的模块内函数列表
abs(x)
apply(func [, args [, kwargs]])
bool([x])
cmp(x, y)
delattr(obj, name)
eval(s [, globals [,locals]])
float(x)
hash(object)
help([object])
id(x)
input([prompt])
int(x)
len(object)
range([start,] end [, step])
raw_input([prompt]), 接收控制台输入，返回字符串类型
reduce(func, sequence [, initial])
round(x, n=0)
set([iterable])，返回一个集合
sorted(iterable[,comp [,key [, reverse]]])
sumn(iterable [, start=0])
type(object)
xrange(start[, end [, step]])
zip(seq1 [, seq2, ...]), 把n个序列作为列表的元素返回
；
>自定义包
每个包至少包含一个__init__.py文件，进行对包内模块的初始化
if __name__ == '__main__':
    print 'init as main program'
else:
    print 'init packages and inside modules'
可以用__all__来记录当前包的所有模块
；
;
>函数
def functionName(parameters):
    ...
    return ...
;
lambda, 匿名函数
lambda var1, var2, ...: expression
;
Generator, 生成器, 一次产生一个数据项
def functionName(params)
    ...
    yield expression

:字符串与正则表达式
>格式化输出
%c, ascii
%s, string
%d, integer
%u, unsigned integer
%o, octonary number
%x, hex
%X, uppercase hex
%f, float
%e, scientist
%E, equal to %e
%g, base on the value to display with %e or %f
%G, equal to %g
%p, use hex to display the variable location
;
字符串转义
\`
\"
\a, beep
\b, 退格
\n, 换行
\t
\v, 纵向制表
\r, 回车
\f, 换页
\o, 八进制代表的字符
\x, 十六进制代表的字符
\000, 终止符， \000后的字符全部忽略
；
格式化日期
strftime(format[, tuple]) ->string，日期到字符串
strptime(string, format) ->struct_time, 字符串到日期
%a, 英文日期简写
%A, 英文日期的完整拼写
%B, 英文月份的完整拼写
...
;
正则表达式, sys.re

:文件处理
文件的打开
file(name[, mode [, buffering])->fileObject
open()
;
常用处理的模块, os, shutil, difflib 实现对序列与文件的比较
>difflib
difflib.SequenceMatcher( lambda x:x == "", src, dst)
;
>配置文件的访问
配置文件示例
[ODBC 32 bit Data Source]
MS Access Database=Microsoft Access Driver(*.mdb)(32)
[MS Access Database]
Driver32=C:\windows\syste32\odbcjt32.dll
;
读取文件的内容，使用模块, ConfigParser
import ConfigParser
config = ConfigParser.ConfigParser()
config.read("ODBC.ini")
config.sections()  #返回所有配置块的标题
option = config.options(sectionName) #返回指定section的配置项的标题
value = config.items(optionName) #根据配置项的标题返回对应的值，即等号右面的值
value = config.items(sectionName, optionName) #根据块与项返回
；
添加配置文件内容
config.add_section(sectionName)
config.set(sectionName, optionName, value)
fIni = open(iniFilePath, 'w')
config.write(f)
f.close()
>文件目录操作模块，os
os.stat() 查看文件属性
>python的流对象
>stdin, stdout, stderr, 均可以重定向
import sys
sys.stdin = open("hello.txt", 'r')
for line in sys.stdin.readlines():
    print(line)
常用stderr  来实现日志的功能

:面向对象编程
class className(parentClassName)
    classAttribute = 0
    def classFunction(self):
        pass
    def __init__(self): #类初始化
        pass
;
函数包装器
@staticFunctionName
def functionName(params):
    pass
等于 staticFunctionName(functionName)
>垃圾回收机制，python使用的是计数的方式，当某个对象不被其他对象引用时回收
>类内置方法
__init__, __del__, __new__, __str___, __getitem__, __len__, __cmp__, __getattr__, __setattr__, __delattr__, __getattribute__, __gt__(selt, other)判断self是否大于other, __lt__, __ge__, __le__, __eq__, __call__(self, *args)把实例当做函数调用
>python类定义的时候只是方法绑定了类作用域，类内定义的属性属于类的静态属性，只能使用类名引用。要定义属于某个对象的属性只能从实例化的对象中定义！！！！
>继承, 也支持多重继承
实现抽象类
def abstract():
    raise NotImplementdError("abstract")
class Fruit:
    def __init__(self)
        if self.__class__ is Fruit:
            abstract()
        print "Fruit init"
    #也许abstract()可以定义在类的内部
    #调用时需要使用 Fruit.abstract()来调用
    #def abstract():
    #    raise NotImplementdError("abstract")
class Apple(Fruit):
    def __init__(self):
        Fruit.__init__(self):
        print "Apple"
if __name__ == "__main__":
    apple = Apple()
>实现多太，对不同的参数类型执行不同的操作，使用测试方法 isinstance(obj0, class)
>不要用继承来为子类添加功能！尽量不要使用多重继承，可以使用工厂方法来实现对不同实例的生成
class Factory:
    def createFruit(self, fruit):
        if fruit == "apple":
            return Apple()
        elif fruit == "banana":
            return Banana()
class Fruit:
    def __str__(self):
        return "fruit"
class Apple(Fruit):
    pass
class Banana(Fruit):
    pass
工厂方法为实例化提供统一的修改点
>合理的设计结构
点->散->点->散
总是有统一的修改地点来辅助代码的维护与检测

:异常处理与调试
所有的异常继承自BaseException, 属于new-style class
>BaseException包含一下三个子类
Exception, KeyboardInterrupt, SystemExit
>Exception类中最常用的异常包括
StandardError， StopIteration， GeneratorExit, Warning
>StandardError
ZeroDivisionError, AssertionError, AttributeError, IOError, OSError, ImportError, IndexError, KeyError, MemoryError, NameError, NotImplementedError, SyntaxError, IndentationError, IndentationError, TabError, TypeError, ValueError
>捕获
try:
    pass
except exceptionType:
    pass
except:
    pass
finally:
    pass
>assert 语句， 用于检测某个表达式是否为真

:Python数据库编程
连接方式，ODBC,DAO,ADO,Oracle, MySQL, SQLite
;
>ODBC, Open Database Connectivity, 是微软的一组规范，需要建立数据源，在控制面板
import dobc, dbi
db = odbc.odbc('linkToDataSource')
curser = db.cursor()
curser.execute('select ...')
result = curser.fetchall()
>DAO, 对象访问数据库
import win32com.client
engine = win32com.client.Dispatch("DAO.DBEngine.36")
db = engine.OpenDatabase("addresses.mdb")
rs = db.OpenRecordset("tableName")
rs = db.OpenRecordset("select * from tableName")
while not rs.EOF:
    pass
    rs.MoveNext()
>ADO, ActiveX Data Objects(ADO), 速度优于DAO，支持Oracle, Sql server, Access, MySQL
连接字符串
Provider=OraOLEDB.Oracle;PLSQLRSet=1;Password=tiger;UserID=scott
;
import win32com.client
conn = win32com.client.Dispatch('ADODB.Connection')
dataSource = 'Provider=OraOLEDB.Oracle;PLSQLRSet=1;Password=tiger;UserID=scott'
rs = win32com.client.Dispatch('ADODB.recordset')
rs.Open(sql, conn)
rs.MoveFirst
rs.EOF
>Python连接数据库的专用模块
cx_Oracle, MySQLdb
;
连接Oracle
import cx_Oracle
conn = cx_Oracle.connect("scott", "tiger", "ORCL")
cursor = conn.cursor()
cursor.execute(sql)
cursor.fetchall()
cursor.close()
conn.close()
;
连接MySQL
import MySQLdb
MySQLdb.connect(host='localhost', user='root', passwd='xxx')
cursor = conn.cursor()
cursor.executemany(sql, values)
data = cursor.fetchall()
cursor.close()
conn.close()
>数据持久化, python提供了几种方法来保存数据到指定文件
dbhash, anydbm, shelve
>dbhash读写模块，unix使用dbbm, anydbm适用于任何系统
import dbhash
db = dbhash.open('temp', 'c')
db['Tom'] = 'Beijing road'
for k, v in db.iteritems():
    pass
db.has_key('Tom')
print db
db.close()
;
是一种DBM文件格式数据库，不具备管理能力，比普通文件稳定查询更快
DBM只支持字符串类型的数据存储
>shelve模块读写数据
import shelve
db = shelve.open('database')
db['key'] = ['Tom', 'Beijing']
db['key1'] = ['Jerry', 'shanghai']
db.has_key()
db.close()
>sqlite数据库
http://www.sqlite.org
;
第三方数据库查看工具
sqliteManager
http://www.sqlabs.net/sqlitemanger.php

:Python GUI程序设计
GUI, Graphical user interface
>常见的python，GUI库
Tkinter, 小巧的GUI库，卡法速度快，应用于小型应用程序
import Tkinter
root = Tk()
word = Tkinter.Label(root, text = "hello world!")
word.pack()
root.mainloop()
>PyGTK, GIMP ToolKit, C编写的跨平台的图形界面开发库
http://www.pygtk.org





















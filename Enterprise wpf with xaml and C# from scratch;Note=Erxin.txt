Enterprise wpf with xaml and C# from scratch;Note=Erxin

# xaml introduction
- grid 
	* row definition, the row definition default equal to set property height="*"
	<RowDefinition Height="*"/>
	<RowDefinition/>
	<RowDefinition Height="2*"/>
	then the grid will be divide to four
	* when a row or column is set to Auto this means the size will decide by his child and make it show all it's content. The the remain size will devide with the number of the * rows and columns
- stack panel
- wrap panel, will wrap its contents horizontal or vertical
- dock panel, could let its contents dock to top/bottom/left/right 
- canvas panel, could use to absolute place its contents

# data binding
- one way
    + set the datacontext property from the xaml's init function
    + bind the UI property 
    UIProperty="{Bind BindedContextProperty}"
- two way
    + add INotifyPropertyChanged property
    + add property changed event handler
    public event PropertyChangedEventHandler PropertyChanged;
    private void OnPorpertyChanged([CallerMemberName] string caller="")
    {
        if(PropertyChanged != null)
        {
            PropertyChanged(this, new PropertyChangedEventArgs(caller));
        }
    }
    + change the binding mode to two way
    property="{Binding Name, Mode=TwoWay}"
- INPC, inotification interface
- element binding, binding the UIElement property to the other UIElement property by
    + syntax
    Property="{Binding OtherElementPropertyName, ElementName=OtherElementName}"
    + ex. binding textblock to display the current slider's value(position)
    <Slider Name="sd" Minimum="0" Maximum="100" Width="300"/>
    <TextBlock Margin="5" Text="{Binding Value, ElementName=sd}"/>
- data context
- list binding
    + using the System.Collections.ObjectModel
    + use the ObservableCollection<> Container to contain the list or any other kinds of set elements before set the binding
    + set the data context
    dataContext = SomeCollection/Method/Expression to get the collections
- data template
    + use the data template to set the UI control how to display the observable object
    + ex. combo box
    <ComboBox Name="cmb" ItemSource="{Binding}" FontSize="30">
        <ComboBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Name:"/>
                    <TextBlock Text="{Binding Name}">
                    <TextBlock Text="Title:">
                    <TextBlock Text="{Binding Title}">
                </StackPanel>
            <DataTemplate>
        </ComboBox.ItemTemplate>
    </ComboBox>
- data conversion
    + data converter, should implement the IValueConverter interface
    + ex
    class DataConverter:IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
        }
    }
    add convert into the window resource
    <Window.Resource>
        <local:TheConvertClassName x:Key="ReferenceNameForXaml"/>
    </Window.Resource>
    add the convert to the property need to be converted
    <TextBlock Text="{Binding}" Converter="{StaticResource DataConverter}">/
- data validation

# asynchronous programming
- asynchronous programming models
window runtime:iAsyncOpertation<T>, 
.net framework:Task<T>, 
javascript:promise

# Advanced Controls
- tab control, only one item could be the child element of the tab page
- data grid
    + set the itemSource property to automatic generate the columns by the object's property
    datagridObj.ItemSource=Expression
    + to stop the auto generate by set the property to false
    + manually add the columns for data grid
    <DataGrid AlternatingRowBackground="LightBlue" AlternationCount="2" AutoGenerateColumns="False">
        <DataGrid.Columns>
            <DataGridTextColumns Header="Name" Binding="{Binding Name}"/>
            <DataGridTextColumns Header="Title" Binding="{Binding Title}"/>
            <DataGridCheckboxColumn .../>
            <DataGridComboboxColumn Header="Party" SelectedItemBinding="{Binding Affiliation}" ItemSource="{Binding Source={StaticResource myEnum}}"/>
        </DataGrid.Columns>
    </DataGrid>
    add object data provider to add the elements of combobox for the data grid
    add the assembly reference for the enum type
    <...
     xmlns:core="clr-namespace:System;assembly=mscorlib"
     xmlns:local="clr-namespace:DataGrid">
    <Window.Resources>
        <ObjectDataProvider x:Key="myEnum" MethodName="GetValues" ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="local:Party"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </Window.Resources>
- tree view
    <TreeView>
        <TreeViewItem/>
    </TreeView>
- status bar
    <StatusBar>
        <StatusBarItem>
        </StatusBarItem>
    </StatusBar>
- menu 
    + page menu
    <Menu>
        <MenuItem/>
    </Menu>
    + context menu
    <UIControl.ContextMenu>
        <MenuItem/>
    </UIControl.ContextMenu>
    
# Animation
- shapes, use canvas to contain the shapes
    + rectangle
    <Canvas>
        <Rectangle Width="50" Height="50" Fill="Blue" Canvas.Top="30" Canvas.Left="20"/>
        <Ellipse ../>
        <Line/>
        <Polyline Points="..." Stroke="Blue" StrokeSickness="5"/>
        <Polygon .../>
    </Canvas>
- Brushes
- Animation 
    + by code
    DoubleAnimation an = new DoubleAnimation();
    an.From=0;
    an.To=450;
    an.Duration=new Duration(Timespan.Parse("0:0:5"));
    an.AutoReverse=true;
    an.RepeatBehavior = new RepeatBehavior(Time.Parse("0:0:20"));
    UIElement.BeginEnimation(SomePropertyName, an);
    + by xaml
    <Button Content="OK" Width="30" Height="20">
        <Button.Triggers>
            <EventTrigger RoutedEvent="Button.Click">
                <EventTrigger.Actions>
                    <BeginStoryboard TargetProperty="Width">
                        <Storyboard TargetProperty="Width">
                            <DoubleAnimation From="50" To="150" Duration="0:0:4" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Button.Triggers>
    </Button>
    + blend
    blend have two workspace for design and animation

# style and template
- styles
<window.Resources>
    <Style x:Key="PrompStyle" TargetType="TextBlock" >
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Margin" Value="5"/>
    </Style>
</window.Resources>
<TextBlock Text="Name" Style="{StaticResource PrompStyle}"/>
if the style x:key is not assign this means the style apply for all the element by default
- template, every control have a default template for wpf UI element









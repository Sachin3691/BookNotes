AngularJS=Shyam Seshadri;Note=Erxin

# introduction
- install node
- install ionic 
$ npm install -g ionic 

- install cordova 
$ npm install -g cordova 

- install java 
- install android studio 
- install pacakge or android 
- setting up your physical android device for development 
enable development options on your specific android device 

enable usb debugging 

from Setting|About phone and click build number and lick Developer options 

accept the RSA key on your phone or tablet before anything can flow between the deice via Android Debug Bridge (ADB). 

- setting up environment variable on window 
path to the android sdk 
;c:\development\adt-bundle\sdk\platform-tools;c:\development\adt-bundle\sdk\tools;

- setting up development environment variables for ios 

install ios sdk 

- mongoDb 
    + install 
    + start db server by 
    $ c:/mongodb/bin/mongodb.exe 
    
    
# configure persistent with mongodb 
- every document have unique _id, a single 
- mongodb is a database manager which is not database 
- connect to mongodb 
$ mongo

- create a database 
$ use database-name 

$ switch to db database-name  

- creating collection 
$ db.createCollection('document-name')
response { "ok" : 1 }

db is js object represents the currently selected database 

    + add item to document 
$ db.Products.insert(JSON)

response WriteResult({ "nInserted" : 1 })

    + find 
$ db.Product.find()

if not parameter then return all the content of the document 

- quering database 
    + select by id 
    
$ db.Product.find({
_id:ObjectId("...});


also support findOne method

- connecting mongodb and node.js 

    + setting up a basic project 
    $ npm init 


# Creating an API 
- REST, it's all hypermedia 

verbs, GET, POST, PUT and DELETE map to CRUD, create read update delete 
C->POST
R->GET 
U->PUT 
D->DELETE 

    + rest API base URL structure 
http://<domain>/[api-name]/[api-version]/<resource>

- GET

    + get all 
    http://.../object-list 
    
    + get by id 
    http://.../object-list/?id=xxx
    http://.../object-list/id 
    
- POST, supply a JSON object and url to update or create a item 

- DELETE is similar to GET but the protocol is DELETE in the http header 

- building a restful api with node.js 

    + setting up the restful api 
    $ npm init 
    
    + install mongodb driver for node.js 
    $ npm install mongodb 
    
    + require http module create a http service 
    var server = http.createServer(function(req, res){
        res.writeHead(200);
        res.end("ok");
    });
    
    server.listen(8080);
    
- implement a router, is a object switch the responses base on the request url 

request.URL 
request.method 
    
    
# Securing your backend 
- express.js, is a framework that can be used to build robust complete web application 

- loopback.js this an express.js derivative for creation api 

- understand outcomes of token based authentication, user need to submit 

- create database 


# Real-Time data and websocket 
- protocols such as internet relay chat (IRC), instance message computer program(ICQ)

- websocket, it is a two way connection between client and server 

- using websocket in node.js 

    + setup 
    $ npm init 

    + install socket.io 
    $ npm install socket.io 
    
- use bootstrap to create the UI 


# Introducing Ionic 
- syntactically awesome stylesheets(sass) and angular 

- set up ionic web account 
https://apps.ionic.io/

- create your first ionic application 
$ inoic start app-name 

switch to the directory 

login with your ionic account 
$ ionic login 

upload you app 
$ ionic upload 

use your device to download the your uploaded app to your device 

sharing your application with collaborators 

$ ionic share EMAIL

recommendate to view the app from mobile device 


# Building user interfaces 
- structure of an ionic project 
/
    /project 
        /platforms, for android, ios, ...
        /hooks, for cordova system 
        /plugins 
        /resources 
        /scss, syntactically awesome
        /www
            /css 
            /img 
            /js 
            /lib 
            /templates
            .bowerrc
            .gitginore 
            bower.json 
            config.xml 
            gulpfile.js 
            ionic.project 
            npm-debug.log 
            package.json 


# Introducing angularJS 
- the structure of an angular app 

- modules 
angular.module('module-name', []);

- mvc pattern 
view 
controller 
model 

- adding a new tab 

- type in the follow command 
ionic serve --lab 


# making our app interactive 
- ionic start phonebook-app blank 

make expressions bind-once add two colons before them 

- use cordova to access device native api 

$ bower isntall ngCordova 

- android 
$ ionic platform add android 

emlator 
$ ionic build android 

$ ionic run 


# Accessing native phone features 
- using cordova 


# Working with APIs 
- setting up parse 
parse.com 


# Chapter 11 working with security 
- basic component of client side security 
authentication tokens 

secure local storage

secure communication 

- building a secure app 


# Working with real-time data 
- websocket 
socket.io 

$ npm install socket.io 

- use ionic view and angular state, template to build the application 

var websocket = require('socket.io')(server)

- websocket support speak with different kinds of programming language by 
websocket.of('/java').on('event', function(socket){
});

- code example 
angular.module('ionic-chat-app', [
])
.run(function($ionicPlatform){
    $ionicPlatform.ready(function(){
        ...
    });
})
.config(function($stateProvider, $urlRouterProvider){
    $stateProvider
    .state('app', {
        url:'/app',
        abstract:true,
        templateUrl:"template/tabs.html"
    });

});
rulRouterProvider.otherwise('/app/node');

    + template/app-chat
<ion-view view-title="chat">
    <ion-content>
        <div class="list">
        </div>
    </ion-content>
    <div class=...>
    </div>
</ion-view>

    + add css css/style.css 
#message-input{
    width:100%;
}

.item-avatar{
    padding-left:16px;  
}

    + add app controller, in the app.controllers.js file 
angular.module('ionic-chat-app-controllers', []).
controller('ChatController', function($scope, ChatService, chatRoom){
    var connection = ChatService.connect(chatRoom);

});

...

- building the server, use node js and http module 

- thumbnail image generator supported by http://loremflickr.com 






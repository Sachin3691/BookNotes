Production System training and documents; Note = eshang

:Production system authors
Richard Karner
Andrew Teare
Parineeta Nayyar
Maziar Jalili

:Scope
Standard charts, ctstd
deviation charts, ctdv
special charts, ctsp

:tools
The Navigation Tool is the starting point for all documentation
W:\Navigation Tool
;
:Reference document
ControlsEngineeringNavigationTool-Model.vsd
ControlsEngineeringNavigationTool.doc
PC Production Utility User Guide.doc
Checklist User and Design Guide.doc
Charts User and Design Guide.doc, descript how to create and maintain standard charts
Machine Creation Procedure.doc, descript how to create machine and specials for that machine
CodeWright User Guide
Production System trainiing.ppt; Author=ed
RetrofitInstallationProcedureNew.doc

:Create machine process
Machine creation
Machine compile
Machine generate
Machine MTU

:Create machine
>Use tool Pc-base production utility
Create a Name machine->Create               
                       Choose Product line
Machine detail->Edit checklist             , each release has one file found in the CtStd module
                Checklist.xls ctstd module , each spreadsheet reletes to one tab on the checklist
Checklist form, base one the excel file of checklist
done, finish create a machine
;
;
>Checklist data flow
paper checklist +                                                                               +  => checklist.c and save in folder 
CtChecklist.xls, all options on a specific version of product line(CtStd module)                +     machine\sys
checklist.exe(template of all options on a specific version of product line, checklist module)  +
    base on checklst.cfg
    Electronic checklist, required for a specific machine

:Compiling a machine
>Use code write to edit the ctstd.c to choose module base on the checklist
Using "choose" function to choose module->derive additional keywords from checklist keywords->
Deviation or special chart-> define deviation or special is valid
;
;
>Complie machine data flow
checklst.c (in machine\sys)+ => ctdv1.c, ctsp1.c               => system.oit, list of modules requires for this machine 
CtStd.c    (ctstd module)  +    (ctdv1 modules, ctsp1 moduless)   keywords.bas, keywords and derived keywords for vb
Ctlib.c    (ctlib module)  +                                      (in machine\sys)
Ctlib.h
>Test note
The machine test note will be generated while compling the machine

:Generate machine
>Generate machine flow
Generate configuration->Robot configuration->Datalog files generation->Generate configuration->save configuration->
selected modules in the left list of the form
PrPreGenerate.xxx      ->ROBOTTPS.xxx      ->DTDatalog.xxx           ->PreGenerateConfig.xxx 
--------------------------------------------------------------------------------------------------------------------
Generate Plc Export file-> Geneerate VarConfig Export File -> Generate Tps File -> Generate Plc .pro file ->
PrGeneratePLCExp.xxx       PrGenerateVarConfig.xxx            PrGenerateTPS.xxx    SN<sn>.pro(d:\pc platform\plc\<sn>\) 
--------------------------------------------------------------------------------------------------------------------
Update Configuration
parameterizedObjectList.hct->TcObject Server                                ->SN<sn>.tps, tcObject server and navigation server->
                             Navigation Server                              d:\pc platform\plc\<sn>
                             Update Configration Data for Sidebar Objects   userprofile.tps
--------------------------------------------------------------------------------------------------------------------
MTU Workstation to network
PrMTUWorkStationToNetwork.xxx
locally generated machine files -> machine files
(d:\pc platform\plc\<sn>)          machine plc folder
;
generate configuration - parameter charts
system.oid, list of modules -> parameter charts, *.cpc, *.bas, *.cls (cplib module and cp modules)
                               keywords.bas, (machine\temp)
                               PMLprocessor<sn>.vbp->PMLProcessor<sn>.dll
                               PMLProcessorDEBUG<sn>.vbp->Debugging Parameter Charts
;
generate configuration - husky objects
parameterizedModuleList.hct-> *.hct, all huskyk configuration text files -> parameterizedObjectList.hct, all configration data for TcObject
(machine\temp)                  (PLC modules)                               (machine\CFG)
data stored in plc module and changed directly through the hct file
;
generate configration - drive parameters
;
generate plc export file
system.oid  ->*.plc        => plc.exp, plc code in twinCAT .exp file format
machine\sys -> plc modules
;
generate varConfig Export file
plc project = varConfig.exp
memory      -> d:\pc paltform\plc\<sn>\temp\
;
Datalog generation occurs in two parts
create a vb project that includes all the datalog code files in VBDataLog.NNN and *.hdl
build and execute the dll and the normal dry cycle setup files
;
;
>PLC modules specification
All Module Names Starts with Plc
Common prefixes defined so alphabetical sorting of modules in Codewright groups modules makes logical sense
PlcDev for Plc Devices
PlcImm for Imm modules
PlcRob for Robot modules
PlcBmm for BMM modules
Files containing Plc Code are given a .plc extension (format is same as .exp file)
May include up to 4 .plc files in one module
Plc<name>.plc - Main function block (contains at least one variable or structure declaration that will be included in the TcObject server)
Plc<name>_FB.plc - Associated function blocks
Plc<name>_DT.plc - Associated data type defintions
Plc<name>_GBL.plc - Associated global variables
May include one .hct file named “Plc<name>.hct” to define default values for template data.  Modules that include a Plc<name>.plc file will include a .hct file.
*.hct, *.log, *.man, *.plc, *.scc
;
;
>markings in plc project used to generate TcObject server
Special Comment	Description
(*HK$InstanceRoot*)	This marks an object as a root node in the instance tree in the TcObject server.
(*HK$TemplateLink*)	This marks the object as a child object of the current function block (template).
(*HK$Var,VarList=PlcVar*)	The object should be created under the PlcVar folder of the current function block (template)
(*HK$Var,VarList=HmiVar*)	The object should be created under the HmiVar folder of the current function block (template)
(*HK$EventList*)	The object should be created as an event object under the current function block (template)
(*HK$DatalogList*)	The object should be created as a  datalog object under the current function block (template)

:Test Notes Generation
>process flow
system.oit, *.cpc -> *.vbTestNote, *.bas, *.cls + keywords.bas => testNote.html
include two parts
crate a vb project includes all tester notes code file
build and execute the dll to generate the testNotes file
search all the *.err files in the machine directory

:Generate Local Plc Modules
sn.pro                   -> plcExport.exp               -> plc project => *.plc, plc code split back into modular structure
                           memory
d:\pc platformm\plc\<sn>  d:\pc platform\plc\<sn>\temp\

:Comparing local modules to library
Use codewright "directory difference" feature to compare directly locally generated modules with modules in the module library

:View System files
Machine history of changes
update manually via view system files
update automatically via checklist
system.oit, module listing
system.log, all production activity for this machine
compile errors, compile.err, listing of compiler output
module mapping, shows the changes to the modules and which chart is making the changes
config.log, listing of generate configuration
update.log, listing from update configuration process
note to tester, can be sent to tester

:Files from module
each machine has custom configuration files wich must be copies to a machine directory
>Module files to machine folder
module library -> copy to machine plc folder
wsm.xxx
robot.xxx

:MTU, Machine transfer utility
network to workstation, N2W
workstation to network, W2N
network to machine, N2M
machine to network, M2N

:System layout
>Machine folder, w:\mc
    -each machine has a subfolder named by serial number
    -test machines name starts with "_"
>Module folder, w:\pcbase\modulib
    -each module has a numerical extension shows the module number
    -modules extensions
        *001 to 499 made in Bolton
        *500 to 699 made in Luxembourg
        *700 to 899 made in Shanghai
        *900 to 999 made for testing
>Utilites folder, w:\j:\winNT\Pcproduction

:Modules chart
based system
a module is a folder crated using PS
modify the modules onlyl through PS
each piece of machine software or code to configure the machine software is part of a module
the rules to choose necessary modules are written in standard chart named CTSTD
each software version has its own standard chart
the rules in standard chart to select a particular module can be overridden using a special chart named CTSPn or Deviation Chart named CTDVn, n is from 1 to 9
version control, PI file version phase-in file
PI viewer, is used to manipulate these text files
module validation
    a module is considered released if is used by a machine or is part of a version frozen for validation
    once a module is released it cannot be modified uless the parameters inside are not validated
    a part of the software validation process is to update and release a non-validated module
    if a released module needs to be changed, copy and create a new one
    a special or a deviation chart is created to override the standard chart rules. 
    
:PC Production applications used steps
Start the utility from PCProduction Folder
Search for a machine, version, etc.
Module Interface form and searching for a module
Create a New Machine form 
Machine Details form
Search for a machine module 
Open Machine Folder
Edit Checklist. Selecting Create button on the checklist creates the machine folder
Compile machine. The PC Production Server generates SYSTEM.OIT and KEYWORDS.BAS and creates machine SYS and TEMP folder 
View System Files 
Add a note to Rev.log 
Change a machine location
Search the machine log
MTU. Meaning of Network, Machine and Workstation
See a MTU file
MTU options: Full Installation on Workstation, Archive machine, Ship machine, etc.
Generate Configuration. This step generates ParameterizedObjectList.hct and necessary UDL files  and creates machine CFG folder. 
See Generate Configuration log
Update Configuration
;
specials viewer
Search for a special name and see modules mapping and versions

:Create a machine
Fill-in checklist using a printed checklist
Choose Specials and Deviations 
Compile the machine
 View system files. Check for errors and warnings. 
Specific examples of errors and warnings 
    C is case sensitive
    Missing semicolons
    Variable declaration using extern
    Open and close braces
    In case of errors go to the error line using VC++ editor
Generate machine. Check for errors and warnings.
MTU (PLC Files From Modules, Network to Workstation, Full Installation on Workstation, Network To Machine, Machine To Network)
Update configuration.
Add an option to an existing machine and preserve the existing TPS file.
Use HkObjConfigurator utility to compare two configuration files

:Standard Chart
CTSTD.C file structure
implements module chart mappings
derived keywords declarations sections
derived_keywords[] structure section
choose_moduleName functions
module[] structure section
version name declaration
Derived_keywords function section
Check_keywords function section
Create_system_oit function section
Create_keyword_bas function section
Choose_modulename functions section
Module_Number variable can have the following values:
    a valid module number
    MODULE_NON_EXISTENT
    MODULE_NOT_NEED
CTCHECKLST.XLS, the file information will be displayed in the CHECKLIST window
Adding options to Standard Chart 
    Document PI file for Standard Chart changes
    Adding an option in the CHECKLIST
    Adding a standard option
    Adding a derived keyword.
    Adding a brand new module
    Updating an existing module 

:Special and Deviation Charts
Searching for specials
Validate a special
Creating a new special from the template
Changing the value of a keyword
Processing order :
    Keywords 
    Modules
Spcl modules
    implement PLC and TPS changes
    include necessary  PLC and/or TPS export files (EXP and TPE) and HCT files
    very important: include instruction file to manually apply the special, if necessary
    Naming conventions: SpclXXXX.NNN 
        XXXX from 0001 to 4999 if made in Bolton 
        XXXX from 5000 to 6999 if made in Luxembourg
        XXXX from 7000 to 8999 if made in Luxembourg
        NNN from 001 to 499 if modified in Bolton
        NNN from 500 to 699 if modified in Luxembourg
        NNN from 700 to 899 if modified in Shangha
HmiSpcl modules
    implement HMI specials (OCX)
    Naming conventions: HmiSpclX.NNN
        X from 1 to 9 – HKSpecials major version in VSS (the OCX is binary compatible with frmSpecialX)
        cannot have multiple HmiSpcl with same HKSpecials version on the same machine. If the case, then copy the code to a different HKSpecials version and create corresponding HmiSpcl module
    Mapping navigation modules
    Mapping modules in case of more specials changing same module

:File name extensions
HCT – Husky Configuration Text file – contains TcObjectServer parameters types, names and values
CPC – Class Parameter Chart – contains the VB code needed to parameterize a certain HCT file
VSS – Visual Source Safe file. All modules are in a VSS database 
BAT – Batch file. This file can be configured to add a message in the Error log
DPT – Drive Parameter Template file – contains a template of the drive parameters  file

:Module names details
CPName – Parameters Charts – contain a CPC file related to the Name
    Name can be Inj (Injection) ,Clmp (Clamp), Pump, etc.
TCName – TCObject Configuration modules – contain a HCT file related to the Name
    Name can be Inj (Injection) ,Clmp (Clamp), Pump, etc.
FKeyX – Navigation modules  –  X shows the screen number - from 1(Alarm Screen) to 9(SPC/SQC Screen) 
DPName – Drive parameters modules – contain a matrix with drive parameters
    Name can be Inj or Rob 
SBName – Side Bars modules

:Drive parameters
Modules involved in drive parameters generation
    UpDown – contains download procedure, UpDown.exe and Check Drive Parameters utility 
Injection screw modules
    DPInj – contains a matrix with the values of  the drive parameters for injection screw
    UdlTempl – contains the drive parameters template file for the injection screw
    CPInjDP – contains code to parameterize the injection screw drive parameters template file
Robot modules
    DPRob – contains a matrix with the values of  the drive parameters for robot
    UdlRob – contains the drive parameters template file for the robot
    CPRobDP – contains code to parameterize the robot drive parameters template file
The location of generated UDL files
    On the Machine folder : CFG subfolder
    On the Machine IPC : D:\Drive
Downloading procedure
    Double-click on the “Check Drive Parameters” shortcut on the machine screen and follow the procedure

:Parameters Charts
:Retrofits
Update checklist
Verify machine ahrdware, as oil collection system, bosch valves, etc
build the machine as if it was brand new machine
configure the new WSM file. be aware of the standard hardware changes
appliy the necessary specials and deviations, if necessary revalidate them for the new version
use MTU, createUninstallScript(retrofits)
use generate old data list option from machine details form
use MTU, create installationPkg to create an archive of the machine
burn machine retrofit cd
install the original machine software on a simulator
install retrofit on the machine

:Translations
Management of HMI phrases and alarm help
Send a spreadsheet file to request phrase and alarm help ids

:Frequently asked questions
Document everything? rev.log

:Codewright
The CodeWright editor is used to open, edit, and save module files which are located under W:\PCBase\Modulib directory.
>acknowledgements
Traian Miciu
Parineeta Nayyar	
>setup files
\\Boltonas2\shared$\License_Software\visualstudio\disc1
>definitions
VSS – Abbreviation for Visual Source Safe. VSS tool is used to store, safeguard and manage source code









Cloud Native for the Enterprise=Claudio Caldato;Note=Erxin

# Adopting DevOps and Cloud Native Culture
- familiar with open source projects, such as linux 
- evaluate the maturity of the technologies 
- determine the availablility of support and consulting 
- identify cloud providers 
- assess your people 
- identify the appropriate scope for the organization's capabilities 

2,200 contributors for Kubernetes; 1,800 for Docker Engine; 1,300 for Terraform; and 500 for Apache Kafka 

- 10 key attributes of cloud native applications 
    + pacakged as lightweight containers 
    + developed with best of breeed languages and frameworks 
    + designed as llosely coupled microservices 
    + centered around APIs for interaction and collaboration. Google’s open source remote procedure call (gRPC) or NATS. REST is used as the lowest common denominator to expose APIs over hypertext transfer protocol (HTTP).
    
    + architected with a clean separation of stateless and stateful services 
    + isolated from server and operating system dependencies 
    + deployed on self-service elastic clould infrastructure
    + managed through agile devops processes 
    + automated capabilities 
    + defined policy driven resource allocation 

- The CNCF Trail Map
    + containerization and ci/cd 
    
    check-in > build > create container image > push to registry > cd 
    
        + microservice
        
        ui <=> {microservice0, microservice1, ...}
        
        + Kubernetes website, Kubernetes is described as “a portable, extensible, open-source platform for managing containerized workloads and services
        
        Containers can be grouped together in “pods,” which are simple execution units that are managed as a single unit
        self-healing
        autoscaling 
        domain name system management 
        load balancing 
        roling updates or rllback 
        resource monitoring and logging 
        running existing applications 
        self-managed deployment 
        public cloud servcies 
        third-party curated solutions 
        
    + orchestration and observability 
    
    Infrastructure as Code (IaC) is the answer to this set of requirements, IaC technologies include Terraform, Ansible, Chef, and Puppet.
        
        intra-service runtime data 
        
        distributed tracing, monitor, optimize performance, analyze root causes, servcie dependencies 
        
    + service proxy and service mesh, Service mesh introduces an additional level of control over communication across services. It is based on a small agent that is deployed within the pods and that takes control of all incoming and outgoing traffic.
    
    Istio is one of the most-used service mesh technologies
    
    + distributed databases and storage 
    + service proxy and service mesh, Service discovery and proxy are the functionality needed to find other services in the network;
    + distributed database and storage 
    stateful services, mysql, postgres
    distribtued database, azure cosmos db, amazon aurora
    + messaging serverless and streaming 
    
    An evolution of this method of designing a distributed application is to make the invocation completely asynchronous by using messages instead of invoking REST APIs. 
    
    Serverless is becoming a mainstream technology in the cloud native world. There are open source solutions such as OpenFaaS and Fn Project that can reduce the impact of vendor lock-in.
    
    All cloud providers offer services designed to enable stream processing (such as Amazon Kinesis and Oracle Streaming), typically with an ingestion service that can handle a high volume of continuous data that can be processed as a set of messages or events. 
    
- hybrid scenarios 

    + on-premises infrastructure if, for example, it might not be possible to port a legacy application because of the technologies it uses
    
    + on-premises infrastructure needs to be modernized to adopt all of the cloud native technologies that are required to mimic the features available in the public cloud
    
    + The legacy applications can be “exposed” via a modern interface that will make them “look like” modern services. Kubernetes’s Service Catalog can help to address this type of scenario. addtional latency introduced by the fact that not all services are running on the same hosted environment 
    
- multicloud scenarios 
    



























    













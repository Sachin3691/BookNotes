Cloud Native for the Enterprise=Claudio Caldato;Note=Erxin

# Adopting DevOps and Cloud Native Culture
- familiar with open source projects, such as linux 
- evaluate the maturity of the technologies 
- determine the availablility of support and consulting 
- identify cloud providers 
- assess your people 
- identify the appropriate scope for the organization's capabilities 

2,200 contributors for Kubernetes; 1,800 for Docker Engine; 1,300 for Terraform; and 500 for Apache Kafka 

- 10 key attributes of cloud native applications 
    + pacakged as lightweight containers 
    + developed with best of breeed languages and frameworks 
    + designed as llosely coupled microservices 
    + centered around APIs for interaction and collaboration. Google’s open source remote procedure call (gRPC) or NATS. REST is used as the lowest common denominator to expose APIs over hypertext transfer protocol (HTTP).
    
    + architected with a clean separation of stateless and stateful services 
    + isolated from server and operating system dependencies 
    + deployed on self-service elastic clould infrastructure
    + managed through agile devops processes 
    + automated capabilities 
    + defined policy driven resource allocation 

- The CNCF Trail Map
    + containerization and ci/cd 
    
    check-in > build > create container image > push to registry > cd 
    
        + microservice
        
        ui <=> {microservice0, microservice1, ...}
        
        + Kubernetes website, Kubernetes is described as “a portable, extensible, open-source platform for managing containerized workloads and services
        
        Containers can be grouped together in “pods,” which are simple execution units that are managed as a single unit
        self-healing
        autoscaling 
        domain name system management 
        load balancing 
        roling updates or rllback 
        resource monitoring and logging 
        running existing applications 
        self-managed deployment 
        public cloud servcies 
        third-party curated solutions 
        
    + orchestration and observability 
    
    Infrastructure as Code (IaC) is the answer to this set of requirements, IaC technologies include Terraform, Ansible, Chef, and Puppet.
        
        intra-service runtime data 
        
        distributed tracing, monitor, optimize performance, analyze root causes, servcie dependencies 
        
    + service proxy and service mesh, Service mesh introduces an additional level of control over communication across services. It is based on a small agent that is deployed within the pods and that takes control of all incoming and outgoing traffic.
    
    Istio is one of the most-used service mesh technologies
    
    + distributed databases and storage 
    + service proxy and service mesh, Service discovery and proxy are the functionality needed to find other services in the network;
    + distributed database and storage 
    stateful services, mysql, postgres
    distribtued database, azure cosmos db, amazon aurora
    + messaging serverless and streaming 
    
    An evolution of this method of designing a distributed application is to make the invocation completely asynchronous by using messages instead of invoking REST APIs. 
    
    Serverless is becoming a mainstream technology in the cloud native world. There are open source solutions such as OpenFaaS and Fn Project that can reduce the impact of vendor lock-in.
    
    All cloud providers offer services designed to enable stream processing (such as Amazon Kinesis and Oracle Streaming), typically with an ingestion service that can handle a high volume of continuous data that can be processed as a set of messages or events. 
    
- hybrid scenarios 

    + on-premises infrastructure if, for example, it might not be possible to port a legacy application because of the technologies it uses
    
    + on-premises infrastructure needs to be modernized to adopt all of the cloud native technologies that are required to mimic the features available in the public cloud
    
    + The legacy applications can be “exposed” via a modern interface that will make them “look like” modern services. Kubernetes’s Service Catalog can help to address this type of scenario. addtional latency introduced by the fact that not all services are running on the same hosted environment 
    
- multicloud scenarios 
    
    
# DevOps 
- One of the models you can use when talking about DevOps is called CALMS, which stands for Collaboration
- Infrastructure as Code (IaC) is a method of provisioning and managing infrastructure using code rather than through manual processes. All infrastructure, such as servers, networks, and databases, is treated as code.
- measurement, Prometheus gives you a common instrumentation point and allows developers to easily instrument code.
- Site Reliability Engineering (SRE) emerged from google. DevOps is a superset of SRE 
- Testing, CD pipeline 
- DevOps—automation is critical. Just as there are things you need to keep in mind when developing microservices, there are considerations around writing tests for those microservices.
- Test doubles, The three most common types of test doubles are mocks, fakes, and stubs.
    +  a stub contains zero logic, and it returns only what you tell it to return. Stubs are useful if you need certain objects to return specific values and be in a particular state.
    + A fake is a lightweight implementation of your API that behaves like the real thing, b
    + Mocks are used for testing interactions between objects, mock can provide error and exceptions etc.
- Test automation pyramid, UI tests, service tests, unit tests 
    {UI test}
    {Service tests}
    {Unit tests     }
- Unit tests 
- Services tests, Service-level tests—which you could also call component-level tests—occupy the middle of the pyramid. 
- UI tests
- Other type of tests 
    + distributed tests 
    + performance tests 
    + load tests 
    + security/penetration 
    + a/b tests, A/B tests usually are executed against services that are already running in the production environment. The purpose of an A/B test is to determine whether one version of the service (A) performs better in comparison to another service (B).
    
    + acceptance tests 
    + usability tests 
    + configuration tests 
    + smoke tests, Canary testing is another effective way to continuously evaluate your services and functions. 
    + integration tests 
    + chaos tests 
    + fuzzy tests 
- test run frequences 
unit tests, every commit 
service tests, every commit 
integration tests, before deployment 
canary test, continuously in all environments 
ui test, on ui changes 
security, daily 
a/b tests, as needed 
chaos test, as needed 

- stages of testing in production process 
pre-deployment > { deployment > release > post-release }
                  testing in production 
                  
- Development tools, kubernetes in your local development environment 
    + Canary testing is another effective way to continuously evaluate your services and functions. 
    + KSync updates containers running on a cluster by replicating local files to the containers running in a remote cluster.
    + Skaffold is a command-line tool that you can use to continually deploy code changes to a local or remote Kubernetes cluster.
    + Draft is an open source tool that automates the deployment of application changes to either a remote or local Kubernetes cluster. 
    + Telepresence is an open source tool that you can use to wire containers running locally into a remote Kubernetes cluster. 
    + For Azure-specific Kubernetes development, Azure Dev Spaces is a great development tool. It allows you to develop and run containerized services in isolation directly on Azure Kubernetes Service. 

-  favorite tools for monitoring is Grafana, described as “the open platform for beautiful analytics and monitoring.”

https://grafana.com/

https://github.com/grafana/grafana

The open-source platform for monitoring and observability.

- collecting metrics, A Cloud Native Computing Foundation (CNCF)–graduated project, Prometheus is a popular option used for scraping and collecting metrics from your services.

- configuration management
    + Kuberentes is using a resource called ConfigMap. The ConfigMap allows for great separation of configuration from the services, which makes your service more portable.
    
    Directory 
    File 
    Literal value 
    
- Sample CI/CD flow 

code complete > push to git > pull code {build system} > build container > unit/service tests > push to private registry >{image is tagged and pushed to private registry} > image security scanning > test configuration > deploy to k8s > integration testing > gradual rollout > telemetry > continuous canary tests 


# Best practices
- breaking up the monolith for the right reasons 
    + decouple simple services first 
    + learn to operate on a small scale 
    + use a anticorruption layer pattern 
    {monolith 
    <=>
    data store
    }           
    <======> {anticorruption layer 
    
    } 
    <=====> {
        {service data store} 
        
        {service data store} 
        
        {service data store} 
        
        {service data store} 
    }

- use a strangler pattern, decomposing your monolith to move to microservices and functions, you can use a gateway and a pattern such as a Strangler pattern. The idea behind the Strangler pattern is to use the gateway as a facade while you gradually move the backend monolith to a new architecture

- come up with a data migration strategy, architecture, you need to decouple data as well. Your data migration strategy might consist of multiple phases, especially if you can’t migrate everything at the same time.

- rewrite any boilerplate code 

- ensuring resiliency

- use circuit breakers for nontransient failures 

- graceful degradation, if service fail they will still provide an acceptable user experience  

- Bulkhead pattern refers to isolating different parts of your system into groups in such a way that if one fails, the others will continue running unaffected.

- implement health checks and readiness checks 

- define cpu and memory limits for your containers 

- implement rate limiting and throttling 

- ensuring security 

- sue Separate Accounts/Subscriptions/Tenants

    + securely store all secrets 
    
    + obfuscate data 
    
    + encrypt data in transit 
    
    + use federated identity management 
    
    + use role-based access control 
    
    Kubernetes RBAC, for example, controls permissions to the Kubernetes API. Using RBAC, you can allow or deny specific users from creating deployments or listing pods
    
    + isolate kubernetes pods 

- working with data 
    + use managed databases and analytics services 
    
    + use a datastore that best fits data requirements 
    
    + keep data in multiple regions or zones 
    
    + use data partitioning and replication for scale 
    
    + avoid overfetching and chatty i/o 
    
    + don't put business logic in database 
    
    + test with production like data 
    
    + handle transient failures 
    
- performance and scalability 
    + design steless services 
    + use platform autoscaling features 
    + use caching 
    + use partitioning to scale beyond service limits 
    
- functions 
    + write single purpose functions 
    + don't chain functions? functions should push messages/data to a queue or a datastore to trigger any other functions if needed. Having one or more functions call other functions is often considered an antipattern that additionally increases your cost and makes the debugging more difficult.
    
    + keep function light and simple 
    
    + separate function entry point from the function logic.  if the function is invoked through an HTTP request like an API gateway, the context will contain HTTP-specific details. The entry-point method should separate these entry-point details from the rest of the code. 
    
    + use queues for cross-function communications 
    
- operations 
    + deployments and releass are separate activities 
    + keep deployments small 
    + CI/CD definition lives with component 
    + consistent application deployment 
    + use zero-downtime rleases 
    + don't modify deployed infrastructure 
    + use containerized build 
    + describe infrastructure using code 
    + isolate the environment 

- logging , monitoring and alerting 
    + unified logging system 
    + correlation ids which passed through all services 
    + include context with log entries 
    + common and structured logging format 
    + tag your metrics appropriately 
    + avoid alert fatigue 
    + define and alert on key performance indicators,  These Key Performance Indicators (KPIs) give you insight into the health of your system.
    + continuous testing in production 
    + start with basic metrics 
    
- service communication 
    + compatibility 
    + define service contracts do not leak internal details 
    + prefer asynchronous communication 
    + use efficient serialization 
    + use queue or streams to handle heavy loads 
    + batch requests 
    + split up large messages 
- containers 
    + don't run containers in priviledged mode, in privileged mode allows access to everything on the host.
    
    + use explicit container image tags 
    
    + keep container images small 
    + run one application per container 
    + use verified images from trusted repositories 
    + use vulnerability scanning tools on images 
    + don't store data in containers 
    + never store secrets for configuration inside an image 


# Portability 
- terms

SaaS defined: a solution hosted and maintained by a third-party.

On-Premises defined: a solution hosted in-house and usually supported by a third-party.

Off-Premises defined: a solution hosted by a third-party and usually supported by a different third-party.

- Data gravity is a term coined by Dave McCrory. The concept is fairly simple: data wants to be near the applications using it. As the data grows, its gravitational force increases, pulling applications and additional data to it.

- OpenAPI, for example, is a standard that API management products use when defining REST-based gateway services.

- Service Mesh Interface (SMI) defines an interface that you can use to provide interoperability across different service mesh technologies like Istio, Consul, and Linkerd.

- containers 

- common services and features 

- abstractions and layers 

- component substitution 

- service facade for multiple service to a single public service 

- transforms
    + maanged servcies from other venders 
Auth0

MongoDB Atlas

Elasticsearch Cloud

Sendgrid

Cloudflare LB

- virtual kubelet, Container as a Service (CaaS) products through Kubernetes. Developers and administrators can continue using the Kubernetes interface to run their workloads and still benefit from the compute services available from the cloud providers



    






    













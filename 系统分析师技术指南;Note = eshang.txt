系统分析师技术指南;Note = eshang

:CMM与软件过程改进
ISPW，软件过程研讨会
SPN，过程改进网络
>三个方向
软件过程分析建模，软件过程支持，软件过程评估和改进
PML，过程建模语言，process modeling languages
>CMM, 软件过程能力成熟度模型, capacity mauriy model
-术语包含以下内容
过程，process, 操作步骤
软件过程，software process, 开发维护的一系列活动
软件过程性能, software process capacity, 遵循一个软件过程后得到的结果
软件过程成熟度, 具体的软件过程
关键过程区域, key process area, 一系列相互关联的操作活动, KPA
关键实践, key practices
软件过程评估, software capability appraisal
软件工程组, software engineering group
软件相关组, software related groups
软件工程过程, software engineering process group
软件工程组, system engineering group
软件测试组, system te group
软件配置管理组, software configuration management group
培训组, training group
>CMM的基本框架
初始级别, 可复用, 已定义, 以管理, 优化级
>每个KPA按5个公共属性进行组织
执行约定, commitment to perform
执行能力, abilit to perform
实施活动, activities perform
度量和分析, measurement and analysis
实施实验, verifying implementation
>软件能力评价, SCE; 软件过程评估SPE
>软件企业实施CMM
-提高思想认识
-进行CMM培训
-确定合理的目标
-组建工作组
-制定和完善软件过程
-内部评审
-正式评估
-根据评估结果改进软件过程
>CMM存在问题
必须建立基本的软件工程过程和管理过程
比较笼统
>iso9001与CMM
CMM,强调持续的过程改进,只适用于软件
ISO适应于更大范围
>CMMI具体目标
改进组织过程,给出能支持将来集成其他科目CMM的公共框架,确保说开发的全部有关产品符合将要发布的关于软件过程改进的国际标准
>PSP, personal software process, 个体软件过程
度量,规划,管理,循环
>CMM的关键过程域与PSP和TSP的对应关系
-优化级
缺陷预防,技术变更管理,过程管理
-可管理
定量过程管理,软件质量管理
-已定义
组织过程焦点,组织过程定义,培训大纲,集成软件管理,软件产品工程,组织协调,同行专家审评
-可重复
需求管理,软件项目规划,软件项目追踪和监控,软件子合同管理,软件质量保证,软件配置管理

:J2EE与.net平台
>J2EE, java 2 platform enterprise edition
客户层,客户机
web层, JSP
商业层, enterprise beans
EIS层, DB
;
EJB2.0标准, JDBC API 2.0, java servlet, JMS, JTA java事务,java mail api, jaxp 处理xml, jca, JAAS 验证授权
>.net平台
专用服务器,sql server, exchange 2000
web服务
;
-.net framework
web service + web form + windows form
data ad xml(ado, sql, xslt, xpath, xml, etc)
framework base classes(io, string, net, threading)
CLR(debu, il, jit, etc)
>.net 与 J2EE
都是为了企业级实现的
-JVM, CLR, CLR具有针对windows平台的优化,JVM平台无关,限制更多
>java对象生命周期
		V---------------|
以创建->活跃->不可达->已收集->最终化->已收回
        |		^
		->隐形--|

:中间件技术
客户机与服务器的链接与通信
客户机与应用层的高校通信
应用层不同服务之间的操作机制
应用层与数据库
多层结构应用开发和运行的平台
应用开发框架,支持模块化应用开发
屏蔽硬件,操作系统,网络和数据库
提供交易管理机制
负载均衡和高可用
安全机制与管理
一组通用的服务以执行不同的功能
>底层中间件
JVM, CLR, JDBC, ODBC, ACE
>通用中间件
CORBA, MOM, COM, MQSeries, Orbix, WebLogic
>集成中间件
WorkFlow, EAI
>名词
PKI, public-key infrastructure, 密锁基础设施
CA, certification authority
>协议定义
SOAP, http://www.w3.org/tr/soap
WSDL, http://www.w3.org/tr/wsdl
uddi, http://www.uddi.org
ebXML, http://www.ebxml.org

:应用服务器
IBM, SUN, netscape, bea, persistence, BEA weblogic, ibm webShere application server, microsoft trasaction server(MTS), oracle application server(corba2.0), silverstream, sybase enterprise application server

:web 服务应用
>WSDL, web service description language,web服务描述语言, 描述如何使用程序来调用web服务
>UDDI, universal description discovery and integration, 统一描述发现集成, 用来查找定位服务

:数据仓储
>名词
联机事务处理, OLTP
数据仓储, data warehouse
>定义
数据仓储是一个面向主题的,集成的,非易失的,且随时变化的数据集合. 由w.h.Inmon, 在书building the data warehouse 一书中给出
>概念
维, 数据时按照维来组织的,管理人员要多角度多层次分析决策. 
上卷, 从较低层次的数据开始逐步将数据按照层次进行概括
下钻, 指从数据仓库中高层数据开始逐步走向底层数据
数据立方体, 某一事物可能有多角度观察,多个角度就构成了多个维, 多为的交点就是数据仓库中用户要观察的事务, 维数超过三个就是超维数聚集
聚类, 手机了基本事务数据的结构
>厂家
IBM visual warehouse, essbase/db2 olap server
orcale, orcale express, oracle discoverer
sybase, warehouse studio
adaptive server enterprise
informix, red brick system
ca, infopump
ncr teradata
microsoft
sas
business object

:数据挖掘技术
>从数据库中发现知识, KDD, 数据分析, 数据融合(Data Fusion)
>专家系统, 问题求解系统, 演绎系统, 以常识与专业知识为基础
>数据挖掘功能
自动趋势预测, 关联分析, 聚类, 概念描述, 偏差检测
>常用技术
关联分析, 序列分析, 分类分析, 聚类分析, 预测, 时间序列分析
>挖掘工具
神经网络, 决策树, 模糊逻辑, 综合多方法
>评价方法
复杂问题的解决能力, 易操作, 数据存取能力与其他产品的接口
>数据挖掘流程
数据库->数据挖掘工具->可视化工具->结果
>web数据挖掘与xml, 难点
易购数据库, 半结构化的数据结构, 数据源
>数据挖掘热点
网站的数据挖掘, 生物信息或基因的数据挖掘, 文本的数据挖掘

:操作数据存储
ODS, 操作数据存储, 是围绕数据而设计的一种数据结构, 是为了特定的目的而整合的数据
特点, 包含实时模式下动态更新的当前数据, 是面向主题, 集成, 可变, 当前的操作信息
数据仓库, DW
>ODS的定义
是一个集成了来自于不同数据库的数据的环境.目的是为终端用户提供一致的企业数据集成视图, 不同与数据仓库与数据集市, 关键差异在于应用储蓄更新频率和直接的更新途径
>分类, 按照数据源载入ODS的频率划分
1型, 同步方式载入, 要求有效地统一数据格式, 如信贷
2型, 存储转发方式将数据加载到ODS, 更新频率是数小时一次或更频繁, 如战略性决策
3型, 如同数据仓库中的细节性数据抽取工作, 更新周期通常为日加载, 作为基于DB-ODS-DW三层结构的决策支持系统的一部分
>ODS与DW的关系
-当前数据ODS包含当前与近似当前的数据, 反应了商业环境的当前状况, DW是长期数据存储
-ODS更新频繁, DW不更新只查询
-ODS是包含数据汇总等, 需要时才合成. DW是保存数据细节
>DB, ODS, DW响应事件
微妙, 秒到分钟, 秒到小时
>ODS数据转换层
完成源到ODS的转换,应该具有功能
-支持大量源与平台
-对变化进行扑捉的能力
-支持多种类型转换
-对设计方法变化具有透明性
-提供数据的可靠性传输
-对元数据的支持
>ODS平台特新

:异构数据库的集成
>数据处理发展阶段, 文件系统->集中式数据库->分布式数据库->异构分布
>不同部门使用不同的数据模型进行描述,以不同的语言写事务,以不同的机制访问,最终导致异构分布数据
>数据库转换的可能问题
命名冲突,格式冲突,结构冲突
DBMS, 数据模型
数据语义差异
>IBM为解决异种数据库互联,各自建立了实现基于SQL的互联规范
SAG, sql access group, 应用界面规范API, 格式与协议FAP
>ODBC, microsoft, 4层
-application
-driver manager
-driver
-data source
>数据库的网关借用了计算机里德网关概念,sybase omni 是一个open server应用程序
oracle网关, informix网关

:企业应用集成, EAI, enterprise application integration
>基础是web
>好处, 增加客户联系, 增强供应链, 改善内部流程, 减少市场化周期
>功能集成
-PRC, 远程过程调用
-MOM, 面向消息的中间层
-CORBA, 分布式对象技术
-TPM, 事务处理监控器
>不同公司解决方案
IBM, websphere portal
BEA, weblogic
microsoft, message queue

:XML
extensible markup language
>xsl
extensible style language, xm文档样式语言
>编程接口
DOM, SAX, JDOM, JAXP

:软件架构
>定义,为系统提供了一个结构, 行为和属性的高级抽象. 不仅指定了系统的组织结构和拓扑结构, 还显示了系统需求和系统构成元素之间的对应关系, 提供了一些设计决策的基本原理
>常用的5种模型
结构, 以架构构件, 连接件(connector)和其他概念来刻画结构
框架, 不太侧重描述结构的细节,而更侧重于整体结构. 是以特殊的问题为目标建立只针对和适应该问题的结构
动态模型, 是结构或框架的补充, 研究系统的"大颗粒"的行为
过程, 研究构造系统的步骤和过程
功能模型, 一组功能按照层次组成
>视图
逻辑视图, 开发视图, 进程视图, 物理视图, 场景
>架构风格
数据流风格, 调用/返回风格, 独立构件风格, 虚拟机风格, 仓库风格
>分层系统
核心, 基本工具, 用户系统, 过程调用
>C2风格, 通过连接件绑定在一起的按照一组规则动作的并行构件网络
    - 构件分为一个顶部, 一个底部
    - 构件与构件之间不允许连接
    - 一个连接可以和任意数目的其他构件和连接连接
    - 两个连接进行连接的时候必须由一个底部到另一个顶部
>客户/服务器风格, C/S
>三层 C/S 结构, 表示层, 功能层, 数据层
>浏览器/服务器风格
>公共对象请求代理, common object request broker architecture, corba
结构定义语义, 结构池, 动态调用接口, 对象适配器
>DSSA的活动, 领域分析, domain model; 领域需求, domain requirement; 领域分析, DSSA; 逐步求精的过程, 对每部的结果进行修改完善
- DSSA 的建立过程
并发, 递归的, 反复的
定义领域范围, 定义领域特定的元素, 定义领域特定的设计和实现需求约束, 定义领域模型和架构, 产生手机可复用语法和语义
>面向服务的架构, service oriented architecture, soa
w3c定义SOA是指服务提供者完成一组工作, service-architecture.com; 按照需要连接looslycoupled.com; gartner, 是一种C/S模式的软件设计
- SOA特征
从企业外部访问, 随时可用, 粗粒度服务接口, 分级, 松散耦合, 可复用的服务及服务接口, 标准化接口, 支持各种消息模式
无状态的消息, 有状态的消息, 等幂消息-向软件代理发送多次重复的效果和发送单条消息相同
- SOA与其他技术的关系
XML和WSDL
>富网络应用程序
RIA, rich internet application
- 开发技术
flash; laszlo 是一个开源的RIA开发环境, 整合了xml与javascript; avalon microsoft的avalon下一个版本; java swt创建基于窗体的用户界面; xul 基于xml的用户界面语言; bindows 用javascript和dhtml开发的web框架; oracle forms
>基于框架的软件开发模型
架构需求, 指用户对功能, 行为, 性能, 设计约束的期望
架构设计
标示构件
需求评审
架构文档化
架构复审
架构实现

:设计模式
design pattern, MVC模式, model-view-controller
>组成
模式名, 问题陈述, 解决方案, 后果描述
>分类
- 创建型
    abstract factory, 创建对象无需使用新建类, 产品对象族
    builder, 用于创建复杂的组合对象
    fatory method, 定义一个创建对象的接口, 由子类决定实例化的类
    prototype, 原型, 通过复制原型来实例化类
    singleton, 全局唯一实例
- 结构型
    adapter, 将类的接口转换成用户希望得到的另一种接口
    bridge, 将抽象概念和它的实现分离, 使得他们可以独立化
    composite, 组成树结构来表示局部和整体层次关系, 对象的单个结构或组合
    decorator, 给对象动态的加入新职责
    facade, 给一个子系统所有的结构提供统一的接口
    flyweight, 提供大量细粒度对象共享的特效方法
    proxy, 控制对另一个对象的访问
- 行为型
    chain of responsibility, 给多个对象处理请求的机会, 将接受对象连接起来
    command, 将请求封装为一个对象, 以支持撤销操作
    interpreter, 给定一种语言,给出它的语法的一种描述和解释器
    iterator,  一种顺序性逐个访问的元素的方法
    mediator, 定义一个对象封装一系列对象的交互, 将对象之间
    memento, 不破坏封装的情况下获得一个对象的内部状态
    observer, 定义一个对象间一个多个的信赖关系, 当信赖的对象更新的时候本对对象自动更新
    state, 自动反应对象的内部转台改变
    strategy, 定义一族算法, 对每一个都进行封装
    visitor, 在一个对象结构中对某个元素需要执行的一个操作, 在不改变操作元素类的条件下定义新操作
>MVC架构的设计与实现
Controller -(factory)->View
|                       |
(bridge)              (bridge)
V                       V
Model
- Controler, evaluationCondition()
- View, buildPage(), print()
- Model, doSomehting()

:统一建模语言, UML
unified modeling language, 可视化图形组件
- UML结构
UML, 由构造块, 公共机制, 架构
- 构造块
建模元素, 关系, 图
- 公共机制
规格说明, 修饰, 公共分类, 扩展机制
- 架构
逻辑视图, 进程视图, 实现视图, 部署视图, 用例视图
- 分类
用例图, 类图, 顺序图, 协作图, 状态图, 活动图, 构件图, 部署图

:统一开发过程
>RUP, rational unified process, 使用UML表达
>用力驱动, 将按照用例驱动的工作流程来进行, 首先定义用例, 然后设计用例,最终是测试人员构件测试
>以基本架构为中心, 影响因素, 运行平台
>迭代与增量
>RUP生命周期, 初始阶段, 细化阶段, 构件阶段, 交付阶段
>技术评审, 阶段被接受, 条件接受, 不接受
>统一开发过程项目管理
业务需求建模, 分析设计, 实施, 项目管理, 部署

:简单对象访问协议
SOAP, 是基于XML的分布式对象访问协议,与CORBA, COM/DCOM不同, 是应用于与平台无关的
SOAP = RPC + HTTP + XML
>SOAP消息的封装
封装Envolope, 头, 体
>安全
SOAP安全解决方案, XML数字签名, XML加密, XML密锁管理服务

:企业信息化
PLM, production  life cycle management, 
PDM, product阿塔mnagement,产品数字管理
>ERP系统
>供应链管理, 可以从以下四个方面分析
工作流程, 实物流程, 资金流程, 信息流程
supply chain management, scm
>供应链管理系统一般含有的部分
采购管理(purchse management system), 库存管理(inventory management), 存货管理, 合同管理(contract management), 销售管理(sales mangement), 运输管理(transportation management), 生产订单(manufacture order), 物料需求计划(material reassure planning, MPR), 主生产计划(master production schedule, MPS), 粗加工能力计划(rough cut capacity planning), 供应链计划(supply chain planning), 设备维护, 物料清单(bill of material, BOM), 产品配置(production configuration), 工艺流程(bill of routing), 车间作业(shop floor control), 委外加工(subcontracting), 质量管理(quality management)
>财务管理
总账(general ledger), 应收帐(accounting payable), 工资管理(wage management), 固定资产(asset management), 财务报表, 现金流量(cash flow statement), 资金管理(fund management), 财务分析(financial analysis), 网上银行, 公司对账(company audit), 预算管理, 成本管理, 项目成本
>客户关系管理, customer relationship management, CRM
模型, 组织与组织的关系, 组织与个人的关系, 个人与个人的关系
做到成员与关系分离, 成员及地址多对多关系, 灵活的成员分类
>信息化项目实施的风险和控制
来自个人的风险, 例如一把手工程
来自流程的风险回避, ERP/CRM/SCM都是管理模式的概念
来自项目管理的风险与回避
来自数据的风险与回避

:工作流
工作流方方面的权威机构是工作流管理联盟, workflow management calition, WFMC, work flow
定义, 遵循, 监督与控制
>特征
自动化, 检查和控制(monitoring control), 业务重规划
流程重构, business process reengineering, BPR
>系统实现
- 管理系统中的各种数据
    工作流程控制数据, 工作流相关数据, 工作流应用数据
- 工作流模型和工作流建模工具
- 工作流执行服务
- 工作流机
- 客户端应用
>工作流与ERP集成

:软件产品线, software product line
>软件产品过程模型
- 双生命周期模型
领域工程阶段, 应用工程
    * 领域工程阶段
    分析, 设计, 实现
    * 应用工程的主要任务
    需求分析, 系统设计, 系统实现
- SEI模型, 核心资源开发, 产品开发和管理
- 三生命周期模型
企业工程->领域工程->应用工程
>软件工程产品线组织
开发部, 商务部, 领域工程部, 层次领域工程
>产品线的建立方案
是用演化方式还是使用革命方式
- 将现有产品演化为产品线
- 用软件产品代替现有产品
- 全新软件产品线的演化
- 全新软件产品线的开发
>框架和应用框架技术
>软件产品线基本活动
- 核心资源开发
- 产品开发
- 管理
>软件产品线架构的演化

:XP与敏捷编程
>文档太重量级了, 敏捷方法是轻量级的方法
>敏捷开发宣言
个体和交互 胜过 过程和工具
可以工作的软件 胜过 面面俱到的文档
客户合作 胜过 合同谈判
响应变化 胜过 遵循计划
>敏捷原则
- 尽早, 持续交付有价值的中间软件使客户满意
- 即使到了开发后期, 也欢迎需求变化, 利用响应变化创造竞争优势
- 经常交付可工作的软件, 间隔时间可以使几周到几个月, 间隔越短越好
- 在开发过程中业务人员和开发人员必须天天工作在一起
- 为开发人员提供环境和支持, 给予信任, 以人文本地构件项目
- 团队内部最有效的工作方式莫过于面对面交谈
- 工作的软件是度量进度的首要标准
- 倡导可持续的开发速度, 责任人, 开发者用户应保持一个长时间的恒定的开发速度
- 不断关注好的技能和设计会增加敏捷能力
- 本质是简单, 使未完成的工作最大化的艺术
- 自组织的团队才能够做出最好的架构设计和需求分析
- 团队应定期在如何有效地工作方面进行反省, 然后对自己的行为做出改进
>主要敏捷方法
- 水晶方法
人和团队第一, 过程域工具第二, 提高交流和高度宽容性
- 动态系统化方案, DSDM, dynamic systems development method
- 特征驱动的软件开发
- 自适应软件开发, ASD, adaptive software development
- scrum方法
>极限编程, eXetreme Programming
是一种轻量级, 高校, 低风险, 柔性, 可预测, 科学而充满乐趣的软件开发方式
- 价值观
沟通, 简单, 反馈, 勇气
- 原则
快速反馈, 简单性假设, 逐步修改, 提倡更改, 优质工作
- 最佳实践
    *计划游戏
    快速指定一份概要的计划, 然后随着项目细节的不断清晰在逐步完善计划
    客户编写故事, 开发人员估算, 确定迭代的周期
    *小型发布, 持续集成, 小步快走
    *隐喻, 一种语言的表达手段,字面意义不相似的事物之间的联系
    寻求共识, 发明共享语汇, 创新的武器, 描述体系结构
    *简单设计
    能够通过所有的测试, 没有包括任何的重复代码, 清楚地表现了程序员赋予的所有意图, 尽可能少的类和方法
    *测试先行
    *重构
    *结对编程,两个人一起开发
    所有设计决策不是一个人做出的, 系统任何一个部分至少有2个人以上熟悉, 几乎不可能两个人都忽略的测试项或者其他任务, 结对组合的动态性, 代码总是能够保证被审过
    *集体代码所有制
    强调谁破坏的代码就应该谁来修
    *持续集成
    *每周工作40小时
    *现场客户
    *编码标准
    *融合石关键
-XP的实践阶段
计划, 设计, 编码, 测试

:实时系统与嵌入式系统
嵌入式实时操作系统, RTOS

:网络计算与普适计算
网格, great global grid, 是吧一个局域网,城域网甚至整个网络整合成一个大的超级计算机
>特点
异构性(Heterogeneous), 结构不可预测性(adaptablilty), 可扩展性(scalability), 多级管理域
>开放网络体系结构
>计算池模型
>织女星网络的体系结构
>网格计算的环境, globus














Python document note; Note=Erxin

## Class
- definitions
    + A namespace is a mapping from names to objects. 
    + The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.
    + built-in names is created when the Python interpreter starts up. never deleted
    + The global namespace for a module is created when the module definition is read in; 
    + The built-in names actually also live in a module; this is called __builtin__
    + A scope is a textual region of a Python program where a namespace is directly accessible. 
- class definition syntax
class ClassName:
    <statement-1>
    .
    .
    .
    <statement-N>
- initialize a class
class ClassName([moduleName.]baseClassName):
    def __init__(self):
        self.data = []
- instance object
- Class objects support two kinds of operations: attribute references and instantiation.
- a function is a object have a __call__ attribute
- data attributes correspond to “instance variables”
- A method is a function that “belongs to” an object. we’ll use the term method exclusively to mean methods of class instance objects
-  By definition, all attributes of a class that are function objects define corresponding methods of its instances.
-  In our example, the call x.f() is exactly equivalent to MyClass.f(x).
- assigning a function object to a local variable in the class is also ok. For example:
# Function defined outside the class
def f1(self, x, y):
    return min(x, x+y)
class C:
    f = f1
    def g(self):
        return 'hello world'
    h = g
- Each value is an object, and therefore has a class (also called its type). It is stored as object.__class__.
- a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it. (For C++ programmers: all methods in Python are effectively virtual.)
- a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments).
- Use issubclass() to check class inheritance
- Use isinstance() to check an instance’s type
- multiple inheritance
    + ex.
    class DerivedClassName(Base1, Base2, Base3):
    <statement-1>
    .
    .
    .
    <statement-N>
    + search rule
        * For old-style classes, the only rule is depth-first, left-to-right. Thus, if an attribute is not found in DerivedClassName, it is searched in Base1, then (recursively) in the base classes of Base1, and only if it is not found there, it is searched in Base2, and so on.
        * For new-style classes, the method resolution order changes dynamically to support cooperative calls to super().
        super(type[,object-or-type]), Return a proxy object that delegates method calls to a parent or sibling class of type.
        The __mro__ attribute of the type lists the method resolution search order used by both getattr() and super().
        * tow use case for super()
        in a class hierarchy with single inheritance, super can use to refer to parent class without naming them explicitly
        second use case is support cooperative multiple inheritance in a dynamic execution environment.
        for both case ex.
        class C(B):
            def method(self, arg):
                super(C, self).method(arg)
        *  To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right ordering specified in each class, that calls each parent only once, and that is monotonic
- private class member
valid use-case for class-private members, called name mangling. Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped.
mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For example:
class Mapping:
    def __init__(self, iterable):
        self.items_list = []
        self.__update(iterable)

    def update(self, iterable):
        for item in iterable:
            self.items_list.append(item)

    __update = update   # private copy of original update() method

class MappingSubclass(Mapping):

    def update(self, keys, values):
        # provides new signature for update()
        # but does not break __init__()
        for item in zip(keys, values):
            self.items_list.append(item)
- define class like struct type in C
class Employee:
    pass

john = Employee() # Create an empty employee record

# Fill the fields of the record
john.name = 'John Doe'
john.dept = 'computer lab'
john.salary = 1000
- User-defined exceptions are identified by classes as well.
    + two valid (semantic) forms for the raise statement
    raise Class, instance
    raise instance
    instance must be an instance of Class or of a class derived from it. the second is shorthand of raise instance.__class__, instance
    + A class in an except clause is compatible with an exception if it is the same class or a base class thereof
    class B:
        pass
    class C(B):
        pass
    class D(C):
        pass

    for c in [B, C, D]:
        try:
            raise c()
        except D:
            print "D"
        except C:
            print "C"
        except B:
            print "B"
    this will print d c b if the except statemetns reverse will print b b b
- self define iterator, the for statement calls iter() on the container object. 
The function returns an iterator object that defines the method next() which accesses elements in the container one at a time. 
When there are no more elements, next() raises a StopIteration exception which tells the for loop to terminate.
it is easy to add iterator behavior to your classes. Define an __iter__() method which returns an object with a next() method.
class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def next(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]
Generators are a simple and powerful tool for creating iterators.
def reverse(data):
    for index in range(len(data)-1, -1, -1):
        yield data[index]
for char in reverse('golf'):
    print char
What makes generators so compact is that the __iter__() and next() methods are created automatically.
Sometime could use list comprehensions as generator
list(data[i] for i in range(len(data)-1,-1,-1))

# Python types and objects
- reference, http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html

# Python attributes and methods
- reference, http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html











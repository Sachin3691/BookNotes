Html5 for dummies=Don Cowan;Note=Erxin

# introduction
- codes of the book
www.dummies.com/go/html5canvas
- four main browsers
internet explorer, firefox, chrome, safari, opera
- html5 new features
    + improve interaction
    + improve support of audio and video
    + geolocation
    + client-side data storage
    + canvas
    + complete new features list
    www.w3.org/TR/html5-diff/#new-elements
- noun
Scalable Vector Graphics(SVG)
Disruption-Tolerant Networking (DTN) to sustain super long-distance connections without data loss. 

# setting up your canvas platform
- canvas performance relative items
cpu, gpu, ram, web browser
- test browser performance
http://donkcowan.com/html5-canvasfor-dummies#examples/
- pixels
    + hardware relative
    A pixel is the smallest application-controllable 
    element on a display screen. 
    a pixel color by combining three or four basic subpixelcolors such as red, green, and blue … 
    + pixel density, PPI (pixels per inch)
- make sure browser have turn on the gpu acceleration
- test app in mobile devices
    + test mobile device support for html5
    www.html5test.com
    + w3c, which is targeting 2014 for the completion of the HTML5 recommendation
- text editor
    + notepad++
    + jEdit
- code debugger
    + firefox firebugs
        * add on firerainbow, provide color-coded syntax
        http://firerainbow.binaryage.com. 
    + internet explorer and chrome use developer tool to debug
    + opera use the developer console
    + safari use the firebug lite extension
    
# drawing on canvas
- creating objects
- canvas content
    + Using the 2D Canvas context
    canvasObj.getContext("2d")
    + 3D
    canvasObj.getContext("3d")
- coordinate
    + absolute
    In a 2D space, positions are referenced using xand y coordinates
    + relative
- draw rectangle
context.strokeRect (xPos+130, yPos, width, height);
context.fillRect (xPos, yPos, width, height);
context.clearRect (xPos+285, yPos+10, width-50, height-20);
- defining object attribute
colors,
gradients, vary color within an object
patterns, fill your object with a repeated pattern
transparency, let another image or background show through your object
clipping, set a mask that will remove designed portions of your object
- color specification
    + Color keywords cornflowerblue, such as red, blue
     www.w3.org/TR/css3-color/#svg-color
    + Hexadecimal values #6495ED
    + RGB (red, green, blue) rgb(100, 149, 237)
    + HSL (hue, saturation, lightness) hsl(219, 58%, 93%)
    hue, indicates the position on a circular color wheel starting with red at the zero degree point
    saturation, indicates the amount of color from 0% to 100%
    lightness, indicates the purity of color from 0% to 100%
    + color design tool
    http://kuler.adobe.com
- gradient
    + liner
    context.createLinearGradient()
    + radial
    context.createRadialGradient()
    + addColorStop function to add color 
- patterners, Patterns create repeated images.
var smallImage = new Image();
smallImage.src = “http://marketimpacts.com/storage/Strawberry50px.png”;
var repeatPattern = context.createPattern(smallImage, “repeat” );
// B3. PATTERN objects.
context.fillStyle = repeatPattern;
context.fillRect (125, 125, 325, 325);
- Transparency
Object transparency is created by using the globalAlphaattribute.
- shadow
context.shadowOffsetX = 4; context.shadowOffsetY = 4;
context.shadowBlur = 3; context.shadowColor = “gray”;
all the elements affect after the setting
- clip, set the clip range, Other shapes, such as a circle, can also be used to establish the clipping region.
context.rect(40, 40, 320, 50);
context.clip();
- Displaying Text
context.font = “italic bold 12px Arial”; #style weight size face
context.fillStyle = “black”;
context.textAlign = “center”
context.fillText(mText, xPos, yPos);
font size em(ems) 1 em is equal to the font size set for the web page
- Text baseline
context.textBaseline = “top”;
- Text alignment
The textAlignattribute controls the horizontal positioning of text relative to a virtual vertical line running through the center of a word.
context.textAlign = “center”;
- Drawing Lines
context.strokeStyle = “red”; context.lineWidth = 20;
context.shadowOffsetX = 4; context.shadowOffsetY = 4;
context.shadowBlur = 7; context.shadowColor = “gray”;
drawLine(25, 25, “butt” );
drawLine(25, 75, “square”);
drawLine(25, 125, “round” );
drawJoin(175+(0*gap)+(0*width), 120, “miter”);
drawJoin(175+(1*gap)+(1*width), 120, “bevel”);
drawJoin(175+(2*gap)+(2*width), 120, “round”);
function drawJoin(xStart, yStart, join)
{
    // C1. ATTRIBUTES of lines.
    context.lineCap = “round”;
    // C2. DRAW lines.
    context.beginPath();
    context.moveTo(xStart, yStart);
    context.lineTo(xStart+(width/2), yStart-height);
    context.lineTo(xStart+width, yStart);
    context.lineJoin = join;
    context.stroke();
}
- line attribute, Attributes that can be used for lines include
Colors, 
Gradients, 
Patterns, 
Transparency:
Shadows, 
Clipping, 
Width, 
Caps, Control the shape of the caps on the ends of your line.
    + butt,  The line is square ended without adding any length.
    + square, The line is square ended with added length.
    + round
Joins, Set a mask that will remove designated portions of your object.
    + miter, The lines are joined with a pointed tip.
    + bevel, The lines are joined with a squared tip.
    + round, The lines are joined with a rounded tip.
context.strokeStyle = “red”;
context.lineWidth = 20;
- Line construction



Qt 5 Docmentation;Note=Erxin

# Getting Started with Qt
- download and install Qt LGPL version 
http://www.qt.io/download/

- components 
Qt libraries, prebuilt for different platforms 
Qt Creator, IDE 
Document and Example 
Qt in source code form 
Add-on components for different platforms

- use the maintainance tool under <install_dir> to add/remove components 
- requirements 
    + android
    Android SDK 
    Android NDK 
    Apache ant v1.8+
    JDK v6+ or OpenJDK for linux 
    On window also required Android Debug Bridge(ADB), http://developer.android.com/sdk/win-usb.html
    
    select components on ubuntu 
    $ ./android update sdk 
    
    http://doc.qt.io/qt-5/androidgs.html
    
    install Qt for android 
    
    + Qt for iOS 
    development and development is done using Xcode. the .pro file will be used to generate a xcode project, supports devices 
    iPhone 3GS+
    iPod Touch 
    iPad2+
    iPad mini 
    
    before install Qt required install Xcode, it will be find in Mac App Store. The latest Xcode is always required 
    
    to deploy the app required to join the iOS developer program https://developer.apple.com/programs/ios/
    
    build app from command line 
    run qmake 
    open the result .xcodeproject file in Xcode 
    build the application in Xcode 
    
    connectiong iOS devices 
    http://doc.qt.io/qtcreator/creator-developing-ios.html
    
    using objective-c in Qt suffix your source files with .mm and add them to OBJECTIVE_SOURCES instead of SOURCES in the .pro file 
    example, https://github.com/richardmg/qtdd13_qmlapp
    
    + Qt for windows 
        * libraries 
        third partiy libraries 
        ICU 
        ANGLE, converts OpenGL ES 2.0 to DirectX 11
    
        http://doc.qt.io/qt-5/windows-requirements.html
        
        * sdks and compilers 
        vs 2010 sp1 
        window sdk 7.1 
        window sdk 8 
        mingw toolchain with g++ version 4.7 or higher
    
    + Qt for linux/X11 
    c++ compiler 
    debugger 
    make 
    OpenGL library 
    
    ubuntu 
    $ sudo apt-get install build-essential libgl1-mesa-dev
    
    reference, http://doc.qt.io/qt-5/linux.html
    
    + Qt for OS X 
    it is a unix platform and behaves similarly to other unix-like platforms. the main difference is that X11 is not used as the windows system. it accessible through the Cocoa API. Qt using Xcode 
    
    Qt can be built for either x86 or x86_64. 64-bit is used by default. To select a 32-bit build, use the macx-clang-32 or macx-g++32 mks
    
    additional command-line options. qmake can generate project files for Xcode with -spec macx-xcode 
    
        * deploying application on OS X 
        recommanded way is build on latest OS X and deploy on earlier version. OS X applications are typically deployed as self-contained 
        
        commaon way is distribute as a compressed disk image 
        reference, http://doc.qt.io/qt-5/osx-deployment.html
        
        * OS X specific, http://doc.qt.io/qt-5/osx-issues.html
        
    + Qt for WinRT, win8.1+ 
    window 8.1 modern UI, VS 2013
    window RT, VS 2013 
    window phone 8.1, VS 2013 
    window 10, VS 2015 
    
    develop applications for winRT just as other with any editor or Qt creator. then run qmake and nmake/jom to build you application 
    
        * build app project to VS solution 
        $ qmake -tp vc *.pro 
        
        this will not embed Qt libraries into the package and require manually added. build with a tool windeployqt for automatic add dependency 
        $ qmake -tp vc <your project>.pro "CONFIG+=windeployqt"
        
        * build from source 
        Qt for WinRT is always built as a cross-build. make sure use x86 command prompt for every WinRT/Windows phone build 
        
        The WinRT mkspec format is <platform>-<architecture>-<toolchain> where platform can be winrt
        
        * running applications from command line 
        WinRT app must be packaged and installed or registered with the application service in order to be launched. The WinRT Runner Tool(http://doc.qt.io/qt-5/winrt-support.html#winrtrunner) can be used to launch app 
    
        * package content 
        dependencies are the needed libraries and plugins. Qt plugins have to be put into a folder named after their category 
        
        WinRT app are run in a sandbox. windeployqt tool copy libraries and plugins to the appropriate directories as necessary 
        
        register the directory using an xml file AppxManifest.xml. change into packaged directory in powershell 
        $ Add-AppxPackage -Register AppxManifest.xml 
        
        the installed application could be found in the start menu 
        
    + windows CE
        * requires 
        VS 2005 or 2008 and at least one of the supported window CE/Mobile SDKs 
        
        * build 
        $ qmake 
        $ nmake 
        
        * run 
        manually, copy files to run 
        
- VS addin, stopped maintain 
- supported platforms 
http://doc.qt.io/qt-5/supported-platforms.html

- explore Qt, example list
http://doc.qt.io/qt-5/all-examples.html

- setting up project 
- develop with Qt creator 
- community, http://qt.io 

# Qt Quick Projects 
- options 
    + Qt Quick 2 app can contain QML and C++ code, contain a QQuickView which is a window for displaying UI 
    
    + Qt Console app 
    
    + Qt Quick Controls app, it like Qt quick app but using Qt Quick Controls 
    
    + Canvas 3D 
    
    + Quick UI create a Qt Quick UI project with a single QML file that contains the main view, you can review Qt UI project in a preview tool, it do not contain C++ code 
    
    + Qt Quick Controls UI
    
    + Qt Quick Extension Plugins in the library category, create plugins that can be dynamically loaded into Qt Quick app. Qt Quick 1 Extension plugin can be load in Qt Quick 1 app and Qt Quick 2 Extension plugin for Quick 2 app 
    
- create Qt Quick applications 
    + File > New File or Project > Application > Qt Quick Application or Qt Quick Controls Application > Choose
    
    + select mini required version 
    
    + select the with .ui.qml file to create a UI form that can contain a subset of the QML language. it could be edit with Quick UI forms 
    
    + a Qt Quick Controls application, enable native styling check box to add a dependency to the Qt Widgets module to .pro file 
    
    + select kits for running and building your project and then click next. Check the list from Tools > Options > Build & Run > Kits.
    
    the SDK for a particular target platform might install additional templates for that platform. such as QNX template is installed as part of the QNX SDK 
    
- creating Qt Quick UI projects 
    + File > New File or Project > Other Project > Qt Quick UI or Qt Quick Controls UI > Choose.
    + set mini required version 
    + select .ui.qml file to create a UI form 
    Qt creator creates the following files 
    .qmlproject project file defiens that all QML, JavaScript and image files in the project folder belong to the project 
    .qml file defines an UI item 
    ui.qml file defines a form for the application UI  
    
    javascript and image could be copied to the project folder 
    
- Qt quick UI forms 
form have filename extension .ui.qml, recommanded edit in design mode 
    + not supported 
    javascript blocks 
    function definitions 
    function calls except qsTr 
    other binding than pure expression 
    signal handlers 
    states in other items thatn the root item 
    root items that are not derived from QQuickItem or Item 
    
    + not supported types 
    Behavior 
    Binding 
    Canvas 
    Component 
    Shader Effect 
    Timer 
    Transform 
    Transition 
    
    + edit forms in design mode 
Item {
    width: 640
    height: 480

    property alias button: button

    Button {
        anchors.centerIn: parent
        id: button
        text: qsTr("Press Me")
    }
}

use the (Export button in designer) to export an item as a property 

    + in the QML file that uses the from you can use the button property alias to implement signal handlers 
MainForm {
    anchors.fill: parent
    button.onClicked: messageDialog.show(qsTr("Button pressed"))
}

    we can also assign properties or define behavior or transtions 

    + move from the design mode directly to the implementation of a type in the .qml file right click the type in navigator and select go to implementation 

- Using Qt Quick Designer 
    + recommanded use UI forms for componetns that you want to design in Qt Quick Designer 
        * sidebar to select QML types 
        * navigator display the items in current QML 
        * library display the building blocks that you can use to design app 
        * connections  enable to create connections between object
        * project shows a list of project open in the current session 
        * file system show al lfiles in the currently select directory 
        * open doc sidebar to show currently open files 
        * canvas is working area for QML components 
        * properties 
        * state pane display different states of the item 
        
    + managing item hierarchy in navigator 
    + setting the stacking order with z property of an item determines, right-click it in the navigator or on the canvas and select Stack (z)
    + switching parent items, To change the parent of the item, press down the Shift key before you drag and drop the item into a new position.
    + QML type library, library enable you to select QML types, UI components and resources , categories 
        * your own compents 
        * basic types 
        * layouts 
        * positioner types 
        * views 
        
    sets of UI compoents with a particular mobile device have been defined for Qt Quick 1. Since Qt 5.1 ready-made Qt Quick Controls, dialogs and layouts are available for creating user interfaces using Qt Quick 2.1. to view the components and controls in library impomrt the component set in imports 
    
    resource display the images and other files
    
    + specify item property 
    use context menu to reset some item properties 
    
    + viewing changes in properties, for different states the property panel will highlight the changes compare to the base state 
    
    all boolean values can be visualized as follows 
    visibility:visible True, default value 
    visibility:visible True, highlight the value is explicitly set to visible 
    visibility:visible False
    visibility:visible False highlight 
    
    + marking text items for translation 
    mark each text item that should be translated in the property pane, Text field select tr button 
    
    the text content will be enclosed in a qsTr call function in the code 
    ...
    text: qsTr("Hello world")
    ...
    
    + loading place holder data 
    designer support views, models and delegates so that when you add a grid view, list view or path view item, the list mode and the delegate are added automatically 
    
    + using dummy models, if you open a file in Qt Quick designer that references a c++ model you see nothing on the canvas. if the data in the model is fetched from the internet you have no control over it. 
    
    dummy data is introduced for this 
    
    example a ListView that in turn specifies a C++ model 
    ListView {
        model: dataModel
        delegate: ContactDelegate {
            name: name
        }
    }
    create a directory named dummydata in root sot that it is not deployed to device, in dummydata create a qml file has the same name as the value of the model 
    qml/exampleapp/example.qml 
    dummydata/dataModel.qml 
    
    dataModel.qml contains 
    import QtQuick 1.0

    ListModel {
         ListElement {
             name: "Ariane"
         }
         ListElement {
             name: "Bella"
         }
         ListElement {
             name: "Corinna"
         }
    }
    
    + creating dummy context in qml 
    example 
    Item {
        width: parent.width
        height: parent.height
    }
    
    this works well in app but designer display a zero-sized item. because the parent for the opened file does not exist. dummy context is introduced. if you place a file with the same name as the application in the dummydata/context directory you can fake a parent context 
    
    import QtQuick 1.0
    import QmlDesigner 1.0

    DummyContextObject {
        parent: Item {
            width: 640
            height: 300
        }
    }
    
    + building transformations on items, such as rotation, scale and translation in Advanced pane. Check the Transform type for more detail 
    
    + editing properties inline, double click a property in designer or in context menu select edit 
    
    + adding states each state can present a different configuration 
        * show some UI items and hide others 
        * present different available actions to the user 
        * start, stop or pause animations 
        * execute some script required in the new state 
        * change a property value for a particular item 
        * show a different view or screen 
        
    for more informaton could check the Qt Creator Manual/Creating Screens suchas create screen and animation
    
    + use designer to adjust 
    padding 
    adjust boundaries 
    select items 
    
    + previewing component size, the size could be bound relative to device profile such as screen resolution 
    
    + specifying canvas size Tools > Options > Qt Quick > Qt Quick Designer in Canvas group 
    + refreshing the canvas 
    refresh the image on vanvas press R 
    
- editing pathView properties 
PathView lays out data provied by data models on Path 

    + double click PathView to start editing path, editor composes the path of PathCubic path obects. They are cubic Bezier curves to a given position 
    
    PathLine, PathQuad path objects are supported indirectly 
    
    by default Path is closed, use context menu to deslect Closed Path 
    
- Adding connections 
    + connection can be used to 
    connect objects to signals 
    specify dynamic properties for objects 
    create binding between the properties of two objects 
    
    + connecting object to signals in QML from the connection panel 
    select connection tab 
    select target to add the object to connect to a signal 
    select signal handler to select the signal that the connection will listen to from a list of all signals available for the object 
    select actions to specify the action to perform when the signal is emitted. use javascript to specify the actions 
    
    + specify dynamic properties in the panel 
    + adding bindings between two object's properties 
    
- creating components 
    + component provide a way for defining a new visual item. avaliable types to create components 
    BorderImage 
    Image 
    Item, the most basic of all visual types in QML 
    Rectangle
    Text 
    TextEdit 
    TextInput 
    
    + use Qt Quick 1 Components(for Qt 4) to create screens with a native look. Since Qt 5.1 support creating classic desktop-style user interface 
    
    + creating components in Qt Quick Designer 
    File > New File or Project > Files and Classes > Qt > QML File (Qt Quick 1) or QML File (Qt Quick 2) > Choose to create a new .qml file
    
    click design to open .qml 
    
    drag and drop a qml type from library to editor 
    
    edit its properties 
    
    reference
        * create a button 
        http://doc.qt.io/qtcreator/quick-buttons.html
        
        * create a scalable button 
        http://doc.qt.io/qtcreator/quick-scalable-image.html
        
    + moving within components, when edit a component on the canvas select Go into component or press F2 
        
- Creating Screens 
    + use predefined qml types and your own components to create screens. the main qml specify the main window 
    
        * adding components to screens 
        drag and drop from library to editor 
        
        * using data models 
        GridView 
        ListView 
        PathView, visualizes the contents of a model along a path 
        
    + positioning items on screens 
    manual positing use coordinate system 
    
    setting bindings, assigning binding expression to the property associated with their location in the visual canvas 
    
    setting anchros and margins, allw an item to be laced either adjacent to or inside of another. have invisible 7 anchor lines: left, horizontalCenter, right, top, verticalCenter, baseline, and bottom. Rectangle { id: rect2; anchors.left: rect1.right; ... }
    
    using poistioners, provides some built-in positioner items. simple grid, row or column
    
    using layouts, arrange Qt Quick items in a user interface. they are suited for resizable user interfaces 
    
    using split views
    
    + set bindings 
    property binding are created implicitly in QML whenever a property is assigend a JavaScript expression. click the circle icon next to a property to open 
    
    + integrate QML and JavaScript
    QML use JSON-like syntax 
    
    QML have a deep javascript integration, allows signal handlers and methods to be defined in javascript. Support specify relationships between object properties using property bindings
    
    QML provide javascript host environment which contain different objects in browser 
    
    Qt Designer cannot show bindings and using them might have a negative impact on performance. consider using anchors and margins 
    
    + setting anchros and margins 
    with syntax or set in the designer 
    Rectangle {
        id: rectangle2
        anchors.left: rectangle1.right
        anchors.leftMargin: 15
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 15
        //
    }
    
    + using positioners 
    Column 
    Row
    Grid
    Flow, arranges its child side by side, wrapping as necessary 
    
        * example works with Column
        import QtQuick 2.0
        Item {
            width: 310; height: 170

            Column {
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.verticalCenter: parent.verticalCenter

                spacing: 5

                Rectangle { 
                    ...
                }
        }
        * references, http://doc.qt.io/qt-5/qtquick-positioning-layouts.html#column
        
    + using layout 
    Layout, provides attached properties for items pushed onto a Column layout, row layout or grid layout 
    ColumnLayout
    RowLayout 
    GridLayout 
    
    + SplitView, dragable spliter 
    + Using States, we could use states to create two screens. State allow you to 
        * aligh items 
        * avoid excessive property changes 
        * minimize the difference between the base state and the other states to be keep the QML code short and readable 
        * avoid problems when using transitions and animation when changing states 
        
        use state panel and properties panel to create state and screens 
        
        to determine which view opens when the application states, use the code editor to set the state of the root item of the .qml file 
        Item {
            state: "Normal"
        }
    
    + animating screens, use transition to move between states smooth
    reference, http://doc.qt.io/qt-5/qtquick-statesanimations-animations.html
    
    such as use ParallelAnimation type to start several animations at the same time 
    
    + adding user interaction methods 
    Flicable, items can be flicked horizontally or vertically 
    FocusScope, assists in keyboard focus handling when building reusable QML componets 
    MouseArea, simple mouse handling 
    
        * in Qt 5.1 also support use Qt Quick Controls to present or receive input from the user 
        
        Button 
        CheckBox 
        ComboBox 
        GroupBox 
        Label 
        ProgressBar 
        RadioButton 
        Slider
        SpinBox 
        TextArea 
        TextField 
        ToolButton 
        
        + implment application logic, you can use Qt or javascript to implement the application logic 
- Browsing ISO 7000 icons 
    + add icon from an ISO 7000 icon library that is installed with Qt Creator to Qt Quick application(commercial only). use ISO icon browser to add a picture 

- exporting designs from graphics software 
    + export designs from graphic software such as Photoshop and GIMP to QML files. GIMP does not support grouping and therefor each layer is exported as an item in GIMP 
    
    Illustrator files need to first export to photoshop then to QML 
    
    + conversion rules 
        * layer names are used as item names, space and # are replaced with underscore 
        * layer style converted to image 
        * offset size ordering and opacity are preserved 
        * text layers are converted to text items unless specify 
        * hidden layers export to hiden 
        * png images are copied 
        
        * lock layer cannot be export 
        * do not blending mode effects 
        
    + exporting from photoshop to QML 
    download the export script https://codereview.qt-project.org/#/admin/projects/qt-labs/photoshop-qmlexporter
    
    in photoshop choose File > scripts > export to QML 
    in Qt Creator choose File > Open File or Project to open the QML  
    
    to generate QML files that can be edit in designer by add import statements in Export.jx 
    qmlfile.write("import QtQuick 2.5\n");
    
    + exporting from GIMP to QML 
    https://www.gimp.org/
    
    download the export script qmlexporter.py, from Qt Code Review. https://codereview.qt-project.org/#/admin/projects/qt-labs/gimp-qmlexporter
    
    copy the script to plug-ins directory in GIMP 
    
    give it executable right in linux 
    
    to generate editable file in designer add import statement in qmlexporter.py 
    f.write('import QtQuick 2.5\n')
    
    in GIMP select export command 
    
- using QML modules with plugins 
    + QML modules may use plugins to expose components defined in C++ to QML applications 
    
    when write a QML module and used in c++ it is register new types iwth QQmlEngine class qmlRegisterType() method 
    
    ideally QML module have a plugins.qmltypes file 
    
    + generating qmltypes files 
    
    create edit qmltypes file manually or use the tool qmlplugindump tool to generate them automatically 
        
    run the follow command to load My.Module version 1.0 from /import/path/my/module inculding all its plugins and output a description of the plugin's types to /import/path/my/module/plugins.qmltypes 
    $ qmlplugindump My.Module 1.0 /import/path > /import/path/my/module/plugins.qmltypes
    
    + dumping plugins automatically if a module lack of qmltypes, Qt Creator will try to generate a temp file by running the qmldump.exe in the background 
    
    + running QML module in Qt Quick Designer 
    designer use a QML emulation layer(QML Puppet) to render and preview images and to collect data. the emlation layer must be built with the same Qt version as the QML modules 
    
- developing widget based applications 
    + createor automatically open all .ui files in the integrated designer in design mode 
    + code editor integration, shift+F4 to switch between code and design mode 
    use Qt Creator to create stub implementations of slot functions, in the design mode, right click a widget to open a context menu, and then select Go to Slot. Select a signal in the list to go to an existing slot function or create new one 
    
    + managing image resource, you main contain several resource file(.qrc). 
    
    + specify settings for Qt Designer 
    preview setting by Tool>Form Editor>Preview or Alt+shift+R 
    
    Tool>Option>Designer to chagne setting 
    
    + previewing forms using device skins. is a set of configuration that describe a mobile device. it includes a border image that surrounds the forma nd depicts a mobile device with its buttons 
    
    + adding Widget, use Qt API to create plugins that extend Qt applications. reference check adding Qt Designer 
    
- adding Qt designer plugins, for add own widget to Qt Designer. most flexible way is compile to dynamic library and shipped separately and detected and loaded at runtime 

    + locating Qt Designer Plugins, fetch from stanard locations and loads the plugin that match its build key 
    
    integrated designer fetch plugins from \bin\plugins\
    
    check plugins lfrom Tools > From Editor > About Qt Designer Plugins 
    
    standalone designer located in <Qt_version>\<compiler>\bin\plugins\designer 

        * example for 5.2.1 Qwt Qt Widgets for Technical Applications 
        check paths used in Qwt library 
        $ otool -L /Developer/Applications/Qt/plugins/designer/libqwt_designer_plugin.dylib
        
        * copy Qt designer plugin and Qwt library files to the following locations 
        libqwt_designer_plugin.dylib to Qt Creator.app/Contents/PlugIns/designer
        libqwt.*.dylib to Qt Creator.app/Contents/Frameworks
        
        * otool to check 
        $ otool -L /usr/local/qwt-5.2.1/lib/libqwt.5.dylib
        
        * enter isntall_name_tool command to fix the references of the libraries 
        $ sudo install_name_tool -change 
        
    + matching build keys, creator that included in pre-built qt package on windows is built with the VS compiler. Where as the version of Qt shipped for building applications is configured and built to use the MingGW/g++ compiler. Plugins built by this version of qt cannot be loaded by Qt Create because the build-keys do not match. They only could be used in standalone version of designer 
    
    to use designer plugins for shipped Qt make sure creator is built with same compiler. MinGW or recompiling Qt with VS 
    
- coding 
    + Qt use MIME type to open files in solution. currently don't support add new 
    Tools > Options > Environment > MIME Types.
    + create models in UML 
    Help > About Plugins > Modeling > ModelEditor and restart Qt Creator to enable the plugin
    
    File > New File or Project > Modeling > Model > Choose to create a model.
    
    Drag drop c++ classes to editor to create class diagram 
    
- writing code 
    + use text editing macros 
    Tools > Text Editing Macros > Record Macro
    
- Clang is a compiler front end for the C, C++, Objectie-C, Objective-C++, OpenMP, OpenCL and CUDA. it uses LLVM as back end 
http://clang.llvm.org/
    
- Optimizing Applictions for Mobile Devices 
    + know your users 
    + design for small screens 
    + design for multiple screen size 
    + design for changing screen orientation 
    + design intuitive ways of moving within applications 
    + design for limited input methods 
    + design for keep response times short 
    + design for save battery time 
    + consider network issue 
    + remember the processing limits of the device 

- working in edit mode 
enable hoding Ctrl and Alt while clicking symbol to navigation from Tools > Options > Text Editor > Behavior > Enable mouse navigation 
    
Shift+F2 or right-click and select Switch Between Function Declaration/Definition.
    
inspecting the code mode Tools > C++ > Inspect C++ Code Model or press Ctrl+Shift+F12.
    
source file modified outside creator to reparse by Tools > C++ > Reparse Externally Changed Files to update the code model
    
- semantic highlighting 
    + Qt editor is Kate Editor, definition files could be found at http://www.KDE-Files.org 
    https://kate-editor.org/2005/03/24/writing-a-syntax-highlighting-file/
    
    it is a sub site of http://www.openDesktop.org 
    
    highlight definition files, Tools > Options > Text Editor > Generic Highlighter.
    
    click download definition to download a list of highlight definition files 
    
    + modify display setting from  Tools > Options > Text Editor > Display 
    
- checking code syntax 
    + javascript syntax checking tool JSLint http://www.jslint.com/
    + the code run kit could be changed to reset the code mode from Tools > QML/JS > Reset Code Model,
- compiling code 
    + completing code snippets. press tab or enter to complete the code 
    + editing code snippets Tools > Options > Text Editor > Snippets.
    predefined variables could be used in snippets, Build Environment section 
    
    specify variable in snippets, $variable$ 
    
    sepcify Qt creator variables %{variable}, example %{CurrentProject:Name}
        
    :c converts the initial letter of the string to upper case
    :l converts the string to lower case
    :u converts the string to upper case
    example void $name:l$() {}

- indenting text or code 
Tools > Options > C++ 
Tools > Options > Qt Quick, QML 
Tools > Options > Text Editor > Behavior, other files 

- using Qt toolbar 
 Tools > Options > Qt Quick > Qt Quick Toolbar > Always show Qt Quick Toolbar
    
- Pasting and Fetching Code Snippets Tools > Options > Code Pasting
paste any content that your copied to the clipboard by Tools > Code Pasting > Paste Snippet

support fetch fomr URL 
If you use the Git version control system, you can create a diff view by selecting Tools > Git > Local Repository > Diff. You can then upload its contents to the server by selecting Tools > Code Pasting > Paste Snippet. The reviewers can retrieve the code snippet by selecting Tools > Code Pasting > Fetch Snippet. If they have the project currently opened in Qt Creator, they can apply and test the change by choosing Tools > Git > Patch > Apply from Editor.

- using text editing macros  Tools > Text Editing Macros > Record Macro or press Alt+(

configure keyboard shortcard Tools > Options > Environment > Keyboard

- parsing c++ files 
    + code completion 
    + syntactic and semantic highlighting 
    + navigating code by locator 
    + inspecting code by using class browser 
    + diagnostics and tooltips 
    + finding and renaming symbols 
    + refactoring actions 

    Clang keeps up with the development of the C++ language. At the time of this writing, it supports C++98/03, C++11, C++14, C89, C99, Objective-C, and Objective-C++
    
    to make parse faster, specify pre-compiled header in Code Mode options 
    
    build clang code model plugin,, install clang and set environment variable LLVM_INSTALL_DIR
    
    + configure clang code model plugin Help > About Plugins > C++ > ClangCodeModel to enable the plugin
    
    restart qt 
    
    Select Tools > Options > C++ > Code Model, and select Use Clang Code Model

    To process pre-compiled headers before processing any project files, deselect the Ignore pre-compiled headers check box
    
- finding 
- searching with the locator at the bottom left of creator. ctrl+k 

the locator, separated by plus signs (+) or colons (:). For example, to open main.cpp to line 41 and column 2, enter: main.cpp:41:2.

support wildcard match 

    + support filter types Options > Configure to open the Locator options.
    document o 
    file f
    project p
    class c
    symbols . 
    help ?
    execute sell command !
    version control command git 
    external tools x 
    
    QDataStream (: (colon) followed by a Space and the symbol name
    
    + add websearch engine 
    Tools > Options > Environment > Locator > Web Search (prefix: r) > Edit
    
- refactoring ctrl+shift + U 
    + column editing, press alt 
    http://doc.qt.io/qtcreator/creator-editor-refactoring.html
    
- beautify source code, Download and install the tool to use for formatting source code
    + artistic style 
    + clangFormat 
    + uncrustify 
    
Help > About Plugins > C++ > Beautifier to enable plugins 

- configure editor Tools > Options > Text Editor


# Qt Overview 
- Development Tools 
    + Qt Designer for GUI 
    + qmake, building application for different platform. when using qmake or CMake, you specify the build system in project mode 
    + Qt Linguist for localizing applications, you can run lupdate and lrelease tools from the Qt Creator 
    + Qt Assistant for viewing Qt documentation 
- addtional tools 
makeqpf, create pre-rendered fonts for embedded devices 
Meta-Object Compiler(moc) generate meta-object information for QObject subclasses 
User Interface Compiler(uic) generate c++ code from the user interface files 
Resource Compiler(rcc), embed resources into Qt application during the build process 
Qt D-Bus XML compiler(qdbusxml2cpp), a  tool to convert D-Bus interface descriptions to C++ source code 
D-Bus Viewer, tool to introspect D-Bus objects and messages 
Qt Quick Compiler, compiler for QML enables building Qt Quick applications 
Qt Visual Studio Add-in, intended developers who wish to develop Qt application using visual studio IDE instead of Qt Creator (stop maintain)

- User interfaces 
    + common important UI topics 
    High DPI Displays 
    
    + QML Graphical User interfaces 
    QML/JS
    
    + Qt Quick is a module which supplies QML types for creating user interfaces 
    QML/JS 
    
    + Qt Widgets C++
    
    + Qt WebEngine, HTML/CSS/JS 
    
    + Important UI topics for QML applications 
    visual stypes in qml 
        * rectangle in qml 
         Rectangle {
            color: "#272822"
            width: 320
            height: 480
        }
        
        * image type 
        Image {
            x: 40
            y: 20
            width: 61
            height: 73
            source: "http://codereview.qt-project.org/static/logo_qt.png"
        }
        
        * shared visual properties 
        opacity, visible 
        * transforms 
        Rectangle {
            rotation: 45 // This rotates the Rectangle by 45 degrees
            x: 20
            y: 160
            width: 100
            height: 100
            color: "blue"
        }
    responding to user input in qml 
        * supported types of user input, Qt Quick mode provies support for mouse, touch event, text input, key press 
        
        check the Qt Senors documents
        
        Rectangle {
            id: rectangle
            x: 40
            y: 20
            width: 120
            height: 120
            color: "red"

            MouseArea {
                anchors.fill: parent
                onClicked: rectangle.width += 10
            }
        }
        
        also could use MultiPointTouchArea and PinchArea types 
        * keyboard and button events 
        Rectangle {
            id: rectangle
            x: 40
            y: 20
            width: 120
            height: 120
            color: "red"

            focus: true
            Keys.onUpPressed: rectangle.y -= 10
            Keys.onDownPressed: rectangle.y += 10
            Keys.onLeftPressed: rectangle.x += 10
            Keys.onRightPressed: rectangle.x -= 10
        }
    animations in qml 
        * Fluid UIs Qt provide two way to have UI compoents move with animation 
        states and transitions 
        
        Item {
            id: container
            width: 320
            height: 120

            Rectangle {
                id: rect
                color: "red"
                width: 120
                height: 120

                MouseArea {
                    anchors.fill: parent
                    onClicked: container.state == 'other' ? container.state = '' : container.state = 'other'
                }
            }
            states: [
                // This adds a second state to the container where the rectangle is farther to the right

                State { name: "other"

                    PropertyChanges {
                        target: rect
                        x: 200
                    }
                }
            ]
            transitions: [
                // This adds a transition that defaults to applying to all state changes

                Transition {

                    // This applies a default NumberAnimation to any changes a state change makes to x or y properties
                    NumberAnimation { properties: "x,y" }
                }
            ]
        }
        
        * animation proerty changes, behaviors can be used to specify an animation for a property to use when it changes. 
        
         Rectangle {
            color: "green"
            width: 120
            height: 120

            // This is the behavior, and it applies a NumberAnimation to any attempt to set the x property
            Behavior on x {

                NumberAnimation {
                    //This specifies how long the animation takes
                    duration: 600
                    //This selects an easing curve to interpolate with, the default is Easing.Linear
                    easing.type: Easing.OutBounce
                }
            }

            MouseArea {
                anchors.fill: parent
                onClicked: parent.x == 0 ? parent.x = 200 : parent.x = 0
            }
        }
        
        more information could be found at http://doc.qt.io/qt-5/qtquick-statesanimations-topic.html
        
    displaying text in qml 
        * laying out text, default text will display the text as a single line unless it contains embedded newlines. To wrap the line set wrapMode and give explicit width. There are two runtime property paintedWidth and paintedHeight
        Text {
                // For text to wrap, a width has to be explicitly provided
                width: root.width

                // This setting makes the text wrap at word boundaries when it goes past the width of the Text object
                wrapMode: Text.WordWrap

                // You can use \ to escape quotation marks, or to add new lines (\n). Use \\ to get a \ in the string
                text: 'I am the very model of a modern major general. I\'ve information vegetable, animal and mineral. I know the kings of england and I quote the fights historical; from Marathon to Waterloo in order categorical.'

                // color can be set on the entire element with this property
                color: "white"

            }
            
        the text could be set with html syntax  
    layouts in qml 
        * manual 
        * anchor
    style and theme support
        * controls have a stle property, using the styling QML types. ButtonStyle, MenuStyle 
        Button {
            text: qsTr("Hello World")
            style: ButtonStyle {
                background: Rectangle {
                    implicitWidth: 100
                    implicitHeight: 25
                    border.width: control.activeFocus ? 2 : 1
                    border.color: "#FFF"
                    radius: 4
                    gradient: Gradient {
                        GradientStop { position: 0 ; color: control.pressed ? "#ccc" : "#fff" }
                        GradientStop { position: 1 ; color: control.pressed ? "#000" : "#fff" }
                    }
                }
           }
           
        * accessing the system palette to help set QML application 
    integrating javascript in qml 
        * using javascript expressions for property values, the expression will be reevalue when it changed 
        Item {
            width: Math.random()  //will only be evalue at the first loading
            height: width < 100 ? 100 : (width + 50) /  2
        }
        
        * adding javascript functions in qml, add id for an UI element will let the QML reference the functions define in it 
        Item {
            id: container
            width: 320
            height: 480

            function randomNumber() {
                return Math.random() * 360;
            }

            function getNumber() {
                return container.randomNumber();
            }

            MouseArea {
                anchors.fill: parent
                // This line uses the JS function from the item
                onClicked: rectangle.rotation = container.getNumber();
            }
        }
        
        * using javascript file 
        //myscript.js 
        // myscript.js
        function getRandom(previousValue) {
            return Math.floor(previousValue + Math.random() * 90) % 360;
        }
        
        //reference in qml 
        import QtQuick 2.3
        import "myscript.js" as Logic

        Item {
            width: 320
            height: 480

            Rectangle {
                color: "#272822"
                width: 320
                height: 480
            }

            MouseArea {
                anchors.fill: parent
                // This line uses the JS function from the separate JS file
                onClicked: rectangle.rotation = Logic.getRandom(rectangle.rotation);
            }
        }
        
        for more information check http://doc.qt.io/qt-5/qtqml-javascript-expressions.html
        
    scalability, mobile platform, different destop platform 
    
        * consider scalability when 
        want to deploy app to more than one device 
        prepare for new devices 
        
        * implement scalable using Qt Quick 
        Qt Quick Controls 
        layouts using Qt Quick Layouts 
        property binding 
        reference device and calculate a scaling ratio for adjusting image, font and margins 
        load platform specific assects using file selectors 
        load components on demand by using a loader 
        
        * patterns 
        use a expanded content area, ApplicationWindow will recaculate window size. 
        consider making components to display fewer elements in small device and use loader to show more in large device 
        for game, want to create a board that does not scale, provide an unfair advantage to players on larger screens 
        
        resizing application windows dynamically, use Qt Quick Controls Styles to apply custom styling to the predefined controls 
        
        layout screen controls dynamically, provide ways of laying out screen controls in a row. recaculating comes with performance cost. Mobile and embedded devices might not have the power required to recalculate the size and position of animated objects. We could use binding instead 

        using bindings, the value could be static or a javascript expression, for screens have low, high normal pixel desity without automatic OS support(such as ios and os x)
        Image {
            source: {
                if (Screen.PixelDensity < 40)
                "image_low_dpi.png"
                else if (Screen.PixelDensity > 300)
                "image_high_dpi.png"
                else
                "image.png"
            }
        }
        
        * handling pixel density 
        scaling is implemented for qt quick qtWidgets and QtGui and the cocoa platform plugin 
        
        QWindow::devicePixelRatio(), QtWidgets and QPainter picks up devicePixelRatio() from the backing store and interprets it as a scaling ratio 
        
        example use values for dip and height and width 
        qreal refDpi = 216.;
        qreal refHeight = 1776.;
        qreal refWidth = 1080.;
        QRect rect = qApp->primaryScreen()->geometry();
        qreal height = qMax(rect.width(), rect.height());
        qreal width = qMin(rect.width(), rect.height());
        qreal dpi = qApp->primaryScreen()->logicalDotsPerInch();
        m_ratio = qMin(height/refHeight, width/refWidth);
        m_ratioFont = qMin(height*refDpi/(dpi*refHeight), width*refDpi/(dpi*refWidth));
        
        * loading fiels depending on platforms 
        use QQmlFileSelector to apply a QFileSelector to QML file loading, this enables you load altenative resources depending on the paltform on which the appliaction is run 
        
        in IOS the @2x filename suffix is used to indicate high dpi version of images. the image qml type and QIcon class automatically load @2x versions of images and icons if they are provided 
        
        * loading components on demand
        
        * switching orientation, Screen.orientation contains the current orientation of the screen. use Item.rotation or Item.transform to rotate your content 
    + widget-based user interfaces 
    in contrast to Qt Quick, widgets do not scale that well for touch screens and fluid
    
    + important concepts in qt widgets 
    application main window, is a set of classes 
        * overview for typical modern main application window 
        QAction, abstract user interface action that can be inserted into widgets 
        QActionGroup, Gropus actions together 
        QDockWidget
        QMainWindow 
        QMdiArea, which MDI windows are displayed
        QMenu, for use in menu bars, context menus, and other popup menus 
        QMenuBar
        QSizeGrip
        QStatusBar 
        QToolBar
        QWidgetAction 
        
        * to add a menu bar to the main window, we simple create the menus and add them to the main window's menu bar QMainWindow::menuBar() will create the menu bar when it is called at the first time QMainWindow::setMenuBar() used to set a custom menu bar 
        MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
        {
            ...
            newAct = new QAction(tr("&New"), this);
            newAct->setShortcuts(QKeySequence::New);
            newAct->setStatusTip(tr("Create a new file"));
            connect(newAct, &QAction::triggered, this, &MainWindow::newFile);

            openAct = new QAction(tr("&Open..."), this);
            openAct->setShortcuts(QKeySequence::Open);
            openAct->setStatusTip(tr("Open an existing file"));
            connect(openAct, &QAction::triggered, this, &MainWindow::open);
            ...
        * toolbar 
        fileToolBar = addToolBar(tr("File"));
        fileToolBar->addAction(newAct);
        fileToolBar->addAction(openAct);
            ...
        fileToolbar->setAllowedAreas(Qt::TopToolBarArea | Qt::BottomToolBarArea);
        addToolBar(Qt::TopToolBarArea, fileToolbar);
        
    destop integration
        * userful classes are designed to help developers integrate applications into user's destop environment
        QDesktopServices, method for accessing common desktop services 
        QDesktopWidget, access to screen information onn multi-head systems 
        QSystemTrayIcon, Icon for an application in the system tray 
        
        * open external resources, QImageIOHandler for handle images, QTextDocumentClass for html. QDesktopServices provides an interface to service offered by user's desktop environment openUrl() is used to open resources using the appropriate application 
        
        * system tray icons to display status information 
        * desktop widgets, QDesktopWidget class can be used to monitor the position of widgets and notify applications about changes to the way the desktop is split over the available screens 
        
    dialog windows 
        ColorDialog 
        Dialog 
        FileDialog 
        FontDialog 
        MessageDialog 
        
    layout management 
        * QWidget subclasses can use layouts to manage their children. The QWidget::setLayout() function applies to a layout to a widget. when a layout is set on a widget in this way, it takes charge of the following tasks 
        position child 
        sensible default size for windows 
        sensible minimum sizes for windows 
        resize handling 
        automatic updates when content change, font size, hiding o show child widget, removal of child 
        
        * layout classes 
        QBoxLayout 
        QButtonGroup 
        QFormLayout, in a 2-column descriptive lable-field style 
        QGraphicsAnchor, represents an anchor between two items in a QGraphicsAnchorLayout 
        QGraphicsAnchorLayout, can canchor widgets together in graphics view 
        QGridLayout
        QGroupBox 
        QHBoxLayout 
        QLayout 
        QLayoutItem 
        QSizePolicy 
        QSpacerItem 
        QStackedLayout
        QStackedWidget 
        QVBoxLayout 
        QWidgetItem 
        
        * example use a layout 
        QWidget *window = new QWidget;
        QPushButton *button1 = new QPushButton("One");
        QPushButton *button2 = new QPushButton("Two");

        QHBoxLayout *layout = new QHBoxLayout;
        layout->addWidget(button1);
        layout->addWidget(button2);

        window->setLayout(layout);
        window->show();
        
        * tips for layouts 
        when using layout you do not need to pass a aprent when contructing the child widgets, layout will automatically reparent the widgets. widgets in a layout are children of the widget not the layout itself. layout is not a widget 
        
        * stretch factors widgets are given a share of space in accordance with their QWidget::sizePolicy()
        
        * custom widgets in layouts, when make your own widget, you should also communicate its layout properties 
        reimplement QWidget::sizeHint() to return the preferred szie of the widget 
        reimplement QWidget::minimumSizeHint() to return the smallest size 
        call QWidget::setSizePolicy() to specify the space requirements of the widgets 
        call QWidget::updateGeometry() whenever the size hint, minimum size hint or size policy changes 
        
        * layout issues, the use of rich text in a label widget can introduce some problems.
        in certain cases the parent layout is put into QLayout::FreeResize mode, meaning that it will not adapt the layout of its contents to fit inside small sized windows 
        this can be overcome by implementing the sizeHint() and minimumSizeHint() function 
        
        * manual layout, reimplement QWidget::resizeEvent() to calculate the required distribution of sizes and call set Geometry() on each child 
        
        * write a custom layout manager by subclassing QLayout, Border Layout or Flow Layout, each item offset by QLayout::spacing(). you must define 
        a data structure to store the items handled by the layout 
        addItem()
        setGeometry(), how to perform the layout 
        sizeHint(), preferred size of the layout 
        itemAt(), how to iterate over the layout 
        takeAt(), how to remove items from the layout 
        in most cases you will also implement minimumSize()
        
        * example custom a CardLayout 
        //card.h
        #ifndef CARD_H
        #define CARD_H

        #include <QtWidgets>
        #include <QList>

        class CardLayout : public QLayout
        {
        public:
            CardLayout(QWidget *parent, int dist): QLayout(parent, 0, dist) {}
            CardLayout(QLayout *parent, int dist): QLayout(parent, dist) {}
            CardLayout(int dist): QLayout(dist) {}
            ~CardLayout();

            void addItem(QLayoutItem *item);
            QSize sizeHint() const;
            QSize minimumSize() const;
            int count() const;
            QLayoutItem *itemAt(int) const;
            QLayoutItem *takeAt(int);
            void setGeometry(const QRect &rect);

        private:
            QList<QLayoutItem*> list;
        };
        #endif
        
        * referece detail from http://doc.qt.io/qt-5/layout.html
        
        * qt widget examples http://doc.qt.io/qt-5/examples-widgets.html
        
    model/view programming 
        * MVC introduced by smalltalk 
        * combined the view and control and to allow flexible handling of user input, we introduce the concept of delegate. in standard view delegate reders the items of data. when an item is edit it communicates with the model directly using model indexes 
        
        * model/view can be separated into three groups 
        models 
        views
        delegates 
        
        they communicate with each other use signals and slots 
        
        * all item model are based on the QAbstractItemModel, for list table should use QAbstractListModel and QAbstractTableModel
        
        * create new model, code reference http://doc.qt.io/qt-5/model-view-programming.html#creating-new-models
        
        * ready-made models in Qt 
        QStringListModel 
        QStandardItemModel, complex tree structures 
        QFileSystemModel
        QSqlQueryModel, QSqlTableModel, QSqlRelationalTableModel 
        
        * views, Qt provids 
        QListView 
        QTableView 
        QTreeView 
        QAbstractItemView 
        
        reference view classes http://doc.qt.io/qt-5/model-view-programming.html#view-classes
        
        * delegates, the default delegate implementation is provided by QStyledItemDelegate. it is used by standard views 
        QItemDelegate don't use the current style to paint its items 
        
        reference delegate classes http://doc.qt.io/qt-5/model-view-programming.html#delegate-classes
        
        * sorting there are two ways to do it 
        your model is sortable, if it reimplements the QAbstractItemModel::sort(), QTableView and QTreeView provie an API 
        
        enable interactive sorting by connecting the QHeaderView::sortIndicatorChanged() signal to the QTableView::sortByColumn() slot or QTreeView::sortByColumn() slot 
        
        another way is your model doesn't have the required interface, you could use the proxy model http://doc.qt.io/qt-5/model-view-programming.html
        
        * convenience classes such as QListWidget, QTreeWidget and QTableWidget. they are not intended to be subclassed. they are used item-based item view and table 
        
        to subclasses could use QListView, QTableView, QTreeView with QStandardItemModel 
        
        * using models and views 
        
        two models in Qt, QStandardItemModel it is a multi-purpose model and QFileSystemModel is a maintains info abou the contents of directory 
        
        * using QTreeView/QListView with QFileSystemModel
QSplitter *splitter = new QSplitter;

QFileSystemModel *model = new QFileSystemModel;
model->setRootPath(QDir::currentPath());

QTreeView *tree = new QTreeView(splitter);
tree->setModel(model);
tree->setRootIndex(model->index(QDir::currentPath()));

        * model classes
        base concepts, QAbstractItemModel represent the data as a hierarchical structure 
        
        * model indexes, ensure representation of the data is separate from the way it is accessed. mode indexes contain a pointer to the model that created them. 
        
        mode index provide a temporary reference QModelIndex or long term index QPersistentModelIndex 
        
        to obtain a model required three properties, a row, a column and a index of a parent item 
        
        * row and column, model can be accessed as a simple table 
        QModelIndex index = model->index(row, column, ...);
        
        top level items in a model are always refereenced by specifying QModelIndex() as parent item 
        
        each item can be the parent of another table 
        
        * item roles, a model can perform various roles for other components. Qt::DisplayRole is  used to access string, the standard roles are defined by Qt::ItemDataRole 
        
        as model for the item of data by 
        QVariant value = model->data(index, role);
        
        reference create new models section for additonal informaton of roles http://doc.qt.io/qt-5/model-view-programming.html#creating-new-models
        
        * using model indexes 
         QFileSystemModel *model = new QFileSystemModel;
        QModelIndex parentIndex = model->index(QDir::currentPath());
        int numRows = model->rowCount(parentIndex);
        
        for (int row = 0; row < numRows; ++row) {
            QModelIndex index = model->index(row, 0, parentIndex);
            QString text = model->data(index, Qt::DisplayRole).toString();
            // Display the text in a widget.
        }
        
        * sharing selections among views with same model 
        secondTableView->setSelectionModel(firstTableView->selectionModel());
    
        * delegate example 
        class SpinBoxDelegate : public QStyledItemDelegate
        {
            Q_OBJECT

        public:
            SpinBoxDelegate(QObject *parent = 0);

            QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &option,
                                  const QModelIndex &index) const Q_DECL_OVERRIDE;

            void setEditorData(QWidget *editor, const QModelIndex &index) const Q_DECL_OVERRIDE;
            void setModelData(QWidget *editor, QAbstractItemModel *model,
                              const QModelIndex &index) const Q_DECL_OVERRIDE;

            void updateEditorGeometry(QWidget *editor,
                const QStyleOptionViewItem &option, const QModelIndex &index) const Q_DECL_OVERRIDE;
        };
        
        //private a editor, when table view need a editor it ask the delegate to provide it 
        QWidget *SpinBoxDelegate::createEditor(QWidget *parent,
            const QStyleOptionViewItem &/* option */,
            const QModelIndex &/* index */) const
        {
            QSpinBox *editor = new QSpinBox(parent);
            editor->setFrame(false);
            editor->setMinimum(0);
            editor->setMaximum(100);

            return editor;
        }
        
        //provide a function to copy mode data into the editor 
        void SpinBoxDelegate::setEditorData(QWidget *editor,
                                    const QModelIndex &index) const
        {
            int value = index.model()->data(index, Qt::EditRole).toInt();

            QSpinBox *spinBox = static_cast<QSpinBox*>(editor);
            spinBox->setValue(value);
        }
        
        //submit data to the model, the standard QItemDelegate informs view when it has finished editing by emitting the closeEditor() signal 
        void SpinBoxDelegate::setModelData(QWidget *editor, QAbstractItemModel *model,
                                   const QModelIndex &index) const
        {
            QSpinBox *spinBox = static_cast<QSpinBox*>(editor);
            spinBox->interpretText();
            int value = spinBox->value();

            model->setData(index, value, Qt::EditRole);
        }
        
        //updating the editor's geometry 
        void SpinBoxDelegate::updateEditorGeometry(QWidget *editor,
            const QStyleOptionViewItem &option, const QModelIndex &/* index */) const
        {
            editor->setGeometry(option.rect);
        }
        
        //editing hints provide hints to the other components about the result. we also could add filter to the delegate to control the displaied data 
        
        * handling selections in item views 
        information about items selected in a view is stored in an instance of the QItemSelectionModel. it is independent of any views it is possible to share selections between views 
        
        selections are made up of selection ranges only record the start and ending mode index 
        
        
        
    rich text processing 
    drag and drop 
    internationalization 
    
    + visualizing data, Qt Charts and {Qt Data Visualization}
    
    + displaying web content, provides the chromium-based WebEngine layout engine 
    reference webengine, http://doc.qt.io/qt-5/qtwebengine-index.html
    
    


- makeqpf 
http://doc.qt.io/qt-5/qt-embedded-fonts.html
- meta object compiler 
http://doc.qt.io/qt-5/moc.html
- user interface compiler 
http://doc.qt.io/qt-5/uic.html
- resource compiler 
http://doc.qt.io/qt-5/rcc.html
- qt quick compiler 
http://doc.qt.io/QtQuickCompiler/
- user interfaces 
    


- reference 
http://doc.qt.io/qt-5/overviews-main.html

# Qt namespace 
http://doc.qt.io/qt-5/qt.html

# Translate Qt 4 to Qt 5 
https://wiki.qt.io/Transition_from_Qt_4.x_to_Qt5

# Qt Senors 
http://doc.qt.io/qt-5/qtsensors-index.html

# Qt Linguist Manual 
http://doc.qt.io/qt-5/qtlinguist-index.html

# Qt Assitant Manual 
http://doc.qt.io/qt-5/qtassistant-index.html





















# How to Create Qt Plugins 
http://doc.qt.io/qt-5/plugins-howto.html
    
# Qwt User's Guide 
- introduction contains GUI components and utility classes which are primarily useful for programs with a technical background 
http://qwt.sourceforge.net/
    
    
# Qt Widget Projects 
 
# Qt QML 
http://doc.qt.io/qt-5/qtqml-index.html

# Qt QML Application 
http://doc.qt.io/qt-5/qmlapplications.html
    
# Qt Quick 
http://doc.qt.io/qt-5/qtquick-index.html

# Qt Designer Manual 
http://doc.qt.io/qt-5/qtdesigner-manual.html
    
# Qt for OS X deployment 
http://doc.qt.io/qt-5/osx-deployment.html

# Qt Widgets 
http://doc.qt.io/qt-5/qtwidgets-index.html

# High DPI Displays 
- 4k monitors may have 3840x2160 pixels, resulting in a logical 192 dpi where older monitors have 1920x1080 pixels at 96 dpi 

- issues with high dpi 
    + fixed coordinates look small 
    + application must adapt to situations where user have multiple displays with varying resolution 
    + backing store and pixmap buffers become quite large so rendering may slow down 

- window support dpi awareness level 
    + unaware
    + system level 
    + per monitor 
    by default qt5 is per monitor awareness <application> -platform windows:dpiawareness=0,1,2
    
- migrate existing application 
    + always use qreal versions of QPainter drawing API 
    + size windows and dialogs in relation to the screen size 
    + replace hard-coded sizes in layouts and drawing code by values calculated from font metrics or screen size 
    
- glossary of high dpi 
device independent pixels, used by application subject to scaling by operating system or qt 
device pixedls, pixels of the display device 
device pixel ratio, scale factor applied by the operating system or qt 
logical dpi, reslution used for converting font sizes defiend in points to font size in pixels 
physical dpi, physical resolution obtained by dividing the size of the monitor by the number of pixels 
retina display, is a brand name used by apple for screens have a highter pixel desity than their previous models 
user space, the coordinate space the application uses 
    
- reference 
http://doc.qt.io/qt-5/highdpi.html

# Configuration Projects 

# Building for Multiple Platforms 
- when you run application you automatically build and deploy it first 
    + build and run kit selector Build > Open Build and Run Kit Selector to select the build and run kit.
    
    + choose build, select Build > Clean All or Clean Project
    
    + run qmake to generate new makefiles Build > qmake 
    
- specifying build settings 
    + create debug release building setting by default 
    + specify build settings in the Project mode 
    
- editing build configuration 
    
make in-source builds the default options for all project Tools > Options > Build & Run > General, and enter a period (.) 
    
- starting external processes, qmake, Make, Command, or Executable. It is either derived from the project or specified manually. 
    
- using environment variable Build Environment > Details in the Build Settings. Environment variables are referenced using the native syntax: $VARNAME or ${VARNAME} on Unix and %VARNAME% on Windows

- Qt creator variable select variables and do not need in quotes 
- build steps 
    + change setting for qmake 
    
    + override the shell command that Qt Creator construct by default 
    + generated debug symbols 
- adding custom build steps in build setting Add Build Step > Custom Process Step
- executing custom commands (commercial only )
- clean steps, add a clean step using make or custom process 
- build environment 
- batch editing 
    + modify environment in the Edit Environment dialog.
    + TEST sets the value of the TEST variable 
    + add a variable to environment enter the variable name and value. in the Edit Environment dialog.
    
- clean system environment will discard the current environment and create a clean system environment
    
- To use Qbs to build a project, you must create a .qbs file for the project. You can use Qt Creator to create a C or C++ project that is built with Qbs

- specifying Run Settings Projects > Build & Run > Run
    + creating run configuration for subprojects 
    specify the following variable in the .pro file of the SUBDIRS project: CONFIG += qtc_runnable
    
    subdirs template specifies the names of all subdirectories or project files that contain parts of the project that need to be built.
    
    in .pro file 
    SUBDIRS = kernel \
          tools \
          myapp
    
    + for linux device 
    + for qnx 
    + for embeded 
    + run environment
    + for quick UI projects 
    
- specifying dependencies 
in project select a project 
click dependencies 
select projects that must be built before the current project is built 

when create new project could select add the project as subproject of another project 

- add library to projects 
    + add libraries 
    on window debug and release version are placed in different folder. in Qt use suffix to separate the uses "d" for debug 
    
    + Projects pane, right-click the project name to open the context menu and select Add Library
    
http://doc.qt.io/qtcreator/creator-project-qmake-libraries.html

- sharing project settings 
you would share some of the values in the ProjectExplorer.Project.EditorSettings section.

You can then deliver the .pro.shared file to other developers or copy it to other development PCs.

updating shared shettings If you open the project for the first time and Qt Creator has not created a .pro.user file, the settings in the .pro.shared file take effect immediately.

- managing sessions File>Session Manager>Restore last session on startup 
a session is personal 

- using other build systems 
    + setting up a cmake project 
    + setting up a Qbs project 
    + setting up an autotools project 
    + setting up a generic project, use Qt Creator as a code editor to fully control the steps ad comands used to build the project 
    
http://doc.qt.io/qtcreator/creator-project-other.html




# Qbs manual 
http://doc.qt.io/qbs/index.html

# Running on Multiple Platforms 
- reference http://doc.qt.io/qtcreator/creator-running-targets.html
- check connection on linux devices 

# Deploying to Mobile Devices 

# Connecting Mobile Devices 

# ActiveX in Qt 
http://doc.qt.io/qt-5/qt-activex.html

# Example and Tutorials 
http://doc.qt.io/qt-5/qtexamplesandtutorials.html
        
# Qt Creator Manual 
http://doc.qt.io/qtcreator/index.html

# Qt for windows deployment 
- reference 
http://doc.qt.io/qt-5/windows-deployment.html

# Qt for window specific issues 
- reference 
http://doc.qt.io/qt-5/windows-issues.html
        
# Qt Mac Extras 
http://doc.qt.io/qt-5/qtmacextras-index.html
        
# Build Qt from source  
- reference 
http://doc.qt.io/qt-5/build-sources.html        

# Qt Test 
http://doc.qt.io/qt-5/qttest-index.html

# Running Autotests 
http://doc.qt.io/qtcreator/creator-autotest.html
    
# qmake manual 
- reference http://doc.qt.io/qt-5/qmake-manual.html

# Analyzing Code 
- in the analyze mode in mode selector 
    + QML profiler 
    + Valgrind code analysis tool 
    + clang static analyzer 
    + cpu usage analyzer 
- reference 
http://doc.qt.io/qtcreator/creator-analyze-mode.html

# Qt GUI 
- provide classes for window system integration, event handling, OpenGL and OpenGL ES integration, 2D graphics, basic imaging, font and text 
- reference 
http://doc.qt.io/qt-5/qtgui-index.html

    
# Qt reference pages
http://doc.qt.io/qt-5/reference-overview.html
    
    
    
    
    
    
    
    
    
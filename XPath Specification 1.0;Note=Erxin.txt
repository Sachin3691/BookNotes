XPath Specification 1.0;Note=Erxin

# introduction and reference 
- https://www.w3.org/TR/1999/REC-xpath-19991116/


# location paths
- special case of expression 

- two types of locations path 

[1] LocationPath ::= RelativeLocationPath|AbsoluteLocationPath	
[2] AbsoluteLocationPath ::= '/' RelativeLocationPath?|AbbreviatedAbsoluteLocationPath	
[3] RelativeLocationPath ::= Step | RelativeLocationPath '/' Step |  AbbreviatedRelativeLocationPath

- location step has three parts 
    + an axis 
    child:: 
    parent::
    descendant::, Selects all descendants (children, grandchildren, etc.) of the current node
    ancestor::, Selects all ancestors (parent, grandparent, etc.) of the current node
    following-sibling::
    preceding-sibling::, contains all the preceding siblings of the context node; if the context node is an attribute node or namespace node, the preceding-sibling axis is empty
    following::
    preceding::, contains all nodes in the same document as the context node that are before the context node in document order, excluding any ancestors and excluding attribute nodes and namespace nodes
    attribute::
    namespace::, contains the namespace nodes of the context node 
    self::, contains just the context node itself 
    descendant-or-self::, contains context node and the descendants of the context node 
    ancestor-or-self::, Selects all ancestors (parent, grandparent, etc.) of the current node and the current node itself
    
AxisName	   ::=   	'ancestor'	
| 'ancestor-or-self'	
| 'attribute'	
| 'child'	
| 'descendant'	
| 'descendant-or-self'	
| 'following'	
| 'following-sibling'	
| 'namespace'	
| 'parent'	
| 'preceding'	
| 'preceding-sibling'	
| 'self'
    
    + an node test, Every axis has a principal node type. If an axis can contain elements, then the principal node type is element; otherwise, it is the type of the nodes that the axis can contain

    A node test * is true for any node of the principal node type
    
    child::text() will select the text node children of the context node. 
    
    + zero or more predicates, A PredicateExpr is evaluated by evaluating the Expr and converting the result to a boolean
    
    An axis is either a forward axis or a reverse axis. 
    
        * An axis that only ever contains the context node or nodes that are after the context node in document order is a forward axis.
    
        * An axis that only ever contains the context node or nodes that are before the context node in document order is a reverse axis. Thus, the ancestor, ancestor-or-self, preceding, and preceding-sibling axes are reverse axes; 
    
    Predicate	   ::=   	'[' PredicateExpr ']'

    + syntax for a location step is the axis name and node test separated by a double colon, followed by zero or more expressions each in square brackets
    
    + expanded-name, which is a pair consisting of a local part and a namespace URI
    
    Two expanded-names are equal if they have the same local part, and either both have a null namespace URI or both have non-null namespace URIs that are equal.
    
    + document order, defined on all the nodes in the document corresponding to the order in which the first character of the XML representation of each node occurs

- abbreviated syntax examples 
para selects the para element children of the context node

* selects all element children of the context node

text() selects all text node children of the context node

@name selects the name attribute of the context node

@* selects all the attributes of the context node

para[1] selects the first para child of the context node

para[last()] selects the last para child of the context node

*/para selects all para grandchildren of the context node

/doc/chapter[5]/section[2] selects the second section of the fifth chapter of the doc

chapter//para selects the para element descendants of the chapter element children of the context node

//para selects all the para descendants of the document root and thus selects all para elements in the same document as the context node

//olist/item selects all the item elements in the same document as the context node that have an olist parent

. selects the context node

.//para selects the para element descendants of the context node

.. selects the parent of the context node

../@lang selects the lang attribute of the parent of the context node

para[@type="warning"] selects all para children of the context node that have a type attribute with value warning

para[@type="warning"][5] selects the fifth para child of the context node that has a type attribute with value warning

para[5][@type="warning"] selects the fifth para child of the context node if that child has a type attribute with value warning

chapter[title="Introduction"] selects the chapter children of the context node that have one or more title children with string-value equal to Introduction

chapter[title] selects the chapter children of the context node that have one or more title children

employee[@secretary and @assistant] selects all the employee children of the context node that have both a secretary attribute and an assistant attribute

    + syntax 

[10]   	AbbreviatedAbsoluteLocationPath	   ::=   	'//' RelativeLocationPath	
[11]   	AbbreviatedRelativeLocationPath	   ::=   	RelativeLocationPath '//' Step	
[12]   	AbbreviatedStep	   ::=   	'.'	
| '..'	
[13]   	AbbreviatedAxisSpecifier	   ::=   	'@'?



# Expressions 
- basic, variable reference 
- function call 
- node sets, Predicates are used to filter expressions in the same way that they are used in location paths

For example, preceding::foo[1] returns the first foo element in reverse document order, because the axis that applies to the [1] predicate is the preceding axis; by contrast, (preceding::foo)[1] returns the first foo element in document order, because the axis that applies to the [1] predicate is the child axis.

- booleans 

First, comparisons that involve node-sets are defined in terms of comparisons that do not involve node-sets; this is defined uniformly for =, !=, <=, <, >= and >. 

Second, comparisons that do not involve node-sets are defined for = and !=. 

Third, comparisons that do not involve node-sets are defined for <=, <, >= and >.


operators are all left associative. For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false

- number, A number can have any double-precision 64-bit format IEEE 754 value

- string , A single character in XPath thus corresponds to a single Unicode abstract character with a single corresponding 

- lexical structure, tokenizing the longest possible token is always returned 

ExprToken	   ::=   	'(' | ')' | '[' | ']' | '.' | '..' | '@' | ',' | '::'	
| NameTest	
| NodeType	
| Operator	
| FunctionName	
| AxisName	
| Literal	
| Number	
| VariableReference


# Core function library 
- node set function 
number last() 
number position() 
number count(node-set)
node-set id(object), object will be convert to string 
local-name(node-set?), returns the local part of the expanded-name of the node 
string namespace-uri(node-set?), namespace uri of the expanded-name of the node 
string name(node-set?), a qname representing the expanded-name,  name function will be the same as the string returned by the local-name function except for element nodes and attribute nodes.

- string function, A node-set is converted to a string by returning the string-value of the node in the node-set, The boolean false value is converted to the string false. The boolean true value is converted to the string true

string concat(string, string, string*)
boolean starts-with(string, string)
boolean contains(string, string)
string substring-before(string, string)
string substring-after(string, string)
string substring(string, number, length?)
number string-length(string?), no argument then return the length for context node 
string normalize-space(string?), returns the argument string with whitespace normalized by stripping leading and trailing whitespace and replace sequences of whitespace by a single space 
string translate(string, string, string), returns the first argument string with occurrences of characters in the second argument string replaced by the character at the corresponding position in the third argument string. translate("bar","abc","ABC") returns the string BAr.

- boolean function 
boolean boolean(object)
boolean not(boolean)
boolean true()
boolean false() 
boolean lang(string), The lang function returns true or false depending on whether the language of the context node as specified by xml:lang attributes is the same as or is a sublanguage of the language specified by the argument string

- number functions 
number number(object?), convert to number
number sum(node-set), returns the sum, for each node in the argument node-set
number floor(number)
number ceiling(number)
number round(number)


# Data model 
- The tree contains nodes. There are seven types of node:

root nodes

element nodes, An element node may have a unique identifier (ID). This is the value of the attribute that is declared in the DTD as type ID

text nodes, CDATA section is treated as character data. Thus, <![CDATA[<]]> in the source document will treated the same as &lt;. Both will result in a single < character in a text node in the tree

attribute nodes

namespace nodes, Each element has an associated set of namespace nodes, one for each distinct namespace prefix that is in scope for the element (including the xml prefix, which is implicitly declared by the XML Namespaces Recommendation

processing instruction nodes, There is a processing instruction node for every processing instruction, except for any processing instruction that occurs within the document type declaration

comment nodes,  <!-- or the closing -->


    
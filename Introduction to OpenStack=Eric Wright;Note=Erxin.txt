Introduction to OpenStack=Eric Wright;Note=Erxin

# introduction
- author
DiscoPosse.com

twitter
@DiscoPosse

We starts as always as the beginning -- James Lipton

- about the course
    + could and virtualization concepts
    + origins of openStack
    + openStack deployment
    + what's new in the latest release?
    + open stack core services
    + openstack storage services
    + openStack Distributions
    
- What you will need for the course
    + understanding of virtualization
    + Conceptual knowledge of cloud computing

- Introduction to cloud concepts
    + I don't need a hard disk in my computer if I can get to the server faster...carrying around these non-connected computer is byzantine comparison

    + cloud computing versus virtualization, traditional server deployments
    + Virtualization
    Consumer -> IT Department
                |
                V
    Virtual Servers
    Hypervisor(vShere, KVM, Xen etc...)
    Physical hardware, a pool of compute power
    + traditional server deployments
    + What is a cloud
        * On demand
        * Elastic
        * Self Service
    
    + On-Premises Computing Service Stack, traditional, also call this "On-Prem"
    Applications
    Data
    Runtime
    Middleware
    O/S
    Virtualization
    Servers
    Storage
    Networking

- Understanding *-as-a-Service
    + used to describe the control layers in the computing stack
    + underlying services are abstracted
    + consumers do not have to worray about the lower layers
    + more focus on making "agnostic" service layers
    + infrastructure as a service IaaS
    Consumer Controlled <  Application
                         |...
                         - OS
    Service Provider Controlled < Virtualization
                                |...
                                - Networking

    + Platform as a service
    Consumer Controlled <  Application
                         |...
                         - Data
    Service Provider Controlled < Runtime
                                |...
                                - Networking

    + future abstraction up to the application layer, business consumer build apps

    + anything as a service
        + Firewall
        + load balancing
        + database
        + desktop
        + Disaster

- public, private and hybrid cloud
    + public
    service provider cloud
    |
    firewall
    |
    V
    consumer

    + private 
    firewall
    |
    private cloud
    ^
    |
    consumer
    
    + Hybrid cloud
        * Service Provider cloud <---vpn --> On premises cloud
                |                              A
                secure hybrid cloud  ----------+
                A
                |
                consumer
    
    you could move your work load as you needed

- programmatic API usage
    + no need to isntall binary applications
    + common methods to access resources
    + open access regardless of platform
    + no strict language requirements(e.g. python, ruby, c++, etc)
    
- REST is best
    + Rest(REpresentational State Transfer)
    + based on the http verbs
    + follows the CRUD model
    create read update delete
    
- Northbound and Southbound, make everything api base
    + APIs are exposed in two directions
    + Service consumers use Northbound APIs
    + Southbound APIs allow for further abstraction
    + programmatic control of hardware and software
    + less rigidity
    
- layering and api access
consumer
|
V
your cloud, will consume the compute and storage services
|
V
compute, pool of compute resources
|
V
storage, pool of storage resources
    
all the throw REST api   
    

# Origin of OpenStack
- openstack.org
we wanted a community where people with similar philosophies about cloud architecture and open-source software can openly collaborate together. we believe in open source, open design, open development and an open community that is fully transparent. not a cathedral, a bazaar

- where it began: NASA and rackspace
    + debuted in 2010
    + openStack evolved from a partnership project with Rackspace and NASA
    + combined from the NASA Nebula computing platform and Rackspace Cloud Files platform
    + Launched as a fully open cloud platform
    
    the first edition of OpenStack
- the openstack foundataion
    + fully supported Ecosystem
    desinged to promote openness, transparency and enable growth through collaboration
    + focus in all areas including development, deployment, and ensuring collaboration between parterns
    + not without its challenges because of potential commercial interest
    + import focus on open technology and methodologies
    
    + foundation
        * tech committee
        13
        * board of directors
        * user committee
        
- OpenStack Developer Ecosystem
    + comprised of many thousands of contributors
    + contributors include individual developers
    + company development
    + over 70000 code contributions
    + growing every month
    
- Releases
    + are named alphabetically 
    + rapid release cycles with continuous integration
    Plan -> Develop -> Test -> Release 
                A                |
                +---------------- +
       
    + release dates, 2014 October, Juno 
    
- release cycles
            Your Application
dashboard --compute -- networking --- storage ----> dashboard
            |           |               |
            openStack shared services
            
modular design to provide flexibility 
    
interoperability to internal and 3rd party products

API driven components throughout

each project has its own project team lead(PTL)

- OpenStack Project Terms
openstack           openstack       openstack-admins
project                             project lead
project-bugs        project
project-core                        release manager
project-drivers     series
    
    + core projects are considered fully supported
    + incubation projects are new features
    + many projects under development
    + testing regimen determined by project status
    
    
# OpenStack Deployment
- requires a host OS
- requires a database service
mysql, free and open source

- requires a message queuing (mq) service
- requires L2/L3 networking
- quickTip, open stack often uses a type 2 hypervisor model 
os
|
hypervisor
|
hardware
type 1
(native bare metal)

os
|
hypervisor
|
os
|
hardware
type2
hosted

- bare metal deployment
    + physical hardware deployed for openstack components
    + services can be co-located for smaller deployments
    + scale-out model across physical devices and datacenters

- nested virtual deployment
    + layered using another
    hypervisor, run a hypervisor on physical server
    deploy all openstack service and nodes into hypervisor
    + most commonly used for lab deployments
    + allows for multiple environments by leveraging the existing hypervisor capabilities
  
    
# OpenStack Core Services
- getting started with openstack key services
core services that drive the openStack cloud

- minimal requirement including 
    + identity services
    + compute services
    + image services
    + networking services
- building your openStack key services
    + host OS
    + pre-requisites
    + identity
    + compute 
    + image
    + networking
    
- keystone, identity service
    + who are you and what do you want to do
    + authentication
    + authorization
    + includes
        * users
        * services
        * endpoints, each server is a service endpoint
    + uses tokens to authenticate and maintain session state information
    
- OpenStack identity workflow
user --credentials sent --> keystone server --confirm credentials, create token
|
+-------> compute token sent with request checks against policy, performs authorized action

- understanding tenants
    + tenants are logically separated containers within your OpenStack cloud
    
    they can only access their particular unit 
    + multi-tenancy allows for secure isolation using keystone
    + tenants can use global objects
    + tenants can create custom objects within their tenant environment 
    + security can be manage within the tenant also for granular controls
    
- glance, image service, virtual machine image, prebuild, can be managed globally and per tenant
    + users can be authorized to upload custom images
    + store images in swift, clinder or in the native file system 
    + can store remotely(e.g AWS S3)
    
 myCyclingStore.com image management

- Nova, is the control plan the manage platform layer for the hypervisor 
openstack is a cloud ecosystem but requires a hypervisor for the compute platform

- openStack compute service(Nova)
    + compute platform to run out guest machiens
    + boots instances from our glance images
    + multi-hypervisor support 
        * open source 
        KVM, Xen, 
        * commercial 
        vShpere, Hyper-V
    
- currently requires separate nova instances per hypervisor
- regions, aggregates and availablity zones
    + regions are logical pools of openstack services
    + aggregates are groups of openStack nova endpoints based on characteristics
        * ssd backed
        * 10 GbE NICs
        * 12 core processors
        
- availability zones are groups of OpenStack Nova endpoints based on location 
    + Toronto
    + means physical regions
    
Keystone, create logical region inside keystone
    + provision end point services to each regions
    SWIFT, GLANCE, CINDER NEUTRON
    
    inside regions contain availability zone, inside availability zone deployment nova endpoints
    
    + some nova endpoint can be different logical pool such as SSD, 10GE, SATA and so on
    
Horizon

- Nova networking
    + networking inside nova provides a greate feature set of traditional virtualized networking
        * L2/L3
        * DHCP
        
    + different types if IP networks are supported with Nova
        * flat networking, dedicated subnet with IP information injected to instances at boot
        * flat DHCP, allocate ip USING DNSMASQ
        * VLAN manager
    + floating IP addresses for public ffacing networks
    
- network types physical router 
    
    + single flat model

tenantA     tenanatB 
vm1         vm1
30.0.0.2    30.0.0.3
|           |
shared net
30.0.0.0/22
|
physical router

    + multiple flat model
    
tenantA     tenanatB    
vm1         vm1         
30.0.0.2    30.0.0.3            
|           |           
shared net             shared ...     shared...
30.0.0.0/22
|                       |             |
physical router     <---+  <----------+

    + flat and private model
    +--private-net--+
    10.0.0.0/24
    |               |
tenantA     tenanatB    
vm1         vm1         
30.0.0.2    30.0.0.3            
|           |           
shared net              ...     ...
30.0.0.0/22
|                       |       |
physical router
    
each tenant can be give a router to do more detail control
    
    +--private-net--+
    10.0.0.0/24
    |               |
tenantA     tenanatB    
vm1         vm1         
30.0.0.2    30.0.0.3            
|           |           
shared net              ...     ...
30.0.0.0/22             |       |
|                       |       |
provider router
|
external net
|
physical router
    
    the tenant can have save IP between different virtual router
    
- the rumors of my death are been greatly exaggerated -- nova networking
    + early reports prior to the havana release included nva networking would be deprecated
    + plans for deprecation to lead customers to neutron(then quantum) were discussed
    + the community spoke and the nova networking lives on 
    
- neutron, openstack networking
    + introduced as Quantum in the Folsom release as core project
    + first "software defined networking" stack for openStack
    + later renamed to Neutron with the Havana release due to the trademarked name
- nova networking limitations
    + limited by layer 2 boundaries
    + scalability limitations
    + VLAN limitations(4094 due to the 802.1q standard)
    + interoperability limitations
- Along came Neutron, Neutron node, this is a full SDN platform
    + stretched VLAN and overlay networking supported
    + lifts limitations from nova networking model
    
- neutron and 3rd party vendors
    + modular layer 2 plugin framework(ML2) for maximum flexibility and interoperability
    + multiple topologies 
    local, flat, VLAN, GRE, VXLAN
    + able to tap into existing physical networking builds with ease and less dependencies on intermediary drivers
    

# Horizon Dashboard
- two types of command interfaces in the world of computing, good interfaces and user interfaces
- OpenStack Dashboard, project Horizon
    + visual control panel for our services
    + simple self-service design
    + multi-platform delivery
    + leverage authentication and authorization platform
    
- let's have a look at Admin interface
    + Admin demo
    + each distribution of openstack have is own customize user interface
    + Dash panel demo
    
        * Overview
        * Hypervisors for nova
        * instances
        * volumes
        * flavors
        * images
        * defaults
        * system info
        services
        computer services
        avaliable pool
        * Identity panel
        * project
        * users
        services have its users
        
        * if run under neutron
        will display network and router informaton
    
- user demo of Horizon
    + a high level view of the overall environment
    + each project has a horizon menu entry and can be managed
    + all done using keystone for authenticaton/authorization
    + APIs are used for every action, every single project have separate api
    + as features are added, horizon view is also added
    
- what's is cloud
    + on-demand
    + elastic
    + self service
    
- the openstack user experience, there are a few of types
    + overview
    + instances
    overview, log, console
    + volumes
    + images & snapshots
    + access & security, store key pair of ssh, floating IP
    every openstack project can be access by api throw the project id(guid)
    

# OpenStack Storage Services
- storage can be confusing to some who are new to openstack
- there are two storage projects
    + cinder
    + swift
    + there are three types of storage you will hear of
        * Ephemeral
        nova instances are booted with ephemeral volumes
        
        terminating your instance will permanently remove the machine
        
        size defined by the flavor chosen at boot
        
        default flavors
        m1.tiny 512mb, 1vcpu, 1 gb volume
        m1.small 2048, 1v cpu, 10 gb volume
        m1.medium.4096, 2v cpu, 20 gb volume
        m1.large. 8192, 4vcpu, 80gb volume
        16384mb, 8vcpu, 160 gb volume
        * Block storage, cinder block
        * Object
- OpenStack Block Storage, cinder
    + similar to AWS Elastic block storage(EBS)
    + block volumes are created and attached to instances
    + block storage volumes survive the termination of an instance 
    + switch data to os
    + vendor support for cinder
    multiple vendor drivers for Cinder
    + features list provided at the OpenStack web site
    + growing features with enhancements being added regularly
    https://wiki.openstakc.org/wiki/CinderSupportMatrix/

    + cinder volumn presentation
    shored on our shared storage environment
    + presented to the instances using iSCSI
    + attach/Detach
    + clone/snapshot of the cinder instance is ok
    + boot from volume options

- OpenStack Swift, object storage project
    + Often run as a standalone product/project
    + Used for web object storage similar to Amazon S3
    + Utilizes the JBOD storage method to distribute objects
    + Only project with in-place upgrade to Havana release
    + able to store multiple file types up to 5gb
    + configurable to store larger files
    + uses segmentation of file and stores the file info in a manifest
    + swift architecture
    internet --> auth node --> public switch proxy node --> private switch  --> storage nodes
    
    get a file use get request to retrieve the preivous saved object such as a movie file or photoshop file
    
    + zones and containers and rings oh my!
    partition is assigned to three disk s in different zones
    
    zone1, zone2, zone3, zone4, zone5
    
    if zone 4 fail, the contains will be dispatch to other zone 1 to 5
    
    partition -->
    partition --> the ring --> storage node
    partition -->
    
    cinder support for vendors, when you design your openstack solution need to consider the versonr
    
# New Services in Havana
- heat framework is similar to the Amazon CloudFormation
- we design "stacks" to deploy and manage
- heat templates are in HOT format
- easily readable format with parameters and constraints
- management objects for AWS, Rackspace
- demo heat template
heat_template_version:2013-05-23
description: Simple template to deploy a single compute instance

resources:
    my_instance:
        type:OS::Nova::Server
        properties:
            key_name:my_key
            image:F18-x86_64-cfntools
            flavor:m1.small

- OpenStack Telemetry: Ceilometer            
    + metering for billing nad usage
    + meant as a feeder to billing systems for chargeback/showback
    + alarms triggered based on performance statistics
    + completely API driven
    + provides a information from all of the openstack projects

    notification bus
    A         A             A
    |         |             |
    |       compute     networking  block storage       image   object storage
    |         api          api
    |          A            A
    |          |            |  ...
    ceilometer <----polling-+
    collector &agent
        publishing pipline --> publishing
        
- Auto-scaling with heat and ceilometer    
    + ceilometer end to end
    + the marriage of knowledge and action
    ceilometer can be used to monitor your openstack environment
    thresholds can trigger heat orchestration to auto-scale components
    intelligence engines can be integrated to read real usage details
    beginning of significant enhancement on internal orchestration
    
- general enhancements in Havana
    + overall improvements
    + significant enhancements to horizon dashboard
    neutron visualizations
    self-service password change
    
    + introduction of neutron VPNaaS and FWaaS
    + keystone backend options increased (better LDAP support)
    + API alignments with RESTful noun-verb format
    + more general features in Nova, Cinder, Swift
    + Much, much more
    https://wiki.openstack.org about the Havana
            
            
# OpenStack Distributions
- OpenStack Vendor Distribution
    + Open Source Vendors
    community contribute codes
    + many commercial vendors provide openstack options that they support
    + public cloud vendors are building more hybird and private cloud 
    + growing numbers of popular private cloud options with commercial openstack support
    rackspace, redhat, mirantis
    
- open distributions of openstack 
    + non- commercial options, which is open
        * there are numerous open source, freely available options
        * commercial support generally comes from a partner or consultant
        * more of a DIY type of deployment
        
        stackOps, OpenShift, Devstack, Canonical
        
    + public openstack hosting
        * there are many options for public openstack hosting platforms outside of the three private/hybrid options discussed
        
        piston cloud computing
        canonical
        rackspace
        cloudscaling
        suse
        mirantis
        redhat
        
    + common free platforms
        * ubuntu-freely available
        * centOs-freely available for server host environment, redhat option
        + canonical and RDO, support by redhat
        RDO
        Canonical
        CentOs
        Ubuntu
- Orchestration for OpenStack
    + DevOps orchestration
    + native support for heat which orchestrates within the environment
    + new "Ironic" project will support bare metal deployments
    + many well used, well supported options that exits in DevOps today, common used platforms 
    puppet labs,
    Chef, 
    Juju, orchestration platform

- contributing to openstack
    + how does someone get involved?
    openstack contributor
    
    + contributing to the code base
        * projects
        * orchestration modules
        * drivers and plugins
        
    + contributing to the documentation
        * project docs
        * operational guides
        
    + openstack training 
        * courses and materials
        * sharing information


# Course Summary
- openstack core projects
identity, keystone
image service, glance
compute, nova
networking, neutron
block storage, clinder
object storage, swift
horizon, dashboard
telemetry, ceilometor
orchestration, heat
    
    
    
    
    
    



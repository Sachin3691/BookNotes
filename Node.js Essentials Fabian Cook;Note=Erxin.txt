Node.js Essentials Fabian Cook;Note=Erxin

# Getting started
- manage your nodejs version 
    + install nodejs 
    + install n package 
    $ npm install -g n 

    https://www.npmjs.com/package/n
    
    currently it is not support on window 

    Simple flavour of node/iojs binary management
    
- hello require 
    + node.js will automatic wrap the loaded js code in anonymouse function so the files should be loaded with require 
    
    + expose something from a js file in node.js is uses module.exports, the shorthand is directly use exports 
    
    
- hello npm 
package.json, is used to define the module dependencies 

use npm install <pkg> --save to install a package and save it as a dependency in the package.json file 

    + set start up script by set the start property in the package.json 
"scripts":{
    "test": ...,
    "start": "node server.js"
}

    + add node_modules folder to git ignore when use git as version control 


# Simple HTTP 
- http module 
var http = require("http");

var server = Http.createServer( );

- introducing routing 
$ npm install router 

- create a http server 
/* server.js */
var Http = require( 'http' ),
    Router = require( 'router' ), 
    server,
    router; 

router = new Router( );

server = Http.createServer( function( request, response ) {
    router( request, response, function( error ) {
        if( !error ) {
            response.writeHead( 404 );
        } else {
            //Handle errors
            console.log( error.message, error.stack );
            response.writeHead( 400 );
        }       
        response.end( '\n' );
    });
});
    
server.listen( 8080, function( ) {
    console.log( 'Listening on port 8080' );
});

REST, representation state transfer 

HTTP method,        endpoint,       used to 
POST                /message        create message     
GET                 /message/:id    read message
DELETE              /message/:id    delete message 
GET                 /message        read multiple messages 

function createMessage( request, response ) {
    var id = counter += 1;
    console.log( 'Create message', id );
    response.writeHead( 201, {
        'Content-Type': 'text/plain'
    });
    response.end( 'Message ' + id );
}
router.post( '/message', createMessage );


# authentication 
- bearer tokens, use JSON web token(JWT)

http://jwt.io/

using the following command to install 
$ npm install jsonwebtoken 

    + genereate a token 
var JSONWebToken = require('jsonwebtoken'), 
Crypto = require('crypto');

var generateToken = function(request, response){
    var payload = {
        id:user.id,
        username:user.username 
    }
}

var secret = Cypto.randomBytes(128).toString('base64');
var token = JSONWebToken.sign(payload, secret);

request.user.secret = secret 
response.send(token);

app.post('/login',
Passport.authenticate('local', {session:false}),
generateTokenHandler);


# Debugging 
- logging 
console.log 

- there is another useful package called bunyan it wraps many logging method to one 
$ npm install -g bunyan 

var buyan = require('bunyan').logger;

logger = buyan.createLogger({name:'logger-name'});
logger.info('message');

- async use process.nextTick

- use library q to do async call 


# Configuration 
- JSON files 
- node.js you can access environment variables using process.env when using env suggest prefix with your own namespace 

- arguments 
process.argv 


# LevelDb and nosql 
- level db 
$ npm install level 

- mongodb 
$ npm install mongodb 

    + connect to mongodb, connection string 
    mongodb://<dbuser>:<dbpassword>@<ds>.mongolab.com:<port>/<db>
    
    
# Socket.IO 
- install socket.io 
$ npm install socket.io 

- authentication 
$ npm install socketio-jwt jsonwebtoken chance 


# creating and deploying packages 
- create npm packages 
$ npm add user 

create a user 

- create a package 
$ npm init 

- publish 
$ npm publish 
to publish a existing package 

- install package 
$ npm install package-name 

- incease patch version 
$ npm version patch 

- add ignore 
.npmignore 

support glob patterns 
use / to specify a directory 


# Unit testing 
- install mocha 
$ npm install -g mocha 

http://mochajs.org 

- chai is a assert library, http://chaijs.com 

$ npm install chai 

- stubbing method, sinon library provide many helpers 
$ npm install sinon 

var sinon = require('sinon');

var returnOriginal = function(value){
    return value;
}

var spy = sinon.spy(returnOriginal);

result = spy(1);
console.log(result); //logs 1 

we could use spy to check if a function is called 

    + create a stub method 
var stub = sinon.stub().returns(42)
console.log(stub()); //log 42 


# Using more than javascript 
- coffeScript and typescript 

$ npm install coffee-script 















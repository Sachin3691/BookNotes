Learning WCF = Micbele Leroux Bustanmante; Note = Shang

服务是将来程序设计的发展方向，简单来说服务就是运行在服务器上的COM组件，将客户机上可能存在的问题统一到服务器上处理，提高安全性与移植性，只留出统一的接口作为客户机调用使用

服务契约标签
可以用于类或接口的定义，推荐使用在接口上便于管理与继承
[ServiceContract]
interface/class Name
{
	[OperationContract]
	region returnType functionName(){}
	region returnType functionName();
}
可以使用ServiceContract的name属性对服务类重命名，使得公开名称与实现类不一样; Namespace 属性来设置命名空间
[ServiceContract namespace = "newNameSpace" name = "newContractName"]
同样在OperationCotract中可以重新指定方法名

WCF服务需要宿主进程，也就是进行托管；例如可以使用IIS提供；或者其他应用程序中
在IIS中5.0要受到端口限制，并且所有的WCF要使用相同的关口号，好处是一次客户请求自动装入内存
IIS托管与经典的ASMX web服务托管相似，创建虚拟目录，并提供一个*.svc文件，例如：
<%@ ServiceHost
	Language = "C#"
	Debug	= "true"
	codeBehind = "~/App_Code/MyService.cs"
	Service = "MyService"
%>要求服务基地址必须与svc文件的地址保持一致
Web.Config文件，必须列出需要公开为服务的类型
自托管，自行管理宿主进程，可以运行在任何应用程序窗口中;创建方法是在Main 方法中调用ServiceHost类，实现接口ICommunicationObject, 使用 Uri类来指定服务基地址，或者在配置文件中写出；可以为相同的服务类注册多个宿主
Uri baseAddress0 = new Uri( "http..." );
Uri baseAddress1 = new Uri( "..." );
ServiceHost h0 = new ServiceHost( typeof(myServiceName), baseAddress0 );
ServiceHost h1 = new ServiceHost( typeof(myServiceName), baseAddress1 );
h0.open(); h1.open();
可以使用ServiceHost<T>类改进WCF提供的ServiceHost类
WAS托管，Windows激活服务

服务器通信方式
请求应答，request/replay; 即发即弃Fire-and-Forget




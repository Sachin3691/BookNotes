Dotguide;Note=Erxin

# introduction 
- run dot on a file called graph.gv 
$ dot -Tps graph.gv -o graph.ps 

digraph G {
    main -> parse -> execute;
    main -> init;
    main -> cleanup;
    execute -> make_string;
    execute -> printf
    init -> make_string;
    main -> printf;
    execute -> compare;
}

node or edge attributes are set off in square barckets. the node main is assigned shape box. 

- node, edge, graph attributes 
http://www.graphviz.org/doc/info/attrs.html

- node shapes 
nodes are drawn by default with shape=ellipse, width=.75 height = .5 and labelded by the node name 

1There is a way to implement custom node shapes, using shape=epsf and the shapefile attribute, and relying on PostScript output

need to contact the author 

- draw graph with attributes 
digraph G {
    size ="4,4";
    main [shape=box]; /* this is a comment */
    main -> parse [weight=8];
    parse -> execute;
    main -> init [style=dotted];
    main -> cleanup;
    execute -> { make_string; printf}
    init -> make_string;
    edge [color=red]; // so is this
    main -> printf [style=bold,label="100 times"];
    make_string [label="make a\nstring"];
    node [shape=box,style=filled,color=".7 .3 1.0"];
    execute -> compare;
}

Line 8 makes edges rom execute to make string and printf
Line 11 makes a bold edge labeled 100 times
make_string is given a multi-line label

skew is a floating point number (usually between 􀀀1:0 and 1:0)

- recursive structure is determined by the node
s label 
rlabel ! field ( ’j’ field )*
field ! boxLabel j ’’ rlabel ’’
boxLabel ! [ ’<’ string ’>’ ] [ string ]

digraph G {
    a -> b -> c;
    b -> d;
    a [shape=polygon,sides=5,peripheries=3,color=lightblue,style=filled];
    c [shape=polygon,sides=4,skew=.4,label="hello world"]
    d [shape=invtriangle];
    e [shape=polygon,sides=4,distortion=.7];
}

multi-line labels can be created by using the escape sequences \n, \l, \r to terminate lines that are centered or left or right justified 

draw html 

digraph html {
    abc [shape=none, margin=0, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
    <TR><TD ROWSPAN="3"><FONT COLOR="red">hello</FONT><BR/>world</TD>
    <TD COLSPAN="3">b</TD>
    <TD ROWSPAN="3" BGCOLOR="lightgrey">g</TD>
    <TD ROWSPAN="3">h</TD>
    </TR>
    <TR><TD>c</TD>
    <TD PORT="here">d</TD>
    <TD>e</TD>
    </TR>
    <TR><TD COLSPAN="3">f</TD>
    </TR>
    </TABLE>>];
}

sccmap decompose the graph into strongly connected components
tred compute transitive reduction (remove edges implied by transitivity)
gvpr graph processor to select nodes or edges, and contract or remove the rest of the graph
unflatten improve aspect ratio of trees by staggering the lengths of leaf edges

exploited to adjust node ordering by placing invisible edges (style="invis") where needed.

- drawing with constrain rank 
digraph asde91 {
    ranksep=.75; size = "7.5,7.5";
    {
        node [shape=plaintext, fontsize=16];
        /* the time-line graph */
        past -> 1978 -> 1980 -> 1982 -> 1983 -> 1985 -> 1986 ->
        1987 -> 1988 -> 1989 -> 1990 -> "future";
        /* ancestor programs */
        "Bourne sh"; "make"; "SCCS"; "yacc"; "cron"; "Reiser cpp";
        "Cshell"; "emacs"; "build"; "vi"; "<curses>"; "RCS"; "C*";
    }
    { 
        rank = same;
        "Software IS"; 
        "Configuration Mgt"; 
        "Architecture & Libraries";
        "Process";
    };
    node [shape=box];
    { rank = same; "past"; "SCCS"; "make"; "Bourne sh"; "yacc"; "cron"; }
    { rank = same; 1978; "Reiser cpp"; "Cshell"; }
    { rank = same; 1980; "build"; "emacs"; "vi"; }
    { rank = same; 1982; "RCS"; "<curses>"; "IMX"; "SYNED"; }
    { rank = same; 1983; "ksh"; "IFS"; "TTU"; }
    { rank = same; 1985; "nmake"; "Peggy"; }
    { rank = same; 1986; "C*"; "ncpp"; "ksh-i"; "<curses-i>"; "PG2"; }
    { rank = same; 1987; "Ansi cpp"; "nmake 2.0"; "3D File System"; "fdelta";
    "DAG"; "CSAS";}
    { rank = same; 1988; "CIA"; "SBCS"; "ksh-88"; "PEGASUS/PML"; "PAX";
    "backtalk"; }
    { rank = same; 1989; "CIA++"; "APP"; "SHIP"; "DataShare"; "ryacc";
    "Mosaic"; }
    { rank = same; 1990; "libft"; "CoShell"; "DIA"; "IFS-i"; "kyacc"; "sfio";
    "yeast"; "ML-X"; "DOT"; }
    { rank = same; "future"; "Adv. Software Technology"; }
    "PEGASUS/PML" -> "ML-X";
    "SCCS" -> "nmake";
    "SCCS" -> "3D File System";
    "SCCS" -> "RCS";
    "make" -> "nmake";
    "make" -> "build";
    .
    .
    .
}

This can be made strict by setting rank=source, which forces the nodes in the subgraph to be on some rank strictly

- advanced features 

node port is a point where edges can attach to a node 

Ports based on the 8 compass points "n", "ne", "e", "se", "s", "sw", "w" or "nw" can be specified for any node.

to specify ports in two way 
    + use an edge's headport 
a -> b [tailport=se]

    + node_name:port_name 
a -> b:se 

example 
a -> b:f0:se
will attach to the southeast corner of the box in record node b whose port name is f0

- clusters are drawn by a recursive technique, A cluster is a subgraph placed in its own distinct rectangle of the layout 

digraph g {
    node [shape = record,height=.1];
    node0[label = "<f0> |<f1> G|<f2> "];
    node1[label = "<f0> |<f1> E|<f2> "];
    node2[label = "<f0> |<f1> B|<f2> "];
    node3[label = "<f0> |<f1> F|<f2> "];
    node4[label = "<f0> |<f1> R|<f2> "];
    node5[label = "<f0> |<f1> H|<f2> "];
    node6[label = "<f0> |<f1> Y|<f2> "];
    node7[label = "<f0> |<f1> A|<f2> "];
    node8[label = "<f0> |<f1> C|<f2> "];
    
    "node0":f2 -> "node4":f1;
    "node0":f0 -> "node1":f1;
    "node1":f0 -> "node2":f1;
    "node1":f2 -> "node3":f1;
    "node2":f2 -> "node8":f1;
    "node2":f0 -> "node7":f1;
    "node4":f2 -> "node6":f1;
    "node4":f0 -> "node5":f1;
}

Binary search tree using records

- Drawing of records
- Hash table graph file
- Process diagram with clusters
- graph with edges on clusters 

digraph G {
    compound=true;
    subgraph cluster0 {
        a -> b;
        a -> c;
        b -> d;
        c -> d;
    }
    subgraph cluster1 {
        e -> g;
        e -> f;
    }
    b -> f [lhead=cluster1];
    d -> e;
    c -> g [ltail=cluster0,
    lhead=cluster1];
    c -> e [ltail=cluster0];
    d -> h;
}
Computer Vision with Python=Jan Erik;Note=Erxin

# Basic Image Handling and Processing
- PIL the python imaging library
http://www.pythonware.com/products/pil/.
- Color conversions are done using the convert() method
pil_im = Image.open('*.jpg').convert('L')

- convert images to another format
    + use the save() method, PIL can save images in most image file formats
    PIL will automatic determine the image format, if a conversion fail, a error message will display to the console

    + create thumbnails, use thumbnail() method, take a tuple specify the new size
    pil_im.thumbnail((128,128))

- useful short commands
plot(x,y)       #default blue solidline
plot(x,y,’r*’)  #reds tar-markers
plot(x,y,’go-’) #green line with circle-markers
plot(x,y,’ks:’) #black dotted line with square-markers

line style
’-’ solid
’- -’ dashed
’:’ dotted

marker
’.’ point
’o’ circle
’s’ square
’*’ star
’+’ plus
’x’ x

- convert a image to gray and show the contour outline to origin upper left corner
from PIL import Image
from pylab import *

#read image to array
im=array(Image.open(’images/empire.jpg’).convert(’L’))
#create a new figure
figure()
#don’tusecolors
gray()

#show contours with origin upper left corner
contour(im, origin=’image’)

axis(’equal’)
axis(’off’)

- get the image histogram data
The visualization of the (graylevel) image histogram is done using the hist()function.

figure()
hist(im.flatten(), 128)
show()

A little consideration, a little thought for others, makes all the difference.

- interactive annotation
ginput(), that let’s you do just that. Here’s a short example

- numpy, http://www.scipy.org/NumPy/

im=array(Image.open(’empire.jpg’).convert(’L’),’f’)

load the image and convert to greyscale and convert to float array

The value at coordinates i,j and color channel k are accessed like this
value=im[i,j,k]

im[i,:]=im[j,:]     #set the values of row i with values from row j
im[:,i]=100         #set all values in column i to 100
im[:100,:50].sum()  #the sum of the values of the first 100 rows and 50 columns
im[50:100,50:100]   #rows 50-100,columns 50-100(100th not included)
im[i].mean()        #average of row i
im[:,-1]            #last column
im[-2,:](orim[-2])  #second to last row

convert back to the PIL image
pil_im = Image.fromarray(unit8(im)
pil_im=Image.fromarray(im)

- image resizing
im2=interp(im.flatten(), bins[:-1], cdf)

histogram equalization
im2,cdf=imtools.histeq(im)

average images using themean() function

- PCA of images, principal component analysis, to apply PCA the image need to be converted to a one-dimensional vector

singular value decomposition (SVD) 

def pac(X):
    '''
    input X, matrix with training data stored as flattened arrays in rows
    return, projection matrix(with important dimensions first), variance and mean
    '''
    num_data, dim = X.shape
    mean_X = X.mean(asis=0)
    X = X - mean_X
    
    if dim > num_data:
        #PCA - compact trick used
        M = dot(X, X.T)
        e, EV = linalg.eigh(M)
        tmp = dot(X.T, EV).T
        V = tmp[::-1]
        for i in range(V.shape[1]):
            V[:,i] /= S
    else:
        #PCA - SVD used
        U, S, V = linalg.svd(X)
        V = V[:num_data] # only makes sense to return the first num_data
    # return the projection matrix, the variance and the mean
    return V, S, mean_X



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















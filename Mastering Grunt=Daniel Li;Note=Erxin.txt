Mastering Grunt=Daniel Li;Note=Erxin

# Preface 
- grunt.js is primarily used for devops integration


# Getting Started 
- introducing grunt, a simple to use task runner written with node.js 
- grunt will be used to automate the compilation of sass to css and coffeescript to javascript 
- install git 
- install node 
- install bower 
- install grunt 
$ npm install grunt
$ npm install -g grunt-cli

install grunt locally 
$ npm install --save-dev grunt 

- deploying a hello world page 
    + create grunt config file 
    var config = {};
    config['clean'] = {
        build: {
            options: {
                collapseBooleanAttribute: true,
                removeAttributeQuotes: true,
                removeRedundantAttributes: true,
                removeEmptyAttributes: true
            },
            files: [
                dot: true,
                src: [
                    'dist/*',
                    '!dist/.git'
                ]
            ]
        }
    };
    
    + the usemin pugin will involve the use of grunt-contrib-concat, grunt-contrib-uglify and grunt-rev plugins 
    config['useminPrepare'] = {
        options:{
            dest: 'dist'
        },
        html: 'src/index.html'
    };
    
    + modern browsers cache files locally using urls to save the load time


# developing a blog with jade and sass 
- jade, a node template engine, http://jade-lang.com. support layout, minix and embedded javascript 

- sass, is a css preprocessor and to minify and concatenate style sheets, http://sass-lang.com/ 

- concatenation and minification 
- grunt plugin 
grunt-contrib-watch
grunt-contrib-jade 
grunt-contrib-compass 

- configuring grunt-contrib-watch 
var config = {};
config['watch'] = {
    options: {
        nospawn: true
    },
    compass: {
        files: ['src/styles/{,*/}*.{scss,sass}'],
        tasks: ['compass:server']
    },
    jade: {
        files: ['src/templates/{,*/}*.jade'],
        tasks: ['jade:server']
    }
};

- implement the custom build grunt task, add following code block anywhere after the initialization of the config variable 
config['clean'] = {
    build:{
        files:[{
            dot:true,
            src:[
                'dist/*',
                '!dist/.git*'
            ]
        }]
    }
}

config['compass']{
    options:{
        sassDir:'src/styles/sass',
        cssDir: 'src/styles',
        importPath: 'src/bower_components',
        relativeAssets: false
    },
    dist: {},
    server:{}
}

config['coffee']{
    ...
}

$ grunt build 
to build a project 


# Making an employee management system 
- installing the required grunt plugins 
- implement the custom build grunt task 


# Final project simple builletin board system 
- insall necessary grunt plugins 
useminPrepare 
usemin
htmlmin
clean 
- writing mocha tsts using zmobie and assert 
- implement the custom test grunt task 
- implement the custom build grunt task 

# Best practices for modern web applications 
- search engine optimization 
    + using keywords efectively 
    come up with a set of keywords that are pertinent to your topic 
    research common search keywords related to your website 
    task an intersection of these two sets of keywords and reemptively use them across the website 
    
- header tags are powerful
- make sure to have alternatie attributes for images 
- enforcing clean urls 
http://www.example.com/post/24/golden-dragon-review

- blackline whenever safe and possible 
- handling http status codes properly 
- making use of your robots .txt and site map files 
- using grunt t reinforce SEO practices 
- form validation in the modern web world
- using client-side validation over error pages 
- differentiating required and optional information 
- avoiding confusing fields 
- using confirmation fields for pertinent data 
- using custom inputs for complex data types 
- preventing autovalidation with CAPTCHAs, More information can be found on reCAPTCHA's official website at http://www.recaptcha.net
- reinforcing data integrity with server-side validation 
- grunt to automate form testing 
- designing interfaces for the mobile generation 
- designing preemptively with mobile in mind 
< 480 px Smaller smartphones
< 768 px Small tablets and larger smartphones
> 768 px Larger tablets and desktops
< 320 px Older, low-resolution phones
> 1024 px Wide desktops

grid system 
    + twitter bootstrap 
    + zurb foundation 
    
- lazy load content using javascript 
- defer parsing of javascript, javascript file by embedding it directly into dom within a script tag, many libraries such as deferred, q and bluebird help to enable the deferred javascript 

- using grunt to reduce page load time 







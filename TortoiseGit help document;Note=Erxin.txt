TortoiseGit help document;Note=Erxin

# Introduction
- system require
- installation 

# TortoiseGit Daily Use Guide 
- authentication 
TortoiseGitPlink is recommended as SSH on window

you also want to use TortoiseGitPlink on Git Bash, create an environment variable called GIT_SSH with the path to the PuTTY plink.exe or preferably to TortoiseGitPLink.exe

It is also possible to use OpenSSH (shipped with Git for Windows, Cygwin, and Msys2). 
- context menus 
    + right drag files or folders to a new location inside working trees or when you right drag a non-versioned file or folder into a directory which is under version control
    
- common shortcut 
f1, f5, ctrl-a, ctrl-c, ctrl-f 

- By default Git does not save/cache credentials. However, you can configure a credential helper 

- create repository, right click and select create repository 

- clone, Load Putty Key checkbox, clone will auto load putty key file with Pageant. You can click ... to browse for a putty key file

- checking out a working tree. The Switch/Checkout dialog can be used to checkout a specific version to the working tree 

- committing your changes to the repository 
    + right click on the file and use Context Menu → Restore after commit. This will create a copy of the file as it is. T

- Context Menu → Compare with Base. Check the changes in the repository made by others using Context Menu → Show Differences as Unified Diff.

- A pull/fetch can be initiated by using TortoiseGit → Pull... or TortoiseGit → Fetch... . Fetching and pulling changes is also possible using the Sync dialog

If you check the Autoload Putty Key checkbox, a configured Putty key will be automatically loaded using Pageant. 

Tags has three states (git 1.9 and later): Checked: All tags as well as branches are downloaded (--tags is passed to git), unchecked: No tags are downloaded (--no-tags is passed to git), and third state: use default behavior (based on remote.<name>.tagopt setting). Tags has three states (prior to git 1.9): Checked

- Force (May discard known changes) This allows remote repository to accept a safer non-fast-forward push. This can cause the remote repository to lose commits; use it with care. This can prevent from losing unknown changes from other people on the remote. Since git does not have remote-tracking tags, tags cannot be overwritten using this option. This passes --force-with-lease option of git push command. 

- sync, The Sync Dialog provides an interface for all operations related with remote repositories in one dialog.

Local Branch: The source branch which will push/pull to/from other repository. If the current branch or the selected local branch has a remote tracked branch set, the remote branch and remote repository are automatically selected. A remote tracked branch can be set using the reference browser 

- Daemon, quickly share you local repository to others without pushing to a remote git repository. That's when you need to use TortoiseGit → Daemon.... 

runs Git Daemon that serves Git protocol at port 9418 (git://hostname/). 

- This section talks about the reference browser, which allows you to view and work with all refs (tags, branches, remote branches, stash and so on). 

can be opened using TortoiseGit -> Browser Reference

- Submodules Add option a foreign repository can be embedded into a dedicated subdirectory of the source tree. 

TortoiseGit -> Submodules Add 

- Submodule Sync: Synchronizes submodules' remote URL configuration setting to the value specified in .gitmodules.

- Log Dialog, TortoiseGit -> Show Log 

The top pane of the Log dialog has a context menu that allows you to access much more information. You can press the Shift key to see the extended menu with some more options. 

If you select exactly two references, you can choose how to combine them (showing especially both A and B "A B"; showing differences "A...B" or all commits between A and B "A..B"). 

You can also filter the path names in the bottom pane using the View → Hide unrelated changed paths 

If you also press SHIFT you can navigate through the selection history without selecting the last commits 

If you want to jump to a commit with a particular hash, you may do so by pressing Ctrl+V or Shift+Insert 

- Revision Graphs 

Each revision graph node represents a revision in the repository where something changed in the tree you are looking at. Different types of nodes can be distinguished by colour which can be configured using TortoiseGit → Settings 

If you opt to Context Menu → Compare Revisions you will be presented with a list of changed files. Double click on a file name to fetch both revisions of the file and compare them using the visual difference tool. 

If you select two revisions (Use Ctrl-left click), you can use the context menu to show the differences between these revisions.

- Viewing differences, explorer context menu and select TortoiseGit → Diff. 

 You will see these settings in the Comparing Version dialog (cf. Section 2.17.3, “Comparing Version”), as well as in the settings for TortoiseGitMerge. 
 
 Context menu → Compare revisions , or when you select a commit Context menu → Compare with previous version / Compare with working tree 
 
 - adding new file from context menu 
 - copying/moving/renaming 
 When you right-drag a file or folder from one working tree to another, or even within the same folder, a context menu appears when you release the mouse
 
 - ignoring files and directories, TortoiseGit → Add to Ignore List from the context menu
 
 - deleting, moving and rename 
 
 Renames and copies are automatically detected when showing the log. However, using the Git delete and move functionality the files are automatically removed from the Git index 
 
 move/rename with right click drag drop 
 
 dealing with filename case conflicts, If the repository already contains two files with the same name but differing only in case (e.g. TEST.TXT and test.txt), you will not be able to commit
 
 when the setting core.ignorecase is set to false (cf. Section G.3.27, “git-config(1)”). 

 - deleting unversioned file, Extended Context Menu → Clean up.... 
 
 - undo changes, TortoiseGit → Revert A dialog will pop up showing you the files that you've changed and can revert. Select those you want to revert and click on OK. 

Revert will only undo your local changes

Revert != "git revert" for files 
In the TortoiseGit naming a "revert" on a file is comparable to git checkout HEAD -- filename (or git checkout REVISION -- filename) for resetting a file to it's last (or a specific) committed state
 
- In order to remove untracked or ignored files from the working tree use TortoiseGit → Cleanup

- The reset dialog can be used to reset the current HEAD to the specified state and optionally also the index and the working tree.

- When you want to record the current state of the working directory and the index, but want to go back to a clean working directory, right click on a folder to pop up the context menu and then select the command TortoiseGit → Stash Save 

the context menu will be extended

- Bisect, you can use the bisect functionality. Right click on a folder to pop up the context menu and then select the command TortoiseGit → Bisect start

TortoiseGit → Bisect start. A dialog will pop up

 hit TortoiseGit → Bisect good , otherwise hit TortoiseGit → Bisect bad Git will proceed with the binary search 
 
- Branching/Tagging 
TortoiseGit → Create Branch... 

TortoiseGit → Create Tag... 

track is a checkbox with three values. If it is checked --track is passed to git on OK, if it is unchecked --no-track is passed to git on OK. The third state indicates, that neither --track nor --no-track is passed to git on OK - see branch.autosetupmerge configuration variable (Section G.3.27, “git-config(1)”) and --track parameter documentation for Section G.3.10, “git-branch(1)”. 

- Merge, wizard from that working tree using TortoiseGit → Merge.... 

- Cherry picking, cherry-pick, then right-click on one of the selected commits to pop up the context menu.

- TortoiseGit → Rebase, , squash means that the commit gets squashed/combined with the previous commit(s) which are located below in the list (with a lower ID). 

 space: shifts the state, s: skip, e: edit, p: pick, q: squash 
 
- Assume you are currently working on master branch, and wish to rebase feature branch onto master. Instead of switching to feature in advance, select the commit of feature in log list, Context Menu → Rebase

- Resolving conflicts 
<<<<<<< yours
    your changes
=======
    changes from the code merged
>>>>>>> their

TortoiseGit → Edit Conflicts. Then TortoiseGit will place three additional files 

Afterwards execute the command TortoiseGit → Resolved and commit your modifications to the repository 

    + A special conflict case is a delete-modify conflict. Here, a file is deleted on one branch and the same file is modified on another branch. In order to resolve this conflict the user has to decide whether to keep the modified version or delete the file from the working tree
    
    + Another special conflict case is a conflict involving a submodule. Here, a submodule is changed in different (conflicting) ways on two branches
    
- creating a patch serial. TortoiseGit → Commit... on the parent folder, enter a good commit message. After that select TortoiseGit → Create Patch Serial

Apart from sending patches (or patch serials) to other developers, there are two ways to ask other people to integrate your changes into their repositories. 

First: After pushing your changes to a (public) repository, you just provide other people the URL of your repository and the name of the branch or the revision id. E.g.: git://example.com/repo.git BRANCHNAME 

Second: After pushing your changes to a (public) repository, you can create a standardized (quite formal) request for other people to pull your changes and integrate them into their repository. The format pull request consists of a list of all commits and provides some statistics about changed files, so that other people can can a quick overview. 

This should be the branch name or revision id of the end of your commits. 

- applying a single patch, From the context menu for a patch file (.patch or .diff extension), click on TortoiseGit → Review/apply single patch... You might be prompted to enter a working tree location

applying a patch serial, From the context menu for that folder (or all marked patch files), click on TortoiseGit → Apply Patch Serial... 

- Blame, That's when the TortoiseGit → Blame... command, sometimes also referred to as annotate command comes in handy. 

- exporting a git working tree, create a zipped tarball of your source, or to export to a web server. for this TortoiseGit offers the command TortoiseGit → Export.... 

- integrate with bug tracking system

TortoiseGit can help the user in two ways: 

When the user enters a log message, a well defined line including the issue number associated with the commit can be added automatically. This reduces the risk that the user enters the issue number in a way the bug tracking tools can't parse correctly. 

There are two ways to integrate TortoiseGit with issue trackers. One is based on simple strings, the other is based on regular expressions. The configuration used by both approaches are: 

bugtraq.url
Set this configuration to the URL of your bug tracking tool. It must be properly URI encoded and it has to contain %BUGID%. %BUGID% is replaced with the Issue number you entered

bugtraq.warnifnoissue
Set this to true, if you want TortoiseGit to warn you because of an empty issue-number text field. Valid values are true/false. If not defined, false is assumed. 

- issue number in text box. In the simple approach, TortoiseGit shows the user a separate input field where a bug ID can be entered. Then a separate line is appended/prepended to the log message the user entered. 

Issue Tracker Provider Settings based on Hierarchical Git Configuration
This is a hierarchical git configuration to associate issue tracker plugin with your project, rather than with to a specific directory path. Such settings are more portable. To deploy the settings, set to Project level and commit .tgitconfig. 

bugtraq.provideruuid
This is the GUID of 32-bit issue tracker plugin. 

bugtraq.provideruuid64
This is the GUID of 64-bit issue tracker plugin. 

bugtraq.providerparams
This is the parameter string for the issue tracker plugin. 

- getting information from the issue tracker, The previous section deals with adding issue information to the log messages. But what if you need to get information from the issue tracker? The commit dialog has a Windows COM interface which allows integration an external program that can talk to your tracker









    
    
    


系统分析师技术指南, 2009版; Note = eshang

:第一章
>CMM
>CMMI
>ISO9001
>PSP0, 个体度量过程
>TSP, 团队软件过程
渐进, 质量, 迭代, 目标, 定期评审, 过程规范, 指令明确

:J2EE与.net平台
>J2EE
>.net
	-WCF
	-WPF
	-WF, work flow
	-LINQ
	-BI, 商业智能化
	-MONO, 开源项目, 让.net运行于linux

:中间件技术
>提供程序抽象, 分离软件与硬件
>起到隔离作用

:web service及其应用
>SOAP
>CORBA, 是一种标准的面向对象体系
>ORB, object request broker
>COM, DCOM
>WSDL, 如何使用程序来调用远程web服务, 基于xml
>UDDI, 提供一种web service发布查找定位的方法
	-business entity
	-business service
	-business template
	-tmodel
	
:异构数据库的集成
>SAG, 建立基于SQL的异种关系数据库
>DRDA, 分布式数据体系结构, distributed relational database architecture
>ODBC, microsoft
	- application
	- driver manager
	- driver
	- data source
>Sybase, 分布式数据库系统
	- 开放界面
	-sql passthru网关
	-sybase omniSql网关
>orcale网关
>informix网关

:商业智能与数据仓储
>DSS, decision support system, 决策支持系统
>EIS, executive information system
>OLAP, on-line analysis processing
>DW, data warehousing
>ODS, operational data source, 操作数据存储区, 为了弥补业务系统与数据仓库之间的数据同步差异提出
>DM, data market 数据集市
>数据旋转, 例如行列互换. 在数据仓储中数据时按照不同时间逐层存储的
>相关概念
	-粒度, 对数据汇总程度的度量; 样本数据, 是从数据仓库中采样的数据
	-聚合, 标中存放的度量值
	-分割, 目的是提高效率, 将数据分散于不同的物理单元
>元数据, 元数据标准(CWM, common warehouse metamodel), 定义建立管理数据仓储过程和操作
	- UML
	- MOF, meta object facility, 元对象机制
	- XMI, xml metadata interchange
	
:数据挖掘
>KDD, knowledge discovery in database
>DATA Fusion, 数据融合
>数据挖掘功能
	-自动预测趋势
	-关联分析
	-聚类, 对数据记录划分为一系列有意义的子集
	-概念描述, 对某类对象内涵进行描述
	-偏差描述, 对于数据存储的异常记录进行检测
>常用技术
	-决策树
	-分类
	-粗糙集, rough set
	-神经网络
	-关联规则
	-概念树, 对数据库中记录的属性字段按归类方式进行抽象
	-遗传算法, 三个基本算法
		*繁殖, 从旧群选出生命力强的个体产生新种群
		*交叉(重组), 选择两个不同的染色体的部分进行交换, 形成新个体
		*变异(突变), 对某些个体的某些基因进行突变
		产生的后代需要满足适应值, 若干代后可得到想要的结果
	-依赖性分析
	-公式发现
	-统计分析方法
	-模糊论方法
	-可视化技术
>过程
定义问题->建立数据挖掘数据库->分析数据->调整数据->模型化->评价和解释
	
:操作数据存储, ODS
>围绕数据而设计的一种数据结构, 是面向主题的,集成的,可变的,当前的或近期的细节数据集合
>Question on the msdn
-quesion
I am Integrating 3 different database sources into an ODS. The ODS is going to have the exact tables and columns as the source system. I just tried to load one sample table (3 columns) with 2 million records, just to check the systems. It took around 30 minutes, I don’t want to go into asking you guys how to optimize it. 
My plan is to create a schema, and the table structure for all the sources in the ODS in the first week and once the structure is ready I will start loading data from one database source at a time
Q1) Is there a golden rule or method to follow while creating the table structure or should I just start doing the create table scripts for all the tables in the ODS?  
Q2) Since the tables are relational in the source system, and my guess is that ODS need not have any relation among tables. So I don’t have to create any constraints (like PK, FK) while writing the create scripts. Correct me if I am wrong.
Q3) I am going to use SSIS to load data, so how do I create the packages, should I have each package for each source or should I break up the tables, say 5 tables in one package. Does this affect the performance?  
It would be really great if you could answer these questions and also give me some tips/advice. 
I owe you guys. Thanks 
-answer
When you say you are integrating 3 different sources, are you doing anything to check the integrity? Or is it just the UNION ALL of all 3 sources without any regard to what gets stored.
Depends on what you doing. If all sources have different data, then your database tables should have unique contraints on it. And say if you importing 'Table1' from all sources and inserting it into 'Table1', how would you make out which row came from which source. It'd be a good idea to have column like 'source' indicating its source.
There also seems a performance issue there. You will have to look at what is the bottleneck. If network is the issue, you might not wanna do packages in parallel. You should also use checkpoints, so that the progress gets preserved.
Also rethink on the purpose of this database. Like if its for reporting, do you really need all data or just summarized data would do. And if you need row level details, do you really need all the tables. Perhaps you should finalize reporting requirements first. If data is for cubing, you can dimensionalize the data. I'm only saying this, because looking at the big picture, I see no purpose of storing redundant data. (unless its for performance gains).
Cheers,
About the Q1)
I just do the scripts.
About the Q2)
You're right. But if there exist PK on tables you should be able to improve performance using fast load on oledb destination component with Order hint.
About the Q3)
The SSIS have the capability of execute parallel task. I can recomend you create at least a dataflow for each table, doing this you can execute in a single package that gone to run the 5 dataflows at same time if you don′t configure precedence between componentes. To take the decision about isolate each table to a package, you should consider if in the future you want or need do the process only to a table.
About ODS. Often, an ODS source mean that you build the data source view to cube from the relational/transactional system. What you mean with ODS?
And of course... maybe somone can indicate you better.
For Q1), generally I prefer to include auditing info into the tables, such as the batch ID or Batch Load Time to identify which records were loaded at a specific execution of SSIS package. So that, in case of a rollback of a specific load operation, I know which records to delete. Besides, the information might be useful in troubleshooting errors. Apart from that, just create table scripts and use it. (you may use VS for Database Professionals to manage the DB script/source control etc.)
Q2) It would be easier and more performant not to have FK on ODS for similar reasons to DWH principles, where typically you do not have FKs. Or, you may create FKs but disable them so that you know the relationship on a diagram but you do not pay the performance overhead during load operations.
Q3) I would suggest to keep SSIS packages as simple and small as possible. This is important for manageability perspective (although the number of packages will increase) and problem troubleshooting. This design does not really affect performance. Performance would be affected by parallelism, and you can get parallelism by implementing either way that you suggested.
hope that helps,
>ODS分类
	-class i, 同步方式加载信息到ods
	-class ii, 转发形式发布到ods
	-class iii, 细节性数据抽取
>ODS与DW
	-当前数据, DW是长期
	-更新/载入, 频繁更新, DW是集中
	-数据汇总, 需要才生成
	-数据建模, 是为记录级别访问设计, DW是为结果集访问设计
>应用
	-提供全局一致应用
	-DB到DW的过渡
>数据模型
	-E-R
	-维度模型
>设计步骤
	-确定数据范围
	-分析主题定义
	-定义主题元素
	-迭代, 归并, 度量的定义
	-物理实现
	
:企业应用集成
>ERP, enterprise resouce planning, 企业资源计划
>EAI, enterprise application integration, 企业应用集成
	-BPI, 业务过程集成, business process integration
	-application integration
	-data integration
>信息孤岛形成的原因
	-标准化指定部门落后
	-建设单位把标准看做是死的静态的结果
	
:可扩展标记语言
>xml
>W3C 提供SGML
>解析
>CSS与XML
CSS的格式就是一个字典
>XSL, 是XML样式语言
>程序接口
	-DOM
	-SAX
	-JDOM
	-JAXP
	
:软件架构
>OMT, object modeling technology
>架构模型
	-结构
	-框架
	-动态
	-过程
	-功能
>分层系统
>C2架构, 通过连接件绑定在一起的按照一定组规则运作的并行构件网络
>CS/BS, 三层CS, 表示层, 功能层, 数据层
>CORBA, 公共对象请求代理
	-接口定义
	-接口池
	-动态调用接口
	-对象适配器
>异构结构风格
>特定领域架构, DSSA
	-领域分析
	-领域设计
	-领域实现
>SOA, 面向服务架构, service oriented architecture
	-支持外部访问
	-随时可用
	-粗粒度服务器接口
	-分级
	-松散耦合
	-标准化接口
	-支持各种消息模式
>RIA, richi internet application
	-flash
	-ajax
	-laszlo
	-avalon
	-java swt
	-xul, xml user interface language
	-bindows, javascript 与 dhtml的结合
	-oracle forms
>架构设计
	-提出构件模型
	-映射构件
	-分析构件相互作用
	-产生软件架构
	-设计评审
	
:设计模式
>MVC模型
>组成
	-解决一个问题
	-一个被证明了的概念
	-解并不是显然的
	-描述一种关系
	-模式有重要的认为因素
>描述
	-名称
	-目的
	-别名
	-动机
	-应用
	-结构
	-成分
	-效果
	-实现
	-示例代码
	-已知应用
	-相关模式
>分类
	-继承和交互
	-结构化
	-MVC架构相关
	-创建型
	-结构型
	-行为型
>MVC架构, UML图
controller-(factory)->View
|						|
bridge					bridge
|						|
v						v
model

:UML, 统一建模语言
>结构, 行为, 分类的描述
>关系
	-依赖
	-关联
	-泛化
	-实现
	
:统一过程, UP
>unified process
	-用例驱动
	-UP以架构为中心
	-迭代式和增量的
>统一过程项目管理
	-业务需求建模
		*逻辑
		*需求说明书
		*词汇表
		*风险说明
		*复审说明
	-分析与设计
		*总体设计报告
		*系统设计模型
		*数据库设计模型
		*数据字典
		*系统详细设计报告
		*工作量化说明书
	-实现
	-项目管理
	-部署
	
:企业信息系统
>香农定力, 信息是系统有序程度的度量
>ERP的作用
	-供应
	-分销
	-财务
	-客户关系
	-人力资源管理
	-项目管理
	-资产维护
>供应链管理
	-道格拉斯*斯诺, 生产总成本划分为转型成本和交易成本
	-采购
	-库存
	-合同
	-销售
	-运输
	-订单
	-物料需求计划
	-主生产计划
	-粗加工能力计划
	-供应链计划
	-产能管理, capacity manangement
	-设备维护
	-物料清单
	-产品配置
	-工艺流程
	-车间作业
	-委外加工
	-质量管理
>财务管理
	-总账, general ledger
	-应收帐, accounting receivable
	-应付帐, accounting payable
	-工资管理, wage management
	-固定资产, asset management
	-财务报表, financial statements
	-现金流量, cash flow statement
	-资金管理, fund manangement
	-财务分析, financial analysis
	-网上银行
	-公司对账
	-预算管理
	-成本管理
	-项目成本
>CRM, 客户关系. 市场管理, 销售管理, 客户服务管理
	-营销智能
	-市场营销
	-电话销售
	-在线销售

:工作流技术
>workflow manangement coalition, WFMC
>监察与控制

:软件产品线
>software product line, SPL
>双生命周期模型
>SEI模型, 核心资源开发, 产品开发和管理
>三生命周期模型
	-企业架构
	-领域工程
	-资源管理
	
:敏捷方法
>rapid application development
	-个体交流
	-可工作的软件
	-用户合作
	-响应变化
>敏捷原则
	-尽早交付有价值的中间软件
	-开发时要考虑随时的变化
	-经常交付可工作的软件
	-业务人员与开发人员要紧密结合
	-为开发人员提供环境和支持
	-团队内部有效沟通
	-工作的软件是度量进度的首要标准
	-提倡可持续的开发速度
	-不断关注好的技术和设计
	-本质是简单
	-自组织团队
	-定期反思
>敏捷方法论
	-水晶方法
		*失败的影响
		*以交流为中心
		*增量开发
		*用中间成果为决策做依据
		*引入部分自动回归测试
		*有用户直接参与
		*发布前要进行两次用户演示
		*当前工作稳定到能够审评就进入下一步
		*产品与方法论调整会在每次迭代开始或中期进行
		*所有以上策略全套执行
	-橙色水晶
	-动态系统开发
	-特征驱动开发
>FDD优势
>自适应软件开发, ASD
	-sprint 方法
		*每次任务30天, 团队开始工作
		*会议维持在15分钟之内
		*参与的管理人员只听不说
		*只提出难点与阻碍
		*每个参会人员所处昨天,今天打算做什么, 有什么障碍
>极限编程
	-更短的周期
	-迭代进行计划
	-使用自动测试程序监控进度
	-依赖交流与测试程序沟通
	-演化式设计
	-依赖于团队的密集协作
	-尽可能达到程序员短期利益和长期利益的平衡
	-价值观, 沟通, 简单, 反馈, 勇气
	
:P2P技术, peer to peer
>高可用的计算与存储资源共享
>网络连通能力更强大
>巨大的扩展能力
>底成本的所有权与共享
>匿名与隐私
>P2P目标
	-少量借助服务器
	-完全脱离服务器
>P2P需要解决的问题
	-资源放置
	-资源定位
		*集中方式索引
		*广播
		*分布式哈希算法
	-资源获取
>关键技术
	-资源查找与定位
	-网络地址转换
	-IP地址解析
	-安全技术
	-应用层上的数据描述和交换

:网络计算
>计算网络
>拾遗网络
>数据网络
>五层网络
	-构造, fabric
	-连接, connectivitiy
	-资源层, resource
	-汇集层, collective
	-应用层, application
	
:云计算与SaaS
>亚马逊, S3, simple storage service, EC2, elastic compute cloud
>应用
	-存储
	-搜索
	-科学计算
	-SaaS, 例如salesforce.com, 企业信息化
>架构
	-客户层
	-服务层
	-应用层
	-平台层
	-存储层
	-基础设施层

:快速开发工具
microsft, borland, sun, ibm

:多核技术
>OLTP
>SMT, simultaneous multi-threading, 并发多线程
>分类
	-x86
	-PWRficient
	-UltraSPARC T1
	-IBM CELL
	-Many core
	-Hyper Transport
	
:片上系统
>system on chip, 单个芯片集成完整系统, 包含CPU, 存储器, 外围电路, Soc
>Soc & Sip(多用于无限领域)

:面向方面编程, aspect oriented programming, aop
>反射, 系统观察和改变自身执行的能力
>静态编制与动态编制
>横切技术

	
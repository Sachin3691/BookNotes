pluralsight .net and c# = Erxin

:c# compiler
csc /t:winexe|exe|library /r:*.dll *.cs

:il, reflector to unassemble the .net assembly

:accelerate program skills	
>add code snips. input short cut and double press tab
>ctrl + p to automatic include using statement
>del code in square size, hold alt and selet the codes

:object package
>add 8 byte object header to value type var

:events, delegate
>don't make delegate to become a public field, use event instead. event could create a private delegate field for the class and only allowed +=, -= to the delegate. This will reduce the risk to override the delegate value( use = ) or fire the delegate at the wrong time. 
>Arraylist is object package container
>List<int> is generic container without packageing
>One memory leak condition, if a object's delegate reference a method of the other object. The referenced object will not be recycled by GC.

:i/o, xml
>use these class FILE, Directory
Stream s = File.Create(filepath); // stream is a binary io
StreamReader sr, will read text from a stream
>system.xml.searialization
the attribute [xmlElement ("rename_element")]
xmlSerializer s = new xmlSerializer(typeof_the_aim_object);
s.serializer(output_stream, object);
s.deserializer(stream)
xmlSerializer will serialize all the public fields

:assembly resolution
>simple dll resolution, directly deploy the dll into the application folder
>share .net dll with other application
>assembly debug, print current assembly location
typeof(assemblyObject).assembly.location
>clr will search into the sub directory name base one the reference dll
>clr will look the config file with the same name and extention as exename.exe.config
	- example
	<configuration>
		<runtime>
			<asm:assemblyBinding xmlns:asm="urn:schemas-microsoft-com">
				<asm:probing privatePath="foo;bar;quux"/>
			</asm:assemblyBinding>
		</runtime>
		<appsettings>
			<add key="name" value="value"/>
		</appsettings>
	</configuration>
	- use visual studio to create a configuration file, name as app.config, this file will be copy to the application folder whenever rebuid the app and renamed as the app name	
	- reference system.configuration to add configuration manager to the solution
	var value = configurationMananger.appsetting['key'];
	- for asp.net web configuration file is at the root of virtual directory of website and named as web.config
>Collections
	- ArrayList, growable array of object
		* binarySearch is quick than contains
		* add custom class need implement iequal and icomparable
	- Hashtable, key/value pairs look up based on key.equals/getHashCode
		* add custom class object need implement iequal and override getHashCode
	- SortedList, ke/value pairs look up by key or index
	- Stack, object array
	- Queue, object array
	- BitArray, array of boolean effective boolean array without boxing. 64bit header

:Hash table 
>don't write your own hash table algorithms
name		stable	uniform		efficient	secure
additive	y		n			y			n
folding		y		y			y			n
crc32		y		y			y			n
md5			y		y			n			n
sha-2		y		y			n			y

:collection concurrency
>concurrency overview
multiple threads, multiple process, multiple systems
>all the .net collections are not designed for thread safe
>synchronization can be preforms by any means
monitor(lock in c#)
readWriterLockSlim( not ReadWriterLock )
mutex
semaphore
other
>double check lock flag when deal with the multiple thread condition
if(expression)
{
	lock(flag)
	{
		if(expression) //recheck the expression to make ture there is no confliction
		{
		}
	}
}
>locking is done at method or property level
>.net 4 add several concurrent collections
concurrentDictionary<TKey, TValue>
concurrentQueue<T>, use try dequeue
concurrentStack<T>
concurrentBag<T>, unorder hashtable
there are concurrent free lock for client side. The client side could use the unthread safe code when replace with the thread safe concurrent collection
>window concurrent program refereneces
monitor, msdn.microsoft.com/en-us/library/system.threading.monitor.aspx
readerlockSlim, msdn.microsoft.com/en-us/library/system.threading.readerWriterLockSlim.aspx
algorithms and data structures(Queue implementation)
www.pluralsight-training.net/microsoft/courses/tableOfContent?courseName=ads-part1
book, concurrent programming on windows(Joe Duffy)
bluebytessoftware.com/books/winconc_book_resources/html

:.net framework
>an execution engine(EE)
	- aka virtual machine
	- jit
	- runtime services
	- set of class libraries
	- statndards describing scope
>CLI, common language infrastructure
	- executable file format pe32+
>CTS, common type system
	- intermediate language instruction set
>CLS, common lanuage specification
	- minimum mandatory set of types
	
:CLR fundamentals
>CLI implementations & Derivatives
	- .net framework CLR
		* shared source CLI (SSCLI rotor)
	- microsoft compact framework
		* .net micro framework
	- core clr dynamic language runtime
	- mono, for linux, solaris, mac os/x
	- dotGNU portable .net, open source
	
:Just-in-Time(JIT) Compilation
>IL is verified to be type safe
>ngen, is a preJIT tool for run pre installation
>unmanagement code debug for c#
	- enable the feature in project property
	- input 'load sos' in the immedate window during debug
	- input !help to list help commands
	- !clrstack -l, will list all the current local variable
	- visual studio have memory window to display the current memeory
	- !dumpobj address, will display the detial of the give address variable
	- !dumpmt, method table


:	
:new
:
>add setLastError to the operation system error code
[dllimport(user32.dll, SetLastError)]
static return_value some_win32_function();
use the getHRLastError to grab error code back when run this function
HR means human readable
ThrowExceptionForHR(exception)
>add entryPoint to set the function name in the com object and then could rename the c# code function
[dllimport(user32.dll, EntryPoint="some_com_functoin_name")]
static return_value some_alias_function_name();
>TLB, com type information
>tlbimp.exe translates com type info into clr typeinfo
>rcw runtime-callable wrappers, bridge divide between two very different world, managed code and native code
>oleview *.dll to view de dll information in com format
>vs will automatic run the tlbimp.exe when add a refence to a com object
>set the project property to enable debug unmanged code will enable debug c++ com project in c# project
>manually input rcw information in c# code like p/invoke
[comimport, guid("........")]
class comClassName{}
[guid("....."), interfacetype(comInterfaceType.InterfaceIsUnKnown)]
public interface icomClassInterface
{
	return_type com_function_name(parameters);
	
	[MarshalAs(UnmangedType.someType, SizeParameterIndex=1)]
	return_type com_function_name2(para0, para1); 
	// use the attribute to declare the relationship between para0 and para1 which is defined in the com idl file.
}
>com thread mode, c# use 
>Com interop: com => clr, com-callable wrappers(CCWs)
	- TLBEXP.EXE, can use to translate CLR type into COM type info







	
	
	
	
	
	
Expert Python Programming Second Edition=Michal Jaworski;Note=Erxin

# Introduction
- major projects such as django, flask and numpy will drop any 2.x compatibility and will only be available on python 3 
flask, is microframework for python web development , http://flask.pocoo.org/

- documentation is mandatory reading for those not familiar with python 3 yet, https://docs.python.org/3.0/whatsnew/3.0.html 

- python3 divide into a few groups changes 
    + syntax changes 
    + standard library 
    + datatypes and collections 
    
- syntax changes 
    + print i no longer a statement but a function instead 
    + catching exceptions changed from except exc, var to expect exc as var 
    + the <> compare operator has been removed in favor of != 
    + from module import* is now allowed only on module level, no longer inside function 
    + from .[module] import name is now the only accepted syntax for relative imports 

    all imports not start with dot will treat as absolute import 
    
    + the sort() function and list's sorted method no longer accept the cmp argument, the key argument should be used instead 
    + division expressions on integers such as 1/2 return floats 
    1//2 will return integer 
    
- changes in datatypes and collections 
    + all string literals are now unicode and bytes literals require a b or B prefix, using u prefix was dropped 
    
    + most basic is python's __future__ module it prots back some features from newer python releases back into the older ones and takes the form of import statement by 
    from __future__ import <feature> 
    
    all avaliable future statements 
    division 
    absolute_import 
    print_function 
    unicode_literal 
    
- stackless python, stackless is named so because it avoids depends on the c call stack for its own stack. 

it is in fact a modified cpython code that also adds some new features that were missing from core python implementation at the time stackless was created the most important of them are microthreads managed by interpreter as cheap and lightweight alternative 

latest available version are 2.7.9 and 3.3.5 in the stackless module 

- jpython and ironpython don't have global interpreter lock 
- numpy and largely on c extension, the project ironclad, https://github.com/ironlanguages/ironclad, aims to allow using these in ironpython , it is dead 

- pypy impleemntation c code layer and rewritten pure python 

pypy aim to fuly compatible with python 2.7 and while pypy3 is compatible with python 3.2.5 

- nowadays, many benchmarks show that supprising pypy is often way faster than the cpython implementation this project has its own benchmarking site that track the performance of each version measured using tens of different benchmarks 

pypy lacks the full official support of c python extension api still at least provides some sort of support for c extension throught its cpyext subsystem 

http://pypy.org/

- application level isolation of python environment 
    + *nix have pre installed python 
    + mac have too 
    + pip should aways be used to obtain new pacakges in the latest version 
    
- most common used pip options 
$ pip show pip 

- isolate project dependencies, fronzen the dependencies
    + install virtualenv 
    $ pip install virtualenv 
    + create new environment with virtualenv 
    $ virtualenv ENV-Name 

    the new installed package will be placed at env-name/lib/pythonx.y/site-package/ 
    
    active the environment by unix's source command 
    $ source env-name/bin/activate 
    
    all the installed packaged are listed in the rquirements.txt inside the virtual environment 
    
    install all the dependencies by 
    $ pip install -r requirements.txt 
    in *nix 
    
    + create new environment with ven which is supplied in python 3.3 
    
    $ pyenv env-name 
    
    all function expose from builtin ven module
    
- virtual environment using vagrant, vagrant seems the most poplar tool that provides a simple and convenient way to create and mange development environment. it available from window, mac and *linux 

http://www.vagrantup.com 

$ vagrant init hashicorp/precise64
$ vagrant up
$ mkdir vagrant_getting_started
$ cd vagrant_getting_started
$ vagrant init

add box to vagrant 
$ vagrant box add hashicorp/precise64

using a box 
Vagrant.configure("2") do |config|
  config.vm.box = "hashicorp/precise64"
end

configure a

 box version by 
Vagrant.configure("2") do |config|
  config.vm.box = "hashicorp/precise64"
  config.vm.box_version = "1.1.0"
end

...

    + features 
    choice of virtualization provider 
    box uses as virtual machine image 
    choice of provisioning method 
    shared storage between a VM and a VM's host 
    ports that need to be forwarded between a VM and its host 
    
vagrant file is ruby 

- containerization versus virtualization 

    + docker allows to describe its container in the form f a simple text document called dockerfile, containers from such definition can be built and stored it also supports incremental changes
    
    different tools such as docker and vagrant seem to overlap in features but the main different between them is. vagrant is for development. it allows to bootstrap the whole virtual machien with a single command but does not allow to simple pack it and deploy or release 
    
- custom python shells ipython, bpython, ptpython, and so on. the interactive prompt can be configured with a startup file 

it looks for PYTHONSTARTUP environment variable the code in the file pointed to by this variable. 

some linux distribution provide a default startup script called .pythonstartup 

    + sample content 
# python startup file 
#import readline 
#import rlcompleter 
#import atext 
#import os 

# tab completion 
readline.parse_and_bind('tab:complete')

#history file 
histfile = os.path.join(os.environ['HOME'], '.pythonhistory')
try:
    readline.read_history_file(histfile)
except IOError 
    pass 

atexit.register(readline.write_history_file, histfile)
del os, histfile, readline, rlcompleter 

- ipython, http://ipython.scipy.org provides an extended python command shell amon the features provided the most interesting ones are 
    + dynamic object introspection 
    + system shell access from the prompt 
    + profiling direct support 
    + debugging facilities 

- bpython http://bpython-interpreter.org/ advertise itself as a fancy interface to the python interpreter. 
    + inline syntax highlighting 
    + readline-like autocomplete with suggestions displayed as you type 
    + expected apramter lists for any python function 
    + autoindentation 
    + python3 support 
    
https://github.com/bpython/bpython/
    
- ptpython, https://github.com/jonathanslenders/ptpythonis another approach to advanced python shells 

- interactive debuggers 
    + built-in debugger, pdb http://docs.python.org/3/library/pdb.html 
    
    $ python -m pdb script.py 
    
    set custom breakpoint with 
    import pdb; pdb.set_trace()
    
    ipdb is a separate package based on ipython 
    ptpdb is a separate package based on ptpython 
    bpdb is bundled with bpython 

- useful resources 
python documentation 
pypi 
pep 0 

    + awesome-python, https://github.com/vinta/awesome-python/ include a curated list of popular packages and frameworks 
    
    + python weekly, http://www.pythonweekly.com/ is popular newsletter 


# Syntax best practices below the class level 
- major difference from python 2 where str represents byte strings, something that is now handled by bytes objects 

bytes and its mutable alternative differs from str by allowing only bytes as a sequence value integers in the range 0 <= x < 256

the true nature of bytes and bytearray is revealed when it is converted to another sequence type like list or tuple 

list(b'foo bar')

bytes literals are also enclosed by single quotes, double quotes or tripple quotes but must be preceded with a b or B prefix 

bytearray as a mutble version of bytes does not introduce such an issue, byte arrays can be modified in-place through item assignments and can be dynamically restricted exactly like lists using appends, insert and so on 

- string concatenation 
str.join() method

- python provides deque in collections built-in module 

a list comparehension is the correct answer to iterate throw a sequence 

- unpackages example 
a, b = 1, 2

(a, b), (c, d) = (1, 2), (3, 4)

a, *other, last = 0, 1, 2, 3 

- cpython uses hash tables with pseudo-random probing as an underlying data structure for dictionaries 

- fronzenset() is an immutable hashable, non-ordered collection of unique, immutable objects 

- set literals such as {1,2,3} to create a set 

- namedtuple is a factory function for creating tuple subclass 
- deque 
- Counter, is a dictionary subclass for counting hashable objects 
- OrderedDict is a dictionary subclass 
- defaultdict is a dictionary subclass 
- iterator protocol implement based on two methods 
__next__ 
__iter__ 

when stop a StopIteration exception is raised 

- yield statement, provide an elegant way to write simple and efficient code for functions that return a sequence of elements, based on the yield statement 

you can retrieve new values from generators as if it were iterators so using next() function for loops 

tokenize module from the standard library for instance generates tokens out of a stream of text and returns an iterator for each treated line that can be passed alon gto some processing 

- another important feature available in python reagarding generators is the ability to interact with the code called with the next function yield becomes an expression, and a value can be passed along with a new method called send 

def psychologist():
    print('please tell me your problem')
    while True:
        answer = (yield)
        if answer is not None:
            if answer.endswith("?"): 
                print("don't ask yourself too much quesions")
            elif 'good' in answer:
                print("Ahh that's a good go on")
            elif 'bad' in answer:
                print("don't be so negative")
                
>>> free = psychologist() 
>>> next(free)
Please tell me your problem 
>>> free.send('I feel bad')
Don't be so negative 
>>> free.send("Why I shouldn't?")
Don't ask yourself too much quesions 
>>>...

send acts like next, but ,makes yield return the value passed to it inside of the function definition 

two other functions were added to complete this behavior, throw and close. 
throw, allows the client code to send any kind of exception to be raised 
close, acts in the same way but raises a specific exception 

GeneratorExit, in that case the generator function must raise GeneratorExit again or StopIteration 

- decorators, anything that is callable __call__ method is implemented can be used as a decorator and often objects returned by them are not simple functions but more instances of more complex classes impementing their own __call__ method 

    + as a function 
    def mydecorator(function):
        def wrapped(*args, **kwargs):
            result = function(*args, **kwargs) 
            return result 
        return wrapped 
        
    + as class 
    
    + decorator that repeats the execution of a decorated function the sepcified number of times every time is called 


















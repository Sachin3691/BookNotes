Pro Git, 2nd Edition=Scot Chacon and Ben Straub=Erxin

# introduction 
- short history of git, linux kernel is an open source software project of fairly large scope 
    + speed
    + simple design 
    + strong support for non-linear development 
    + fully distributed 
    + able to handle large projects like linux kernel 
- nearly every operation is local 
- git has history, git use checksumming is called SHA-1 hash 
- git generally only add data 
- git have three states 
working directory       staging area        .git directory(repository)
|<-------checkout the project---------------------------|
|--------stage fixes------>|                            |
|                          |-------commit-------------->|

- install git 
    + on linux 
    $ yum install git 
    or 
    $ apt-get install git 
    
    + install on window 
    http://mysygit.github.io
    http://windows.github.com 
    
    + install from source , you need to have following libraries that git depends on 
    curl, zlib, openssl, expat and libiconv 
    
    install dependency on linux 
    $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
    
    $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev 
    
- first time git setup 
/etc/gitconfig, contains values for every user 
~/.gitconfig or ~/.config/git/config, configuration for single user 
config file in the git directory 

on window 
$home(c:\users\$user)

- setup your identity 
$ git config --global user.name name 
$ git config --global user.email xx@email.com 

- configure editor 
$ git config --global core.editor emacs 

- checking your setting 
$ git config --list 

- get help 
$ git help <verb>
4 git <verb> --help 
$ man git-<verb>


# git baiscs 
- initializing a repository in an existing directory 
$ git init 

- add track file 
$ git add *.c 
$ git commit -m "comments"
    
- clone a existing repository git receives a full copy of nearly all data that the server has. in svn it is called checktout 
$ git clone https://uri, 


- checking the status of your files 
$ git status 

- tracking new file 
$ git add file_uri

- short status 
$ git status -s 
A, for new file 
M, for modified file 
??, aren't track file 

- ignoring files, ignore files are list at .gitignore which support wild card matching 
    + Blank lines or lines starting with # are ignored.
    + Standard glob patterns work.
    + You can end patterns with a forward slash (/) to specify a directory.
    + You can negate a pattern by starting it with an exclamation point (!).

    + glob pattern 
    Glob patterns are like simplified regular expressions that shells use. An asterisk
    (*) matches zero or more characters; [abc] matches any character inside
    the brackets (in this case a, b, or c); a question mark (?) matches a single character;
    and brackets enclosing characters separated by a hyphen([0-9]) matches
    any character between them (in this case 0 through 9). You can also use two
    asterisks to match nested directories; a/**/z would match a/z, a/b/z,
    a/b/c/z, and so on.

- check difference 
$ git diff [file1_uri] [file2_uri]

$ git diff --staged
will compare your staged changes to your last commit 

$ git diff --cached 
check what you've staged so far 

- ckeck avaliable diff tools 
$ git diff --tool-help 



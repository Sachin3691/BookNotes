Firefox WebExtension Document;Note=Erxin

# Get Start 
- install environment 
Firefox nightly or Developer edition 

- enable install unsigned addon 
    + type about:config in url bar in firefox 
    + search xpinstall.signatures.required
    + set to false 

- anatomy of a webextension 

    + manifest.json contain pointers to four other types of file 
    background pages, implement long running logic (html + js)
    content scripts, interact with web pages (js + css)
    browser action files, implement toolbar buttons (icons, popup(html, js, css)
    web accessible resource, make packaged content accessible to web pages and content scripts (html js css ...)
    
    + background script loaded when extension is loaded until extension disable or uninstalled 
    
- manifest.json, contain several elements 
must have 
    + applicaiton, currently only gecko 
    + manifest_version, currently must be 2 
    + name 
    + version 
    
may also contain 
    + background
    + browser_action 
    + content_scripts
    + default_local, must be present if _locals directory exist in your extension, otherwise must be omitted 
    
    + description 
    
    + icons, will be used to present the extension in components such as add-on manager. relative to the root of extesion directory 
    
    + page_action, is a icon that your extension adds inside the browser's URL bar. Supply a popup or the click icon event will be dispatch to background scripts. browser action are displayed by default, page action are hidden by default. Call pageAction.show(tabId) to explicit show 
    
    + permissions, use to request special power for your extension, use XHR to access those origins 
    
    supported keywords 
    alarms 
    bookmarks 
    contentMenus 
    cookies 
    notifications 
    storage
    tabs
    webNavigation 
    webRequest
    webRequestBlocking 
    
    activeTab permission is specified as "activeTab" if an extension has the activeTab permission then when the user interacts with the extension then the extension granted extra privileges for the active tab only such as 
    inject JavaScript or CSS into the tab programmatically, using chrome.tabs.executeScript and chrome.tabs.insertCSS 
    access to the privileged parts of the tabs API for the current tab: tab.url, tab.title and tab.faviconUrl 
    
    in compatibilities with Chrome 
    background 
    clipboardRead 
    clipboardWrite 
    geolocation 
    unlimitedStorage 
    
    + web_accessible_resources such as html, css or js with your extension. specify the file path baseon the manifest.json file 
    
    "web_accessible_resources": ["images/my-image.png"]

    during the runtime the avaliable url for the resource is 
    chrome.extension.getURL("images/my-image.png");
    moz-extension://944cfddf-7a95-3c47-bd9a-663b3ce8d699/images/my-image.png

    incompatible with chrome 
    not support wildcards 

- match pattern in manifest.json 
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Match_patterns

- background script environment run in the context of special pages called background pages. This gives them a window global, along with all the standard DOM APIs that provides 

you don't have to specify your own background page, a default empty page will be created. 

- content script 
background script and content script could contact with message 

content script is used to manipulate the web pages. content script can also do 
    + cross-domain XHR 
    + use a small subset of webextension API
    + exchange message with background scripts 
    
content script can't directly access normal page scripts but can exchange messages with them using standard window.postMesssage() API 

also support inject css 

- browser action 


- Packaging your extension 
    + zip the addon files not the folder contain all the files and rename the zip file to ends with xpi 
    + drag and drop the xpi file into the about:addon page of firefox 
    + click install 
- walk through example 
https://github.com/mdn/webextensions-examples

- other examples 
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Examples
    + beastify
    popup 
    content script 
    
    + borderify 
    content script 
    
    + notify-link-clicks 
    content script 
    background script 
    
    + open-my-page-button 
    background.js 
    browser action 
    a html page 
    
    + page to extension messaging 
    content script 
    
    + user-agent-writer 
    background 
    browser_action 
    permissions 


# Guides 
- content script 












































Mastering Visual Studio 2013;Note=Erxin

# Code editor
- Peek definition features
    * this will open up a inline definition window which will not jump to another code file but split the window and display the aim codes
    * jump to multiple place will add multiple tag point on the top of the bar
    * press escape key to close peek definition window
- Enhance scroll bar
    + Bar mode, is the default mode, display the scroll bar and annotation 
        * a blue line will display the current curse position
        * yellow block will display the current changed and unsave content
        * saved and changed content will mark will green
        * a rectangle in the center of scrollbar will mark the break point
        * right click on the mark select scroll here to quick go to the mark point
        * scrollbar options
    + Map mode, map mode is a minimal of the codes view
- Navigate to improvement, same with 2012, lost icons colors compare to 2013
    + Edit | Navigate to, or ctrl + ,
    + supply search term and jump to it
- Moving lines
ctrl+, bring up to the navigate tool bar
alt + arrow key, move the selected line up or down
selected parties of line will support move lines together
- auto complete brace

# XAML editing
- intellisense for resources
    + resource contain intellisense info in visual studio 2013
    press, ctrl + space
    + also support movie code lines by alt+arrow, the collapsed lines will be step over in one step
- intellisense for binding expressions, support binding expression, ctrl+space will display the appropriate property
    + add binding data context in serveral ways
        * add binding data in xaml by 
        <Object x:Class="..."
                xmlns:vms="clr=namespace:CustomerClassViewModel">
        <Object.DataContext>
            <vms:SomeKindofViewModel/>
        </Object.DataContext>
        * use design prefix "d" in xaml code which means design time data
        <Object d:DataContext="{d:DesignInstance Type=vms:CustomerListViewModel, IsDesignTimeCreatable=True}">
        then intenseness will get back, the design time create able property will enable design time intenseness property
    + support substring matching or first character code snippet matching, such as StackPanel use SP
- go to definition, f12, enable on resource and bindings
    + works will all the kind of resource
    + in the xaml page, support go to definition of the viewmodel
    + go to definition of the markup extension
- start/end tag refactoring
    + in visual studio 2013, if you change the start tag the end tag will be automatic changed
    + if you directly put a slash at the end of the tag, the end tag will automatically moved
- better commenting support
    + support nested comments
    + still need to manually uncomment for the nested comments
- code snippets
    + keywords will tab tab then will add code snippets
    + xaml support two kinds of snippets
        * expansion 
        righ click and select insert snippets
        * surround with snippets
        surround the selected codes
        select the code
        right click select surround with


# Debugging
- Function return value inspection
    + put the break point at the call of the function such as linq extension expression line
    + open the auto window which will display all the returned value
    + use $ReturnValue, in the immediate window will display the last function return value of the codes
- edit and continue enhancements
    + the debug mode support edit, change and continue without recompile the codes
- performance and diagnostics hub
    + mix with performance and diagnostics dialog
    + open with Debug or Analyse Menu


# CodeLens
- new features, display decorator, display information from the TFS
- introduction
    + references indicator
    + tested by indicator
    + test status indicator
    + TFS indicators
    authors, changes, bugs, workitems, reviews
    + configuring codelens
- reference indicator
    + click the reference icon
    + support dock the popup reference window to the bottom
    + there is also a code map window to display the reference visual code map window
    + the reference count are not count xaml and aspx file
- Tested by indicator
    + automation code test
    + you could view and run test in the code project instead of from test project or test explorer in the previous version
    + first number is the passing past, the second number indicate the referenced test
    + hold the alt key press the number to open the pop up window
    + double click the test name to open the relative test method
- Test status indicators
- TFS indicators
- Configure CodeLens
    + right click the indicator and select configure the options
    + Or open the option window and configure the codelen window
    + ctrl+q, jump to the quick launch box on the title window, type in option and click enter











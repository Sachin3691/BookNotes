Visual C++ MSDN Documentation;Note =Erxin

# Introduction 
- this is a summary for the MS visual c++ documentation 
- reference, vc 2015 msdn 
https://msdn.microsoft.com/en-us/library/60k1461a.aspx

## What's new for VC++ 
- enhanced support c++ 11 and some of the c++14 features 
- add project template for android and ios 
- iso c/c++ standard support 
- compiler 
    + resumable function(resume/await) provide language level async support 
    + generic(polymorphic) lambda expressions, c++ 14 
    + generalized lambda capture expressions, this allow move-only types to be captured by value 
    + binary literals 0B or 0b c++14 
    + return type deduction c++14  
    + decltype(auto) c++14 
    + implicit generation of move special member functions, move constructor and move assignement operators 
    + inheriting constructors, derived class can now specify it will inherit the constructors of its base class by Base::Base 
    
    only inherit all or nothing. can't inherit from multple base classes 
    
    + alignment query and control alignof() operator and controllered by using alignas() specifier. alignof() returns the byte boundary on which instances of the type must be allocated; for references it returns the alignment of the referenced type 
    
    + sized deallocation, void operator delete(void*, std::size_t) noexcept and void operator delete[](void*, std::size_t) noexcept can now be overloaded 
    
    + extended sizeof can now be determined without an instance of the class or structure using sizeof() C++11 
    
    + attributes provide a way to extends syntax on functions, variables types and other program elements C++11 
    + constexp, create compile-time constant variables functions and user-defined types 
    + user defined literals (UDLs), can now be appended to numeric and string literal 
    + thread-safe "magic" static, static local variables are now initialized in a thread-safe way eliminated the need for manual synchronization. 
    
    use static local variable by multiple threads must still be manually synchronized. the feature could be disabled by compiler flag /Zc:threadSafeInit 
    
    + thread local storage, use the thread_local keyword to declare that an independent object should be created for each thread 
    
    + noexcept operator can now be used to check whether an expression might throw an exception. it could specify a function does not throw exception 
    
    + inline namespaces, create versioned libraries 
    + unrestricted unions, union can now contain types with non-trivial constructor. constructors for such union must be defined (c++11)
    
    + new character types and unicode literals UTF-8, UTF-16 and UTF-32 are supported and new character types char16_t and char32_t. literal prefixed with u8, u(UTF-16), U(UTF-32). string literals can addtionally be prefixed with raw-string equivalents u8R, uR or UR. 
    
    universal character names can be freely used in unicode literals as in u'\u00EF', u8'\u00EF" is i 
    
    + digit seperator 1'00'00;
    + __func__ the predefined __func__ is implicitly defined as a string that contains the uniqualified and unadorned name of the enclosing function 
    + __restrict__ restrict can now be applied to references 
    
- c++ standard library 
    + user defined literals (UDL), <chrono>, <string> and <compex> headers now provide UDL-operators for your convenience. std::chrono::milliseconds(123), "hello"s means std::string("hello") and 3.14i means std::complex(0.0, 3.14)
    
    + null forward iterators, allows not only refer to container instance but also value-initialized
    + quoted(), to support quoted string values and I/O easier with quoted()
    + Heterogeneous associative lookup for associative containers 
    + compile time integer sequences c++14 
    + exchange(), std::exchange() utility function to assign a new value to an object and returns its old value 
    + dual-range equal(), is_permutation(), mismatch(), support overloads for std::equal(), std::is_permutation() and std::mismatch() that accept two ranges 
    these overloads check that the two sequences are the same length, which removes this responsibility from the calling code 
    
    +get<T>(), standard library now supports the get<T>() template function to allow tuple elements to be addressed by their type
    
    + tuple_element, standard library supports tuple_element_t<l, T>, provide some convenience for template programmers which is a type alias for tuple_element<l,T>::type 
    
    + file system "v3" technical specification 
    + minimal allocators, supports the minimal allocator interface throughout notable fixes 
    + <chrono> the chrono types high_resolution_clock and steady_clock have been fixed 
    + atomic in signal handlers 
    + new rules for auto with braced-init-list 
    + typename in template template-parameters 
    + std::uncaught_exceptions()
    + attributes for namespaces and enumerators 
    + u8 character literals 
    
- c runtime library, CRT has been refactored into two parts. universal CRT contain the standard c runtime. the vcruntime140.dll or .lib contains version specific code for process start-up and exception handling. universal CRT has a stable API so don't required to changing the version number in each release of visual studio 

C99 conformance, fully implement C99 standard library except the one depends on compiler features 

performance 

breaking changes 

+ diagnostics 
debugger visualizations 
native memory diagnostics 
    + memory diagnostic sessions 
    + memory snapshots 
    
    + improve deadlock detection and recovery 
    ....

- new gpu usage tool 
    

## Supported platforms(visual C++ )
- x86, x64, android, iso, arm 

## Overview of windows programming in C++ 
- windows universal apps 
tablets and mobile desktop. apps runs on windows runtime. compile to native code and have xaml user interface or use directx 

- windows runtime c++ template library (WRL)
- sdks and header files 
VC++ include the C and C++ standard libraries, the standard template library and other window specific library. 

under %Visual studio install dir%VC\ 
or CRT 
or window SDK folder widnows kits\10\...

    + window library 
    MFC 
    ATL, helper library for creating COM 
    C++ AMP (C++ accelerated massive parallelism), a library enables high performance general computational work on the GPU 
    concurrent runtime, simplifies the work of parallel and asynchronous programming 
    
    
# C/C++ language and standard libraries 
## Welcome back to C++ 
- describes modern C++ programming idioms and best practices 
- modern C++ emphasizes 
    + stack-based scope instead of heap or static global scope 
    + auto type inference instead of explicit type names 
    + smart pointers instead of raw pointers 
    + std::string and std::wstring types instead of raw char[] array 
    + STL containers like vector list and map instead of raw arrays or custom containers 
    + STL algorithms instead or manually coded ones 
    + exceptions to report handle error conditions 
    + lock free inter thread communication using std::atomic<> instead of other inter-thread communication mechanisms 
    + inline lambda functions instead of small functions implement separately 
    + range-based for loops write more robust loops that work with arrays, STL containers 
    
- example
    + older version 
  
// circle and shape are user-defined types  
circle* p = new circle( 42 );   
vector<shape*> v = load_shapes();  
  
for( vector<circle*>::iterator i = v.begin(); i != v.end(); ++i ) {  
    if( *i && **i == *p )  
        cout << **i << “ is a match\n”;  
}  
  
for( vector<circle*>::iterator i = v.begin();  
        i != v.end(); ++i ) {  
    delete *i; // not exception safe  
}  
  
delete p;  
  
    + modern C++ 
#include <memory>  
#include <vector>  
// ...  
// circle and shape are user-defined types  
auto p = make_shared<circle>( 42 );  
vector<shared_ptr<shape>> v = load_shapes();  
  
for_each( begin(v), end(v), [&]( const shared_ptr<shape>& s ) {  
    if( s && *s == *p )  
        cout << *s << " is a match\n";  
} );  
  
C++ classes are value types by default and they are copyable. They each have a copy constructor. when you specify a refrence type make the class non-copyable disable the copy constructor and copy assignment operator and use a virtual destructor which supports the polymorphism. 

- support for C++ 11/14/17 features (modern C++)
- c++11 feature list 
    + rvalue reference 
    + ref-qualifier
    + non-static data member initializers 
    + variadic template 
    + initializer lists 
    + static_assert 
    + auto v0.9, v1.0 
    + trailing return types 
    + lambdas 
    + decltype 
    + right angle brackets 
    + default template arguments for function template 
    + expression SFINAE
    + alias templates 
    + nullptr 
    + strongly typed enums 
    + forward declared enums 
    + attributes 
    + constexpr
    + alignment 
    + delegating constructors 
    + inheriting construtors 
    + explicit conversion operators 
    + char16_t/char32_t 
    + unicode string literals 
    + raw string literals 
    + universal character names in literals 
    + user-defined literals 
    + statndard-layout and trivial types 
    + defaulted and deleted functions 
    + extended friend declarations 
    + extended sizeof 
    + inline namespaces 
    + unrestricted unions 
    + local and unnamed types as template arguments 
    + range-based for-loop
    + override and final 
    + minimal GC support 
    + noexcept 

- c++ 11 core language features concurrency 
    + reworded sequence points 
    + atomics 
    + strong compare and exchange 
    + bidirectional fences 
    + memory model 
    + data-dependency ordering 
    + data-dendency ordering function annotation 
    + exception_ptr 
    + quick_exit 
    + atomics in signal handlers 
    + thread-local storage 
    + magic statics 

- c++ 14 core language features 
tweaked workding for contextual conversions 
binary literals 
auto and decltype(auto) return types 
init-captures 
generic lambdas 
variable templates 
extended constexptr 
NSDMIs for aggregates 
avoiding/fusing allocation 
[[deprecated]] attributes 
sized allocation 
digit separators 

- c++17 proposed core language features 
new rules for auto with braced-init-lists 
terse static assert 
typename in tempalte paramters 
removing trigraphs 
nested namespace definitions 
std::uncaught_exceptions()
fixing qualification conversions 
attributes for namespace and enumerators 
u8 character literals 
allowing more non-type tempalte args 
fold expressions 
await/resume 

- guide to the features tables 
    + rvalue references, add automatically generate move constructors and move assignment 
    + lambdas 
    + decltype 
    + strongly typted/forward declared enums 
    + alignment aliagnas/alignof 
    + standard layout and trivial types 
    
- atomics and more 
<atomic>, <chrono>, condition_variable>, <future>, <mutex>, <ratio>, <scoped_allocator>, and <thread>

- c99 __func__ and preprocessor rules 
- standard library features 
- exmplacement, emplace()/emplace_front, emplace_back().... arbitrary numbers of arugments, which directly constructs an element of type T at the back of the vector from an arbitrary number of arbitrary arguments 

- variadics, variadic templates 
- explicit conversion operators 
- randomness 
- resistance to overloaded address of operators 
- VS implement make_unique<T> and make_unique<T[]>(n)
cbegin()/cend(), rbegin()/rend() and crbegin()/crend() non-member functions 
    
    
## Type system modern c++ 
- the types specifies the amount of memory that will be allocated for the variable. every expression is implicityly given a type by the compiler before it is evaluated 
- terminology
variable, generally used to refer to instances of scalar data types, where as instance of other types are usually called "objects" in c++ 
- object for simplicity and consistency uses the term to refer to any instance of a class or structure 
- POD, plain old data, refers to types that are scalar or POD class has no static data members that aren't also PODs and has no user-defined constructors, user-defined destructors or user-defined assignment operators and no virtual functions, no base class, no private or protected non-static data members 

often used for external data interchange. such as communicate a module writen in C

- specifying variable and function types 
every object has a type and type never change 

- buit-in types 
size in bytes 
1                   2               4                               8
bool 
cyhar 
                wchar_t 
                short 
                                    int 
                                    long 
                                    float 
                                                                    long long 
                                                                    __int64 
                                                                    double 
                                                                    long double 
                                                                    
most frequently used fundamental types 
type        size 
int             4 
double      8 
bool           1 
char           1 
wchar_t     2, represents "wide" character values that may be encoded in unicode 
unsinged char, 1, c++ has no built-in byte type, use unsigned char to represent a byte value 
unsigined int, 4 bytes, default choice for bit flags 
long long, 8 bytes, represents very large integer values 

- void type, you cannot declare a variable of type void but you can declare a variable of type void* pointer to void,, pointers to void are not type-safe 

while the c language required functions that have zero parameters to declare void in the parameter list, which is discouraged in mordern c++ 

- const type qualifier
const type variable_name;

we could use const_cast operator on rare occasions when you must remove const-ness from  a variable 

- string types 
c++ have not built in string type have manually add terminating null value '\0' to char or wchart_t array 

modern c++ have types std::string for 8-bit char-type character strings std::wstring for 16bit wchar_t type character strings 

if using MFC or ATL the CString class is avaliable. use null terminated character array is strong ly idscouraged 

- User defined types 
class, struct, union or enum to define user defined types 
    + compiler has no built in knowledge of a user-defined type 
    + you specify the operations can be performed on your type 
    + do not have to be statically typed. can have many different type at run-time by inheritance 
    
- pointer types 
modern c++ use smart pointer 

int* pNumber; 
*pNumber = 10;

int number = 10;
int* pNumber = &number;

void someFunction(){
    unique_ptr<MyClass> pMc(new MyClass);
    pMc->DoSomeWork();
}

- windows data types. in win32 programming for C and C++ most functions use window specific typedefs and #define macros(defined in windef.h)

the general guideline is to prefer the C++ fundamental types unless the window type communicates some additional meaning about how the value is interpreted 

## Value types 
-C++ classes are by default value types. They can be specified as reference type 

value types are viewed from the perspective purposes, copyable 
reference type non-copyable(disable the copy constructor and copy assignment operator) and use a virtual destructor. 

reference types are about identity. 

// cl /EHsc /nologo /W4  
  
class MyRefType {  
private:  
    //explicit disable copying and assignment 
    MyRefType & operator=(const MyRefType &);  
    MyRefType(const MyRefType &);  
public:  
    MyRefType () {}  
};  
  
int main()  
{  
    MyRefType Data1, Data2;  
    // ...  
    Data1 = Data2;  
} 

- value types and move efficiency, use double ampersand (&&) to declare rvalue reference in the appropriate member function declarations and defining move constructor and move assignment methods 

most of the time when you want a copy constructor then you will also need move enabled, but reverse may not be true 

unique_ptr replace the deprecated auto_ptr due to lack of move semantics support 

    + using move semantics you can return-by-value or insert-in-middle. 
    #include <set>  
    #include <vector>  
    #include <string>  
    using namespace std;  
      
    //...  
    set<widget> LoadHugeData() {  
        set<widget> ret;  
        // ... load data from disk and populate ret  
        return ret;  
    }  
    //...  
    widgets = LoadHugeData();   // efficient, no deep copy  
      
    vector<string> v = IfIHadAMillionStrings();  
    v.insert( begin(v)+v.size()/2, "scott" );   // efficient, no deep copy-shuffle  
    v.insert( begin(v)+v.size()/2, "Andrei" );  // (just 1M ptr/len assignments)  
    //...  
    HugeMatrix operator+(const HugeMatrix& , const HugeMatrix& );  
    HugeMatrix operator+(const HugeMatrix& ,       HugeMatrix&&);  
    HugeMatrix operator+(      HugeMatrix&&, const HugeMatrix& );  
    HugeMatrix operator+(      HugeMatrix&&,       HugeMatrix&&);  
    //...  
    hm5 = hm1+hm2+hm3+hm4+hm5;   // efficient, no extra copies  

    + enable move for appropriate value types 
    #include <memory>  
    #include <stdexcept>  
    using namespace std;  
    // ...  
    class my_class {  
        unique_ptr<BigHugeData> data;  
    public:  
        my_class( my_class&& other )   // move construction  
            : data( move( other.data ) ) { }  
        my_class& operator=( my_class&& other )   // move assignment  
        { data = move( other.data ); return *this; }  
        // ...  
        void method() {   // check (if appropriate)  
            if( !data )   
                throw std::runtime_error("RUNTIME ERROR: Insufficient resources!");  
        }  
    };  
      
If you enable copy construction/assignment, also enable move construction/assignment if it can be cheaper than a deep copy.

some resources maybe move only which means you could only tranfer the ownership 

## Type conversions and type safety(modern C++)
- implicit type conversions 
if selected conversion is promotion the compiler does not issue a warning 

-  widening conversions(promotion) is safe 
- narrowing conversions(coercion) not safe 
- unsigned - signed conversions, the length of them are equal so there will could be a implicit conversion between signed and unsigned  values 

using namespace std;  
unsigned short num = numeric_limits<unsigned short>::max(); // #include <limits>  
short num2 = num;  
cout << "unsigned val = " << num << " signed val = " << num2 << endl;  
// Prints: unsigned val = 65535 signed val = -1  
  
compiler doesn't warn about implicit conversions between signed and unsigned integral types. 
suggest never do this or add runtime check in these methods 

- pointer conversions 
c-style array is implicitly converted into a pointer to the first element in the array. 

char* s = "HELP" + 3;

this is a bad design code. the pointer s will point to 'p' 

- explicit conversions (casts) 
(int) x; //old-style cast 
int(x); //old style cast functional syntax 

use c++ style will be more type-safe 

    + static_cast, check at compile time only. cast between pointer-to-base and pointer-to-derived 

    double d = 1.58947;  
    int i = d;  // warning C4244 possible loss of data  
    int j = static_cast<int>(d);       // No warning.  
    string s = static_cast<string>(d); // Error C2440:cannot convert from  
                                       // double to std:string 

    + dynamic_cast, for safe runtime-checked casts of pointer to base to pointer to derived. it incurs some overhead 
    Base* b = new Base();  

    // Run-time check to determine whether b is actually a Derived*  
    Derived* d3 = dynamic_cast<Derived*>(b); 

    + const_cast, casting away the const-ness of a variable or converting a non-const variable to be const 
    
    void Func(double& d) { ... }  
    void ConstCast()  
    {  
       const double pi = 3.14;  
       Func(const_cast<double&>(pi)); //No error.  
    }  

    + reinterpret_cast cast between unrelated types such as pointer to int. not guaranteed to be portable to other compilers 
    const char* str = "hello";  
    int i = static_cast<int>(str);//error C2440: 'static_cast' : cannot  
    
    
## Uniform initialization and delegating constructors 
- brace initialization, initialization for any class, struct or union. 
#include <string>  
using namespace std;  
  
class class_a {  
public:  
    class_a() {}  
    class_a(string str) : m_string{ str } {}  
    class_a(string str, double dbl) : m_string{ str }, m_double{ dbl } {}  
double m_double;  
string m_string;  
};  
  
int main()  
{  
    class_a c1{};  
    class_a c1_1;  
  
    class_a c2{ "ww" };  
    class_a c2_1("xx");  
  
    // order of parameters is the same as the constructor  
    class_a c3{ "yy", 4.4 };  
    class_a c3_1("zz", 5.5);  
}  
 
the initializer also could initialize public members 

the initilizer could be used any where 
class_d* cf = new class_d{4.5};  
kr->add_d({ 4.5 });  
return { 4.5 };  

- initializer_list constructor class represents a list of objects of a specified type 
#include <initilizer_list>
initializer_list<int> int_list{5, 6, 7};

initializer_list can be copied, but the member are references to the original list 
initializer_list<int> ilist1{ 5, 6, 7 };  
initializer_list<int> ilist2( ilist1 );  
if (ilist1.begin() == ilist2.begin())  
    cout << "yes" << endl; // expect "yes"  
    
    + STL library container support initializer_list constructor, and aslo include string, wstring and regex 
    
    vector<int> v1{ 9, 10, 11 };   
    map<int, string> m1{ {1, "a"}, {2, "b"} };  
    string s{ 'a', 'b', 'c' };   
    regex rgx{'x', 'y', 'z'};  

- delegating constructors , reduce the repetive code between each constructors with syntax 
constructor(...): constructor(...)

class class_a {  
public:  
    class_a() {}  
    // member initialization here, no delegate  
    class_a(string str) : m_string{ str } {}  
  
    //can’t do member initialization here  
    // error C3511: a call to a delegating constructor shall be the only member-initializer  
    class_a(string str, double dbl) : class_a(str) , m_double{ dbl } {}  
  
    // only member assignment  
    class_a(string str, double dbl) : class_a(str) { m_double = dbl; }  
    double m_double{ 1.0 };  
    string m_string;  
};

we can't do member initialization in a constructor that delegates to another constructor 

    + delegate constructor will override existing non-static data-member initializers 
class class_a {  
public:  
    class_a() {}  
    class_a(string str) : m_string{ str } {}  
    class_a(string str, double dbl) : class_a(str) { m_double = dbl; }  
    double m_double{ 1.0 };  
    string m_string{ m_double < 10.0 ? "alpha" : "beta" };  
};  
  
int main() {  
    class_a a{ "hello", 2.0 };  //expect a.m_double == 2.0, a.m_string == "hello"  
    int y = 4;  
}  

## Object lifetime and resource management 
- concepts 
The final concept is the DAG (Directed Acyclic Graph). The structure of ownership in a program forms a DAG. No object can own itself—that's not only impossible but also inherently meaningless. But two objects can share ownership of a third object. 

we could use shared_ptr<F> 

Pimpl, pimpl idiom is a modern c++ technique to hide impelmentation to minimize coupling and to separate interfaces. it is short for "pointer to implementation"

- heap-based lifetime 
use smart pointers, shared_ptr, make_shared as the default pointer and allocator. use weak_ptr to break cycles do caching and observe objects without affecting or assuming anything about their lifetimes 

void func() {  
    auto p = make_shared<widget>(); // no leak, and exception safe  
    ...  
    p->draw();   
} // no delete required, out-of-scope triggers smart pointer destructor  
  
use unique_ptr for unique ownershipt for example in pimpl idiom 
unique_ptr<widget> p(new Widget());

you can use raw pointer for non-ownership and observation. A non-owning pointer may dangle, but can't leak 
class node {  
  ...  
  vector<unique_ptr<node>> children; // node owns children  
  node* parent; // node observes parent, which is not a concern  
  ...  
};  
node::node() : parent(...) { children.emplace_back(new node(...) ); }  
When performance optimization is required, you might have to use well-encapsulated owning pointers and explicit calls to delete. 

- stack-based lifetime 
modern c++ stack based scope is a powerful way to write robust code it combines automatic lifetime and data member lifetime with high efficiency 

heap object lifetime requires diligent manual maangement 

class widget {  
    private:  
      gadget g;   // lifetime automatically tied to enclosing object  
    public:  
      void draw();  
};  
  
void functionUsingWidget () {  
    widget w;   // lifetime automatically tied to enclosing scope  
              // constructs w, including the w.g gadget member  
    …  
    w.draw();  
    …  
} // automatic destruction and deallocation for w and w.g  
  // automatic exception safety,   
  // as if "finally { w.dispose(); w.g.dispose(); }" 

disadvantage, the construction order is not concurrency-safe for static lifetime objects 

- objects own resources(RAll)
pass every "new" object as a constructor argument to another named object that owns it (always unique_ptr)
  
void f() {  
  unique_ptr<widget> p( new widget(…) );  
  my_class x( new widget() );  
  …  
} // automatic destruction and deallocation for both widget objects  
  // automatic exception safety, as if “finally { p->dispose(); x.w.dispose(); }”  
  
always immediately pass any new resource to another object that owns it 
void g() {  
  other_class y( OpenFile() );  
  …  
} // automatic closing and release for file resource  
  // automatic exception safety, as if “finally { y.file.dispose(); }”  
  
  
## Smart pointers(Modern C++)
- they are defined in <memory> and crucial to RAll(Resource Acquisition Is Initialization programming idiom)

in modern C++ raw pointers are only used in small code blocks of limited scope, loops or helper functions where performance is critical and no confusion about ownership 

void UseRawPointer()
{
    // Using a raw pointer -- not recommended.
    Song* pSong = new Song(L"Nothing on You", L"Bruno Mars"); 

    // Use pSong...

    // Don't forget to delete!
    delete pSong;   
}


void UseSmartPointer()
{
    // Declare a smart pointer on stack and pass it the raw pointer.
    unique_ptr<Song> song2(new Song(L"Nothing on You", L"Bruno Mars"));

    // Use song2...
    wstring s = song2->duration_;
    //...

} // song2 is deleted automatically here.

- smart pointer is a class template that you declare on the stack, and initialize by using a raw pointer that points to a heap-allocated object. after the smart pointer initialized it owns the raw pointer. 

destructor is invoked when the smart pointer goes out of scope even if an exception is thrown somewhere further up the stack 

smart pointer overwrite the operator *, -> so the access is as same as raw pointer 

always create smart pointer on a separate line of code, never in a parameter list so that subtle resource leak won't occure. 

    + example use smart pointer
class LargeObject
{
public:
    void DoSomething(){}
};

void ProcessLargeObject(const LargeObject& lo){}
void SmartPointerDemo()
{    
    // Create the object and pass it to a smart pointer
    std::unique_ptr<LargeObject> pLarge(new LargeObject());

    //Call a method on the object
    pLarge->DoSomething();

    // Pass a reference to a method.
    ProcessLargeObject(*pLarge);

} 

- essential steps for using smart pointers 
    + define as local variable 
    + specify the pointer type of encapsulated pointer 
    + pass raw pointer to a new-ed object  in constructor 
    + using overload -> and * to access 
    + STL smart pointers have a reset member function that releases ownership of the pointer. This is useful when you want to free the memory owned by the smart pointer before the smart pointer goes out of scope

std::unique_ptr<LargeObject> pLarge(new LargeObject());
//Call a method on the object
pLarge->DoSomething();
// Free the memory before we exit function block.
pLarge.reset();
// Pass raw pointer to a legacy API
LegacyLargeObjectFunction(pLarge.get());
  
- kinds of smart pointers 
unique_ptr, exactly one owner, can be moved to new owner, but not copied or shared. replaced auto_ptr. better than boost::scoped_ptr. in <memory> 
shared_ptr, reference-counted smart pointer 
weak_ptr, for use in conjunction with shared_ptr. it design to access object that is owned by one or more shared_ptr without participate in reference counting 

- smart pinters for com objects (classic windows programming), ATL defined several smart pointers for various purpose 
_com_ptr_t it creates wrapper classses from .tlb files, it's the best choice when you don't want to include the ATL header files 

CComPtr class, use this unless you cannot use ATL. performs reference counting by AddRef and Release 
CComQIPtr class, resembles CComPtr provides simplified syntax for calling QueryInterface on a COM objects. 
CComHeapPtr classes, smart pointer to objects that use CoTaskMemFree to free memory 
CComGITPtr class, smart pointer for interfaces that are obtained from global interface table (GIT)
_com_ptr_t classs, resembles CComQIPtr in functionality but does not depend on ATL headers 

- ATL smart pointers for POCO objects(Plain old CLR object0/ Plain old C++ object) is a simple object created in the common language runtime of the .net does not have any dependency on an external framework 

in classic windows programming these types are useful alternative to the STL collections. especially when code portability is not required or do not want to mix programming models of STL and ATL 

CAutoPtr class, enforces unique ownership by transferring ownership on copy comparable to std::auto_ptr 
CHeapPtr, smart pointer for object that are allocated by using the C malloc 
CAutoVectorPtr class, smart pointer for arrays that are allocated by using new []
CAutoPtrArray class, encapsulated an array of CAutoPtr elements 
CAutoPtrList class, a list of CAutoPtr 

- How to create an use unique_ptr instances 
    + unique_ptr can only be moved, construct a unique_ptr by make_unique helper function 
    auto ptrA = make_unique<Song>(L"lala", "la la");
    
    auto ptrB = std::move(ptrA);
    
    move eliminates the need for a copy operation 
    
    + example 
    unique_ptr<Song> SongFactory(const std::wstring& artist, const std::wstring& title)
    {
        // Implicit move operation into the variable that stores the result.
        return make_unique<Song>(artist, title);
    }

    void MakeSongs()
    {
        // Create a new unique_ptr with a new object.
        auto song = make_unique<Song>(L"Mr. Children", L"Namonaki Uta");

        // Use the unique_ptr.
        vector<wstring> titles = { song->title };

        // Move raw pointer from one unique_ptr to another.
        unique_ptr<Song> song2 = std::move(song);

        // Obtain unique_ptr from function that returns by value.
        auto song3 = SongFactory(L"Michael Jackson", L"Beat It");
    }
  
    + how to create_ptr 
    vector<unique_ptr<Song>> songs;

    // Create a few new unique_ptr<Song> instances
    // and add them to vector using implicit move semantics.
    songs.push_back(make_unique<Song>(L"B'z", L"Juice"));
    songs.push_back(make_unique<Song>(L"Namie Amuro", L"Funky Town"));
    
    for(const auto& song: songs) //must pass by reference else will throw exception 
    {
            wcount << L"artist" << song->artist << endl;
    }

    + show how to initalize a unique_ptr that is a class member 
    class MyClass
    {
    private:
        // MyClass owns the unique_ptr.
        unique_ptr<ClassFactory> factory;
    public:

        // Initialize by using make_unique with ClassFactory default constructor.
        MyClass() : factory ( make_unique<ClassFactory>())
        {
        }

        void MakeClass()
        {
            factory->DoSomething();
        }
    };
  
    + use make_unique to create a unique_ptr to an array, but you cannot use make_unique to initialize the array elements 
    // Create a unique_ptr to an array of 5 integers.
    auto p = make_unique<int[]>(5);

    // Initialize the array.
    for (int i = 0; i < 5; ++i)
    {
        p[i] = i;
        wcout << p[i] << endl;
    }
  
- how to create and use shared_ptr instances 

  
  
  









    
    
    
    





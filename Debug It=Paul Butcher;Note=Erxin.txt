Debug It=Paul Butcher;Note=Erxin

# Part 1
## the heart of the problem 
- difference between debugging and making the bug go away, find the root cause is debugging 
- empirical approach, using the software itself to show you what's going on 
- the core debugging process
    + reproduce, reliably and conveniently reproduce the problem 
    + diagnose, construct hypotheses and test them by performing experients till find the root cause 
    + fix 
    + reflect learn lessions of the bug 
 
- first thing first, thing before diving in 
    + do you know what you're looking for? 
    + oneproblem at a time 
    + check the simple things first 
    + ask other team member about the bug especially you are working in an area you're unfamiliar with 
    
    quiet hair pulling 
    
- put it in action  
    
    
## chapter 2 reproduce 
- why finding a reproduction is important 
- how to exert the necessary control over your software to find one 
- what makes a good reproduction and how you can close in on this ideal 
- reproduce first, ask questions later 
    + prove the bug and prove the fix is effect 
    
- start with the obvious, the things need to control break down into three areas 
    + software it self, configuration, settings, ...
    + environment 
    + input you provided 
- recording inputs 
- logging 
    + ability to switching logging on or off 
    + different logging levels 
    + log messages 
    + standard tools to help analyze log files 
    + automatic logging of certain events like unhandled exception 
- logging controversy 
    + logging obscures the code 
    + logging can suffer from the same problem as comments such as out of date 
    + no matter how much logging you add may be it's not enough when there is a problem 
    
- refining your reproduction 
    + aiming for a reproduction both reliable and convenient 
    + do so on demand 
    
- minimizing the feedback loop, as simple as possible to reproduce the bug 
find out which aspects of reproduction are unnecessary and can be discarded 

- make nondeterministic bugs deterministics, cause of nondeterminism may 
    + startingfrom an unpredictable initial state 
    + interaction with external systems 
    + deliberaterandomness 
    + multithreading 
    
- automate the steps necessary to reproduce a bug both speeds the process up and decrease the chane of making a mistake 

- automating with tests 
    + test tools 
    fitNess, http://fitnesse.org, allows tests to be expressed as tables of input data 
    
    watir, http://wtr.rubyforge.org, open source library for automating web browsers 
    
    selenium, http://selenium.openqa.org 
    
    sahi, http://sahi.co.in, automation and testing tool for web application 
    
    the grinder, http://grinder.sourceforege.net/, open source load testing tool in which scripts are written in Jython 
    
    JMeter, http://jakarta.apache.org/jmeter, load testing tool 
    
    QuickTest and LoadRunner, automated functional GUI testing and performance testing 
    
    Peach Fuzzing Platform, http://peachfuzzer.com
    
    RFuzz, http://rfuzz.rubyforge.org, ruby library that allows web application to be easily fuzz tested 
    
    + runtime ananlysis tools 
    Valgrind, http://valgrind.org for linux and includes memory analysis 
    
    BoundsChecker, http://www.microfocus.com/downloads/devpartner-for-visual-c-bounds-3766.aspx
    BoundsChecker is part of Compuware’s DevPartner for Visual C++ BoundsChecker Suite

    Purify:
    http://www.ibm.com/software/awdtools/purify/
    IBM’s Rational Purify detects memory leaks

    DTrace:
    http://opensolaris.org/os/community/dtrace/
    DTrace is a highly regarded dynamic tracing framework created by Sun Microsystems

    + network analyzers 
    TCPDump, http://www.tcpdump.org, open source package sniffer
    
    Wireshark, open source tool 
    
    + debugging proxies 
    Charles, http://www.charlesproxy.com, http proxy 
    
    Fiddler, http://www.fiddlertool.com, http proxy 
    
    + debuggers 
    firebug 

- replaying log file, can be used to recreate the same sequence of operation at will 

- iterate, continually refine your production 

- what if you really can't reproduce it? 
    + does it really exist 
    + work on a different problem in the same area 
    + get other involes 
    customer support team may have good understanding of your users 
    
- leverage your user community 

# Chapter 3 Diagnose 
- under stand the root cause of the behavior you're seeing 
- core diagnostic process 
- different type of experiment and what makes a good experiment 
- useful stratagems 
- stand back i'm going to try science 
    + start a hypothesis and attempt to create experiment
    + start with an observation that does't with our current theory and modify that theory 
    
- different types of experiments 
    + examine an aspect of the software's internal state 
    + modify some aspect of how you run the software 
    + change the logic encoded within the software itself 
    
- one change at a time 
- keep a record of what you have tried 
    + periodically review what you've already tried and learned to help you identify the most promising next step 
    
    + it is helpful to keep a daybook. it is useful for meeting design sketchs a record of the steps necessary to insall a piece of software...etc 
    
- how else can a daybook help when debugging?
    + writing out hypothese, getting things onto paper can help identify flaws in assumptions 
    
    + keeping track of details such as stack traces, argument values, andvariable names
    
    + keeping a list of ideas to try and add a to do list 
    
    + doodling when you need to take your mind off the problem 

- ignore nothing, something unexpected happends it means that some assumption you're making is broken 

anything that you don't understand is potentially a bug 

- Stratagems
    + beware of heisenberg, observing a system can change the system itself 
    
- divide and conquer, binary chop 

- leveraging source control when chasing a regression. A bug in functionality that used to work correctly but was broken by some subsequent change 

identify exactly which change introduced the problem 

- focus on the differences 

- learn from others 

- OCCAM's RAZOR, "All other things being equal the simplest explanation is the best"

- debuggers 
    + one of the most powerful tools in your toolbox, you should certainly take the time to become familiar with it 
    
    + test-first development 
    
    during initial development 
    
    have a theory why the code is behaving in a particular way 
    
    debugger help us explore code that we simply don't understand 
    
    + debugging sessions are ephemeral; test are permanent 
    
- pitfalls
- are you changing the right things 

- validate your assumption 
    + assumptions are dangerous because they create blind spots 
    
- multiple causes 

- shifting sands, faced with a changing underlying system stop and work out what's changing and why 

- Mind games,









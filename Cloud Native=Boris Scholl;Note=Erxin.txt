Cloud Native=Boris Scholl;Note=Erxin

# Introduction to Cloud native 
- distributed systems 
    + Fallacies of Distributed Systems
network is reliable 
latency is zero 
infinite bandwidth 
network is secure 
topology does not change 
one administrator 
transport cost is zero 
network is homogeneous 

- CAP theorem 
consistency(C) equivalent to having a single up-to-date copy of the data. ACID (atomicity, consistency, isolation, and durability) optimize for consistency
high availability(A) of that data(for updates)
tolerance to network partitions(P)

- twelve factor app 
codebase 
dependencies 
configuration 
backing services 
buidl,release,run 
data isolation, each service manages it's own data 
concurrency, scale out via the process model 
disposability, Maximize robustness with fast startup and graceful shutdown.
dev/prod parity, Keep development, staging, and production as similar as possible. 
logs, treat logs as event streams and routed to external systems 
admin processes 

- availability and service-level agreements 


# Fundamentals 
- containers, Linux containers (LXC) were introduced to abstract away some of the complexity of composing the various technology underpinnings of what is now commonly call a “container.”

- Container isolation levels, VM, Hyper-Vcontainers, sandboxed containers, MicroVMs


    + Nabla containers, The Nabla container runtime (runc) is an Open Container Initiative (OCI)-compliant runtime.

    + Google's gVisor
    
    + MS Hyper-V 
    
    + Kata containers are a combination of Hyper.sh 
    
    + Amazon's Firecracker

- Container orchestration 
    + providing and deployment of containers onto the cluster nodes 
    + resource management of containers 
    + health monitoring of the containers 
    + scaling in or out 
    + providing mapping for containers to connect to networking 
    + internal load balancing 
    
- kubernetes overview 
kube-apiserver, frontend for the kubernetes control 
etcd, key/value store used for all cluster data 
kube-scheduler, monitors newly created pods and find avaliable node 
kube-controller-manager, manages a number of controllers that are responsible for responding to nodes that go down or maintaining the correct number of replicas 
cloud controller manager, run controlelrs taht interact with the underlying cloud providers 
kubelet, an agent that runs on each node in the cluster
kube-proxy, maintains network rules on the nodes and performs connection forwarding 
container runtime
pods, a management wrapper around one or multiple containers, storage resources or a unique network IP that governs the container life cycle 
services, steady endpoint to a grouping of pods that are running on the cluster 
replicaSets, eaasiest way to think about replicaSet is to think about service instances. 
deployments, deployment controller changes the actual state to the desired state at a controlled rate 

- master vs workder 
{master 
kube api server 
kube scheduler 
kube controller manager 
etcd}

{worker node 
kublet 
kubeproxy
ip table

CRI, container runtime 
[POD{
    container
}]}

- Container Runtime Interface (CRI)
- OCI, The OCI is a Linux Foundation project that aims to design open standards for container images and runtimes. 
- containerd is an industry-standard container runtime used by Docker and Kubernetes CRI,
- Moby, Moby is a set of open source tools created by Docker to enable and accelerate software containerization. 

- functions, Google Cloud Functions, which are implemented on serverless infrastructure. The advantages of serverless computing—fast startup and execution time, plus the simplification of their applications

- lift-and-shift into Infrastructure as a Service (IaaS) gives you the most control over the entire stack. 

- microservices architecture 
agility 
continuous innovation 
evolutionary design 
small focused teams 
fault isolation 
improved scale and resource usage 
improved observability 
challenges with a microservices architecture 
complexity 
data integrity and consistency 
performance 
development and testing 
versioning and integration 
monitoring and logging 
service depenency management 
availability 


# Designing cloud native applications 
- operational excellence 

    + automate everything, infrastructure as code
    + monitor everything 
    + document everything 
    + make incremental changes 
    + design for failure 

- voting application 
voting app, docker, events function data, results app docker 

- scalability and cost 

scaling horizontally to increase the aggregated system availability.

- consideration for using functions

- granular versioning story is to use resource versioning
url...api/version/function/...

- backward compatibility 
sensible defaults or optioanl values for new apis 
never rename or remove existing fields 
never make optional things required 
mark old api endpoints as obsolete if not usd anymore 
test the combination of new and existing service versions by passing old messages between them 

- semantic versioning

major version is increased when you make API-incompatible changes 

minor version is increased when you add backward-compatibile features 

path version is increased when make backward-compatible bug fixes 

- websockets, long held single TCP socket connection 

- HTTP/2 present verbs, status codes and most of the headers 

- GRPC, fairly new protocol that is quickly gaining in popularity in the microservices community 

- messaging protocols, STOMP, WAMP, AMQP, MQTT

- message queue telemetry transport, binary protocol that is mainly associated with IoT, MQTT, often used for communication between sensros and gateways

- advanced message queuing protocol, AMQP, binary protocol that is mainly designed around messaging with a rich feature set. restrct traffic over port 443(HTTPS)

- serialization consideration, good json serializer 

- idempotency handle the message in an idempotent way. desing operations idempotent steps 

- request/response, message exchange pattern, sync or async, a response queue and using correlation IDs(CIDs). high level implement steps 

{service A} <---> {service B}

service a create request with an ID and send to queue
service b picks the message from the queue and assigns a cid based on id 
service b adds the response with cid
service a picks the cid relative to ID

- publisher/subscriber

enable loose coupling between services and fucntions 

enable event-driven design, publisher publish message and message broker notify all the subscribers 

- choosing between pub/sub and request response. 
    + request/response
    
    tight coupled different services 
    
    + pub/sub
    
    services is handled by passing messages into a pub/sub system such as Redis, RabbitMQ, or Apache Kafka

- event and queue-based asynchronous messaging are the most popular patterns for IPC.
- gateways,  APIs, and they are typically used for Secure Sockets Layer (SSL) offloading and routing for static resources

    + routing, Routing is one of the most common functions of a gateway. 
    
    + aggregation, A gateway can also act as an aggregator: it takes one request from the client and makes multiple requests to the underlying services. It then aggregates the service responses and returns the single response

    + offloading, One of the most common uses for gateways is to offload different functionality from individual services and do them at the gateway level. only functionality that’s used by all services
    
    authentication and authorization 
    rate limitting 
    caching 
    compression 
    SSL offloading 
    logging and monitoring 
    
    + egress, gress gateway running inside your private network can help direct and control all traffic exiting the private network. can enables you access any external services in a controlled way. 
    
    Transport Layer Security (TLS) origination
    
    + Service mesh,  increase developer productivity by moving common functionality out of each service and into the service mesh. an alternative to the sidecar proxy, you can run one proxy per host instead—in Kubernetes you can use a DaemonSet to achieve this.
    
        * The number of services and sidecar proxies: resource consumption grows as the number of service replicas grows.
        
        * Not all services require a dedicated proxy: consider moving from the sidecar pattern to the per-host pattern and reusing proxy functionality
        
        * The number of requests between service and proxy: requests sent to the sidecar proxy go through fewer steps than requests if you’re using a per-host proxy
        
    + compoaring service mesh solutions 
    proxy pattern 
    support protocols 
    proxy 
    encryption 
    automatic proxy injection 
    traffic control 
    resilience(timeouts, retries)
    tracing 
    metrics
    
    
- Implementing gateways, NGINX, HAProxy, and Envoy. All of these are reverse proxies

- traffic management

    + The following are some of the most common criteria for traffic routing
    Request headers
    
    URI 
    
    Sources
    
- failure handling 

    + providing special HTTP headers (Istio, for example, has x-envoy-upstream-rq-timeout-ms and x-envoy-max-retries headers)

    + inject failures into your services, this can significantly help you testing how services behave. There are two ways 
    HTTP aborts 
    
    HTTP delays 
    
- security 

    + Authentication, mutual TLS, and JWT tokens (https://jwt.io/)

        * namespace level control 
        * service level control 
        * method level control 
        
    + the proxy allows the service mesh to automatically collect metrics such as the number of requests
    + Each time a request enters the system, the request ID header value is set. This value, (sometimes also referred to as the aforementioned CID) can be used to trace the requests as they make their way through your system


# Working with data 
- A trend in microservices architectures encourages the decentralization of data, spreading the data for an application across multiple services

- Cloud native applications take full advantage of the cloud
    + prefer managed data storage and analytics services 
    + use polyglot perssitence data partitioning and caching 
    + embrace eventual consistency and use strong consistency when necessary 
    + prefer cloud native databases that scale out, tolerate faults and are optimized for cloud storage 
    + deal with data distributed across multiple datastores 
    
- storage types 
    + object/blob storage
    + file storage 
    + disk(block) storage, persistent local storage disks like mongodb or mysql database 
    
- BSON (/ˈbiːsən/) is a computer data interchange format. The name "BSON" is based on the term JSON and stands for "Binary JSON".[2] It is a binary form for representing simple or complex data structures including associative arrays (also known as name-value pairs), integer indexed arrays, and a suite of fundamental scalar types. BSON originated in 2009 at MongoDB.

- data store types 
    + Databases, well defined formats
    + key/value 
    + document, hashmaps, lists 
    + relational databases, two-dimensional structures called tables, consisting of columns and rows. Data in one table can have a relationship to data in another table
    + graph database, stores two types of information: edges and nodes. Edges define the relationships between nodes, and you can think of a node as the entity
    + column family database, You can think of a column-family database as holding tabular data with rows and columns, but the columns are divided into groups known as column families. Each column family holds a set of columns that are logically related together and are typically retrieved or manipulated as a unit. 
    + time-series databse, that optimized for time 
    + search engine database 
    + streams and queues are data storage systems 
    + blockchain, Records on a blockchain are stored in a way that they are immutable
- select a datastore 
data format 
read and write, how will the data need to be consumed 
data size 
scale and structure 
data relationships 
consistency model 
schema flexibility 
concurrency 
data movement 
data life cycle 
change streams 
other supported features, such as full-text search, indexing etc. 

team experience 
support 
performance and scalability 
reliability 
replication, across mulitple regions or zones 
limits, size and scale 
portability, on-premises or multiple clould providers? 

maanged service, managed data service 
region or cloud provider 
licensing 
overall cost 

- A site that tracks database popularity, db-engines (https://db-engines.com)
- data in multiple datastores 
data consistency 
analysis 
backup and restore 

- data capture 
notifications 
materialized views 
cache invalidation 
auditing 
search 
analytics 
change analytics 
archive 
legacy systems 

- kafka, kubernetes, hadoop 
- transaction supervisor and compensating transactions to make sure the parallel executed transaction states are consistent between each other. One fail the other should failed

CDC, change data capture for helping avoid complex transaction coordination 

- Extract, transform and load, platforms for a long time to move data from one system to another. 

- Microservices and data lakes 

- Restricted Client Tokens (Valet-Key), shared-access signature, and in Amazon S3, this would be a presigned URL. After the file is uploaded, an object storage function could be used to update the application state

- Backend as a Service (BaaS) or Mobile Backend as a Service (MBaaS). A full-featured MBaaS will generally offer more than just data storage, given that mobile applications often need identity management and notification services as well

- GraphQL server to provide clients access to data. In Figure 4-17, a GraphQL service is deployed and configured to handle authorization, validation, caching, and pagination of data. 

http://www.graphql.org/

- fast scalable data 

sharding data,  dividing the datastore into horizontal partitions, known as shards. each shard contains the same schema but holds a subset of the data 

caching data, cache invalidation and updates
    + TTL 
    + cdc
    + appliaction logic to invalidating and update cache 
    + use a pssthrough caching layers 
    + run a background service at a configuration interval 
    + use the data replication features of the datbase 
    + caching layer renews based on access and available cache resources 
    
CDN, content develivery networks is a group of geographically distributed datacenters 
    + placing content closer to the consumer 
    + increase content availability and redendancy 
    + CDN service like CloudFront 
    
- analyzing data 
streams 
batch 
data lakes on object storage, Hadoop Distributed File System (HDFS)
data lakes and data warehouse
distributed query engine,  Presto, Spark SQL, Drill, and Impala, to name a few.
databases on kubernets, Operator Hub is a directory listing of operators (https://www.operatorhub.io).
storage volumes 
StatefulSets, were designed to address the problem of running stateful services like data storage systems on Kubernetes. StatefulSets manage the deployment and scaling of a set of pods based on a container specification.
DaemonSet, ensures that a group of nodes runs a single copy of a pod. 


# DevOps
- collaboration
- automation 
- lean principles and processes 
- measurement
- sharing 
- testing 
- testing doubles, use either one or all of the test doubles.
- test automation pyramid
    + unit test 
    + service test, component level tests oocupy the middle of the pyramid 
    + ui tests 
    + jepsen tests, The Jepsen library sets up a distributed system and runs a set of operations against it to verify that the history of operations makes sense.
    + performance tests
    + load tests
    + security/penetration tests 
    + a/b tests, A/B tests usually are executed against services that are already running in the production environment. The purpose of an A/B test is to determine whether one version of the service (A) performs better in comparison to another service (B). 
    + acceptance test, whether your services are ready to be moved to a different environment
    + usability tests, Usability tests are conducted with real users of your product to discover how easy it is to use your product.
    + configuration tests
    + smoke tests 
    + integration tests 
    + chaos tests, wreak havoc and introduce chaos to your system randomly. You would run a set of so-called chaos monkeys as a separate service within your environment to test how your system behaves when things become chaotic and services are randomly disabled
    + fuzz tests, feeding a random, invalid, or unexpected set of data to your service or component in an attempt to make it fail.
- testing in production 
    + predeployment 
    + deployment 
    + relaese 
    + post-release 
    
- deployed into a dev/test environment 
feature -> unit tests -> integration tests -> dev cloud env -> open pr -> ci -> deploy  -> montor 

    + tools 
docker compose 
KSync 
Skaffold 
Draft is an open source tool that automates the deployment of application changes to either a remote or local Kubernetes cluster 
Telepresence, open source tool that you can use to wire containers running locally into a remote Kubernetes cluster. https://www.telepresence.io/

    + two-way network proxy for your normal pod running in the Kubernetes cluster. This pod proxies data from your Kubernetes environment (e.g., TCP connections, environment variables, volumes) to the local process. The local process has its networking transparently overridden so that DNS calls and TCP connections are routed through the proxy to the remote Kubernetes cluster.
Azure-specific Kubernetes























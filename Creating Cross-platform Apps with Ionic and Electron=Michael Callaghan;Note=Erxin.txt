Creating Cross-platform Apps with Ionic and Electron=Michael Callaghan;Note=Erxin

# Getting started
- Intro, turn web application to desktop application 
https://electron.atom.io/apps/

    + project concept 
    + prerequisite
    + install tools 

- requisites 
javascript 
eleectron 
ionic 
typescript 
angular 

- reference, building mobile apps with ionic 2, angular 2 and typescript 
- hardware and software 
node.js 
git 
electron and ionic 
vscode 

- mac tools 
homebrew, missing mac package manager 
    + commands 
    $ brew install node 
    $ brew install git 
    $ npm install -g ionic@latest 

- window tools 
git, https://git-scm.com/downloads 
node, https://nodejs.org/en/download/ 
http://ionicframework.com/docs/guide/installation.html

- your first app 
mkdir ionic 
cd ionic 
ionic start hello-world tabs 
cd hello-world 
ionic serve 

https://ionicframework.com/docs/cli/


# Building a desktop UI with ionic 
- Why ionic 
multi device support 

simple clean 

budget 

    + sample application 
    app notify the location changes 
    
    determine where the user is and get the geological data and notify the user 
    
- create the ionic project 
$ ionic serve 
$ ionic cordova run ios 

$ ionic generate --pageDir src/app/page setup 
$ ionic serve -b 

- navigate to the setup page 
    + open project with text editor 
    + add ion-fab to load button 
    
    inside *.ts to add setup code 
    
    we push page and out of stack to do navigate in ionic 
    
    this.navCtrl.push('SetupPage', {} '...');
    
- completing the setup up page 
- creating an address list page 
- finishing the home page 
- wrapping up 


# Interacting with the host os 
- electron 
https://electron.atom.io/

main process 

renderer process which means the web application been hosted 

- platforms 
macOS 
windows 
linux 

- electron use ES6 and ionic use typescript
- copy the web application to the www folder 


# making service calls 
- The dispatcher API 
    + option 1
Ionic -> Electron -> Dispatcher Service 

initiate in ionic 
implement API in electron 
call actual API 
process results in electron 
return data to ionic 

draw backs:
duplicate API 
tied to electron <- bind to electron 

    + option 2 
initiate in ionic 
call actual API 
process results in ionic 
spy on response data in electron 
ionic ignorant of electron 
CORS? cross origin resource sharing 

draw backs:
decoding result <- not wanted

    + option 3 
initiate in ionic 
call actual API 
process results in ionic 
send data to electron 
CORS 

- postman, developing APIs is hard, postman make it easy 


# Storing application data 
- ionic storage 
electron file system 
interprocess data sharing 
- updated dispatcher service 


# packaging and deployment 
- manual packaging 
$ npm run ionic:build 
- electron packager, open source tool 
- electron builder, using yarn 
$ yarn add --dev electron-builder 

check the package document for more details 
- upate, electron-update. we could implement automatic update 
- deployment 












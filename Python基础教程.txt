Beginning Python From Novice to Professional |Second Edition|
Magnus Lie Hetland

http://www.python.org

python 的集成开发环境
IDLE, Pythonwin window下的开发环境, ActivePython功能完善包，包含IDEL, Komodo商业化得IDE, Wingware商业化的IDE, BlackAddre商业化的IDE以及GUI生成器（QT）,Boa Constructor免费的ide和gui生成器，anjuta linux/unix下的万能ide,Arachno Python 商业化IDE, Code Crusader, Code Forge, Eclipse, eric qt的免费IDE, KDevelop针对KDE的跨平台语言, VisualWx免费的GUI生成器, wxDesigner商业化得GUI生成器, wxGlade免费的GUI生成器

获取用户输入input()
输出print

连接两条语句符号  :

幂函数 **

导入模块 import modulName
导入模块的另一种写法 from moduleName import functionName 这种写法可以避免函数的重复导入

cmath和复数计算， 语言与matlab一样引入了复数因子i, j

__future__模块

整除 //
整型数范围 2147483647
十六进制数以0x开头，八进制数以0开头

unix将脚本编译为可执行文件，使用
#!/usr/bin/env python
将其放在脚本前即可
#chmod a + x hello.py
windows下正确安装python可以直接双击运行脚本，也可以改成*.pyw运行

注释符号 #
输出指定字符串，转意数字等 `outPut`或repr()//是反引号

字符串
输入时尽量使用raw_input不要使用input，因为raw_input可以将输入进行转意为合法的字符串
跨越多行的字符串使用符号 '''string'''
输入字符串时保持输入内容无需转意字符使用 r开头,但是最后一个字符串不能是反斜线
r stringName
输入unicode字符串 u开头
repr(variable) 会返回合法的python字符串表达式，在print输出时保持特殊符号，相当于字符串转换，也可以使用`variable`实现同样功能，注意是`而不是'，推荐使用repr

数据结构
sequence，序列
container，列表，元数组，字典
set，集合
键，数据结构中的元素
通用操作：indexing索引，分片sliceing，加adding，乘multiplying
索引具有正负两种，起始为0，最后为-1，可以使用matlab一样的索引方式　aryName[start-end], aryName[start:end:step],可以省略
可以使用in操作进行检测元素是否在序列中存在
var in aryCollection

连接操作 + ， 只有两种序列的数组才能进行连接操作

乘法可以进行复制相同类型的序列
'string' * n
[2,34] * n
生成复制后的n个序列值
字符串连接 str0+str1
书写时分开的会自动连接

常用的字符串检测函数 len, max, min

列表，list(Object), 根据集合中每个元素进行创建列表，可以使用添加函数 objList.join
删除列表元素 del objList[index]
添加 objList.append(index)
统计某个元素在列表中的个数 objList.count(objListItem)
在一个列表后追加另一个列表 objList.extend(objListAdd)
若使用 + 则会新生成一个列表
同事都可以使用分片操作进行插入提取 :
移除列表中指定的内容 objList.pop(index),并返回删除的值
objList.remove(objListItem)从列表中移除第一个匹配项
objLIst.reverse() 反向存放

传值，x = y是引用复制，x = y[:]是值复制，这在排序中很重要如果需要产生元数据副本的排序那么应当先产生元数据的副本之后再对副本排序
x.sort()
也可以自定义比较函数之后将比较函数传递给sort方法
cmp(x,y)
x.sort(cmp)

列表，[a, b, c, ...]
;
元数组,(a, b, c, ...)或 a, b, c 是不可变序列，创建方法使用逗号分隔一些值或使用圆括号, 当只包含一个值的时候使用a, 或(a,)
tuple(serialName) 将一个序列转换为元组，序列可能为list等
也同样可以进行分片操作
元组在映射中可以作为键使用

字符串操作
string中含有参数，参数格式同C，%X, 可以在之后的语句赋予参数
string % variable
;
字符串替换，可以调用字符函数 substitute(string|dictionary)
string = "...$x..." 其中x是变量
string.substitute(x = "as") 则所有$x被替换，也可使用字典
;
d={}
d['x'] = "adsf"
string.substitute(d)
;
字符串转化如果参数是元组，需要有对应的参数个数
'%s is this %s' % ( 1, 2 )
转换符前可以增加说明符号
-, 表示左对齐
+, 表示转换之前要加正负号
' ', 空格表示整数之前保留空格
0， 表示转换位数不够补零

字符串常量
string.digits, string.letters, string.lowercase, string.printable, string.punctuation, string.uppercase
字符串常量取决于当前python编译器配置的语言，如果要使用某种特定的字符类型可以加前缀
string.ascii_letters
;
string.find(substring);
string.join(connectString); 使用指定的连接字符连接字符串
string.lower(), string.replace(a,b), string.split(), string.strip() 返回去除两侧空格的字符串， string.translate()逐个字符替换字符，可以用于全球化

字典
diction = {key:value, ...}
可以使用dict函数
还可以使用{}操作直接创建字典对象，其中方法fromkeys(),可以直接创建只有索引的空字典
{}.fromkeys(['name','age'])

import, 导入使用
import someModule
from someModule import someFunction
import someModule as anotherName  # as 可以提供别名

赋值
x, y, z = 1, 2 ,3
key, value = objDiction.popitem()
python 3 以后增加*号运算，用于在赋值的时候收集所有剩余元素
a, b, rest* = [1, 2, 3, 4, 5]
a += b

条件假
false, none, 0, "", (), [], {}
;
false == 0, true == 1
;
所有的类型都可以用作bool型，在python中不需要对其转换

if case :
	statment
elif:
	statment
else:
	statment

断言
assert

is, 判断是否指向同一个元素
in collection, 测试是否在集合内

and, or

while case:
	statment

for varName in collection:
	statment

zip()函数可以将两个元素压到一起形成元组

break, continue

list创建，使用循环
[x * x for x in rang(10)]
[g+b for b in boys for g in girls if b[0] == g[0]]

空语句
pass
del 删除不在使用的对象
exec string , 执行一个字符串
eval string , 执行字符串并求值

python中传递列表参数是传地址，如果需要传值，需要使用克隆；单个变量为传值

函数
默认参数
functionName( parameterName = value )
;
functionName( var0, *rest ) #星号用于存储多余参数
functionName( var, **diction ) #**用于收集key:value组合字符串

可以使用管道将前一个操作的输出流连接到下一个操作的输入流

递归生成器，使用yield代替return

模块
__name__属性，当模块作为主程序运行的时候其值为main, 否则为其模块本身名
if __name__ == 'main':
	runSomeFunction
包括模块代码的文件名要和模块名保持一致
；
dir命令用于查看模块中包含的饿内容
；
可以在模块中定义变量名或函数名得集合变量如命名为__all__
;
模块的__doc__属性用于设置模块的帮助字符串，用于被help调用
；
sys，模块
包含参数，模块，路径，运行平台，输入输出，以及错误功能
argv, exit(), modules, path(), platform, stdin, stdout, stderr
;
os 模块
包含操作系统的功能
environ, system(command), sep 路径中的分隔符, pathsep 分隔路径的分隔符，linesep 行分隔符, urandom 返回n直接加密强随机数
例如使用os.startfile( strCommand ) 可以运行程序比较 os.system()要好
；
fileinput, 轻松遍历文件所有行
input(file,inplace,backup) 用于遍历多个输入流中的行，filename(), lineno() 累计的行数, filelineno() 当前文件行数, isfirtline(), isstdin(), nextfile(), close()
;
set, 集合
;
heap, 堆
i位置元素总比i/2处得大
；
double-ended queue, 双端队列
;
collection 包含deque, defaultdict
;
time, 模块
;
random， 伪随机数模块，如果需要强加密数字，则使用os.urandom
；
shelve, 模块，是一个简单存储的模块；调用
shelve.open返回self对象，self使用起来类似于字典，知识键值要为字符串，之后调用close方法完成存储
；
re，模块
在模块(...)为子模式，可以看做一个整体
；
functools, 部分求值，或者filter, reduce功能
;
difflib, 可以计算两个序列的相似程度, 可以找出序列中最像的
;
hashlib, 可以计算小签名
;
csv, comma-separated values, 都好分隔值
;
timeit, 衡量代码块运行时间的
profile, 用于对代码块效率全面分析
trace， 部分执行，测试时很有用
;
datatime
;
itertools, 创建联合迭代器
;
logging, 日志文件
;
getopt和optarse:用于处理应用程序执行时的附加开关参数
;
cmd, 可以自己编写命令行解释器，如同python 交互节解释器一样

读写文件
open()
file()

GUI Toolkit,图形界面
wxPython, 跨平台包, http://wxpython.org
Tkinter, 使用于TK平台 http://wiki.python.org/moin/TkInter
pythonWin, 只能在windows上使用， http://starship.python.net/crew/mhammond, 可以使用windowsGUI功能
Java Swing, 只能用于Jython, 使用本机的Java GUI
PyGTK, 使用GTK平台， 在Linux上很流行
PyQt, 使用QT平台，跨平台， http://wiki.python.org/moin/pyQt
pyGtk, pyQt, Tkinter and wxPython comparision http://pythonpapers.org 1期26-37页
；
wxPython, 使用
import wx
app = wx.App()
win = wx.Frame(None)
btn = wx.Button(win)
bkg = wx.Panel(win)
filename = wx.TextCtrl()
hbox = wx.BoxSizer() #布局组件
hbox.Add( btn, proportion = 1, flag = wx.EXPAND ) 
btn.Bind(wx.EVT_BUTTON, functionName)
bkg.SetSizer(hbox)
win.Show()
app.MainLoop()

def functionName(event):
	pass
;
Tkinter， 包
from Tkinter import *
def hello(): print 'hello, world'
win = Tk() #Tk主窗口
win.title(stringName)
win.geometry('height*width')
btn = Button( win, text = stringText, command = functionName )
btn.pack( expand = YES, fill = BOTH )
mainloop()
;
Jython

数据库支持
http://wiki.python.org/moin/DatabaseProgramming
DB API的数据模块都必须定义3个描述模块特性的全局变量
apilevel, 所使用的python db api版本
threadsafty, 模块的线程安全等级
paramstyle, sql查询中使用的参数风格
；
异常
StandardError, 所有异常的泛型基类
Warning, Error, InterfaceError, DatabaseError, OperationalError,IntegrityError, InternalError, ProgrammingError, NotSupportedError
;
连接和游标
dsn 数据源名, user, password, host, database
;
connect obj function:
close, commit, rollback, cursor
;
cursor obj function:
callproc, close, excute 执行语句可以 使用参数, executemany 对序列中的每个参数执行SQL操作, fetchone 把查询结果集的下一行保存为序列或者NONE, fetchall 将所有剩余的行作为序列的序列, nextset 跳至下一个可用的结果集, setinputsizes 设置输入缓冲区, setoutputsize设置输出缓冲区
属性：
description, rowcount, arraysize
;
类型
Date, Time, Timestamp, DateFromTicks 保存新纪元以来的秒数, TimestampFromTicks, Binary(string), STRING, BINARY, NUMBER, DATETIME, ROWID
;
SQLite, 已经被包装在PySQLite标准库内
http://sqlite.org 下载源码
import sqlite3
conn = sqlite3.connet('pathToDatabaseName')
curs = conn.cursor()
conn.commit()
conn.close()

网络编程
socket模块，默认两个参数一个是地址族，第二个是流或者数据报文, 第三个参数是使用的协议
socket( socket.AF_INET, socket.SOCK_STREAM|socket.SOCK_DGRAM, 默认是0 )
具有两个方法, send, recv
;
urllib, urllib2模块，可以将任何URL指向的文件作为自己程序的输入
urllib用作简单的下载
urllib2 可以使用HTTP验证，COOKIE, 或者写扩展程序
import urllib
webpage = urlopen(strUrl) 	#用于读取文件中的对象
urlretrieve( strUrl, savePath )       #用于下载文件
quote(string[, safe]), 返回普通字符串变换后的URL字符串
quote_plus, 同quote但用+代替空格
unquote, unquote_plus 反向操作
urlencode( query[, doseq] ) 把映射(如字典)或者包含两个元素(如key,value)的元组转换成url格式的编码
;
其他模块
asyncore, asynchat 异步套接字
cgi 基本的CGI支持, cookie, cookielib, email, ftplib, gopherlib, httplib, imaplib imap4客户端模块, mailbox 读取几种邮箱的格式, mailcap 通过mailcap文件访问MIME配置， mhlib 访问mh邮箱, nntplib nntp客户端模块, poplib pop客户端, robotparser 支持解析web服务器的robot文件, simpleXMLRPCServer 一个简单的xml-rpc服务器, smtplib smtp客户端模块, smtpd smtp客户端模块, telnet telnet客户端模块, urlparse 支持解析url, xmlrpclib xmlrpc客户端支持
；
参考
http://www.python.org/doc/lib/module-socketServer.html
book: The Foundations of python network programming
;
多连接处理方法
1. 分叉 forking, 占用资源，在unix, linux系统中使用较多，效率高；子进程，每个客户端独立
2. 线程 threading， 线程同步！
3. 异步I/O asynchronous I/O， 
避免线程与分叉的方法，stackless python http://stackless.com , 支持微线程
;
根据系统将自定义的Server类继承至不同的类即可
；
带有select, poll的异步I/O
;
poll伸缩性更好，只能使用在unix提供中
;
服务器
import socket
s = socket.socket()
host = socket.gethostname()
port = 1234
s.bind(host,port)
s.listen(5)
while true:
	c, addr = s.accept()
	print 'Get conncection', addr
	c.send(strOut)
	c.close()
客户机
import socket
s = socket.socket()
host = socket.gethostname()
port = 1234
s.connection(host, port)
print s.recv(1024)
#########################p246
;
SocketServer模块，四个模块对TCP的支持
TCPServer, UDPServer, UnixStreamServer, UnixDatagramServer
基于SocketServer的小型服务器
from SocketServer import TCPServer, StreamRequestHandler
class Handler(StreamRequestHandler):
	def handles(self):
		addr = self.request.getpeername()
		print 'got connection from', addr
		self.wfile.write('thank you for you connection')
	server = TCPServer(('', 1234, handler)
	server.server_forever()
;
多连接并发处理方法，分叉forking, 线程threading, 异步I/O
forking, unix中常用，是分进程，可以有效的避免同步分体，略微消耗资源
另一种解决方案
stackless python, 基于select函数，microhthreads,例如下面游戏就是使用这种方法的
http://www.eve-online.com
异步I/O，由asyncore, asynchat模块组成
；
import TCPServer, ForkingMixIn/ThreadMinIn, StreamRequestHandler
class Server(ForkingMinIn/ThreadMinIn, TCPServer):pass
class Handler(StreamRequestHandler):
	def handle(self):
		addr = self.request.getpeername()
		print 'Got connection form ', addr
		self.wfile.write('thank you for your connection')
server = Server('', 1234)
server.server_forever()
;
带有select 和poll的异步I/O，poll只能用于unix, 关于select的信息
http://www.python.org/doc/lib/module-select.html

twisted，事件驱动的python网络框架，能很好的和常见的gui包协作，如tk,gtk,qt,wxwidgets
支持，web服务器,客户机, ssh2, smtp, pop3, imap4, aim, icq, irc, msn, jabber, nntp, dns...
http://twistedmatrix.com

python与万维网
urllib，获取网络资源，可以打开下载网页等
;
tidy, xhtml解析
http://tidy.sf.net,用于修复不规范的html工具，可以保证html格式的正确
python包装的tidy下载
http://utidylib.berlios.de
http://egenix.com/products/python/mxExperimental/mxTidy
一般unix, linux中已经包含了tidy的命令行版本
；
使用htmlParser, 就是继承htmlParser 来处理xhtml 等标签类文档
;
beautiful soup, 用来解析网上格式混乱不规范的html
http://crummy.com/software/beautifulsoup
;
cgi, 创建动态网页， common gateway interface, 使用cgi模块
http://wiki.python.org/moin/webProgramming
cgitb, 模块
cgi脚本需要放置到网络可以访问的文件夹，并且必须标记为CGI脚本，脚本扩展名改为.cgi
之后要在脚本的开始处增加pound bang行，来说明脚本使用的语言
在unix系统中使用
#!/user/bin/env python
windows使用
#!c:\python32\python.exe
设置文件的执行许可
unix下修改文件许可
chmod 755 someScript.cgi
chmod 666 editable_file.txt	#设置文件许可，使得管理员以外的人可以修改文件
；
python将用户提供的数据作为python代码，exec或eval
执行shell命令 os.system, subprocess模块
cgitb，模块包含cgi调用enable函数可以得到服务器返回的错误信息，利于cgi调试, 也可以关闭错误信息，直接写入日志
;
cgi，脚本取得用户输入，从用户的表单提供，使用cgi模块的FieldStorage类从cgi脚本中获取字段
form = cgi.FieldStorage()
name = form['name']
；
网络信息资源
http://www.w3schools.com
html表单中使用如下格式传递参数
<form action = 'script.cgi'>
change name < input type = 'text' name = 'name' />
<input type = 'submit'/>
</form>
;
mod_python, 是Apache网络服务器的扩展模块，使得python解释器成为Apache的一部分
http://modpython.org
用这个模块可以直接调用Apache内核及API
cgi处理程序，允许使用mod_python解释运行cgi脚本
psp处理程序，允许html及python代码混合创建可执行网页
发布处理程序，允许使用url调用python函数
http://www.apache.org
;
PSP，Python Server Page; PHP, Personal Home Page
Apache支持PSP页面
；
可以搜索 python template system 来查找类似于mold_python一样的系统例如
http://webwareforpython.org
http://zope.org
http://clearsivler.net
http://py.valuts.ca/apyllo.py?i=127386987
;
发布，mod_python的好处，可以使用发布处理程序，将代码放置在.htaccess文件中
AddHandler mod_python .py
PythonHandler mol_python.publisher
这样可以使得发布处理程序将所有.py结尾的文件当做python脚本运行
http://example.com/script.py
;
python 网络编程参考
http://wiki.python.org/moin/webProgramming
网络框架
albatross, cherryPy, dJango, plone, pylons, quixote, spyce, turboGears, web.py, webWare, zope
;
web 服务
WSDL， web service description language
一些WEB服务除了支持服务器协议SOAP，还支持WSDL
；
RSS, Rich site summary, 用xml列出所有新闻，也称为feed
RDF, really simple syndication
XML-RPC， RSS还可以进行远程过程调用，使用HTTP与XML实现网络通信
python具有的远程过程调用机制有，xml-rpc, pyro(http://pyro.sf.net），twisted
REST,允许客户端通过程序访问服务器
http://wikipedia.org/wiki/representational_state_transfer
json, java script object notation, http://www.json.org

测试
profiling, 标准库测试分析工具
pyChecker, pyLint, 代码分析工具
bug, 1945年在哈弗大学内，一只虫子被发现卡在mark II计算机内
coverage, 测试代码覆盖度
；
测试的步骤
1. 指出新特性
2. 编写概要代码， 让测试成功之前先要保证测试可以失败
3. 编写虚设代码 dummy code， 保证测试可以通过
4. 重写功能代码，保证测试一直可以通过
；
测试工具
unitest, 通用测试框架
doctest, 简单一些模块，是检查文档用的，可以将文档中的字符串注释，读取看起来像交互式输入程序的部分，直接作为输入程序进行测试，例如：
def square(x):
	'''
	Squares a number and returns the result.
	>>>sqare(2)
	4
	>>>sqare(3)
	9
	'''
	return x*x
if __name__ = '__main__':
	import doctest, curModeName
	doctest.testmod(curModeName)
测试上面代码的方式
python curModeName.py，或详述模式 python curModeName.py -v
;
unitetest, 模块，可以建立单元测试
import unittest, modeName

class someTestCase( unittest.TestCase ):
	def testMethod(self):
		...
if __name__ = '__main__':
	unittest.main()
单元测试会运行所有test开头的方法
；
代码性能检测
pyChecker, pyLint, tabnanny
可以使用
distutils工具来快速安装
python setup.py install, 来安装
pyLint需要logilib common库，需要下载logilab-common包
导入这两个模块后会检查之后的代码
python使用命令行工具的方法是使用subprocess模块
subprocess，在Popen模块中
halts, 模块来检查作为第一个参数提供的程序
；
性能检测
profile, 标准潜入模块，用于检测性能，使用字符串参数调用方法
hotshot, 是一个C语言的版本
import profile
from my_math import product
profile.run('product(1,2)')
这样就知道了每个函数和方法调用的次数，使用的时间

扩展python
使用python的目的是提高开发速度，达到灵活性
在意速度的时候需要使用C，C++，java来重写方法
开发过程
1.python开发原型
2.找出瓶颈
3.用C等其他语言重写出现瓶颈的算法
使用C的好处是可以为交互硬件的特殊部分编写低级代码
;
Jython, 对应java, http://www.jython.org
IronPython，对应.net
均可以直接访问对方的库文件
；
将python类编译为*.class文件
jythonc
在jython中直接可以引入java类，与导入模块的方法一样
;
IronPython, http://wwww.codedeplex.com/wiki/view.asp?ProjectName = IronPython
import clr
clr.AddReferenceToFile(strAimC#DllName)
import c#ClassName
f = c#ClassName.functionName()
;
编写C扩展，CPython, 是使用C语言实现的标准Python版本
关于C的文章
http://en.wikipedia.org/wiki/c_programming_language
Beginning C:From Novice to Professional, Iovr Horton
C Programming language, Brian Kernighan, Dennis Richie
C扩展python，必须严格遵照API
简化C扩展的过程的，SWIG项目
如果使用CPython可以使用如下工具来提高代码速度
Psyco, http://psyco.sf.net, 是一个特定的实时编译器，适合处理数字列表及的代码优化
Pyrex, http://www.cosc.canterbury.ac.nz/~greg/python/pyrex, 是一个专门为编写python扩展而设计的语言
pypy, http://codespeak.net/pypy, 核心是rpython,是一个受限制的python
weave, http://www.scipy.org/weave, 是scipy发布的另一个部分，适合于快速计算数学表达式
NumPy, http://numeric.scipy.org, 提供了访问数字数组的功能
ctypes, http://python.net/crew/theller/ctypes
subprocess, http://docs.python.org/lib/module-subprocess.html, 允许python运行外部程序，是标准模块，能够通过命令行参数、标准输入输出流及错误流与外部程序通信，可以将外部程序放入独立的子进程中
pyCxx, http://cxx.sourceforge.net, 是一个编写python扩展的C++工具集
SIP, http://www.riverbankcomputing.co.uk/software/sip, 是一个用于开发GUI包pyQt的工具，包括一个代码生成器，和一个python模块
Boost.python, http://www.boost.org/libs/python/doc, 用于与C++进行良好的相互操作，可以以python的风格编写c++代码，之后用C++编译器直接编译为python扩展，和SWIG类似
Modulator, 可以在python发布版本的目录中找到可以生成一个C扩展需要的样板模板
;
SWIG, http://www.swig.org, 是一个简单包装，接口生成的缩写
回文，忽略掉空格与标点后，正着读反着读相同的句子
someCfile.c或someCfile.h对应 someCfile.i 来定义接口供SWIG包读取,i文件内容
%module defModuleName

%{
#include <string.h>
%}

extern int functionName( parameter );
运行
swig -python someCfile.i
之后可以得到两个someCfile.py，someCfile_wrap.c文件,对这两个文件进行编译
使用GCC
gcc -c someCfile.c
gcc -i python_home -i pyhonhome/include -c comeCfile_wrap.c
gcc -shared someCfile.o someCfile_wrap.o -o _someCfile.so
最后得到文件 _someCfile.so 是python的运行库文件，直接可以使用python导入
import _someCfile
;
distutils，工具可以直接配置python环境，并支持和swig
；
自己动手使用C扩展，参考文档 python c api
Guido van Rossum编写的 Extending and Embedding the Python Interpreter,可以在python官网找到
；
两个宏可以增加减少python对象的引用计数
Py_INCERF, Py_DECREF，文档http://python.org/doc/ext/refcounts.html

程序的打包
distutils, 可以编写安装脚本，用来建立用于发布的存档文件，可以参考http://python.org/doc/lib/module-distutils.html
简单的distutils安装脚本:
from distutils.core import setup

setup( name = 'hello', version = '1.0', description = 'A simple example', author = 'Magnus Lie Hetland', py_modules = ['hello'])
将脚本存储为setup.py, 可以执行
python setup.py
作用是打包hello.py文件
;
其他安装工具
setuptools, http://peak.telecommunity.com/devCenter/setuptools,基于 distutiles,包含增强功能， 
;
建立存档文件
python setup.py sdist
linux安装文件， *.tar, *.gz, gzip文件
windows安装文件， *.rpm包
；
py2exe创建可执行程序，作为distutils的扩展
http://www.py2exe.org上获得，来创建windows可执行的.exe文件
使用:
from distutils.core import setup
import py2exe

setup(console=['hello.py'])
运行:
python setup.py py2exe
这样会创建控制台应用程序, hello.exe
对于Mac OS,可以参考Bob Ippolito的py2app
http://undefined.org/python/py2app.html

好玩的编程
playful programming
extreme programming, 亦称为XP, http://www.extremeprogramming.org
Kent Beck的一种软件开发方式
；
python，用于原型设计，可以灵活性的改变程序的配置
;
提取常量，作为全局变量或者配置文件
;
ConfigParser, 配置文件模块
例子，配置文件内容
[numbers]  #定义区块
pi:3.1415

[messages]
greeting:Welcome to the area
使用
import ConfigParser
cfg = ConfigParser()
PI = cfg.get('numbers', 'pi')
;
logging，模块，标准库
用来记录程序的执行顺序，如果报错则知道程序停止在那个位置
；
推荐图书：
Andrew, 《程序员修炼之道》
Martin Fowler, 《重构》
http://www.w3.org/MarkUp/guide

实现回调函数
class Handler:
	def callback(self, prefix, name, *args):
		method = getattr(self, prefix+name, None )
		if callable(method):
			return method(*args)

Wiki，风格的标记系统
Atox, atx, BBCode, Epytext, Ettext, Grutatxt, Markdown, reStructuredText, Setext, SmartAssii, Textile, txt2html, wikiCreole, wikiMarkupStandard, WikiText, Yaml

使用python创建图形，创建pdf文档
pdf, portable document format, 用图形和文本来创建的文档，不可以编辑
；
图形生成包
vaults of parnassu, http://www.vex.net/parnassus
PYX图形包，http://pyx.sf.ne
ReportLab, http://www.reportlab.org/downloads.html
同时支持基于TEX的排版
；
使用ReportLab直接可以输出PDF文档
；
wxPython, 可以创建各种矢量图文件
matPlotlib/pylab, http://matplotlib.sf.net
;
取得系统默认编码方式，sys.getdefaultencoding

wiki, 远程编辑系统
http://en.wikipedia.org/wiki/wiki
;
使用CGI，实现网页编辑器
#文件名simple_edit.cgi
import cgi
form = cgi.FieldStorage()
text = form.getvalue('text', open('simple_edit.dat).read())
f = open('simple_edit.dat','w)
f.write(text)
f.close()
print '''
content-type: text/html
<html>
	<head>
		<title> a simple editor</title>
	</head>
	<body>
		<form action = 'simple_edit.cgi' method = 'post'>
		<textarea rows = '10' cols = '20' name = 'text'>%s</textarea><br/>
		<input type = 'submit'/>
		</form>
	</body>
</html>
''' % text

SQL数据库
PostgreSQL, http://www.postgresql.org
MySQL, http://www.mysql.org
;
导入cgitb模块来辅助CGI程序设计，可以得到一些调试信息。在发布时需要使用cgitb.enable = false来关闭调试信息

使用XML-rpc来实现远程共享，SimpleXMLRPCServer
from SimpleXmlRpcServer import simpleXmlRpcServer
s = simpleXmlRpcServer(("", 4242)) #使用 localhost, port 4242
def twice(x): return x*2
s.register_function(twice)
s.serve_forever()
;
另一个解释器请求
from xmlRpcLib import ServerProxy #也可以只用server
s = serverProxy('http://localhost:4242')
s.twice(2)
得到返回结果4

Thread, 线程库

游戏开发包
Pygame, 不包括NumPy, http://numpy.scipy.org
方法
Pygame.surface(), flip(), update(), set_mode(), set_caption, get_surface, font()
sprite，模块包含两个重要的类
sprite, 可是对象的基类
group，是sprite对象的容器
mouse, event, image，模块

reportlab, python output for pdf file

python netrual language tool kit, ntlk语言包

pyswip, semantic web work with swp-prolog
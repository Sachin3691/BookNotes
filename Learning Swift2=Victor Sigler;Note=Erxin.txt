Learning Swift2=Victor Sigler;Note=Erxin

# Introduction
- the course overview 
- why choose swift 2 over object-c? 
    + object-c 
    object orientate, developer in the early 1980s 
    style messaging to the c programming language
        
    + swift 
    2014, wwdc worldwide developers conference
    multi-pardigm 
- installing and setting up the xcode ide 
    + the main development tool supplied by apple 
    + and be test app without developer account 
    + install from the market place 
    
- beginning with playgrounds 
    + playgrounds 
    open xcode 
    
    click get start a playgrounds
    
    select the platform 
    
    the display result will be shown on the right 
    
    click a code line will high light the playground output, click the right side icon from the playground to output will display the output 
    
    + best uses of playground
    learning 
    code development 
    experimentation 
    
    + limitation of playground
    testing performance is depend on the current code 
    user interaction, it only allowed view the ui 
    on device execution is not support for ios 


# Swift basics 
- variables and constants 
var variable-name = value;

    + define constant by let 
let pi = 3.14; 

    + var versus let 
    variable are mutable 
    const are immutable 
    
let x = 0, y = 0;

    + we could use multicon as variable name or const name by command+control+space will show a icon selection dialog in playground 

let icon-selected = "iphone";
    
    + add variable type specification 
var intNumber:Int = 5;
let pi:Double = 3.14;

    + tuple 
var point = (3, 4);
point[0] = 3;

//create a named tuple by 
var point = (x:3, y:4)
point.x 
point.y 

- control flow and statement 
    + for loop, while loop, repeat-while 
    
let sequence = "learning swift 2"
for ch in sequence.characters {
    ch
}

for var idx = 0; idx < 10; ++idx {
    idx
}

var idx = 0 
while idx < 10{
    ++idx 
}

idx = 0
repeat {
    ++idx
}while idx < 10 

let number = 5 
if number <= 10 {
    print("the number is less than 10")
}
else if(){

}
else {

}


switch Number:{
    case 0...4:
        print ("the number is less than equal to 4.")
    case 5...8:
        ...
    default:
        ...
}
    
- functions and closures 
    + define a function 
func sumTowNumbers(x:int, y:Int) -> Int {
    return x+y
}

func sumTowNumbers(ExternalName x:int, ExternalName y:Int) -> Int {
    return x+y
}
    
sumTowNumbers(1, y:2)
    
func foo()->Void{

}
    
varialbe have function scope 

the external name must be used when calling a function 
    
    + default value for function parameter 
func welcome(name:String = "Victor")->String{
}
    
    + unlimited variable numbers 
func sums(numbers:Int...) -> Int{
    ...
}

sums(1,2,3,4);

    + support nested functions 
    
    + define closures 
let sumOfTwoInt = {(x:Int, y:Int) -> Int in    //like define parameters in function 
    return x+y
}
    
the return type and the return keyword could be omited, the in keyword is required 

    + define a trailing closure 
func funcWithClosure(closure:()->()){
}

funcWithClosure(){}
funcWithClosure{}

- optionals 
    + what are optionals, to handle absent of a value for a variable 
    
    let text = "welcome"
    let number = Int(text)
    //the number will be assigned as nil, nil could only be used with optional variable or constant 
    var name: String?
    
    //the default of variable value is nil 
    
    if number != nil{
        print(" the value of number is \(number!)")
    }
    the \(optional-value) is used to get the optional value if it is not nil. if the variable is not optional then will throw runtime error 
    
    create a new optional value 
    if let n = number {
        print("the value of number is \(n)")
    }
    
    + defining optionals 
    + force-unwrapping 
    
- structs 
    + what are structs 
    + defining struct 

struct Person{
    var firstName: String 
    var lastName: String 
    
    //define a custom initializer 
    init(firstName: String){
        self.firstName = firstName
        self.lastName = "Default last name"
    }
    
    func printFullName(){
        ...
    }
}

let person1 = Person(firstName: "Victor", lastName:"Sigler")
person1.firstName 
if define the person1 with let then all the property are read only 

func printFullNameOfPerson(person:Person){
    print("\(person.firstName) \(person.lastName)")
}

use the default initializer
var person1 = Person(firstName: "Victor")
person1.printFullName()

- in swift all all the basic types are value types such as Int, Double, String, Array, Dictionary etc.

- arrays and dictionaries 
    + types of elements 
    
let numbers = [Int]()
let numbers = Array<Int>()

numbers.append(1)

let anotherArray = [Int](count:5, repeatValue:0)
let unionOfTwoArray = numbers + anotherArray
unionOfTwoArray[0]

unionOfTwoArray.removeAtIndex(index)

    + dictionary 
var dict = [String:Int]()

dict["key"] = 5

we use a subscribe notation to access a value from dictionary 

if let value = dict["c#"]{
    print("key found")
}

for(key, value) in dict {
    ...
}

- classes 
class Person{
    var firstName: String = ""
    var age:Int = 0
    
    func changeFirstName(newName:string){
        self.firstName = newName
    }
}

var person = Person()
person.firstName
person.changeFirstName("new name")

    + add custom initializer
class Person{
    var firstName: String = ""
    var age:Int = 0
    
    func changeFirstName(newName:string){
        self.firstName = newName
    }
    
    init(firstName: String, lastName: String, age:Int){
        self.firstName = firstName
        ...
    }
}
    
    + class are reference types 
- enums 
enum Color {
    case Blue 
    case Red 
    case Yellow 
}

could use comma seperate the multiple declaration 

var color = Color.Blue 

switch color {
    case .Blue:
        ...
    case .Yellow:
        ...
    case .Red:
        ...
}

    + add associated value to enum 
enum Color {
    case Blue(Double, Double, Double)
    case Red(Double, Double, Double)
    case Yellow(Double, Double, Double)
}


var color = Color.Blue(34, 34, 34)

    + set enum type 
enum Direction: Int{
    case Up = 1
    case Down 
    case Left
    case Right
}

# Start building the app 
- setting up our project 
    + select ios application 
    + select single view application 
    + set the project information and set the program language to swift, Universal means iphone and ipad 
    
    + structure of the ios project 
    Info.plist, 
    Asset.xcassets, app access every time to access the app assets such as images 
    ViewController.swift 
    AppDelegate.swif 
    Main.storyboard 
    LaunchSc...tryBoard 
    
- pixabay api is used to supply high quality images 
- defining structure of the ios 
    + create group to create a folder structure in xcode 
    
    /Project 
        /Controllers 
        /Views 
        /Models 
        
        move the Main.storyboard to Views group 
        
    for each group create a folder inside the project directory to make it match the group structure inside the project 
    
- building the user interface 
    + creating main views 
    click the Main.stroyboard will list all the view controllers and how they are connected 
    
    from the right side we search table and select Table View Controller 
    
    select the Table View Controller Scene on the left in the storyboard
    
    from the right side panel select the create folder and unselect the Use Size Classes to keep the view only size to iphone 
    
    select Editor|Embed in|Navigation Controller 
    
    the Navigation Controller will tide with the Table View Controller 
    
    from the property inspector on the right side we could change the properties. set the Navigation Controller checked the Is Initial View Controller 
    
    adjust the cell size of the Table View Controller 
    
    add a Image View into the cells, change the constraint margin to zero 
    
    click the alert on the after change the margins xcode will fix the unmatched margins 
    
    add view controller, 
    
- installing and setting up the dependency manager CocaoPods 
    + open terminal 
    + use ruby package manager 
    $ sudo gem install cocoapods 
    
    if throw permission error the we could use 
    $ sudo gem install -n /usr/local/bin cocoapods 
    
    edit Podfile specify the dependencies 
    # Uncomment this line 
    ...

# Getting and parsing the data 
- set up the requestManager class 
create a helper group 
create a new file, select ios select swift named RequestManager

- use RequestManager class to send web request 
class RequestManager{
    private struct API {
        static let baseURL = "..."
        static let apiKey = "...."
    }
    
    static let sharedInstance = RequestManager()
    
    private init(){
        ...
    }
}

- parsig the json use SwiftyJSON
import Alamofire 

use code snippets to add methods 

func getImagesByName(nameToSearch name:String){
    let parameters:[String:AnyObject] = ["key":API.apiKey, "q":name]
    
    Alamofire.request(.GET, API.baseURL, parameters:parameters).responseJSON{
        response in 
        switch(response.result){
            case .Success(let value):
                print(value)
            case .Failure(let error):
                print(error.description)
        }
    }
}
    + create the photo model in /Models/Photo.swift 
import Foundation 

struct Photo{
    let url:String 
    let likes:Int 
    let favorites:Int
}

    + open the requestManager class and add reference to SwiftyJSON 
import SwiftyJSON

//integrate it will  Alamofire API 

let json = JSON(value)
//json could be access as dictionary 

//use optional binding
if let hits = json["hits"].array{
    print(hits.count)
    for item in hits{
        if let url = item["webformatURL"].string, let likes = item["likes"].int, let favorites = item["favorites"].int{
            let photo = Photo(url:url, likes:likes, favorites:favorites)
            print(photo)
        }
    }
}

- using closures to return the data 
    + asynchronous call of Alamofire
    + return value with closure
    
    + example, prevent ui blocking 
    func getEditorChoicesImages(completeHandler:(json:JSON?, error:NSError?) -> Void){
        let paramters: [String: AnyObject] = ["key": API.apiKey, "editors_choice": true]
        
        Alamofire.request(.GET, API.baseURL, parameters:parameters).responseJSON{response in 
            switch(response.result){
                case .Success(let value):
                    let json = JSON(value)
                    completeHandler(json:json, error:nil)
                case .Failure(let error):
                    completeHandler(json: nil, error:error)
            }
        }
    }
    
    call the functon 
    
    RequestManager.sharedInstance.getEditorChoicesImages{
        (json, error)-> Void in 
        gard let json = json else {return}
        if let hits json["hits"].array{
            print(hits.count)
            for item in hits{
                if let url = item["webformatURL"].string, let likes = item["likes"].int, let favorites = item["favorites"].int {
                    let photo = Photo(url: url, likes: likes, favorites: favorites)
                    print(photo)
                }
            }
        }
    }
    
    because the function delegate handler is the only parameter so when calling the function the parenthesis  could be omitted 

# Displaying the data and details 
- the UITableViewController
- making a search bar 
- passing data between controllers 
- 

# Advanced Topics Optimizing the app 

# Reference 
- doc 
https://developer.apple.com/library/ios/documentation/general/





















高质量C++编程指南=林锐;Note=Erxin

# 软件工程基本概念
- 软件工程的主要环节有：人员管理、项目管理、可行性与需求分析、系统设计、程序设计、测试、维护等


# 程序员与项目经理
- 软件项目失败很容易，只要符合下列条件之一即可：
（1）项目经理对软件一无所知；
（2）技术负责人对编程不感兴趣；
（3）真真编写代码的程序员是临时雇用的。
如果上述三个条件同时具备，就请放心失败好了。

- 程序员具有的品行
诚实, 几乎天天与机器打交道，压根就没有受欺骗或欺骗人的机会
简单——实用主义, 有人问一个数学家，一个物理学家和一名程序员：“一个盒子有几个面？”
                数学家回答说：“有六个面，因为盒子是长方体。”
                物理学家回答说：“有12个面，分为6个外表面和6个内表面 。”
                程序员回答说：“只有两个面，里面放电路板和硬盘，外面放显示器和键盘。”
爱憎分明, 高水平的程序员喜欢与高水平的程序员一起工作，因为他们怕“与臭棋佬下棋，棋越下越臭”。程序员大都厌恶拉帮结派、耍政治手腕
工作单调但不乏味

- 程序经理, 比尔·盖茨曾这样描述聪明人[Cusumano1996]：
聪明人一定反应敏捷，善于接受新事物。他能迅速进入一个新领域，给你一个头头是道的解释。他提出的问题往往一针见血、击中要害。他能及时掌握所学知识，并且博闻强记，他能把本来认为互不相干的领域联系在一起使问题得到解决。他富有创新精神与合作精神……

    + 具备的条件
    技术水平是程序员队伍中的最高级别
    能做最多且最难的工作
    有人格魅力
    一个有活力的软件公司的各级经理都不会这样感叹，“因为我啥也不会干，所以只好当领导。”
    
- 程序员升级为领导后还要编程, Windows NT 3.0项目的软件经理娄·帕雷罗, 最重要的一条是每个人都得编程，谁也别想坐在那儿发号施
    
Word项目总经理, 还是为Word新版本编写了一个特性

- 经理与技术队伍的建设
把技术水平分为四级，第一级最低，第四级最高。第一级技术水平的程序员主要考核编程基本功，要求质量合格（他们主要来自刚毕业的大学生）。第二级技术水平的程序员编程质量要高，做过几个软件项目，有数年的工作经验，并能指导新手的工作。第三级技术水平的程序员主要考核系统分析与系统设计的能力，要求其技术有足够的深度和广度。第四级技术水平的程序员是成功的软件产品的设计师，他不仅技术超群，并且能使技术转化为有价值的商品。

把管理（这里仅指软件业务的管理，不考虑行政事务）水平也分成四级。第零级最低，第三级最高。第零级管理水平的人没有管理职务，就是普通员工。第一级管理水平的人是开发小组的组长，可带领几名程序员工作。第二级管理水平的人是项目经理。第三级管理水平的人决定某些产品是否要开发，以及如何去占领市场。

- 向错误与失败学习
- 提高综合素责


# 项目计划与质量管理
- “知已知彼”才能做出合理的项目计划
- 项目时间, 项目的时间限制有两类。第一类，项目应该完成的日期写在合同中，如果延期了，则开发方要作出相应的赔偿。第二类是开发自己的软件产品，虽然只确定了该产品大致的发行日期并允许有延误，但如果拖延太久则会失去商机造成损失。

- 致项目被延误：
（1）上级领导主管臆断，制定了不现实的期限。项目经理与程序员们被迫按照不合理的进度表开展工作。
（2）客户的需求发生了变化，但没有对进度表作出相应的修改。
（3）低估了项目的规模与难度，导致投入的人力和物力不足。
（4）并未预见到存在难以克服的技术障碍。
（5）并未预见到开发人员会发生问题，如生病，辞职等等。
（6）开发人员之间不能很好的交流、协作，导致各阶段任务难以如期完成。

- 建议
(1)制定进度表的人最好就是项目负责
（2）进度安排并不见得一定要符合逻辑顺序。应尽可能地先做技术难度高的事，后做难度低的事。也就是辛苦在前，轻松在后。
（3）开发一个大的软件项目，应该将进度表分为若干个里程碑。
（4）进度表中必须留有缓冲时间
Microsoft公司的一些开发小组甚至制定了“50% 缓冲规则”[Cusumano 1996]。对许多项目经理而言，容忍进度表中存在缓冲时间，不啻为观念上的一个飞跃。
（5）如果发现项目应交付的期限非常不合理，就要跟领导或跟客户据理力争，请求放宽期限、调整进度。

- 零缺陷质量管理的观念
- 质量因素
正确性与精确性
性能与效率
易用性
可理解性与简洁性
可复用性与可扩充性

- 质 量 检 查
（1）事先把检查的主要内容制成一张表，使检查活动集中在主要问题上。
（2）只评审工作，不评审开发者。评审的气氛应该是融洽的。存在的错误应该被有礼貌地指出来，任何人的意见都不应被阻挠或小看。
（3）建立一个议事日程并遵循它。检查过程不能放任自由，必须排照既定的方向和日程进行。
（4）不要化太多的时间争论和辩驳。
（5）说清楚问题所在，但不要企图当场解决所有问题。
（6）对检查人员进行适当的培训。

- 可行性分析与需求分析

- 需求分析困哪
（1）客户说不清楚需求；（2）需求自身经常变动；（3）分析人员或客户理解有误。


# 系统设计
- 测试，assert不应该产生任何副作用。所以assert不是函数，而是宏。程序员可以把assert看成一个在任何系统状态下都可以安全使用的无害测试手段。

（1）使用断言捕捉不应该发生的非法情况。不要混淆非法情况与错误情况之间的区别，后者是必然存在的并且是一定要作出处理的。
（2）使用断言对函数的参数进行确认。
（3）在编写函数时，要进行反复的考查，并且自问：“我打算做哪些假定？”一旦确定了的假定，就要使用断言对假定进行检查。
（4）一般教科书都鼓励程序员们进行防错性的程序设计，但要记住这种编程风格会隐瞒错误。当









Working effectively with legacy code=Michael;Note=Erxin

# The mechanics of change 
## Changing software
- The act of improving design without changing its behavior is called refactoring. The idea behind refactoring is that we can make software more maintainable without changing behavior

optimization 

- risky change 

what chagnes do we have to make 

how will we know that we've done them correctly 

how will we know that we haven't broken anything 

how much change can you afford if changes are risky


## working with feedback 
- changing only one piece of behavior at a time 

- unit testing 

error localization 

execution time 

coverage 

    + tests often masquerade as unit tests. a test not a unit test if 
    
    talks to a database 
    
    communicates across a network 
    
    it touches the file system 
    
    you have to do special things to your environment such as editing configuration files 
    
- legacy code change algorithm 

identify change points 

find test points 

break dependencies 

write tests 

make changes and refactor 


## Sensing and separation
- sensing, we break dependencies to sense when we can't access values our code 
- separation 
- fake objects, easy to write are a very valuable tool for sensing 

- mock objects are fakes that perform assertions internally 


## The seam model 
- a huge sheet of text 
- seams, This seam is what I call an object seam. We were able to change the method that is called without changing the method that calls it.

A place where you can vary behavior in a software system without editing in that place.

Such as macros in C++/C 

- object seams, abstract class 
- post receive error 


## Tools 
- automated refactoring tools 
- mock objects 
- unit testing harnesses 
- cpp unit lite, CppUnit other unit test libraries 
- nunit,.net unit test library 
- framework for integrated tests (FIT), FIT is a concise and elegant testing framework 

http://www.fitnesse.org/


# Changing software 
## I don't have much time and I have to change it 
- sprout methods 
identify change locations 

formulated as a single sequence of statements 

determine what local variables you need from the source 

sprouted method will need to return values to source methods, The source method might contain a lot of complicated code and a single sprout of a new method

thest driven development 

remove the comemnt in the source 

- sprout class, 
- wrap method 
- wrapper class 
- decorator pattern 


## It takes forever to maek a change 
- understanding 
- lag time

build system 

- dependency inversion principle 


## How do I add a feature 
- TDD
write a failing test 
get it to compile 
make it pass 
remove duplication 
repeat 

- Liskov substitution principle (LSP) violation.  Objects of subclasses should be substitutable for objects of their superclasses throughout our code


# I cann't get this class into a test harness 
- Objects of the class can't be created easily 
- The test harness won't easily build with the class in it 
- The constructor we need to use ahs bad side effects 
- Significant work happens in the constructor and we need to sense it 
- Null object pattern 
- Effective propagate in code in three basic ways 

return values that are used by a caller 

modification of objects passed as parameters that are used later 

modification of static or global data that is used later 

- tools for effect reasoning, Knowing our language is important because the subtle rules can often trip us up. 

- simplifying effect sketches 


# I need to make many changes in one area, do i hav eto break dependencies for all the classes involved 
- interception point, a place where a test can be written to sense some condition in a piece of software 

interception points that are very close to your change points, for a couple of reasons. 

- higher-level interception points 

- A pinch point is a narrowing in an effect sketch, a place where tests against a couple of methods

# What test to write 
- test for area where you will make cahnges 
- after changes write test for your changes


# Dependencies on libraries 
- prevent all in one call or one class
Skip and wrap the API
Responsibility based extraction 
API is relatively small
Completely separate out dependencies on a thrid-party library 


# Don't understand the code well enough to change it
abstract methods

# Project have no structure 
Tests now have this completely different responsibility: generating reports, which we never mention.


# Introduce the popular clean code and unit test framework maybe attractive 


# My test code is in the way 
- A couple of conventions are used. The most common ones are to use the word Test as a prefix or a suffix of the class name. 


# My project is not object oriented 
- C unit test framework 

various C unit-testing frameworks available at http://www.xprogramming.com


# Dependency breaking techniques 
- struct that contains pointers to functions 

In production code, the functions can point to the real database-access functions. We can have them point at fakes when we are testing.

struct database
{
    void (*retrieve)(struct record_id id);
    void (*update)(struct record_id id, struct record_set *record);
    ...
};


# This class is too big and i don't want it to get any bigger 
- Big classes are a pain to test.

- Interface Segregation Principle (ISP),  client can see the big class through that particular interface.

- moving forward 

strategy 

tactics 

    + identify a responsibility that you want to separate into another class 
    + figure out wheter any instance variable will have to move to the new class 
    + if you have whole methods that you want to move to the new class, extract the bodies of each of them to new methods 
    

# changing the same code all over the place 
- Abbreviations in class and method names are problematic. They can be okay when they are used consistently, but in general, I donâ€™t like to use them

- abstract the common logic into base class 


# Change a monster method and can't write tests for it 
- Skeletonzie methods 


# How do I know that I'm not breaking anything
- compile (go to www.ioccc.org and see the Obfuscated C code contest for details).
- pair programming 


# Dependency breaking techniques 
- 












Python all in one for Dummies=Alan;Note=Erxin

# Getting Started with Python 
-  Anaconda website at https://www.anaconda.com/.
- Install VSCode
	+ three extension 
	should see at least three extensions listed, Anaconda Extension Pack, Python, and YAML

- In VSCode View -> click python select interpreter 

- Jupyter notebook 
Julia, Python, R -> Jupyter 

	+ open anaconda, jupyter launcher
	
	+ run code in jupyter cell


- byte 
>>> b'\xc3\xa1'

convert from a regular unicode string to bytes, you need to call the string's encode method, convert back need to call decode method 


# Dictionaries 


# Control flow 
- if, for, 

for item in sequence:
	pass 
else:
	pass 
	
if condition:
	pass 
elif condition:
	pass 
else:
	pass 
	
- using break and continue for loop 
- x_squared = (item * item for item in x)

- boolean 

    The numbers 0, 0.0, and 0+0j are all False; any other number is True.
    The empty string "" is False; any other string is True.
    The empty list [] is False; any other list is True.
    The empty dictionary {} is False; any other dictionary is True.
    The empty set set() is False; any other set is True.
    The special Python value None is always False.


# Functions 
- define 
def foo():
	pass 
	
- mutable objects arguments 
def f(n, list1, list2):
	pass 
	
- explicit global 
def fun():
	global x 
	a = 1

- lambda, 

lambda parameter1, parameter2, . . .: expression


- generator 

>>> def subgen(x):
...     for i in range(x):
...         yield i
...
>>> def gen(y):
...     yield from subgen(y)
...
>>> for q in gen(6):
...     print(q)
...

- decorator 
>>> def decorate(func):
...     print("in decorate function, decorating", func.__name__)
...     def wrapper_func(*args):
...         print("Executing", func.__name__)
...         return func(*args)
...     return wrapper_func
>>> @decorate                                                        3
... def myfunction(parameter):
...     print(parameter)


- modules and scoping rules 
- module search path 

sys.path

- private name

_name 

- python has three namespaces, local, global and built-in 


# Python program 
- py2exe create exe on window 
- py2app create executable on macOS
- creating executable programs with freeze 



# Using the filesystem 
- Python 3.5, a new library, pathlib, has been added; it offers a more object-oriented and more unified way of doing the same operations.

import pathlib 

import os 

- A pathname beginning with neither a drive letter nor a backslash is a relative path: mydirectory\letters\business.         

- The glob function from the glob module 


# Reading and writing files 
- read write with built-in functions
open()
write()
- read write with pathlib 
>>> from pathlib import Path
>>> p_text = Path('my_text_file')
>>> p_text.write_text('Text file contents')
18
>>> p_text.read_text()
'Text file contents'
>>> p_binary = Path('my_binary_file')
>>> p_binary.write_bytes(b'Binary file contents')
20
>>> p_binary.read_bytes()
b'Binary file contents'

-  struct also provides the ability to take Python values and convert them to packed byte sequences
- pickling objects files, pickle module. Pickling is powerful but simple to use. 

import pickle
.
.
.
file = open("state", 'wb')
pickle.dump(a, file)
pickle.dump(b, file)
pickle.dump(c, file)
file.close()


import pickle
file = open("state", 'rb')
a = pickle.load(file)
b = pickle.load(file)
c = pickle.load(file)
file.close()

- pickle advantages and disadvantages
	+ Pickling is neither particularly fast nor space-efficient as a means of serialization.
	+ Pickling isnâ€™t secure, and loading a pickle with malicious content can result in the execution of arbitrary code on your machine.
	
	+ examples not good to use pickle 

    Saving some state variables from one run to the next
    Keeping a high-score list for a game
    Storing usernames and passwords
    Storing a large dictionary of English terms


- shelving objects,  permits the reading or writing of pieces of data in large files without reading or writing the entire file

>>> import shelve
>>> book = shelve.open("addresses")

>>> book['flintstone'] = ('fred', '555-1234', '1233 Bedrock Place')
>>> book['rubble'] = ('barney', '555-4321', '1235 Bedrock Place')














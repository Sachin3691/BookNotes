Python all in one for Dummies=Alan;Note=Erxin

# Getting Started with Python 
-  Anaconda website at https://www.anaconda.com/.
- Install VSCode
	+ three extension 
	should see at least three extensions listed, Anaconda Extension Pack, Python, and YAML

- In VSCode View -> click python select interpreter 

- Jupyter notebook 
Julia, Python, R -> Jupyter 

	+ open anaconda, jupyter launcher
	
	+ run code in jupyter cell


- byte 
>>> b'\xc3\xa1'

convert from a regular unicode string to bytes, you need to call the string's encode method, convert back need to call decode method 


# Dictionaries 


# Control flow 
- if, for, 

for item in sequence:
	pass 
else:
	pass 
	
if condition:
	pass 
elif condition:
	pass 
else:
	pass 
	
- using break and continue for loop 
- x_squared = (item * item for item in x)

- boolean 

    The numbers 0, 0.0, and 0+0j are all False; any other number is True.
    The empty string "" is False; any other string is True.
    The empty list [] is False; any other list is True.
    The empty dictionary {} is False; any other dictionary is True.
    The empty set set() is False; any other set is True.
    The special Python value None is always False.


# Functions 
- define 
def foo():
	pass 
	
- mutable objects arguments 
def f(n, list1, list2):
	pass 
	
- explicit global 
def fun():
	global x 
	a = 1

- lambda, 

lambda parameter1, parameter2, . . .: expression


- generator 

>>> def subgen(x):
...     for i in range(x):
...         yield i
...
>>> def gen(y):
...     yield from subgen(y)
...
>>> for q in gen(6):
...     print(q)
...

- decorator 
>>> def decorate(func):
...     print("in decorate function, decorating", func.__name__)
...     def wrapper_func(*args):
...         print("Executing", func.__name__)
...         return func(*args)
...     return wrapper_func
>>> @decorate                                                        3
... def myfunction(parameter):
...     print(parameter)


- modules and scoping rules 
- module search path 

sys.path

- private name

_name 

- python has three namespaces, local, global and built-in 


# Python program 
- py2exe create exe on window 
- py2app create executable on macOS
- creating executable programs with freeze 



# Using the filesystem 
- Python 3.5, a new library, pathlib, has been added; it offers a more object-oriented and more unified way of doing the same operations.

import pathlib 

import os 

- A pathname beginning with neither a drive letter nor a backslash is a relative path: mydirectory\letters\business.         

- The glob function from the glob module 


# Reading and writing files 
- read write with built-in functions
open()
write()
- read write with pathlib 
>>> from pathlib import Path
>>> p_text = Path('my_text_file')
>>> p_text.write_text('Text file contents')
18
>>> p_text.read_text()
'Text file contents'
>>> p_binary = Path('my_binary_file')
>>> p_binary.write_bytes(b'Binary file contents')
20
>>> p_binary.read_bytes()
b'Binary file contents'

-  struct also provides the ability to take Python values and convert them to packed byte sequences
- pickling objects files, pickle module. Pickling is powerful but simple to use. 

import pickle
.
.
.
file = open("state", 'wb')
pickle.dump(a, file)
pickle.dump(b, file)
pickle.dump(c, file)
file.close()


import pickle
file = open("state", 'rb')
a = pickle.load(file)
b = pickle.load(file)
c = pickle.load(file)
file.close()

- pickle advantages and disadvantages
	+ Pickling is neither particularly fast nor space-efficient as a means of serialization.
	+ Pickling isn’t secure, and loading a pickle with malicious content can result in the execution of arbitrary code on your machine.
	
	+ examples not good to use pickle 

    Saving some state variables from one run to the next
    Keeping a high-score list for a game
    Storing usernames and passwords
    Storing a large dictionary of English terms


- shelving objects,  permits the reading or writing of pieces of data in large files without reading or writing the entire file

>>> import shelve
>>> book = shelve.open("addresses")

>>> book['flintstone'] = ('fred', '555-1234', '1233 Bedrock Place')
>>> book['rubble'] = ('barney', '555-4321', '1235 Bedrock Place')


# Exceptions 
- c like style 

const ERROR = 1;
const OK = 0;
int save_to_file(filename) {
    int status;
    status = save_prefs_to_file(filename);
    if (status == ERROR) {
        ...handle the error...
    }
    status = save_text_to_file(filename);
    if (status == ERROR) {
        ...handle the error...
    }
    status = save_formats_to_file(filename);
    if (status == ERROR) {
        ...handle the error...
    }
    .
    .
    .
}
int save_text_to_file(filename) {
    int status;
    status = ...lower-level call to write size of text...
    if (status == ERROR) {
        return(ERROR);
    }
    status = ...lower-level call to write actual text data...
    if (status == ERROR) {
        return(ERROR);
    }
    .
    .
    .
}

- exception types 
BaseException
    SystemExit
    KeyboardInterrupt
    GeneratorExit
    Exception
        StopIteration
        ArithmeticError
            FloatingPointError
            OverflowError
           ZeroDivisionError
        AssertionError
        AttributeError
        BufferError
        EOFError
        ImportError
            ModuleNoteFoundError
        LookupError
            IndexError
            KeyError
        MemoryError
        NameError
            UnboundLocalError
        OSError
            BlockingIOError
            ChildProcessError
            ConnectionError
                BrokenPipeError
                ConnectionAbortedError
                ConnectionRefusedError
                ConnectionResetError
            FileExistsError
            FileNotFoundError
            InterruptedError
            IsADirectoryError
            NotADirectoryError
            PermissionError
            ProcessLookupError
            TimeoutError
        ReferenceError
        RuntimeError
            NotImplementedError
            RecursionError
        SyntaxError
            IndentationError
                TabError
        SystemError
        TypeError
        ValueError
            UnicodeError
                UnicodeDecodeError
                UnicodeEncodeError
                UnicodeTranslateError
        Warning
            DeprecationWarning
            PendingDeprecationWarning
            RuntimeWarning
            SyntaxWarning
            UserWarning
            FutureWarning
            ImportWarning
            UnicodeWarning
            BytesWarningException
            ResourceWarning

- raise exception 
>>> raise exception(args)

- debugging programs with assert 

>>> assert expression, argument

the system variable __debug__ is True. The __debug__ variable defaults to True and is turned off by starting the Python interpreter

- context management with keyword with 

with open(filename) as infile:
    data = infile.read()
    
when exception happend the resource will be automatic released 



# Class and object-oriented programming 
- define 
>>> class Circle:
...     pass
...
>>> my_circle = Circle()
>>> my_circle.radius = 5
>>> print(2 * 3.14 * my_circle.radius)
31.4

- instance variable 
class Circle:
    def __init__(self):
        self.radius = 1
        
- method 
>>> class Circle:
...     def __init__(self):
...         self.radius = 1
...     def area(self):
...         return self.radius * self.radius * 3.14159

- class variable, which is a variable associate with class 
class Circle:
    pi = 3.14159
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return self.radius * self.radius * Circle.pi
        
-  special __class__ attribute, available to all Python class instances. This attribute returns the class of which the instance is a member

- static method, use the @staticmethod decorator, as shown here. 
"""circle module: contains the Circle class."""
class Circle:
    """Circle class"""
    all_circles = []                                        1
    pi = 3.14159
    def __init__(self, r=1):
        """Create a Circle with the given radius"""
        self.radius = r
        self.__class__.all_circles.append(self)             2
    def area(self):
        """determine the area of the Circle"""
        return self.__class__.pi * self.radius * self.radius

    @staticmethod
    def total_area():
        """Static method to total the areas of all Circles """
        total = 0
        for c in Circle.all_circles:
            total = total + c.area()
        return total
        
- inherit 
class Shape:
    def __init__(self, x, y):
        self.x = x
        self.y = y
class Square(Shape):                            1
    def __init__(self, side=1, x=0, y=0):
        super().__init__(x, y)                  2
        self.side = side
class Circle(Shape):                            3
    def __init__(self, r=1, x=0, y=0):
        super().__init__(x, y)                  4
        self.radius = r
        
- private, Any method or instance variable whose name begins—but doesn’t end—with a double underscore (__) is private; anything else isn’t private. 

class Mine:
    def __init__(self):
        self.x = 2
        self.__y = 3                    1
    def print_y(self):
        print(self.__y)
        
- define property 
class Temperature:
    def __init__(self):
        self._temp_fahr = 0
    @property
    def temp(self):
        return (self._temp_fahr - 32) * 5 / 9
    @temp.setter
    def temp(self, new_temp):
        self._temp_fahr = new_temp * 9 / 5 + 32
        
- python support multiple inheritage 

- python support multiple inheritage 


# Regular expression 
- example 
import re
regexp = re.compile("hello")
count = 0
file = open("textfile", 'r')
for line in file.readlines():
    if regexp.search(line):
        count = count + 1
file.close()
print(count)


# Data types as objects 
- types are object too 

>>> type(5)
<class 'int'>
>>> type(['hello', 'goodbye'])
<class 'list'>

same information by accessing the instance’s special __class__ attribute: 

- issubclass 
- duck typing 


# Packages 
- 
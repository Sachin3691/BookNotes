Make manual, 2016;Note=Erxin

# Overview of make
-GNU make implemented by Richard Stallman and Roland McGrath, from version 3.76 has been handled by Paul D. Smith

- GNU make conforms to section 6.2 of IEEE standard 1003.2-1992(POSIX.2)
- make can be used for any task where some files must be updated automatcially from others whenever the other changes

- report bug
bug-make@gnu.org, http://savannah.gnu.org/projects/make/

- check make version
make --version

- obtain os and machine info by check the tail output of
make --help


# An Introduction to makefiles
- a file called makefile to tell make what to do 
- what a rule looks like, simple make files looks like 
target ... : prerequisites ...
    recipe
    ...
    ...

target, usually the name of a file or an action
prerequisites, a file that is used as input to create the target 
recipe, an action that make carries out, YOU NEED TO ADD A TAB CHARACTER AT THE BEGINNING OF EVERY RECIPE LINE. you can set the .RECIPEPREFIX to change the prefix character. recipe may have more than one command either on the same line or each on its own line. usually recipe is in a rule with prerequisites 
rule, how and when to remake certain files which are the targets of the particular rule 

- simple make file 
edit : main.o kbd.o command.o display.o \
       insert.o search.o files.o utils.o
    cc -o edit main.o kbd.o command.o display.o \
               insert.o search.o files.o utils.o
               
main.o : main.c defs.h
    cc -c main.c

kbd.o : kbd.c defs.h command.h
    cc -c kbd.c

command.o : command.c defs.h command.h
    cc -c command.c

display.o : display.c defs.h buffer.h
    cc -c display.c

insert.o : insert.c defs.h buffer.h
    cc -c insert.c

search.o : search.c defs.h buffer.h
    cc -c search.c

files.o : files.c defs.h buffer.h command.h
    cc -c files.c

utils.o : utils.c defs.h
    cc -c utils.c

clean :
    rm edit main.o kbd.o command.o display.o \
            insert.o search.o files.o utils.o

     + using backslash/newline; this is like using one long line, but is easier to read.
     + use this make file by 
     $ make 
     
     delete all the executable by 
     $ make clean 

targets that do not refer to files but are just actions are called phony targets
 
- how make processes a makefile 
    + by default make starts with the first target. you could override this behavior using the command line or .DEFAULT_GOAL special variable 
    
if source file such as *.c *.h is newer than *.o then make will recompile the *.o file with the rule 

- variables make makefiles simpler 
     
define such a variable objects with a line like this in the makefile:
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
     
reference the variable by $(objects)     
     
- let make deduce the recipes, it has an implicit rule for updating a ‘.o’ file from a correspondingly named ‘.c’ file using a ‘cc -c’ command.
     
when a '.c' file is used automatically added to prerequisites list and we could omit it in the recipe 

the new version of the previous example 
     
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
edit : $(objects)
    cc -o edit $(objects)
    
main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h
.PHONY : clean
clean :
    rm edit $(objects)    
     
- another style of make file, group entries by their prerequisites instead of by their targets. not recommended 

objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o
edit : $(objects)
    cc -o edit $(objects)
$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h
     
- rules for cleaning the directory. write a rule for how to clean all the object file 
clean:
    rm edit $(objects)
    
write rule for handle unanticipated situations 
.PHONY:clean 
clean:
    -m edit $(objects)
    
Since clean is not prerequisite of edit, this rule will not run at all. Need parameter clean 
$ make clean 

the clean rule should not be placed at the first to prevent it run as default 
   
   
# write makefiles 
- what makefile contains, five kinds of things 
    + explicit rules, describe how to remake one or more files which called targets. the dependent files are called prerequisites. may also contain a recipe to use to create or update the target 
    
    + implicit rules, describe how to remake a class of files based on their names. it gives a recipe to create or update such target base on their names from the dependent files 
    
    + variable definitions, a line specifies a text string value which can be subsituted into text later 
    
    + directives, is an instruction for make to do something special while reading the makefile 
        * reading another makefile 
        * deciding whether to use or ignore a part of the makefile 
        * defining a variable from verbatim string containing multiple lines 
        
    + comments. '#' in a line of a makefile starts a comment. comment within a recipe are passed to the shell, just as with any other recipe text. the shell decide how to interpret it. within a define directive, comments are not ignored during the definition of the variable.
    
- splitting long lines \ is line continue symbol. 
- what name to give your makefile 
normally call it makefile or Makefile, Makefile will appears prominently near the beginning of  directory listing right near the README 

the name GNUmakefile is only first checked by gnu make 

to specify another name 
$ make -f makefile-name 
     
- including other makefiles 
include file-names...

include foo *.mk $(variable-name)

    + occasion for using include is when several programs handled by individual makefiles in various directories need to use a common set of variable definitions or pattern rules 
    
    + another is when you want to generate prerequisites from source files automatically. the prerequisites can be put in a file that is include by the main makefile. it generally cleaner than generate it at the end of the makefile like other traditional make 
    
    + search pathes, if specified name does not start with a slash and the file is not found in the  current directory. other are searched 
    specify -I or --include-dir option are searched 
    prefix/include 
    /usr/local/include 
    /usr/gnu/include 
    /usr/local/include/
    /usr/include 
    
    if still can't find the file then a fatal error will be thrown 
    
    + to ignore a makefile does not exist or cannot be remade with no error 
    -include file-names 
    
-the  variable makefiles 
if environment variable MAKEFILES is defined make consider the value as a list of names separated by whitespace of additional makefiles to be read before the others 

it is not a good practice to the environment variable. keep always use explicit include 

- how makefiles are remade
    +     make will not attempt to remake makefiles which are specified as targets of a double-colon rule with a recipe but no prerequisites to avoid infinit loop 
    

- overriding part of another makefile. 

foo: 
    frobnicate > foo 
%: force 
    @$(MAKE) -f makefile $@
force:;

the % pattern will match any target. the rule specify a prerequisites force to guarantee that the recipe will be run even if the target file already exits. an empty recipe is given to force to prevent implicit rule of % to math to force itself which will causes a infinite loop 

- how make reads a makefile 
    + read all the make file and build variables, rules and build a dependency graph 
    
    + make use these structures to determine what targets will be rebuilt 
    
    + how variable and function expansion happens. expansion is immediate if it happens during the first phase
    
    expansion is deferred if it is not performed immediately till either the construct appears later in an immediate context or second phase 
    
    + variable assignment 
immediate = deferred 
immediate ?= deferred 
immediate := immediate 
immediate ::= immediate
immediate += deferred or immediate 
immediate != immediate

define immediate
    deferred
endef 

define immediate = 
    deferred
endef 

define immediate ?= 
    deferred
endef 

define immediate := 
    immediate
endef 

define immediate += 
    deferred or immediate
endef 

define immediate != 
    immediate
endef 

the append operator, ‘+=’, the right-hand side is considered immediate if the variable was previously set as a simple variable (‘:=’ or ‘::=’), and deferred otherwise

the shell assignment operator '!=' will let the right-hand side is evaluated immediately to the shell and the result is stored in the variable named on the left

    + conditional directives are parsed immediately. automatic variable cannot be used in conditional directives as automatic variables are not set until the recipe for that rule is invoked. 

    if you want to use automatic variables in directive you must move the condition into the recipe and use shell conditional syntax instead 

    + rule definition, it expanded the same way. the recipe used to construct the target is always deferred. 

immediate: immediate; deferred
    deferred
    
   
- GNU make works in two distinct phases 
    + a read-in phase 
    + a target update phase 
    GNU make able to enable a second expansion need to special target .SECONDEXPANSION must be defined before the first prerequisites list that makes use of this feature 
    
- secondary expansion, to enable a second expansion of prerequisites by specify .SECONDEXPANSION before the first prerequisite list 

    + example 
.SECONDEXPANSION:
ONEVAR = onefile
TWOVAR = twofile
myfile: $(ONEVAR) $$(TWOVAR)

the $$(variable-name) will be expanded in the second expansion 

you can use $@, $* etc during the second expansion
 
    + example 
.SECONDEXPANSION:
main_OBJS := main.o try.o test.o
lib_OBJS := lib.o api.o
main lib: $$($$@_OBJS)

Here, after the initial expansion the prerequisites of both the main and lib targets will be $($@_OBJS). During the secondary expansion, the $@ variable is set to the name of the target and so the expansion for the main target will yield $(main_OBJS), or main.o try.o test.o, while the secondary expansion for the lib target will yield $(lib_OBJS), or lib.o api.o.

- secondary expansion of explicit rules 
$$@ and $$% evaluate, respectively, to the file name of the target and, when the target is an archive member, the target member name. The $$< variable evaluates to the first prerequisite in the first rule for this target. $$^ and $$+ evaluate to the list of all prerequisites of rules that have already appeared for the same target

    + mixin functions here 
main_SRCS := main.c try.c test.c
lib_SRCS := lib.c api.c
.SECONDEXPANSION:
main lib: $$(patsubst %.c,%.o,$$($$@_SRCS))

    + secondary expansion of explicit rules 

In the third they will have values foo.1, foo.1 bar.1 foo.2 bar.2, and foo.1 bar.1 foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1 respectively.

$$@ and $$% evaluate, respectively, to the file name of the target

The $$< variable evaluates to the first prerequisite in the first rule for this target

The variables $$? and $$* are not available and expand to the empty string

$$^ and $$+ evaluate to the list of all prerequisites of rules that have already appeared for the same
target ($$+ with repetitions and $$^ without).

        * example 
        .SECONDEXPANSION:
        foo: foo.1 bar.1 $$< $$^ $$+ # line #1
        foo: foo.2 bar.2 $$< $$^ $$+ # line #2
        foo: foo.3 bar.3 $$< $$^ $$+ # line #3

In the first prerequisite list, all three variables ($$<, $$^, and $$+) expand to the empty string.
In the second, they will have values foo.1, foo.1 bar.1, and foo.1 bar.1
In the third they will have values foo.1, foo.1 bar.1 foo.2 bar.2, and foo.1 bar.1 foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1

    + secondary expansion of static pattern rules, for static pattern rules the $$* variable is set to the pattern stem. As with explicit rules, $$? is not available and expands to the empty string

    + secondary expansion of implicit rules, make searches for an implicit rule it substitutes the stem and then performs secondary expansion for every rule with a matching target pattern. The value derive as same fashion as static pattern 

    + example 
.SECONDEXPANSION:
foo: bar
foo foz: fo%: bo%
%oo: $$< $$^ $$+ $$*

When the implicit rule is tried for target foo, $$< expands to bar, $$^ expands to bar boo, $$+ also expands to bar boo, and $$* expands to f.


# Writing rules 
- if the rule has multiple target only the first target take as default. two exceptions 
    + target starting with a period is not a default unless it contains one or more slashes '/'
    + a target defines a pattern rule has no effect on the default goal 

- rule syntax 
In general, a rule looks like this:
    targets : prerequisites
    recipe
    ...
    
or like this:
targets : prerequisites ; recipe
    recipe
    ...

targets, may contain multiple files 
recipe lines start with a tab character, it could be custom by .RECIPEPREFIX
dollar signs are used to start make variable references. To use dollar sign in prerequisite you must write two of them '$$'. If  secondary expansion is enabled then you must write four '$$$$'

target out date criterion 
    + target missing 
    + target is older than any prerequisites 
    
recipe define how to update, normally it is sh 

- types of prerequisites 
    + normal prerequisites 
    + order-only relationship, impose a dependency relationship, if any prerequisite is newer than the target, then the target is considered out-of-date
    
occasionally you have a situation where you want to impose a specific ordering on the rules to be invoked without forcing the target to be updated if one of those rules is executed 

order only prerequisites can be specificed by a pipe symbol (|)
    targets : normal-prerequisites | order-only-prerequisites
    
if you declare the same file be both a normal and order-only, the normal prerequisite take precedence 

    + example target are placed in a separate directory, the timestamps on directories change whenever a file is added, removed, or renamed, we certainly don’t want to rebuild all the targets whenever the directory’s timestamp changes
    
OBJDIR := objdir
OBJS := $(addprefix $(OBJDIR)/,foo.o bar.o baz.o)

$(OBJDIR)/%.o : %.c
    $(COMPILE.c) $(OUTPUT_OPTION) $<
    
all: $(OBJS)
$(OBJS): | $(OBJDIR)
$(OBJDIR):
    mkdir $(OBJDIR)
    
- using wildcard characters in file names 
*, ? and [...]
~ at the beginning specify the home directory 

use backslash to turn off the special meaning 

- the function wildcard 
    + wildcard expansion is automatically in rules 
    + wildcard expansion is not take place when a variable is set or inside the arguments of a function. To use the wildcard like this 
    $(wildcard pattern...)
    
    + example use wildcard function 
    $(wildcard *.c) 
    get all c source files in a directory 
    
    change the list of c to a list of object by 
    $(patsubst %.c, %.o, $(wildcard *.c)
    
    + example compile all c and then link 
    objects := $(patsubst %.c,%.o,$(wildcard *.c))
    foo : $(objects)
        cc -o foo $(objects)
    
- search directories for prerequisites,  to put source separate from binaries. The directory search facilitate this by searching several directories 

    + VPATH, search path for all prerequisites 
    the value of the make variable VPATH specifies a list of directories that make should search. it for both prerequisites and targets of rules 
    
    if a target or prerequesite does not exist in current directory then make searchs the directories in VPATH 
    
    path are separate with colons or blanks. On MS-DOS and MS-Windows, semi-colons are used as separators of directory names in VPATH
    
    + the vpath directive, three forms of the vpath directive 
        * vpath pattern directories 
        specify the search path directories for file names that match pattern 
        
        * vpath pattern 
        clear out the search path associated with pattern 
        
        * vpath 
        clear all search paths previously specified with vpath directives 
        
    vpath pattern is a string containing a '%' character. it must match the file name of a prerequisite that is being searched for 
    
    + example 
vpath %.c foo:bar
vpath % blish
will look for a file ending in ‘.c’ in foo, then bar, then blish.

vpath %.c foo
vpath % blish
vpath %.c bar
will look for a file ending in ‘.c’ in foo, then blish, then bar, while

- how directory searches are performed 
    + if target file does not exist at the path in the makefile, directory search is performed 
    + if directory search successful, then path is kept 
    + all prerequisites of this target are examined using this same method 
    + target may or may not need to be rebuilt 
        * not need, use the path found via directory search for all the prerequisites 
        * need, thrown away, target is rebuild locally 
    + use GPATH variable to indicate to make for the above logic, which have the same format as VPATH 
        
- automatic variable such as '$^' a list of all the prerequisites of the rule. $@ is the target 
    + example 
    foo.o : foo.c
               cc -c $(CFLAGS) $^ -o $@
    
- directory search and implicit rules also support search VPATH 
- directory search for link libraries, this feature comes when you write a prerequesite whose name is of the form '-lname'. 

'-lname' this will make it special by searching for file libname.so and search vpath 

default value for .LIBPATTERNS is 'lib%.so lib%.a' 

- phony targets, a phony target is one that is not really the name of a file; two reason to use 
    + avoid a conflict with a file of the same name 
    + to improve performance 
    
    + if you write a rule whose recipe will not create the target file, the recipe will be executed every time the target comes up for remaking. example 
    
    clean: 
        rm  *.o temp 
    
    this rm command will run every time you say 'make clean' 
    
    if a file named 'clean' contain in the same directory will interrupt the above logic. To prevent this we declare the clean target is .phony by 
    
    .PHONY: clean
    clean:
        rm *.o temp
    
    + phony also be used to conjunction with recusive invocations of make 
    
    SUBDIRS = foo bar baz
        subdirs:
            for dir in $(SUBDIRS); do \
                $(MAKE) -C $$dir; \
            done
    
    problem in the above way is 
        * error detected in sub-make is ignore 
        * cannot build in parallel 
        
    with phony's help we could over come these problem by 
    
    SUBDIRS = foo bar baz
    .PHONY: subdirs $(SUBDIRS)
    subdirs: $(SUBDIRS)
    $(SUBDIRS):
        $(MAKE) -C $@
    foo: baz
    
    + A phony target should not be a prerequisite of a real target file; if it is, its recipe will
be run every time make goes to update that file
    
    + Phony targets can have prerequisites, When one directory contains multiple programs,
it is most convenient to describe all of the programs in one makefile
    
all : prog1 prog2 prog3
.PHONY : all
prog1 : prog1.o utils.o
    cc -o prog1 prog1.o utils.o
prog2 : prog2.o
    cc -o prog2 prog2.o
prog3 : prog3.o sort.o utils.o
    cc -o prog3 prog3.o sort.o utils.o
    
    + When one phony target is a prerequisite of another, it serves as a subroutine of the other.
    
- rules without recipes or prerequisite, If a rule has no prerequisites or recipe, and the target of the rule is a nonexistent file, then make imagines this target to have been updated whenever its rule is run. All targets depending on this one will always have their recipe run. 

clean: FORCE
    rm $(objects)
FORCE:

it's equal to use ‘.PHONY: clean’. Using ‘.PHONY’ is more explicit and more efficient. However, other versions of make do not support ‘.PHONY’; thus ‘FORCE’ appears in many makefiles.

- empty target files to record events; its used to hold recipes for an action, this target file can really exist but the content of the file do not matter. The purpose is to record its last-modification time when the rule's recipe was last executed 

print: foo.c bar.c
    lpr -p $?
    touch print

- special built-in target names 
.PHONY, the prerequisite of the special target 

.SUFFIXES, The prerequisites of the special target .SUFFIXES are the list of suffixes to be
used in checking for suffix rules.

.DEFAULT, the recipe sepcified for .DEFAULT is used for any target for which no rules are found 

.PRECIOUS, The targets which .PRECIOUS depends on are given the following special treatment: if make is killed or interrupted during the execution of their recipes, the target is not deleted.

.INTERMEDIATE, The targets which .INTERMEDIATE depends on are treated as intermediate files.

. SECONDARY, The targets which .SECONDARY depends on are treated as intermediate files,
except that they are never automatically deleted.

.SECONDEXPANSION, is mentioned as a target anywhere in the makefile, then all prerequesite lists defined after it appears will be expanded a second time after all makefiles read in 

.DELETE_ON_ERROR, anywhere in makefile

.IGNORE, make will ignore errors 

.LOW_RESOLUTION_TIME, make assumes that these files are created by commands that generate low resolution time stamps. such as 'cp -p' to prevent target be mistakenly conclude out of date 

.SILENT, this is a historical switch use make -s or --silent in the future 

.EXPORT_ALL_VARIABLES, mentioned as target tell make export variables to child process by default 

.NOTPARALLEL, no parallel run for this target 

.ONESHEL, all lines of the recipe will be given to a single invocation of the shell rather than each line
being invoked separately

.POSIX, makefile will be parsed and run
in POSIX-conforming mode.. recipe will be invoked as the shell had been passed the -e flag 

- multiple targets in a rule, A rule with multiple targets is equivalent to writing many rules each with one target. 
    + you want just prerequesite no recipe 
    kbd.o command.o files.o: command.h
    
    + similar recipes work for all targets. The recipes do not need to be absolutely identical, since automtic '$@' can be used to substitute the particular target  

    bigoutput littleoutput : text.g
        generate text.g -$(subst output,,$@) > $@
        
    equal to 
    
    bigoutput : text.g
        generate text.g -big > bigoutput
    littleoutput : text.g
        generate text.g -little > littleoutput

- multple rules for one target 
    + one file can be the target of several rules. all the prerequisites mentioned in all the rules are merged into one list of prerequisites for the target 
    
objects = foo.o bar.o
foo.o : defs.h
bar.o : defs.h test.h
$(objects) : config.h

- static pattern rules 
    + syntax of static pattern rules 
    
    targets ...: target-pattern: prereq-patterns ...
        recipe
        ...

    the target-pattern and prereq-patterns say how to compute the prerequisites of each target 
    
    each target is matched against the target pattern to extract a part of the target name called the stem 
    
    each pattern normally contains the character '%' just once, the prerequisite names for each target are made by substituting the stem for the '%' in each prerequisite. 

    '%' characters in pattern rules can be quoted with preceding backslash('\'). backslashes could be quoted more backslashes. 
    
    objects = foo.o bar.o
    all: $(objects)
    $(objects): %.o: %.c
        $(CC) -c $(CFLAGS) $< -o $@
    
    Here ‘$<’ is the automatic variable that holds the name of the prerequisite and ‘$@’ is the automatic variable that holds the name of the target

    + use filter to filter out the files do not want to be match by the target-pattern to prevent warning message 
    
files = foo.elc bar.o lose.o
$(filter %.o,$(files)): %.o: %.c
    $(CC) -c $(CFLAGS) $< -o $@
$(filter %.elc,$(files)): %.elc: %.el
    emacs -f batch-byte-compile $<

- static pattern rules versus implicit rules 
    + An implicit rule can apply to any target that matches its pattern, if multiple implicit rules matched only one applies. it depends on the order 
    
    + By contrast, a static pattern rule applies to the precise list of targets that you specify in the rule. It cannot apply to any other target and it invariably does apply to each of the targets specified. Multiple matched will trigger a error 
    
    + static pattern can be bettern than implicit rule for these reasons 
    
        * You may wish to override the usual implicit rule for a few files whose names cannot be categorized syntactically but can be given in an explicit list.
        
        * static rules make no uncertainty 
        
- double-colon rules, written with :: instead of : after the target name 
    
    + When a target appears in multiple rules, all the rules must be the same type: all ordinary, or all double-colon. 
    
    + double-colon, each of them is independent of the others, Double-colon rules with the same target are in fact completely separate from one another. 
    
    + each rule with double-colon should independent with each other 
    
- generating prerequisites automatcially
    + write often say only that some object file depends on some header file.
    main.o: defs.h
    
    + To avoid this hassle, most modern C compilers can write these rules for you, by looking at the #include lines in the source files. with -M option to the compiler 
    cc -M main.c 
    
    + The practice we recommend for automatic prerequisite generation is to have one makefile corresponding to each source file. For each source file name.c there is a makefile name.d which lists what files the object file name.o depends on.
    
        * example:
%.d: %.c
    @set -e; rm -f $@; \
    $(CC) -M $(CPPFLAGS) $< > $@.$$$$; \
    sed ’s,\($*\)\.o[ :]*,\1.o $@ : ,g’ < $@.$$$$ > $@; \
    rm -f $@.$$$$
    
    the -e flag to the shell causes it to exit immediately if $(CC) fails 
    
    + Once you’ve defined the rule to remake the ‘.d’ files, you then use the include directive to read them all in.
    sources = foo.c bar.c 
    include $(sources:.c=.d)
    

# Writing recipes in rules 
- recipes in makefiles are always interpreted by /bin/sh 

- recipe syntax 
    + make syntax 
    + shell syntax, make will do a preprocessing before handling to shell 
    
    + each line in recipe must start with a tab(.RECIPEPREFIX)
        * A blank line that begins with a tab is not blank. it's a empty recipe 
        * comment in recipe will be passed to shell 
        * any thing indent with tab in recipe context will consider as a recipe 
        
- splitting recipe lines with backslash \, each single line will be invoked a shell to run it 

the .RECIPEPREFIX character will be removed before pass to shell 

    + pass script content as recipe, suggest to use make variable 
    
- using variables in recipes, never rebuild target will not trigger variable expansion 

    + quoting rules, want a dollar sign appear in recipe then use double dollar $$ 
    
LIST = one two three
all:
    for i in $(LIST); do \
    echo $$i; \
    done
    
commands pass to shell

for i in one two three; do \
    echo $i; \
done
    
- recipe echoing, a line start with '@' the echoing of that line is suppressed 
@echo About to make distribution files

when make is given -n or --just-print, in this case the '@' line will be printed too 

flags -s or --silent flag to make prevents all echoing 

- recipe execution, in single shell .ONESHELL special target is in effect

- using one shell 
    + If .ONESHELL is provided, then only the first line of the recipe will be checked for the special prefix characters (‘@’, ‘-’, and ‘+’). Subsequent lines will include the special characters in the recipe line when the SHELL is invoked.
    
.ONESHELL:
SHELL = /usr/bin/perl
.SHELLFLAGS = -e
show :
    # Make sure "@" is not the first character on the first line
    @f = qw(a b c);
    print "@f\n";

- choose the shell 
    + The argument(s) passed to the shell are taken from the variable .SHELLFLAGS. default is -c, or -ec in POSIX conforming mode 
    
- choosing a shell in dos and windows 
    + SHELL is not set then COMSPEC is used instead 
    + search current directory, default for /bin/sh 
    + search path 
- parallel execution 
    + default make will execute each recipe one by one 
    + However, the ‘-j’ or ‘--jobs’ option tells make to execute many recipes simultaneously.
    + .NOTPARALLEL pseudo-target
    + recipe failed normally make will ignore the remain recipe lines. with option -k or --keep-going then make will wait for the child process running 
    
    + use -l to tell make limit the number of parallel jobs or --max-load 
    
- output during parallel execution, use --output-sync to make. there are four level 
none 
line 
target 
recurse 

- input during parallel execution two processes cannot bot take input from same device. 
    
    
# How to Use Variables 

# Conditional Parts of Makefiles 

# Functions for transforming text 

# How to Run make 

# Using Implicit Rules 

# Using make to Update Archive Files 

# Extending GNU make 

# Integrating GNU make 

# Features of GNU make 

# Incompatibilities and missing features 

# Makefile conversations 

# Quick Reference 

# Errors generated by make 

# Complex makefile example 

# Index of concepts 

# Index of functions, variables & directives 



    
    
    
    
    
    
    
    
    









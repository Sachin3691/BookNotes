husky dsl gramma note = eshang

:ModuleCharts.dsl, is define as these modules
    - ctlib, chart library module
    - ctstd, standard chart module
    - ctsp, spcial module
    - ctdv, deviation module
    - this file list all the modules required by this particular machine

:DerivedKeywords, this file is generated as a result of compiling a machine and running the rules in the StandardDerivedKeywordsChart.dsl

:Machine configuration Dsl, describes the configuration of the Injection Molding Machines. The following items are configured using DSL
    - Screen Configuration
    - Screen Navigation Configuration
    - Language Configuration
    - Master Phrases Configuration
    - Phrase Reference Configuration
    - Sidebar Navigation Configuration
    - Storage Device Configuration
    - Device Configuration
    - Device Variable Configuration
    
:Dsl screen
>purpose
    - define the domain objects to be displayed on the screen
    - control the overall screen layout without requireing exact screen coordinates to be specified
>Screen is placed in its own module, and screen object list
screen("screen_name") 
{
   screen_object 'stroke_cylinder_mold_protection_distance'
   screen_object 'clamp_cylinder_full_tonnage_setpoint'
   screen_object 'imm_cooling_time_setpoint' 
}
screen("screen_name")
{
    panel(:layout => :horizontal, :show_border => true, :screen_text => "title")
    {
        screen_object 'id'
    }
}
>Panel, contains other objects
    panel(
            :layout => <layout_type>, 
            :screen_text => "<phrase>", 
            :visible => "<visible_bool_domain_object_name>", 
            :horizontal_alignment => <horizontal_alignment_type>, 
            :vertical_alignment => <vertical_alignment_type>, 
            :show_border => true or false) 
    {
    ...other objects such as panel, profile_panel, canvas, screen_object, image, static_text, danger_text, caution_text. warning_text, notice_text
    }
    where
    <layout_type>:
    :horizontal - panel is divided into panels of equal width  
    :horizontal_stack - screen objects within the panel are placed next to each other horizontally 
    :vertical - screen objects within the panel are placed next to each other vertically (default)
    <phrase> - screen text to show within panel (optional)
    <visible_bool_domain_object_name>
    panel is displayed based on the value of the domain object (optional) 
    the domain object must of type bool_setting or bool_status  
    if the value of the domain object is true, the panel and all screen objects within the panel are displayed 
    if the value of the domain object is false, the panel and all screen objects within the panel are not displayed 
    <horizontal_alignment_type>:
    :left - screen object is oriented towards the left side of the panel 
    :center - screen object is centered in the middle of the panel 
    :right - screen object is oriented towards the right side of the panel 
    :fill - stretches panel to take up all available horizontal space (default)
    <vertical_alignment_type>:
    :top - screen object is oriented towards the top side of the panel 
    :center - screen object is centered in the middle of the panel 
    :bottom - screen object is oriented towards the bottom side of the panel 
    :fill - stretches panel to take up all available vertical space (default) 
>Canvas, layouts obejct within specified coordinates
canvas
{..}
>profile panel
profile_panel {
   profile "<left_profile>"
   profile "<right_profile>"
   configuration_pop_up_screen_link "<configuration_pop_up_screen_link>"
   tab_index "<tab_index>"
}
>screen object, have three kinds of definition
    - screen_object '<domain_object_name>' - displays the domain object
    - screen_object <domain_object_name> if <expression>
    - screen_object(<domain_object_name>, :visible => <domain_object_name>, :show_screen_text => true -OR- false, :show_related_domain_objects => true -OR- false )
    - screen_object(
                        <domain_object_name>
                        :visible => <domain_object_name>
                        :show_screen_text => true -OR- false
                        :show_related_domain_objects => true -OR- false 
                    )
>image "<image_name>" - displayed an image
>static_text "<phrase>" - displays some text without any outline    
>danger_text "<phrase>" - displays some text with a danger oultine    
>warning_text "<phrase>" - displays some text with a waring oultine
>caution_text "<phrase>" - displays some text with a caution oultine  
>notice_text "<phrase>" - displays some text with a notice oultine
>Navigation Map
    - navigation_map(<:standard -or- :deviation -or :special>) 
    {
        group(<group_name>)
        {
          screens {}
        }
        #or
        add_screens 
        {
         ...
        }
        #or
        insert_screens_after(<screen_name>) 
        {
         ...
        }
        #or
        insert_screens_before(<screen_name>) 
        {
         ...
        }
        #or
        <screen_name> <tab_text> [if <condition>]
        <screen_name> <tab_text> ,sub_group(
                                                <sub_group_size>, 
                                                <sub_group_name_array>, 
                                                <optional_include_array>
                                            )
        <screen_group_name>(<tab_text>) 
        {
           <screen_name> <tab_text>
           ...
        }
        remove_screens {
          <screen_name>
        }
    }
    
    
    
    
    
    
    
    
    
    
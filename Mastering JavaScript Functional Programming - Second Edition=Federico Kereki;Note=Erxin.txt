Mastering JavaScript Functional Programming - Second Edition=Federico Kereki;Note=Erxin

# Introduction 
- javascript document, Mozilla Development Network (MDM) at https://developer.mozilla.org/, to help you get more in-depth knowledge

- GitHub at https://github.com/PacktPublishing/Mastering-JavaScript-Functional-Programming-2nd-Edition

- environment 
OpenSUSE Linux, from https://www.opensuse.org/#Tumbleweed, currently including kernel 5.3.5. 

http://www.nodejs.org

http://www.babeljs.io 

http://www.jasmine.github.io 

http://www.prettier.io

- FP focuses on what should be done, rather than on how. Instead of worrying about loops or arrays, you work at a higher level, considering what you need to be done.

- code qualities 
modular 

understandable 

testable 

extensible 

reusable 

- using any given new feature, check out the compatibility table at https://kangax.github.io/compat-table/es6/ 

- online js editor, JSFiddle (at https://jsfiddle.net/), CodePen (at https://codepen.io/), and JSBin (at http://jsbin.com/),

- functional method 

let sayA = () => console.log("A");
let sayB = () => console.log("B");
let alt = alternator(sayA, sayB);

alt(); // A
alt(); // B

- using a technique called currying (why would you do this? Hold that thought; we'll come to this later).

```
const altSum3 = x => y => z => x + y + z;

altSum3(1)(2)(3); // 6

let fn1 = altSum3(1);
let fn2 = fn1(2);
let fn3 = fn2(3);

```

- XKCD comic is available online at https://xkcd.com/292/
- run it—this pattern is called the immediately invoked function expression (IIFE)

- Idempotency is usually mentioned in the context of RESTful services.
- classify functions 
    + pure function, no state, return value on depend on the arguments 
    + side effects, don't return anything but may influence the return value or the whole system 
    + function with side effects, return a value that may not only depend on arguments

- In lambda calculus, if you replace the value of an expression involving a function with the calculated value for the function, then that operation is called a β (beta) reduction.

- memoization 

let cache = [];
const fib2 = (n) => {
  if (cache[n] === undefined) {
    if (n === 0) {
      cache[0] = 0;

    } else if (n === 1) {
      cache[1] = 1;

    } else {
      cache[n] = fib2(n - 2) + fib2(n - 1);
    }
  }

  return cache[n];
}

console.log(fib2(10)); // 55, as before, but more quickly!

- map, reduce, flagMap, forEach etc...

- looping over async calls 

const forEachAsync = (arr, fn) =>
  arr.reduce(
    (promise, value) => promise.then(() => fn(value)),
    Promise.resolve()
  );

(async () => {
  console.log("START FOREACH VIA REDUCE");
  await forEachAsync([1, 2, 3, 4], async n => {
    const x = await fakeAPI(n * 1000, n);
    useResult(x);
  });
  console.log("END FOREACH VIA REDUCE");
})();

/*
START FOREACH VIA REDUCE
2019-10-13T20:02:23.437Z 1
2019-10-13T20:02:24.446Z 2
2019-10-13T20:02:25.949Z 3
2019-10-13T20:02:27.952Z 4
END FOREACH VIA REDUCE
*/

- winston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. 

- highest accuracy, timing

alternatives, see https://developer.mozilla.org/en-US/docs/Web/API/Performance/now 
and https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now. 
You could also consider using console.time() and console.timeEnd(); 
see https://developer.mozilla.org/en-US/docs/Web/API/Console/time 

performance.now()

- memoizing functions, online at https://community.risingstack.com/the-worlds-fastest-javascript-memoization-library/.

- logicaly negating a function 

const delinquent = serviceResult.accountsData.filter(v => v.balance < 0);

- arity changing, turn it into a unary function. Using JavaScript's spread operator and an arrow function, this is easy to manage:

const unary = fn => (...args) => fn(args[0]);

- changing function in other ways 

Turning operations (such as adding with the + operator) into functions
Turning functions into promises
Accessing objects to get the value of a property
Turning methods into functions
A better way of finding optimum values

- demethodize 

const demethodize1 = fn => (arg0, ...args) => fn.apply(arg0, args);

- fidning the optimum

Currying is the process of transforming an m-ary function (that is, a function of arity m) into a sequence of m unary functions

Partial application is the idea of providing n arguments to an m-ary function, being n less than or equal to m, to transform it into a function with (m-n) parameters.

Partial currying is a mixture of both of the preceding ideas

- dealing with many parameters

const make3curried = a => b => c => String(100 * a + 10 * b + c);

sum(3, 5); // 8; did you expect otherwise?

const add3 = sum(3);

add3(5);   // 8

sum(3)(5); // 8 -- as if it were curried

- partial application, producing a function of the remaining parameters, is called projection

const nonsense = (a, b, c, d, e) => `${a}/${b}/${c}/${d}/${e}`;

const fix2and5 = (a, c, d) => nonsense(a, 22, c, d, 1960);

- partial currying with bind()

const partialCurryingByBind = fn =>  fn.length === 0    ? fn()    : (...pp) => partialCurryingByBind(fn.bind(null, ...pp));


# Piping in Unix/Linux 
- using other constructors 

const pipeTwo = (f, g) => (...args) => g(f(...args));

const countOdtFiles3 = path =>
  pipeTwo(pipeTwo(getDir, filterOdt), count)(path);

const countOdtFiles4 = path =>
  pipeTwo(getDir, pipeTwo(filterOdt, count))(path);
  
- JavaScript and you can read more about its usage as an operator at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator

- proxy objects https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy


# Recursion 
- decrease and conquer 
const search = (arr, key) => {
  if (arr.length === 0) {
    return false;

  } else if (arr[0] === key) {
    return true;

  } else {
    return search(arr.slice(1), key);
  }
};


const powerN = (base, power) => {
  if (power === 0) {
    return 1;

  } else if (power % 2) { // odd power?
    return base * powerN(base, power - 1);

  } else { // even power?
    return powerN(base * base, power / 2);
  }
};

- divide and conquer 
- dynamic programming 


# JavaScript way 
- several JavaScript methods are actually mutators that modify the underlying object. In

copyWithin() lets you copy elements within the array.
fill() fills an array with a given value.
push() and pop() let you add or delete elements at the end of an array.
shift() and unshift() work in the same way as push() and pop(), but at the beginning of the array.
splice() lets you add or delete elements anywhere within the array.
reverse() and sort() modify the array in place, reversing its elements or ordering them.

- freezing object 
Object.freeze(obj);

- cloning and mutating 

- getting a property 

- prism, When getting an attribute, we must check whether the object we are processing is not null or undefined and whether the attribute we want is in the object. 
const pPseudonym = prismProp("pseudonym");console.log(preview(pPseudonym, author).toString());/*    undefined*/

    + implementing prisms 
const getFieldP = curry((attr, obj) =>
  obj && attr in obj ? obj[attr] : undefined
);

const setFieldP = curry((attr, value, obj) =>
  obj && attr in obj ? { ...obj, [attr]: value } : { ...obj }
);


# Implementing the design patterns the functional way 
- behvioral design 
- creational 
- structural design pattern 
- concurrency 
- architectural 
- functional programming patterns 
    + facade, adapter 
    + decorator 
    + strategy, template and command 
    + observer 
    + other patterns 

- façade that provides a simpler way of working. 

const simpleAjax = (function() {
  const hard = require("hardajaxlibrary");

  const convertParamsToHardStyle = params => {
    // ...
  };

  const makeStandardUrl = url => {
    // ...
  };

  const getUrl = (url, params, callback) => {
    // ...
  };

  const postUrl = (url, params, callback) => {
    // ...
  };

  return {
    getUrl,
    postUrl
  };
})();

- decorator or wrapper
- strategy, template and command 
- observer and reactive programming 

Learn more about RxJS at https://rxjs-dev.firebaseapp.com/ and https://www.learnrxjs.io/.

    + Observable: This represents a stream of (present or future) values and can be connected to an observer. You can create observables from practically anything, but the most common case is from events. By convention, observable variable names end with $; see https://angular.io/guide/rx-library#naming-conventions.
    + Observer: This is either a callback that is executed whenever the observable it's subscribed to produce a new value or an object with three methods: next(), error(), and complete(), which will be called by the observable when a value is available, when there's an error, and when the stream is ended respectively.
    + Operators: These are pure functions (similar to map(), filter(), and so on, from Chapter 5, Programming Declaratively – A Better Style) that let you apply transformations to a stream in a declarative way.
    + Pipe: This is a way to define a pipeline of operators that will be applied to a stream. This is very similar to the pipeline() function we developed back in Chapter 8, Connecting Functions – Pipelining and Composition.
    + Subscription: This is the connection to an observable. An observable doesn't do anything until you call the subscribe() method, providing an observer.
    
- other patterns 
    + currying nad partial application 
    + declarative function 
    + persistent data structures 
    + a chain of responsibility 
    
- functional design patterns 
    + Processing collections using filter/map/reduce: Whenever you have to process a data collection, using declarative higher-order functions, such as filter(), map(), and reduce()
    
    + Lazy evaluation with thunks 
    
    + persistent data structures for immutability 
    
    + wrapped values for checks and operations 
    
- Building bettern containers functinal data types 
    + data types from functional point of view 
    + containers
    + functions as structures 
    
- specifying data types, 

visit https://flow.org/ for Flow, 

https://www.typescriptlang.org/ for TypeScript, 

http://elm-lang.org/ for Elm. 

If you want to know more about type checks, the corresponding web pages are 

https://flow.org/en/docs/types/functions/, 
https://www.typescriptlang.org/docs/handbook/functions.html, 
https://flow.org/en/docs/types/functions/.
    
- other data type options, Check out https://github.com/fantasyland/fantasy-land/ and https://sanctuary.js.org/#types for a more formal definition and description of types

- wrapping a value, a basic container 
    
    + enhancing our container
class Functor extends Container {
  static of(x) {
    return new Functor(x);
  }

  map(fn) {
    return Functor.of(fn(this[VALUE]));
  }
}

- dealing with missing values with maybe 
const plus1 = x => x + 1;

Maybe.of(2209).map(plus1).map(plus1).toString(); // "Just(2211)"

Maybe.of(null).map(plus1).map(plus1).toString(); // "Nothing()"

- Fantasy Land Specification at https://github.com/fantasyland/fantasy-land/. Don't say we didn't warn you: the alternative name for that page is Algebraic JavaScript Specification!

This project specifies interoperability of common algebraic structures

- fast memoize, fastest possible memoization library in JavaScript that supports N arguments.

https://github.com/caiogondim/fast-memoize.js

- adding operations 

- maybe, monad for javascript, never null again 

https://www.npmjs.com/package/maybe

var Maybe = require('maybe'),
    start = Date.now();
 
// We expect that our value function will return `true` after a 2 seconds have passed, and
// otherwise will not return (return undefined)
var unsure = Maybe(function () {
  return Date.now() > start + 2000 || undefined;
});
 
unsure.value()                  // => Maybe.Nothing
setTimeout(unsure.value, 2000); // => true

- let your JS API users either give you a callback or receive a promise 

var maybe = require("call-me-maybe")
 
module.exports = function asyncFunc (cb) {
  return maybe(cb, new Promise(function(resolve, reject) {
    // ...
  }))
}

- handling alternatives the either monad

class Monad extends Functor {
  static of(x) {
    return new Monad(x);
  }

  map(fn) {
    return Monad.of(fn(this[VALUE]));
  }

  unwrap() {
    const myValue = this[VALUE];
    return myValue instanceof Container ? myValue.unwrap() : this;
  }
}

class Left extends Monad {
  isLeft() {
    return true;
  }
    
  map(fn) {
    return this;
  }
}

class Either extends Monad {
  constructor(left, right) {
    return right === undefined || right === null
      ? new Left(left)
      : new Right(right);
  }

  static of(left, right) {
    return new Either(left, right);
  }
}

const getAlerts2 = (lat, long, callback) => {
  const SERVER = "https://api.darksky.net/forecast";
  const UNITS = "units=si";
  const EXCLUSIONS = "exclude=minutely,hourly,daily,flags";
  const API_KEY = "you.have.to.get.your.own.key";

  request
    .get(`${SERVER}/${API_KEY}/${lat},${long}?${UNITS}&${EXCLUSIONS}`)
    .end((err, res) =>
      callback(
        err
          ? Either.of("AJAX FAILURE", null)
          : Either.of(null, JSON.parse(res.text))
        )
      );
};

- calling a function, the try monad 

class Try extends Either {
  constructor(fn, msg) {
    try {
      return Either.of(null, fn());
    } catch (e) {
      return Either.of(msg || e, null);
    }
  }

  static of(fn, msg) {
    return new Try(fn, msg);
  }
}

- binary trees in haskell 

const myTree = Tree(
  22,
  Tree(
    9,
    Tree(4, EmptyTree(), EmptyTree()),
    Tree(12, EmptyTree(), EmptyTree())
  ),
  Tree(
    60,
    Tree(56, EmptyTree(), EmptyTree()),
    EmptyTree()
  )
);











    
    
    
    
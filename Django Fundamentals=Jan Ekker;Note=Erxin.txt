Django Fundamentals=Jan Ekker;Note=Erxin

# introduction to django
- web framework for perfectionists (with deadlines)
- named after django reinhardt
- batteries included
    + ORM, 
    + admin django could generate admin interface for database
    + templates
    + url mapping
    + forms
    + packages
- django principles
    + be more productive with less code
    + writing good, clear, clean code
    loose coupling
    DRY
    and more http://goo.gl/PRrEMe
    + Fun
    + very thoroughly documented
    + great friendly community
    + http://www.djangoproject.com/
- what you should already know
    + base of python
    + basics of web development
    + css, and javascript
    + basic of databases
- course overview

# installing django
- virtualenv, why we need virtualenv
    + django with python 3 with django 1.5
    + start new project python 3 with 1.6
    + mix with different version of packages
- install and use virtualenv
    + created isolated python environments
    separate environment per project
    install project dependencies in there
    + don't install python packages globally
    work inside virtualenv
    + project wth conflicting dependencies can coexist peacefully
    if they live inside their own virtualenv
    + install virtualenv
    pip install virtualenv
    
    on window
    python_dir\scripts\pip
    
    on linux
    sudo pip install virtualenv
    
    + create a new virtual environment
    virtualenv myproject
    
    on widonws
    python_dir\scripts\virtualenv myproject
    
    with specfic python version
    virtualenv -p path/to/python myproject
    
- demo virtualenv
$ pip install virtualenv

then virtualenv with a default python version python 2.7.5, if you have installed python3 then use this to create a isolated python3 environment
$ virtualenv -p python3_dir create_virtual_env_name

$ cd create_virtual_env_name

there will be bin and lib directory relative to the current python env
start working in the virtual env use 
$ . bin/activate   
then the virtualenv is activated, check the python version will be 3

- install virtualenv steps
cd into the new directory

activate the virtual env
on linux
$ . bin/activate

on windows
$ scripts\activate
- install django
pip install django
pip isntall django==version


# starting a django project
- create a new project
    + activate your virtualenv
    $ django-admin.py startproject projectname
    
    on windows
    python virtuaenv\scripts\django-admin.py startproject projectname
    
    + put isolated python virtual environments separate from the default python projects
    
    + setup the django project
    django-admin.py startproject projectname
    
    file lists:
    manage.py
    project_folder
        __init__.py
        settings.py
        urls.py, configure url for the website
        wsgi.py, used to deploy website to the production server
    
    move the project directory, and use this to start server
    $ python manage.py runserver [port_number]
    the development server will automatic reload changes which will speed up development
- Model View Template 
    + Model, 
    represent the data
    each model class represents a database table
      
    + View, 
    takes http request and returns response
    may use model to retrieve/store data
    may call a template to present data
    
    + Template,
    generates html
    presentation logic only
    
    + compare to MVC
    View <=> Controller
    Template <=> View
    Model == Model
- Demo Hello world!
http request is a message from the browser to the server, navigate to a url, a get request will be sent 
get / http/1.1
this will as for the root element from the server

create a default view, helloWorldView.py
from django.views.generic.base import View
from django.http import HttpResponse

class HelloWorldView(View):
    def get(self, request):
        return HttpResponse("Hello World")
        
map url to the created view, in the urls.py
from django.conf.urls import patterns, include, url
from django.contrib import admin
from .views import HelloWorldView

admin.autodiscover()

urlpatterns = patterns('',
    ;#Examples:
    url(r'^$', HelloWorldView.as_view(), name='home'),
    #url(r'^blog/', include('blog.urls')),
    url(r'^admin/', include(admin.site.urls)),
)

- mapping urls
    + when an http request comes in for some url
    + django looks in urls.py
    find a urlpatterns variable
    this holds a list of url mappings
    + tries to find a pattern that matches the url
    urlpatterns = patterns('',
        url(r'^$', HelloWorldView.as_view()),
        url(r'^admin/', include(admin.site.urls)),
    )
    + urls are matched by regular expressions
    + r before the first quote means "raw string" notation

- django views
get /http/1.1 get request -> urls.py -> views.py -> response to the browser
    + django views are what other MVC frameworks call "controllers"
    + a view is callable
        * that takes a request object
        * and returns a response object
        * can be a function
    + we will focus on class-based views
        * allow reuse of code by inheritance
        * allow use django's predefined generic views
- class-based views
    + inherit from django.views.generic.base.View
    + http method is mapped to method name(usually get(), post(),...)
    it receives a django.http.HttpRequest
    should return a django.http.HttpResponse
    + http response contains
        * a status code (200 ok, 404 not found, etc)
        * headers ( Mime type, Date, Cookies, Caching info, etc)
        * the actual document ( html, image, javascript, css, etc)
    + returning a http response
    + returning a html page
        * status code 200
        * response contains html
        * simple return a new HttpResponse instance
        class HelloWorldView(View):
            def get(self, request):
                return HttpResponse("Hello, world")
    + but we don't want our views to contain presentation logic
    move generation of HTML to a template instead
- templates
add a new directory called template and add a helloworld.html
<!DOCTYPE HTML>
    <html>
        <head>
            <title> Hello </title>
        </head>
        <body>
            <h1>hellow </h1>
            it is now {{date}}
        </body>
    </html>

call template from view, add codes into views, add these code into the HelloWorldView view class

from django.views.generic.base import View
from django.shortcuts import render_to_response
from datetime import date

class HellowWorldView(View):
    def get(self, request):
        return render_to_response('helloworld.html', {'date':date.today()})

add extra line to the settings.py file to change the default template location
import os
BASE_DIR = os.path.dirname(os.path.dirname(__file__))

TEMPLATE_DIRS=[os.path.join(BASE_DIR, 'templates')]

if you have multiple single view classes, use the generic views to follow the DRY principle
from django.views.generic.base import TemplateView
from datetime import date

class HelloWorldView(TemplateView):
    template_name='helloworld.html'
    
    ;#override method
    def get_context_data(self, **kwargs):
        return {'date', date.today()}

TemplateView is the generic type for the template which is equal to in the previous class definition        
        
        
# Model
- Overview
writing models, field types, saving and deleting data, database queries
- adding models
    + add a new app to the project
    $ python manage.py startapp tictactoe
    
    + add models, there is a file called models.py
    
    from django.db import models
    ;#Create your models here
    class Game(models.Model):
        first_player = models.ForeignKey(User, related_name="games_first_player")
        second_player = models.ForeignKey(User, related_name="games_second_player")
        next_to_move = models.DateTimeField(auto_now_add=True)
        last_active = models.DateTimeField(auto+now=True)
        
    
    class Move(models.Model):
        x = models.IntegerField()
        y = models.IntegerField()
        comment = models.CharField(max_length=300)
        game = models.ForeignKey(Game)
        
    django will automatic add primary key field by default, the Move table will contain five column

    django comes with a default user class, ForeignKey is used to add foreign key restriction

    ForeignKey(Game) set a many map to one relationship from move to game, which is reference the default game primary key

    to let the model created data table by django, need to add the new created app into the settings.py, 
    INSTALLED_APPS = (
        '...',
        'tictactoe'
    )
    
    create database table by the model
    $ python manage.py syncdb
    create a supper user follow the wizard
    
    the name of the table will create with the app name as the prefix such as 
    tictactoe_game
    tictactoe_move
    
    by default the database will created as a sqlite3 database and placed at the top level of the project folder
    
    change the database type configuring the in setting.py the BI 
    
    show the sql generate by the django by 
    $ python manage.py sql tictactoe
- django model classes
    + each model class maps to a database table
    subclasses django.db.models.Model
    
    + each attribute of the model represents a database field
    should be an instance of the appropriate Field class
    Document http://goo.gl/rgg/WZu
    
    + django uses the field class type for
    the database column type(e.g INTEGER, VARCHAR)
    the default html widget to use when rendering a form field
    
    + django generates a model API
    for retrieving and storing data from python code
    
- manage database commands
   + check auto generated sql command
   $ python manage.py sql appname
   prints create table sql statements for the given app name
   
   + python manage.py syncdb
   creates the database tables for all installed appes whose tables have not already been created
   
   + syncdb does Not do database migration!
   it will not alter tables
   migrations will be a part of django 1.7
    
   + changing a model
   drop the table run syncdb again
   use south, http://goo.gl/8n4qmA, python package for django database migration
   
- the admin interface, the admin app is added by default in the setting.py
the admin interface is also add in the urls.py tool, admin will auto generate admin interface for all the modules to generate user admin interface
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^$', 'main.views.home')
)
    
register the models in the app's admin.py file
from django.contrib import admin
from .models import Game, Move

admin.site.register(Game)
admin.site.register(Move)
    

login the admin server interface by the super user names and password    
the interface use the model's __str__ method to generate the content of each column
so, add __str__ mehod in the game class to show the content of the Game class from the admin page

GAME_STATUS_CHOICES = (
    ('A', 'Active'),
    ('F', 'First Player Wins'),
    ('S', 'Second Player Wins'),
    ('D', 'Draw')
)

    class Game(models.Model):
        first_player = models.ForeignKey(User, related_name="games_first_player")
        second_player = models.ForeignKey(User, related_name="games_second_player")
        next_to_move = models.DateTimeField(auto_now_add=True)
        last_active = models.DateTimeField(auto+now=True)
        status = models.CharField(max_length=1,
                                  default='A',
                                  choices=GAME_STATUS_CHOCIES)
        
        def __str__(self):
            return "{0} vs {1}".format(self.first_player, self.second_player)

after change the model, need to update the database model
    + stop the server, use this script to start the db manage shell, drop the changed table and recreate the database
    $ python manage.py dbshell
    
    sqlite> drop table tictactoe_games
    
    $ python manage.py syncdb
- The django admin interface, admin
    + an auto-generated user interface to edit your data
    need to register your models in your app's admin.py
    admin.site.register(MyModel)
    
    + very customizable
    for documentation, see http://goo.gl/70YyPC
    
    + implement __str__ for your Model classes
    
- The Model API, django have useful api to manipulate data from python code
start the python shell with django project content reference
$ python manage.py shell

each model class contain a objects properties to manage database table

>>> from tictactoe.models import Game, Move
>>> Game.objects   # this is used to query data from database
>>> Game.objects.all() #get all games
>>> Game.objects.get(pk=1)
>>> g = Game.objects.get(pk=1)
>>> g.id
>>> Game.objects.filter(status="A")
>>> Game.objects.exclude(status="A")
frist_player is a foreign key, the __ is used to get the foreign key value username in the User table, __ is a django feature to reference foreign table column
>>> Game.objects.filter(first_player__username="reindert")
>>> m = Move(x=1, y=2, comment="let the best palyer win!", game=g)
save m to database
>>> m.save()
from the point of view Game, the relative move table records relative to the game is reference by tableRecord.foreignTableName_set
>>> g.move_set
>>> g.move_set.all()
>>> g.move_set.count()
>>> g.status = "D"
>>> g.save()

- Save and Delete
    + create a new instance with keyword arguments
    m = new Move(x=1, y=2, game=g)
    
    + save() on a new object
    m.save()
    django will set the primary key field and does sql insert
    
    + save() on an existing object will trigger update
    + delete() to remove object

- The Model API
    + model class have a manager instance called "objects"
    is a class attribute: Game.objects not g.objects
    
    + get() return a single instance
    Game.objects.get(pk=1) # will return error if not one record
    
    + all() return all rows
    
    + filter() return match objects
    Game.objects.filter(status="A")
    
    + exclude() returns objects that don't match
    
    + models documentation http://goo.gl/RA0eT9
    
- Database Relations
    + define by a foreignKey field
    one the "one" side of the relation
    move.game = g
    
    + many site gets a xxx_set attribute
    where xxx is the name of the related model, game.move_set
    this is a "related manager" object
    works just like "objects" manager
    
    + set relation from move m to game g
    m.game = g
    or
    g.move_set.add(m)
    
    + django also offer oneToOne and manyToMany fields, reference document http://goo.gl/rggWZu

    
# adding a user home page
- user home page
    + display contents from database
    + add login and logout views
    
    add new patterns to add urlpatterns in the urls.py, the name parameter is used for a key reference by the other url parameter
    
    urlpatterns = patterns('',
        url(r'^admin/', include(admin.site.urls)),
        url(r'^$', 'main.views.home', name='projectname_home')
    )
    
    urlpatterns += patterns('django.contrib.auth.views',
        url('^login/$', 
            'login', 
            {'template_name':'login.html'},
            name='projectname_login'),
        url('^logout/$', 
            'logout',
            {'next_page':'projectname_home'},
            name='projectname_logout')
        )
    next_page is use to reference other name parameter and will be use a redirect url both in urls mapping and template files
    the django.contrib.auth.views is a prefix of urls
    
    add templates folder at the project folder, add login.html template file content
    add the template directory into the settings.py
    TEMPLATE_DIRS = (os.path.join(BASE_DIR, 'templates'))
    
    add login.html content  
    <html>
        <head>
            <title>Please login</title>
        </head>
        <body>
            {% if form.errors %}
                <p class="text-warning"> Your username and password didn't match</p>
            {% endif %}
            <form role="form" class="form-horizontal" method="post" action="{% url}"/>
                {% csrf_token %}
                {{form}}
                <input> class="btn btn-primary" type="submit" value="Login"/>
                <input type="hidden" name="next" value="{{next}}"/>
            </form>
        </body>
    </html>
    
    by default django only look for templates folder in side the apps folder, to make it also search the new add template folder, we need to add the setting TEMPLATE_DIRS
    
    update the setting's LOGOUT_URL, LOGIN_URL, LOGIN_REDIRECT_DIR
    update the home template, add authenticated logic to display different content for each login status
    {% if user.is_authenticated %}
        <li> <a href="{% url 'url_map_item_name'}">Logout</a></li>
    {% else %}
        <li> <a href="{% url 'projectname_login'}">Login</a></li>
    {% endif %}
    the tag url will use the url name to generate correct url
- login and logout views
    + django.contrib.auth.views.login
    have to provide template yourself
    
    + django.contrib.auth.views.logout
    have to give next page as an argument
    
    + settings.py
    LOGIN_URL, LOGOUT_URL, LOGIN_REDIRECT_URL
    
    + {% if user_is_authenticated %}
    document relative to django authentication http://goo.gl/qswNHN
    
- more about urls mappings
    + add patterns with +=
    + patterns function has a prefix string as a first argument
    + views can receive keyword arguments
    + urls can be named
    
- Tempaltes tags and variables
    + variables {{var}}
    will render the value of the item "var" from the context
    
    + tags {% tag %}
    built-in tags: for, if, url, etc
    built-in tag reference http://goo.gl/l7RJri

    + custom tags
    from third-party apps
    write them yourself
    
    + templates, if url
    {% if test %}
        <html_elements/>
    {% elif %}
        <html_elements/>
    {% else %}
        <html_elements/>
    {% endif %}
    
    + {% url 'login'}
    will generate a url for the URL named "login"
    
- adding the home view
    + add a new app called user
    + add a home.html at the template/user/home.html location as the user's home view
    + add home view to views.py in the new created app
    from django.shortcuts import render
    
    def home(request):
        return render(request, "user/home.html")
        
    + change the urls.py and add the home view
    
    from django.conf.urls improt patterns, include, url
    urlpatterns = patterns(
        'urser.views', 
        url(r'^home$', 'home', name='user_home')
    )
    + add the new app into the project's settings.py add 
    INSTALLED_APPS = (
        ...
        'user'
    )
    + change project scope url mapping file urls.py to add user app's urls.py file
    urlpatterns = patterns(
        '',
        url(r'^admin/', include(admin.site.urls)),
        url(r'^user/', include('user.urls')),
        url(r'^$', 'main.views.home', name='projectname_home')
    )
    then 
    user/home will maps to the home url page define in the user app urls.py
    + change the login to redirect to the user_home mapping
- app url configuration
    + app has its own urls.py
    + include it in project urls.py
    url(r'^prefix/', include('myapp.urls'))
- The Template inheritance
    + in the previous example the home.html of user app is copied from the main project template home.html folder
    + add base.html into the project's template folder
    + add block into the base.html which could be replace by the inherit template
    
    <div class="container">
        {% block content %}
        {% endblock %}
    </div>
    
    {% block javascript %}
        <script src="{% static 'jquery-2.0.3.miin.js' %}"></script>
        <script src="{% static 'bootstrap/js/bootstrap.min.js'}"></script>
        </script src="js/vendor/modernizr-2.6.2-repond-1.1.0.min.js"></script>
    {% endblock javascript %}
    + add template inherit script in the inherit class
        * change the home.html in the mainproject/templates/main/home.html, add inherit script
        
        {% extends "base.html" %}
        
        {% block content %}
            <div class="jumbotron">
                <p>Welcome to the Django fundametas course.</p>
                <p style="margin-top: 1em">
                    <a href="{% url 'boardgames_login'%}">Click Here</a>
                </p>
            </div>
        {% endblock %}

        * do the same thing for the user home page
        {% extends "base.html" %}
        {% block content %}
            <div class="jumbotron">
                <p> Hi, {{user.username}}!</p>
            </div>
        {% endblock content %}
- Template inheritance
    + {%extends "base.html"%}
    extend a base template
    must be first tag

    + {% block content %}...{% endblock %}
    defines a block that can be overridden by child templates

    + more detail documentation at http://goo.gl/nk1b1L
- Login Required
    + forbidden none login require user to see authorized with django decorator
    
    http://localhost/user/home, will directly show the login views without checking the login status
    
    + add decorator into relative views
    
    from django.shortcuts import render
    from django.contrib.auth.decorators import login_required
    
    @login_required
    def home(request):
        return render(request, "user/home.html")
- showing game data on the home page
    + changed a little logic to show the user home view page
    from tictactoe.models import Game
    
    def home(request):
        my_games = Game.objects.game_for_user(request.user)
        active_games = my_games.filter(status="A")
        finished_games = my_games.exclude(status="A")
        waiting_games = active_games.filter(next_to_move=request.user)
        other_games = active_games.exclude(next_to_move=request.user)
        context = {'other_games':other_games,
                   'waiting_games':waiting_games,
                   'finished_games':finished_games}
        return render(request, "user/home.html", context)

    + the new template for the home page, the home.html for the user template
    {% extends  "base.html" %}
    {{% block title %}}
    Overview for {{user.username}}
    {% endblock title %}
    
    {# TODO check empty for all lists #}
    {% block content %}
        <div class="well col-md-6">
            {% include "itctactoe/game_list_snippet.html" with header="games waiting for your move" game_list=waiting_games% }
            {% include "tictactoe/game_list_snippet.html" with header="other active"}
            {% include "tictactoe/game_list_snippet.html" with header="Finished game"}
        </div>
    {% endblock content %}


    the game_list_snippet.html is another template which not return a html file but a html code snippets
    
    <h3 class="panel-header">{{header}}</h3>
    
    <div class="list-group">
        {% for game in game_list %}
            <a class="list-group-item" href="#">
                {{game}}:
                {% if game.status == "A"%}
                    {% if game.next_to_move == user %}Your turn{% else %}Waiting for other player
                {% elif game.status == "F" and user == game.first_player %}
                    You won!
                {% else %}
                    You lost!
                {% endif %}
                <span class="badge">{{game.move_set.count}}</span>
            </a>
        {% empty %}
            <span class="list-group-item">No games available</span>
        {% endfor %}
    </div>
- a custom manager class
    + add table level logic operation into objectManager
    + example to add a games model manager
    
    class GamesManager(models.Manager):
        def games_for_user(self, user):
            """Return a query set of games that this user participates in """
            return super(GAmesManager, self).get_queryset().filter(Q(first_player_id=user.id)|Q(second_player_id=user.id))


    class Game(models.Model):
        first_player = models.ForeignKey(User, related_name="games_first_player")
        second_player = models.ForeignKey(User, related_name="games_second_player")
        next_to_move = models.ForeignKey(User, related_name="games_to_move")
        start_time = models.DateTimeField(auto_now_add=True)
        last_active = models.DateTimeField(auto_now=True)
        status = models.CharField(max_length=1, default='A', choices=GAME_STATUS_CHOICES)
        
        objects = GamesManager()
        
        def __str__(self):
            return "{0} vs {1}".format(self.first_player, self.second_player)

    then we could call the custom game manager's method by game object
    Game.objects.games_for_user()
- Template Context
    + data is provided to the templated by a requestContext
    we add our own values as a dictionary
    render(request, 'template', {'foo':'bar'})
    
    + all data you want to display should be present in the context
    use the view and model to retrieve all data and do business logic
    
    + template documentation
    http://goo.gl/DKsS6H
    http://goo.gl/B0VM0P, more technical details
- Template for and include tags
    + {% for item in list %}
        <elements/>
      {% empty %}
        <elements/>
      {% endfo %}
      
    + {% include 'path_to_other_template' [with parameter_name=value, ...]%}
    

# Forms
- Introduction
    + Invitations to let user invite other user to game
    + generate form for models
    validation, styling, views, templates
    + passing arguments to views
- adding models to implement invitations into the game models.py
    + add Invitation model
    class Invitation(models.Model):
        from_user = models.ForeignKey(User, related_name="invitations_sent")
        to_user = models.ForeignKey(User, related_name="invitations_received")
        message = models.CharField(max_length=300)
        timestamp = models.DateTimeField(auto_now_add=True)

    if two foreignKey field use the same model as the example from_user and to_user. The related_nme parameter is necessary
        
    re-sync the database after create the model 
    $ python manage.py syncdb

    add forms.py into tictactoe project, derived from ModelForm
    from django.forms import ModelForm
    
    class InvitationForm(ModelForm):
        class Meta:
            mode = Invitation

            
    add view and template to show the new created form add new_invitation view
    
    from django.shortcuts import render
    from django.contrib.auth.decorators import login_required
    
    from .models import Invitation
    from .forms import InvitationForm
    
    @login_required
    def new_invitation(request):
        if request.method == 'POST':
            form = InvitationForm(data=request.POST)
            if form.is_valid():
                form.save()
                return redirect('user_home')
        else:
            form = InvitationForm()
        return render(request, 'tictactoe/new_invitation.html', {'form':form})

    this is_valid method will makes the form auto generate validation information and test the input is validate
    
    add a new template called new_invitation.html
    
    {% extends "base.html" %}
    
    {% block title %}
    New Invitation
    {% endblock title %}
    
    {% block content %}
        <div class='well col-md-6'>
            <p>Please select the user you want to invite to play a game</p>
            <form action="" method="post">
                {% csrf_token %}
                {{form}}
                <button type="submit">Send the invitation</button>
        </div>
    {% endblock content %}

    the empty action means we will send the form to the same url
    {% csrf_token %} is a tag which is django used to generate logic to prevent cross site request, suggest to use it for every generated form
    
    
    add view new_invitation view into urls.py mapping of the app 
    from django.conf.urls import patterns, include, url
    
    urlpatterns = patterns('tictactoe.views', url(r'^invite$', 'new_invitation', name='tictactoe_invite'))

    
    add top level urls.py mapping
    urlpatterns = patterns('',
        url(r'^admin/', include(admin.site.urls)),
        url(r'^user/', include('user.urls')),
        url(r'^tictactoe/', include('tictactoe.urls')),
        url(r'^$', 'main.views.home', name='boardgames_home')
    )
    the urls follow this pattern
    url(r'url_pattern', include(app_name.urls)),

- ModelForm
    + Will generate a html form for a model class
    will have appropriate html input for every model field
    
    + use meta class to specify model
    class InvitationForm(ModelForm):
        class Meta:
            mode = Invitation
            
    + More about ModelForm http://goo.gl/ZBZhtM
- Views and Forms
    + initial view
    http get
    initialize empty form instance
    
    + after submit
    http post (but really depend ons on html form)
    initialize form instance from request.post, also may be request.get 
    call form.is_valid()
    
    + validation errors: render template again
    + everything ok: form.save(), to save data to the database, django.shortcuts.redirect method to redirect the user to other page after send the form
    
    + more info http://goo.gl/q7dk0N
    
- Templates an Forms
    + {{form}} tag used to mark the form position in the template file
    + {%csrf_token%}, is used by django to generate token prevent cross site request
    + <form action="" method="post">
    + <button type="submit"> 
- adding styling to the form with crispy-Forms, it is a django package to generate style form
    + install crispy-forms
    $ pip install django-crispy-forms
    
    + register crispy-forms into the installed app for the project from the settings.py file
    
    INSTALLED_APPS = (
        ...
        'crispy_forms'
    )
    
    tell crispy we works with boostrap3 by
    CRISPY_TEMPLATE_PACK = 'bootstrap3'
    
    then only need to change the form syntax in the template to 
    {{form|crispy}}
    this will make the crispy use the boostrap3 form style
- Form Options
    + exclude field from model in the form by add a exclude attribute for the ModelForm class definition
    change the forms.py file for the tictactoe app's InvitationForm class
    
    from django.forms import ModelForm
    from .models import Invitation
    
    class InvitationForm(ModelForm):
        class Meta
            model = Invitation
            exclude = ['from_user']
    
    to make the form validate method pass by without check the from_user field, need to manually create a Invitation object and add as the instance for the InvitationForm 
    change in the views.py file for the tictactoe app
    
    from django.shortcut import render, redirect
    from django.contrib.auth.decorators import login_required
    
    from .models import Invitation
    from .forms import InvitationForm
    
    @login_required
    def new_invitaion(request):
        if request.method == 'POST':
            invitation = Invitation(from_user=request.user)
            form = InvitationForm(data=request.POST, instance=invitation)
            if form.is_valid():
                form.save()
                retrn redirect('user_home')
        else:
            form = InvitationForm()
        return render(request, "tictactoe/new_invitation.html", {'form':form})
    
    + check more detail from the form document
    + allow black field by add a black=True parameter for the field of a model such as message for the invitation
    the verbose_name parameter is used to give a more meaning name which will replace the default field name
    help_text is used to generate help text for the auto generated html form tag
    
    class Invitation(models.Model):
        message = models.CharField(max_length=300, 
                                   blank=True,
                                   verbose_name="User message",
                                   help_text="Please select the user you want to play a game")
                                   
    + add link for the base template to linked to the new created view name define in the relative urls.py mapping file
    
    <a href="{% url 'tictactoe_invite'%}">New game</a>
- Model Field Options
    + Verbose name for displayin forms
    first argument of field x = IntegerField("x ...")
    on foreign key fields use verbose_name keyword argument
    + help_text
    + blank = True to enable blank field
- Showing invitations in a list
    + get all the invitations request from the invitation lists, update the views.py of the user app
    
    @login_required
    def home(request):
        ...
        invitations = request.user.invitations_recieved.all()
        context = {'invitations' :invitations,
                    ...}
        return render(request, 'user/home.html', context)
    this also could be achieve by use the invitation manager class, but that will import directly dependency of invitation
    
    
    then update the template of the user app home.html
    ...
    <div class="well col-sm-6">
        {% include "tictctoe/game_list_sinppet.html" with header="Games waiting or you"}
        ...
    </div>
    <div class="well col-sm-4 col-sm-push-1">
        {% if invitations %}
            <h3 class="panel-header">Open invitations</h3>
            <div class="list-group">
                {% for inv in invitations %}
                    <a class="list-group-item" href="#">
                        {{ inv.from_user.username }} has invited you to a game. Click
                    </a>
                {% endfor %}
            </div>
    </div>
- Accept Invitations
    + add a new view function, called accept_invitation into views.py at tictactoe app
    
    from django.shortcuts import render, redirect, get_object_or_404
    from django.core.extensions import PermissionDenied
    
    @login_required
    def accept_invitation(request, pk):
        invitation = get_object_or_404(Invitation, pk=pk)
        if not requst.user == invitation.to_user:
            raise PermissionDenied
        if request.metho == 'POST':
            if "accept" in request.POST:
                game = Game.objects.new_game(invitation)
                invitation.delete()
                return redirect(game.get_absolute_url())
            else:
                invitation.delete()
                return redirect('user_home')
        else:
            return render(request, "tictactoe/accept_invitation.html", {'invitation':invitation})
        
    the django built-in method get_object_or_404 will return the specify model object or redirect the user to 404 page if there is no required object
    
    add template named accept_invitation.html 
    {% extends "base.html" %}
    {% block title %}
    Invitation from {{invitaton.from_user_username}}
    {% endblock title %}
    
    {% block content %}
        <div class="well col-sd-6">
            <p>User {{ invitation.from_user }} invites you to a game.</p>
            {% if invitation.message %}
                <p></p>He/she included the following message:</p>
                <blockquote> <p> {{ invitation.message }} </p></blockquote>
            {% endif %}
            
            <form action="" method="post">
                {% csrf_token %}
                <button type="submit" name="accept" value="ok">Accept</button>
                <button type="submit" name="deny" value="no">Deny</button>
            </form>
        </div>
    {% endblock content %}
    
    simple show http response message with 
    from django.http import HttpResponse
    HttpResponse('message')
    
    add urls.py pattern to mapping to accept_invitation view, the <pk> is a django argument to let the framework send a primary key for the specify view request
    
    urlpatterns = patterns('tictactoe.views',
        url(r'^invite', 'new_invitation', name='tictactoe_invite'),
        url(r'invitation/(?P<pk>\d+)/$', 'accept_invitation', name='ticatctoe_accept_invitation')
    )
    
    update the home.html template to add accept_invitation link and primary key argument, change the for loop to
    {% for inv in invitations %}
        <a class="list-group-item" href="{% url 'tictactoe_accept_invitation' pk=inv.id %}">
            {{ inv.from_user.username }} has invited you to a game. Click
        </a>
    {% endfor %}
    
- Named Groups
    + use named groups in your expression to capter parts of URL
    (?P<name>expression)
    (?p<pk>\d+)
    + captured values are passed to view as keyword arguments
    def some_view(request, pk)
    + URL tag can also pass argument to views
    {% url 'tictactoe_accept_invitation' pk=inv.id %}
    

# Making Moves
- Introduction
    + finish the tictactoe app
    + make a move
    with a move form
    custom validation
    + game logic
    fat mdels
    + advanced template freatures

- Creating a new game
    + create a game in the accept_invitation view 
    game = Game.objects.new_game(invitation)

    + switch models.py and add new_game method into GamesManager
    
    def new_game(self, invitation):
        game = Game(first_player=invitation.to_user,
                    second_player=invitation.from_user,
                    next_to_move=invitation.to_user)
        reurn game
        
    + add get_absolute_url into Game object, this method is used by django which is the default way to tell which the url to view a model object, the reverse method is almost the same function to url method
    from django.core.urlresolvers import reverse
    
    def get_absolute_url(self):
        return reverse('tictactoe_game_detail', args=[self.id])
    
    after with this function django will auto add viewOnSite button into the admin view and the codes behind in the view could use redirect method to a game object which will automatic call the  get_absolute_url and redirect to the specify view
    redirect(gameObject)
- Fat models skinny views
    + fat models, django best practice
    + logic goes in models, keep views( and template ) simple
    + why?
    DRY, testing, readability
- URLs reverse and get_absolute_url
    + implement get_absolute_url() on a model
    provides the canonical URL for a model instance
    
    + djang.core.urlresolvers.reverse
    get the URL for a specific view
    works like {% url %} template tag
    pass it arguments reverse('someview', args=[4])
    
- Displaying the Game Board
    + add a game_detail view into the views
    def game_detail(request, pk):
        game = get_object_or_404(Game, pk=pk)
        return render(request, 'tictactoe/game_detail.html', {'game':game})
        
    + add url mapping into urls.py
    
    urlpatterns = patterns('tictactoe.views',
        ...
        url(r'^game/(?P<pk>\d+)/$', 'game_detail', name='tictactoe_game_detail'),
    )
    
    the (?P<pk>\d+) the number in the url game/# will be packaged as argument for the method game_detail pk
    
    add style block into the game_detail style, add parent block from the parent template
    {% block styling %}
        {{ block.super }}
        ... add other necessary style content for current template file
    {% endblock styling %}
    {% block content %}
        <h3> Game: {{game}}</h3>
        <div class="col-sm-9">
            <table class="table table-bordered" style="width:60px">
                {% for line in game.as_board %} 
                    <tr>
                        {% for square in line %}
                            <td class="tictactoe-cell" style="width:20px; height:20px">
                                {{square}}
                            </td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </table>
        </div>
    {% endblock content %}
    django template don't allowed to use range method in the python, instead should use for loop and get the required collection from the data model object
    
    add as_board method into the game model
    
    FIRST_PLAYER_MOVE='X'
    SECOND_PLAYER_MOVE='O'
    BOARD_SIZE=3
    
    class Game():
        ...
        def as_board(self):
            '''
            '''
            board = [['' for x in range(BOARD_SIZE)] for y in range(BOARD_SIZE)]
            for move in self.move_set.all():
                baord[move.y][move.x] = FIRST_PLAYER_MOVE if move.by_first_player else SECOND_PLAYER_MOVE
            return board
        
        def last_move(self):
            '''
            django will use the move model's field of the meta class get_lastest_by to get the lastest move set
            '''
            return self.move_set.latest()
    
    class Move(models.Model):
        x = models.IntegerField()
        y = models.IntegerField()
        comment = models.CharField(max_length=300)
        game = models.ForeignKey(Game)
        by_first_player = models.BolleanField()
        timestamp = models.DateTimeField(auto_now_add=True)
        
        class Meta:
            '''
            this meta class attribute get_lastest_by is used to tell django which field of the mode Move is used to determine the order
            '''
            get_lastest_by = 'timestamp'
            
        def player(self):
            return self.game.first_player if self.by_first_player else self.game.second_player
    
    changed the models need to drop and resync the database
- Templates look up
{{user.name}} or {% for m in game.move_set %}
    + a dot causes in template in django
        * dictionary lookup
        * attribute lookup
        * method call
        * list-index lookup
    + example
    {{list.#}}  equal to list[#]
    
    the method is called without argument, you can't pass argument into method in django tempate
    {{object.method}} equal to object.method()
    
    + the complex business logic should added into model
- Template inheritance: Super
{{block.super}} into a template block
includes the block contents from the parent template 
- Model Meta class
    + add options to your Model
    + ordering
    + latest/earliest
    + table name
    + and more http://goo.gl/fN4wjF
- Making a move
    + add user move logic into the game_detail view
    def game_detail(request, pk):
        game = get_object_or_404(Game, pk=pk)
        if game.is_users_move(request.user):
            return redirect('tictactoe_game_do_move', pk=pk)
        return render(request, 'tictactoe/game_detail.html', {'game', game})

    + implement the is_user_move method into the game model
    def is_users_move(self, user):
        return self.status == 'A' and self.next_to_move == user
    
    + add do_move view to handle the user's move
    @login_required
    def game_do_move(request, pk):
        game = get_object_or_404(Game, pk=pk)
        if not game.is_users_move(request.user):
            raise PermissionDenied
        return render(request, 'tictactoe/game_do_move.html', {'game':game})

    + add url mapping to do_move into urls.py
    urlpatterns = patterns('tictactoe.views',
        url(r'^game/(?P<pk>\d+)/do_move$', 'game_do_move', name='tictactoe_game_do_move'),
        ...
    )
    
    + add template for the tictactoe_game_do_move
    add do_move form block into the game_detail template
    
    {% block content %}
       ...
       {% block moveform %} {% endblock moveform %}
    {% endblock content %}
    
    create tictactoe_game_do_move view and make it inherite from the game_do_move template
    
    {% extends 'tictctoe/game_detail.html' %}
    {% load staticfiles %}
    {% block styling %}
        {{block.supper}}
        <style type="text/css">
            add style for do_move logic
        </style>
    {% endblock %}

    {% block moveform %}
        {{block.super}}
        <form action="" method="post">
            {% csrf_token %}
            {{form}}
            <button type="submit"/>Submit</button>
        </form>
    {% endblock moveform %}
- Custom Form Validation
    + add move form into the forms.py for the tictactoe project
    from django.forms import ModelForm
    from .models import Invitation, Move
    
    class InvitationForm(ModelForm):
        class Meta:
            model = Invitation
            execlude = ['from_user']
    
    class MoveForm(ModelForm):
        class Meta:
            model = Move
            exclude = ('game', 'by_first_player', 'comment')
            
    add x, y move bound fields. add validators into the Move model
    from django.core.validators import MinValueValidator, MaxValueValidator
    
    class Move(models.Model):
        x = models.IntegerField(validators=[MinValueValidator(0),
                                MaxValueValidator(BOARD_SIZE-1)])
        y = models.IntegerField(validators=[MinValueValidator(0),
                                MaxValueValidator(BOARD_SIZE-1)])
        ...

    add move form logic handler into game_do_move view into the views.py
    
    @login_required
    def game_do_move(requrest, pk):
        game = get_object_or_404(Game, pk=pk)
        if not game.is_users_move(request.user)
            raise PermissionDenied
        context = {'game': game}
        if request.method == 'POST':
            form = MoveForm(data=request.POST, instance=Move(game=game))
            context['form'] = form
            if form.is_valid():
                return redirect('tictactoe_game_detail', pk=pk)
        else:
            context['form'] = MoveForm()
        return render(request, 'tictactoe/game_do_move.html', context)
    
    pre fill the move instance for the form


    over write the clean method for the MoveForm to do validation which is not relative to specific field the illegal input
    from django.core.exceptions import ValidationError
    
    class MoveForm(ModelForm):
        class Meta:
            model = Move
            exclude = ('game', 'by_first_player', 'comment')
            
        def clean(self):
            game = self.instance.game
            x = self.cleaned_data.get("x")
            y = self.cleaned_data.get("y")
            if not game or \
               not game.status == "A" or \
               not game.is_empty(x, y):
                raise ValidateError("Illegal move")
            return self.cleaned_data


    add is_empty method into the game model
    
    class Game(self, Model):
        ...
        def is_empty(self, x, y):
            return self.move_set.filter(x=x, y=y).exists()
    
- ModelForm Validation
    + Validate a single field use a validator
        * django provides a set of validators
        * or write your own validator
        * http://goo.gl/L5iGK2
        
    + not for a specific field overwrite clean() from Form
        * this is a little more advanced
        * see http://goo.gl/gbS0ZG

- Finishing Up game
    + add x, y as hidden input, into the game_do_move view, extend the previous moveform
    
    {% block moveform %}
        {{block.super}}
        <form action="" method="post">
            {%csrf_token%}
            {{form.x.as_hidden}}
            {{form.y.as_hidden}}
            <button type="submit" class="hidden">Submit</button>
        </form>
    {% endblock moveform %}

    
    add javascript to control unhidden the form 
    {% block javascript %}
        {{block.super}}
        <script>
            {% if game.next_to_move == game.first.player %}
                var move_span = $('<span class="glyphicon glyphicon-remove"></span>')
            {% else %}
                var move_span = $('<span class="fa fa-circle-o"' style="padding-right: 2px")
        </script>
        $(document).ready((function(){
            $('.empty').click(function(){
                var el = $(this);
                var x = el.data('x');
                var y = el.parent().data('y');
                $('input[name=x]').val(x);
                $('input[name=y]').val(y);
                $('button[type=submit]').removeClass('hidden');
                el.children().first().remove();
                el.append(move_span);
            });
        }));
    {% endblock javascript %}


    add form relative data into html view, game_detail.html
    {% for line in game.as_board %}
        <tr data-y="{{forloop.counter0}}">
            {% for square in line %}
                <td class="tictactoe-cel" {% if not squre %}emtpy{% endif %} style="width: 20px; height:20px" data-x="{{forloop.counter0}}"
                {% if forloop.parentloop.counter0 == game.last_move.y and forloop.counter0 == game.last_move.x %}
                    id="last-move"
                {% endif% }
                >
                    {% if square == "X" %}
                        <span class="fa fa-circle-o" style="padding-right:2px"/>
                    {% elif square == "0" %}
                        <span class="glyphicon glyphicon-remove"></span>
                    {% else %}
                        <span><img src="{% static 'empty.png'%}"</img></span>
                    {% endif %}
                </td>
            {% end for%}
        </tr>
    {% endfor %}


    add move logic into the views.p
    @login_requried
    def game_db_move(requrest, pk):
        game = get_object_or_404(Game, pk=pk)
        if not game.is_users_move(request.user):
            raise PermissionDenied
        context = {'game':game}
        if request.method == 'POST':
            form = MoveForm(data=request.POST, instance=game.create_move())
            context['form'] = form
            if form.is_valid():
                move.form.save()
                game.update_after_move(move)
                game.save()
                return redirect('tictactoe_game_detail', pk=pk)
        else:
            context['form'] = MoveForm()
        return render(request, 'tictactoe/game_do_move.html', context)


    add relative logic into the model, add GamesManager
    update get_status
    add toggle_next_player(self) method
    add update_after_move method(self, move)
    add create_move(self) factory method to return move
    
    
# Odds and Ends
- generic views
    + function based views
    in the previous example
    + class-based views
    class based view supply more flexible extensions
    + reference 
    http://goo.gl/RE8ric
    
    + django provide generic view 
    from django.views.generic import ListView
    
    class AllGamesList(ListView):
        mode = Game
    

    the class view need to be imported into the urls.py
    from .views import AllGamesList
    
    urlpatterns = patterns('tictactoe.views',
        url(r'^game/all', AllGamesList.as_view()),
    )
    
    the default auto used generic view is called modename_list.html for example the mode is assigned to Game then the view will be game_list.html
    so add the template game_list.html
    {% extends 'base.html' %}
    {% block content %}
        <div class="well col-sm-6">
            {% include "tictactoe/game_list_snippet.html" with header="All games" games_list=object_list}
        </div>
    {% endblock content %}
    the object_list will host the list of object we receive from the generic list view
    
    + there are also some other kinds of generic views
    + SignUpView generic view which is inherite from CreateView
    from django.views.generic import CreateView
    
    class SignUpView(CreateView):
        form_class = UserCreationForm
        template_name = "user/signup.html"
        success_url = reverse_lazy('user_home')
        
    add it into urls.py
    from .views import SignUpView
    
    urlpaterns = patterns('user.views',
        url(r'^signup', SignUpView.as_view(), name='user_signup'),
    )
       

    add signup.html template
    {% extends "base.html" %}
    {% load staticfiles %}
    {% load crispy_forms_tags %}
    
    {% block title %}
    New user signup
    {% endblock title %}
    
    {% block content %}
        <div class="well col-sm-6">
            <fieldset>
                <legend>
                </legend>
                <div class="panel-body">
                    <form action="" method="post"
                </div>
            </fieldset>
        </div>
    {% endblock content %}
    + django provides generic views for common functionality
    templateView
    detailView
    listView
    
    + generic form editing views
    create view
    update view
    delete view
    
- debugging django
    + use pdb to debug in python
    + common python debugging technique
    ipmort pdb
    pdb.set_trace()
    
    + works well for debugging view code
    + more powerful way to debug django
    django-debug-toolbar
    http://goo.gl/OjCstU
    
    + the django debug toolbar
        * install the toolbar
        pip instal django-debug-toolbar
        
        * add debug toolbar into setting install_app
    
- where to go from here
    + resources
    www.djangoproject.com
    
    www.revsys.com/django/cheatsheet
    
    ccbv.co.uk
    guide to django class-based views
    
    www.djangopackages.com
    django packages
    
    www.djangosnippets.org
    django code snippets
    




    
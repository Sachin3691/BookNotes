Create a Chrome Extension=John Sonmez;Note=Erxin

# introduction
- Who this course is for
html
css
javascript

- introduction
- hello extesion 
- a browser action extension, create icon and ui 
- a page action extension 
- debugging and deployment 
	+ debugging environment 
	+ chrome web store submission 
	
- what is a chrome extension 
- look at some extension 
chrome://extensions

chrome://plugins, plugin is not used to extend the browser capability 

some time you could throw a extension register a plugin, but it is a rare case 

- how chrome extensions works 
html 
javascript   --> .CRX file packaged  ---deployed --> chrome, installed 
css 

chrome extension could run in background and wait for specify event 

chrome api could access from javascript 

- what extension can do 
	+ interact with web pages or servers 
	+ control browser features 
	+ add ui to chrome 
		* browser action 
		* page action 
	+ create options pages 
	+ modify loaded pages 
	+ add to context menu
	+ even load dlls(danger), use the NPAPI 

- chrome apis 
https://developers.google.com/chrome -> Chrome Extension
	
check the reference, chrome.* APIs to subscribe event of chrome 
	
- background pages, extensions parts can be seperate to three 
	+ background page, it is a html page running in a background with some javascript, it will control the capability of the extension 
	
	use chrome task manager could check all the running background pages in the chrome 
	
	background can either be persistent or event pages, persistent is always running in open. could help store some persistent state for your extensions. or handles some long running processes to manage a task 
	
	background page can be resource hogs so should be use carefully 
	
	event page, is only loaded when they needed, it is registered for a specific event which will trigger it and cause it to become active 
	+ UI page 
	+ content script 
	
- checking out background page by chrome task manager Tool|Task Manager
- UI pages, visible part of chrome extension. UI pages can change other pages by changing DOM of other page 

- content scripts, can be used to essentially inject javascript into a page modify its behavior. can send parent extension to ask pages int the paired extension to modify a UI page or perform some extension-related functionality 

- up next, chrome extension is html, javascript, css and a manifest file 


# Creating a chrome extensions 
- extension components 
manifest(json)
html, for ui 
icon(s), used in chrome store or toolbar 
javascript 
css 
images or anything else 

reference relative path, the extension like a self-contain html application 

- manifest file is a json format 
http://developer.chrome.com/extensions/manifest.html 

{
	"manifest_version":"2",
	
	"name":"Hello world",
	"description":"this is my chrome extension",
	"version":"1.0",
	
	"browser_action":{
	"default_icon":"icon.png", //19x19 pixels 
	"default_popup":"popup.html"
	}
}

there are two kinds of extensions, browser action or page action 
browser action, will show a icon in a toolbar 
page action will show an icon in the address bar of certain pages 

we could also specify background page, content script, option page and others 

- creating the manifest 
	+ create a folder 
	+ add a minifest.json file as the previous example 

- html files for ui 
	+ regular html documents for pop up html page 
	//popup.html 
<!doctype html>
<html>
	<head>
		<title>hello world</html>
	</head>
	<body>
		<h1 id="greeting">Hi</h1>
		<input id="name" type="text"/>
	</body>
</html>

turn preview on in windows by Organize|Layout Preview Pane to help identity files 
add preview type in windows by 
http://www.howtogeek.com/forum/topic/add-file-types-to-windows-7-preview-pane
go to \HKEY_CLASSES_ROOT\.type add two keys Content Type and Perceived Type, with value "text/plain" and "text" 

- add the icon, add a 19x19 icon file 
	+ go to chrome 
	+ open extension manager chrome://extensions 
	+ check the developer mode 
	+ click load unpacked extensions and select the extension folder 
	
- add javascript
	+ create a javascript file 
	+ add into extension folder 
	+ reference from the html page or manifest file 

	+ add jquery and own javascript 
	download jquery and save to the extension folder 
	
	create own javascript file 
	
	add the js files into the header of html file 
	
	<script src="jquery-1.10.2.js"></script>
	<script src="custom.js"></script>
	
	custom.js content:
	$(function){
		$("#name").keyup(function(){
			$("#greeting").text('Hi' + $("#name").value + "|");
		});
	};
	
	we don't have to reload the extension, we could directly test it 
	
- add css
	+ add popup.css file into the extension folder 
h1{
	color:blue;
}

	+ add css file 
	+ add link tag into html header tag 
	<link ref="stylesheet" type="text/css" href="popup.css"/>
	
- we could use the chrome development tool to help identify the extension contents 
	
	
# A browser action extension 
- what we are going to build 
	+ protein tracker 
	support add protein, reset protein and reset the goal, notify user the goal is achieved 
		
	add right click 
- breaking down 
	+ create directory and mainifest 
	+ create popup ui 
	+ add protein total saving and displaying 
	+ create a options page 
	+ add notification for rest and goal met 
	+ add badge to display current total, use chrome api 
	+ add context menu item 
	
- creating the manifest.json file 
{
	"manifest_version": 2, 
	"name": "protein tracker", 
	"description": "tracks a user's protein totals throughout the day", 
	"version":"1",
	
	"browser_action" : { //will show in the toolbar 
		"default_icon":"icon.png",
		"default_popup":"popup.html"
	}
}

- creating the ui 
add popup.html 

<!doctype html>
<html>
	<head>
		<title>protein tracker</title>
		<script src="popup.js"></script>
		<script src="jquery-1.10.2.js"></script>
	</head>
	<body>
		<h1>Protein tracker</h1>
		<h2>Total: <span id="total">0</span></h2>
		<h2>Gotal: <span id="span1">0</span></h2>
		<h3>enter amount:</h3>
		<input id="amount" type="text"/>
		<input id="addAmount" type="submit" value="Add Protein"/>
	</body>
</html>

- loading the extension 
	+ add 19x19 icon for protein tracker  
	+ go to chrome:://extensions 
	check developer mode and load extension  
	
- adding protein we plan to use chrome.storage api to save the protein data. use jquery(optional) to help add the functions   
it is easy way to help sync data in chrome.storage

- setting up javascript, hooking up click event 
$(function(){
	$('#addAmount').click(function(){
		alert('clicked');
	});
});

- adding an amount, use the chrome store api
	+ manipulate the manifest file to add permission to use the chrome storage api 
{
	"manifest_version": 2, 
	"name": "protein tracker", 
	"description": "tracks a user's protein totals throughout the day", 
	"version":"1",
	
	"browser_action" : { //will show in the toolbar 
		"default_icon":"icon.png",
		"default_popup":"popup.html"
	}
	
	"permission":[
		"storage"
	]
}

	+ then create variable to hold the total, most of the chrome api is async 
$(function(){
	$('#addAmount').click(function(){
		chrome.storage.sync.get('total', function(items){
			var newTotal = 0;
			if(items.total){
				newTotal += parseInt(items.total);
			}
			
			var amount = $('$amount').val();
			
			if(amount){
				newTotal += parseInt(amount);
			}
			
			chrome.storage.sync.set({'total':newTotal});
			
			$('#total').text(newTotal);
			$('#amount').val('');
		});
	});
});

chrome.storage.sync.get //will get data from cloud 
chrome storage.local	//will use local storage 

- test the total, when add a permission need to use the extension manager to reload the extension to make sure the manifest file is reloaded 
	+ add function to the init javascript block 
	
$(function(){
	chrome.storage.sync.get('total', function(items){
		$("total").text(item.total);
	});
	
	$('#addAmount').click(function(){
	 ...
	});
})

- options page, all extension could have option pages can be access by right click the extension icon 
	+ add entry to the mainifest.json file to which html page is option pages 
	"options_page":"options.html",
	
	+ create options_page.html file into the extension directory 
	
	+ we could let the user to reset the protein total 
	<!doctype html>
	<html>
		<head>
		</head>
		<body>
			<h1> protein tracker </h1>
			<h2> goal: <input id="goal" type="text"/></h2>
			<input id="save" type="submit"/>
			<input id="reset" type="submit" value="reset total"/>
		</body>
	</html>

	+ add options.js file for the option page 
$(function(){
	chrome.storage.sync.get(['goal', 'total'], function(items){
		$('#goal').val(items.goal);
		$('#total').val(items.total);
	});
	
	$('#save').click(function(){
		var goal = $('#goal').val();
		
		if(goal){
			chrome.storage.sync.set({'goal':goal}, function(){
				close();
			});
		}
	});
	
	$('#reset').click(function(){
		chrome.storage.sync.set({'total':0});
	});
});

- test options
	+ we need reload the extension from the extension manager of chrome	  
	
- adding a notification 
	+ add permission for use notification in the mainifest file 
	
	...
	"permission":{
		"storage",
		"notification"
	}
	...
	
	+ add callback the reset button click in the option.js 
	
	$('#reset').click(function(){
		chrome.storage.sync.set({'total':0}, function(){
			var opt = {
				type: "basic", 
				title: "total reset",
				message: "total has been reset back to 0",
				iconUrl: "icon.png"
			};
			
			//it may only works on window 
			chrome.notification.create('reset', opt, function(){
			
			});
		});
	});
	
- goal notification, when use reach the goal we need to show the notification 
	+ add the notification into the addAmount function in the popup.js 
	
	$("#addAmount").click(function(){
		...
		var opt = {
					type: "basic", 
					title: "you reach your goal ",
					message: "message",
					iconUrl: "icon.png"
				};
			
		//it may only works on window 
		chrome.notification.create('reset', opt, function(){
		
		});
		...
	})
	
- event page, there are two types of background page, event page is load when some specify time. background page is always loaded 
also use event page to register some context menu

let's add select text as protein number with event page 

- adding event page 

	+ add background page into manifest file 
	...
	"background":{
		"scripts": ["eventPage.js"],
		"persistent":false
	}
	
	+ event page will only be load when some event happens 
	
	+ add eventPage.js, any thing want to run when extension loads up 
	
	chrome.storage.onChanged.addListener(function (changes){
		//this api allow us to add a badge to our browserAction that little icon for our extension in the toolbar 
		chrome.browserAction.setBadgeText({
			"text":changes.total.newValue.toString()
		});
	});
	
	+ reload the extension 
	
	+ whenever the protein changed the badge is changed 
	
- adding a context menu item 
	+ add permission to menu into manifest file 
	
	...
	"permission":[
		"storage",
		"notifications",
		"contextMenus"
	]
	...

	+ go to the event page to register as context menu 
	var menuItem = {
		"id":"addProtein",
		"title":"Add Protein", 
		"contexts":["selection"] //only document supply more context 
	}
	
	chrome.contextMenusCreate(menuItem);
	
	chrome.contentMenus.onClicked.addListener(function(clickData){
		if(clickData.menuItemId == "addProtein" && clickData.selectionText){
			var intRegex = /^\d+$/;
			if (intRegex.test(clickData.selectionText)){
				chrome.storage.sync.get('total', function(items){
					var newTotal = 0; 
					if(items.total){
						newTotal += parseInt(items.total);
					}
					
					newTotal += parseInt(clickData.selectionText);
					chrome.storage.sync.set({'total':newTotal});
				});
			}
		}
	});
	
	+ use calorie counter website to test the context menu 
	http://www.caloriecount.com/
	
- up next 
	
	
# Page action extension for create extension only show in certain page 
- browser extension is for every page for browser 
- page extension is for specify pages 
- use content script is used to inject javascript into the pages 
- what we are building 
	+ build a extension for pluralsight 
	course count and sort the course 
	
	+ tell page action to show by explicit call chrome api and page action can't have a badge compare to background page	
	
- creating the extensions 
	+ create new directory 
	+ create manifest file manifest.json 
	
	{
		"manifest_version":2,
		"name":"pluralsight helper",
		"description":"adds functionality to the pluralsight website",
		"version":"1.0",
		
		"page_action":{
			"default_icon":"icon.png",
			"default_title":"pluralsight helper",
			
			"default_popup":"popup.html"
		}
	}
	
- adding the page action 
	+ create popup.html 
<!doctype html>
<html>
	<head>
		<title>pluralsight helper</title>
		<script src="jquery-1.10.2.js"></script>
		<script src="popup.js"></script>
	<head>
	<body>
		<h1>pluralsight helper options</h1>
		<input id="courseCounts" type="submit" value="add course counts"/>
		<input id="makeSortable" type="submit" value="make sortable"/>
	</body>
</html>

	+ add popup.js 
	+ copy jquery 
	
- adding the extension 
	+ go to the extension manager 
	+ load unpacked extension 
	+ the page action is long show at the address bar after some explict call 
	
- showing page action 
	+ add event page to help show the page action 
	+ create eventPage.js 
	+ add event page into the manifest.json 
	...
	"background":{
		"scripts":[
			"eventPage.js"
		],
		"persistent":false
	}
	...

	+ use chrome api to show the page action 
	chrome.tabs.query({active:true, currentWindow:true}, function(tabs){
		chrome.pageAction.show(tabs[0].id);
	});;
	
	+ add permission to 
	
	"permissions":["tabs"]

	+ reload the page extension the page extension is show for the first load of extension 
	
- content scripts, use browserAction could manipulate the web page. content script is loaded depend on the manifest file 

- messages, content page can't directly communicate with the background page or UI page. it have to use the chrome api send message to or from content script, also support long live message or messaging with native client 

- adding content scripts to manifest 
...
"content_scripts":[
	{
		"matches":[
			"http://pluralsight..." //the pattern want to load the content scripts 
				
		],
		"js":["pluralsight_cs.js", "jquery-1.10.2.js"]
	}
],
...

- creating the content script pluralsight_cs.js 
	+ add permission to specify site for the extension 
	
	"permissions":[
		"tabs",
		"http://pluralsight.com/*"
	]

	+ send a message to the event page, to make sure our page action only shown when loading the matches urls 
	//because the content script only run in the matches pages 
	chrome.runtime.sendMessage({action:"show"});

	+ in the event page we just need to book the show message eventPage.js 
	chrome.runtime.onMessage.addListener(function(request, sender, sendResponse){
		if(request.action == "show")
		{		
			chrome.tabs.query({active: true, currentWindow:true}, function(tabs){
				chrome.pageAction.show(tabs[0].id);
			});
		}
	});
	
- testing content scripts 
- custom css, you could make some extension to restyle some webpage 
	+ add a css file pluralsight_cs.css 
	
	.author{
		font-weight: bolder;
		font-size: large;
	}

	+ add css to the manifest file 
	...
	"content_scripts":[
		{
			"matches":["..."],
			"js":["..."],
			"css":["..."]
		}
	],
	...

- hooking up course counts, when user click the show count button will display the course count for that page 
	+ add popup.js for the popup.html 
	$(function(){
		$('#courseCounts').click(function(){
			chrome.tabs.query({active:true, currentWindow:true}, function(tabs){
				chrome.tabs.sendMessage(tabs[0].id, {action:"courseCounts"});
			});
		});
	});

- adding course count logic, make sure the content script have a listener to recieve the message 
//pluralsight_cs.js , is the content script 
chrome.runtime.onMessage.addListener(function(request, sender, sendResponse){
	if(requst.action == "courseCounts"){
		...
	}
});

chrome.rutime.sendMessage({action:"show"});

//content script is the only way for the extension to access the website dom 
- testing course count, now we could reload our extensions 

- add dataTable plugin 
	+ download the https://datatables.net/ datascript 
	
	+ copy the download the datatable.js to the extension folder 
	+ add the script into the manifest.json 
	
	"content_scripts":[
		{
			"matches":[...],
			"js":["pluralsight_cs.js", "jquery-1.10.2.js", "jquery.dataTables.js"],
			"css":["pluralsight_cs.css"]
		}
	]

	...
	+ add fire event action into the pop page when user click the button makeSortable then use the content script to manipulate the webpage dom to sort the datatable 
	
	//popup.js 
	
	$('#makeSortable').click(function(){
		chrome.tabs.query({active:true, currentWindow:true}, function(tabs){
			chrome.tabs.sendMessage(tabs[0].id, {action: "makeSortable"});
		});
	});

	+ go to the content script add the handle logic 
	//pluralsight_cs.js 
	
	chrome.runtime.onMessage.addListener(function(request, sender, sendResponse){
		...
		if(request.action == "makeSortable"){
			$('.course').dataTable({"bPaginate":false});
		}
	});

- test sorting 


# Debugging And Deployment 
- debugging, you need to open the chrome dev tool form chrome ui and background page 

add alert 
add log 

- right click the ui/extension select inspect element will open the dev tool 

- using the console, open the dev tool 
use chrome object in console 

copy past the codes from js and check the outpu 

- debugging background pages, look the extension manager page, we could click the Inspect View for the background pages 

we could use the devtool as before 
- debugging content scripts 
	+ open a website with content script 
	+ open the devtool 
	+ navgate to the Content tab in the dev tool 
	+ we could set breakpoint 
	
- going to an extension resources, you could use browser to check the content of any extension by type this kind of url in the address bar 

chrome-extension://<extension_id>/resource_file_name

- chrome dev tools course 

http://psight.me/ps-chrome-dev in pluralsight courses 

- deployment, there are three way to deploy a extensions 
self-hosted  
chrome web store 
combination 

- packing an extension
	+ from the extension manager 
	+ select the pack extension at the top of the screen and select your extension folder 
	+ will generate two files 
	*.crx, the zipped extension files 
	*.pem, the key file 
	
	+ change the extension 
	+ pack again and give the *.pem file will get the update extension files 
	
- self-hosting, is more complex need more works to do 
	+ configure autoupdate manifest, web store don't require this, http://developer.chrome.com/extensions/autoupdate.html 
	
	+ security, exntesionInstallSources 
	http://www.chromium.org/administrators/policy-list-3#ExtensionInstallSources
	
	+ private key(don't lost it)
	
	+ can manually drag to install, open the extension setting file and drag the *.crx 
	
	+ demo 
	
- chrome webstore, login to the chrome store 
	+ uploading to chrome web store 
	
	+ navigate to the chrome developer dashboard 
	+ sign in with gmail account 
	+ add item
	+ add descriptions 
	+ add website for your own 
analytics, google analytics id 
ads, inject ads 
visibility options 

- inline installation 
add link to chrome web store 
call chrome.webstore.install()
requires user action to initiate 

documentation 
https://developers.google.com/chrome/web-store/docs/inline_installation 

- analytics support
http://developer.chrome.com/extensions/tu_analytics.html 

just some js script you need to insert into your extension 














 